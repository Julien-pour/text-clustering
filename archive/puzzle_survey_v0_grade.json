[
    {
        "program_str": "def f(li: List[int]):\n    \"\"\"Find a list integers such that the integer i occurs i times, for i = 0, 1, 2, ..., 9.\"\"\"\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]",
        "grade": {
            "difficulty": "1",
            "learning": "1"
        }
    },
    {
        "program_str": "def f(i: int):\n    \"\"\"Find a number whose decimal representation is *a longer string* when you add 1,000 to it than when you add 1,001.\"\"\"\n    return len(str(i + 1000)) > len(str(i + 1001))\ndef g():\n    return -1001",
        "grade": {
            "difficulty": 2,
            "learning": 3
        }
    },
    {
        "program_str": "def f(s: str, word=\"pawuzorythalirinasubyg\", max_len=12):\n    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]\ndef g(word=\"pawuzorythalirinasubyg\", max_len=12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"",
        "grade": {
            "difficulty": 2,
            "learning": 2
        }
    },
    {
        "program_str": "def f(x: str, s=8071):\n    \"\"\"Find a number that its digits sum to a specific value.\"\"\"\n    return s == sum([int(d) for d in x])\ndef g(s=8071):\n    return int(s / 9) * '9' + str(s % 9)",
        "grade": {
            "difficulty": 2,
            "learning": 3
        }
    },
    {
        "program_str": "def f(e: List[int], a=-77698407, b=-31793716, c=-10799659, d=89278024):\n    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5\ndef g(a=-77698407, b=-31793716, c=-10799659, d=89278024):\n    return [d - b, a - c]",
        "grade": {
            "difficulty": 3,
            "learning": 3
        }
    },
    {
        "program_str": "def f(x: int, a=22, b=-84904666):\n    \"\"\"Satisfy a simple if statement with an or clause\"\"\"\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a=22, b=-84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a",
        "grade": {
            "difficulty": 2,
            "learning": 2
        }
    },
    {
        "program_str": "def f(s: str, substrings=['foo', 'bar', 'baz', 'oddball']):\n    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))\ndef g(substrings=['foo', 'bar', 'baz', 'oddball']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])",
        "grade": {
            "difficulty": 3,
            "learning": 3
        }
    },
    {
        "program_str": "def f(path: List[int], weights=[{25: 594, 24: 349}, {}, {29: 745}, {}, {7: 245}, {9: 384}, {1: 490, 21: 253, 22: 904, 13: 526}, {4: 452, 27: 179, 28: 673}, {22: 30, 29: 307, 8: 104}, {12: 399, 0: 792}, {}, {}, {20: 349, 6: 53}, {}, {}, {}, {14: 223}, {23: 705}, {13: 903, 21: 159}, {}, {27: 144, 28: 181}, {26: 922, 20: 241}, {}, {24: 966, 29: 78}, {26: 107}, {1: 121}, {18: 898, 0: 280, 12: 425}, {}, {18: 750, 25: 440, 28: 152, 29: 109, 6: 330}, {23: 298}], bound=715):\n    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound\ndef g(weights=[{25: 594, 24: 349}, {}, {29: 745}, {}, {7: 245}, {9: 384}, {1: 490, 21: 253, 22: 904, 13: 526}, {4: 452, 27: 179, 28: 673}, {22: 30, 29: 307, 8: 104}, {12: 399, 0: 792}, {}, {}, {20: 349, 6: 53}, {}, {}, {}, {14: 223}, {23: 705}, {13: 903, 21: 159}, {}, {27: 144, 28: 181}, {26: 922, 20: 241}, {}, {24: 966, 29: 78}, {26: 107}, {1: 121}, {18: 898, 0: 280, 12: 425}, {}, {18: 750, 25: 440, 28: 152, 29: 109, 6: 330}, {23: 298}], bound=715):\n    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]",
        "grade": null
    },
    {
        "program_str": "def f(indices: List[int], a0=962856):\n    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1\ndef g(a0=962856):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans",
        "grade": null
    },
    {
        "program_str": "def f(n: int, nums=[14, 551755893, 902110495], lower_bound=1):\n    \"\"\"Find a large common divisor of the list of integers.\"\"\"\n    return all(i % n == 0 for i in nums) and n >= lower_bound\ndef g(nums=[14, 551755893, 902110495], lower_bound=1):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n",
        "grade": null
    },
    {
        "program_str": "def f(n: int):\n    \"\"\"Find n  such that 2^n mod n = 3\"\"\"\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497",
        "grade": null
    },
    {
        "program_str": "def f(s: str):\n    \"\"\"Find a string that when reversed and concatenated onto 'Hello ' gives 'Hello world'.\"\"\"\n    return \"Hello \" + s[::-1] == \"Hello world\"\ndef g():\n    return \"world\"[::-1]",
        "grade": null
    },
    {
        "program_str": "def f(x: List[int]):\n    \"\"\"Find a list of two integers whose sum is 3.\"\"\"\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]",
        "grade": null
    },
    {
        "program_str": "def f(ls: List[str], combined=\"(() )(( )()  ) ((( (()))(()(()() ( )( ()) )( ( )( )) (() )) )()) (( ))    \"):\n    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"\n    for s in ls:\n        assert s.count(\"(\") == s.count(\")\")\n        assert all(s[:i].count(\"(\") > s[:i].count(\")\") for i in range(1, len(s)))  # s is not further divisible\n    return ''.join(ls) == combined.replace(' ', '')\ndef g(combined=\"(() )(( )()  ) ((( (()))(()(()() ( )( ()) )( ( )( )) (() )) )()) (( ))    \"):\n    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans",
        "grade": null
    },
    {
        "program_str": "def f(containers: List[str], strings=['rgyjo', 'tipu', 'mulut', 'wutgypepu'], substring=\"gy\"):\n    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)\ndef g(strings=['rgyjo', 'tipu', 'mulut', 'wutgypepu'], substring=\"gy\"):\n    return [s for s in strings if substring in s]",
        "grade": null
    },
    {
        "program_str": "def f(p: int, n=63088):\n    \"\"\"\n    Find the largest prime factor of n.\n\n    Sample Input:\n    125\n\n    Sample Output:\n    5\n    \"\"\"\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))\ndef g(n=63088):\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))",
        "grade": null
    },
    {
        "program_str": "def f(coords: List[List[float]], sides=[24.408110376178705, 32.72365349973282, 48.81696744586911]):\n    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n\n    Sample Input:\n    [3.0, 4.0, 5.0\n\n    Sample Output:\n    [[0.0, 0.0], [3.0, 0.0], [0.0, 4.0]]\n    \"\"\"\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))\ndef g(sides=[24.408110376178705, 32.72365349973282, 48.81696744586911]):\n    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]",
        "grade": null
    },
    {
        "program_str": "def f(s: str, target=\"That last test was a bad test!\"):\n    \"\"\"Find string s that, when case is flipped gives target where vowels are replaced by chars two later.\n    --- Example input ---\n    'THIS is a TEST'\n\n    --- Example output ---\n    'thks KS C tgst'\n    \"\"\"\n    subs = {ord(c): ord(c) + 2 for c in \"aeiouAEIOU\"}\n    return s.swapcase() == target.translate(subs)\ndef g(target=\"That last test was a bad test!\"):\n    subs = {ord(c): ord(c) + 2 for c in \"aeiouAEIOU\"}\n    return target.translate(subs).swapcase()",
        "grade": null
    },
    {
        "program_str": "def f(states: List[List[int]], n=1):\n    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n\ndef g(n=1):\n    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans",
        "grade": null
    },
    {
        "program_str": "def f(item: int, li=[96, -61, 50, -49, -1, -23, -35], index=3):\n    \"\"\"Find the item whose first index in li is index\"\"\"\n    return li.index(item) == index\ndef g(li=[96, -61, 50, -49, -1, -23, -35], index=3):\n    return li[index]",
        "grade": null
    },
    {
        "program_str": "def f(numbers: List[int]) -> bool:\n    \"\"\"\n    The puzzle involves a function f that calculates the product of a list of numbers and checks if the product is greater than 1000. The solution function g generates a list of 5 prime numbers between 10 and 50, and the puzzle is solved if the product of these prime numbers is greater than 1000.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product > 1000\n\n\ndef g():\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    import random\n    primes = []\n    while len(primes) < 5:\n        num = random.randint(10, 50)\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(word: str, pattern=\"abc\", length=36) -> bool:\n    \"\"\"\n    The puzzle requires defining a function f that checks if a given word contains a specific pattern and has a certain length, and another function g that generates a word based on the pattern and length. The assertion checks if f(g()) returns True.\n    \"\"\"\n    return pattern in word and len(word) == length\n\n\ndef g(pattern=\"abc\", length=36):\n    return pattern * (length // len(pattern)) + pattern[:length % len(pattern)]\n\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(string: str, sub='ab') -> bool:\n    \"\"\"\n    The puzzle involves a function f that checks if a given string contains a specific substring with certain conditions, and a function g that generates permutations of a given substring and returns the first valid permutation. The solution g is then checked against f to ensure it satisfies the conditions.\n    \"\"\"\n    assert len(sub) > 1 and sub in string and len(set(sub)) == len(sub)\n    return all(sub in string[i:i+len(sub)] for i in range(len(string) - len(sub) + 1))\n\ndef g(sub='ab'):\n    # brute force\n    string = 'abracadabra'\n\n    from itertools import permutations\n    for p in permutations(sub):\n        if all(char in sub for char in p) and len(p) == len(set(p)):\n            return ''.join(p)\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(text: str, target='a') -> bool:\n    \"\"\"\n    The puzzle involves two functions, f and g, where f checks if a target character is present in a given text, and g returns the alphabet if the target character is 'a'. The assertion checks if f(g()) returns True.\n    \"\"\"\n    return target in text\n\n\ndef g(target='a'):\n    return 'abcdefghijklmnopqrstuvwxyz' if target in 'abcdefghijklmnopqrstuvwxyz' else ''\n\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(points: List[Tuple[int, int]]) -> bool:\n    \"\"\"\n    The puzzle requires checking if there are any duplicate x-coordinates in a list of points.\n    \"\"\"\n    x_coords = set()\n    for point in points:\n        if point[0] in x_coords:\n            return True\n        x_coords.add(point[0])\n    return False\n\n\ndef g() -> List[Tuple[int, int]]:\n    return [(1, 2), (3, 4), (1, 5)]\n\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(sequence: List[int], common_ratio=3, range_limit=100, options=[2, 6, 18, 54, 162]) -> bool:\n    \"\"\"\n    The puzzle involves defining a function f that checks if a given sequence of numbers follows a specific pattern and falls within certain limits. The solution function g generates combinations of numbers from a given set that satisfy the pattern defined in f.\n    \"\"\"\n    for i in range(1, len(sequence)):\n        assert sequence[i] / sequence[i-1] == common_ratio\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\n\ndef g(common_ratio=3, range_limit=100, options=[2, 6, 18, 54, 162]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] / c[i] == common_ratio for i in range(len(c)-1)):\n                return list(c)\n\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(l: List[int]) -> bool:\n    \"\"\"\n    ['The puzzle requires the student to implement a function f that takes a list of integers as input and returns True if the conditions specified in the function are met. The student also needs to implement a function g that generates a list of integers to be passed to function f, such that the assertion statement at the end of the code passes.']\n    \"\"\"\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\n\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
        "grade": null
    },
    {
        "program_str": "def f(numbers: list) -> bool:\n    \"\"\"\n    The puzzle requires the student to implement a function that checks if a given list of numbers follows the Fibonacci sequence. The solution function generates the Fibonacci sequence and compares it with the input list.\n    \"\"\"\n    fib_seq = lambda n: n if n <= 1 else fib_seq(n-1) + fib_seq(n-2)\n    return all([numbers[i] == fib_seq(i) for i in range(len(numbers))])\n\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(num: int, lower=100, upper=500) -> bool:\n    \"\"\"\n    The puzzle involves defining a function f(num) that checks if a given number is within a specified range and is a perfect square. The solution function g() iterates through the square roots of the range and returns the first perfect square it finds within the range.\n    \"\"\"\n    return num >= lower and num <= upper and num**0.5 == int(num**0.5)\n\ndef g(lower=100, upper=500):\n    for i in range(int(lower**0.5), int(upper**0.5) + 1):\n        if i*i >= lower and i*i <= upper:\n            return i*i\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    \"\"\"\n    ['The puzzle requires finding the starting index of a subsequence in a given sequence such that the sum of the subsequence is greater than or equal to a specified lower bound.']\n    \"\"\"\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\n\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "grade": null
    },
    {
        "program_str": "def f(s: str, target='Python') -> bool:\n    \"\"\"\n    The puzzle requires defining a function f that checks if a target string is present in a given string, and a function g that generates a string containing the target string. The goal is to ensure that function g generates a string containing the target string and function f correctly identifies it.\n    \"\"\"\n    return target in s\n\ndef g(target='Python'):\n    return f\"This is a string containing {target}\"\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(prime_sum: int, limit=1000) -> bool:\n    \"\"\"\n    The puzzle involves defining a function f that checks if the sum of prime numbers up to a given limit is equal to a specified value. The solution function g calculates the sum of prime numbers up to a given limit. The puzzle tests whether the solution function g correctly calculates the sum of prime numbers.\n    \"\"\"\n    return sum(i for i in range(2, limit) if all(i % j != 0 for j in range(2, int(i**0.5) + 1)) and i > 1) == prime_sum\n\ndef g(limit=1000):\n    return sum(i for i in range(2, limit) if all(i % j != 0 for j in range(2, int(i**0.5) + 1)) and i > 1)\n\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(seq: List[int], n=10000, length=5017) -> bool:\n    \"\"\"\n    ['The puzzle requires the student to create a function g that generates a list of integers based on the input parameters n and length, such that the function f returns True when applied to the generated list.']\n    \"\"\"\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\n\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
        "grade": null
    },
    {
        "program_str": "def f(board: List[List[int]]) -> bool:\n    \"\"\"\n    The puzzle involves implementing a Sudoku solver algorithm in Python using a recursive backtracking approach.\n    \"\"\"\n    def is_valid(board, row, col, num):\n        for i in range(9):\n            if board[row][i] == num or board[i][col] == num or board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num:\n                return False\n        return True\n\n    def solve_sudoku(board):\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == 0:\n                    for num in range(1, 10):\n                        if is_valid(board, i, j, num):\n                            board[i][j] = num\n                            if solve_sudoku(board):\n                                return True\n                            board[i][j] = 0\n                    return False\n        return True\n\n    return solve_sudoku(board)\n\n\ndef g():\n    board = [\n        [5, 3, 0, 0, 7, 0, 0, 0, 0],\n        [6, 0, 0, 1, 9, 5, 0, 0, 0],\n        [0, 9, 8, 0, 0, 0, 0, 6, 0],\n        [8, 0, 0, 0, 6, 0, 0, 0, 3],\n        [4, 0, 0, 8, 0, 3, 0, 0, 1],\n        [7, 0, 0, 0, 2, 0, 0, 0, 6],\n        [0, 6, 0, 0, 0, 0, 2, 8, 0],\n        [0, 0, 0, 4, 1, 9, 0, 0, 5],\n        [0, 0, 0, 0, 8, 0, 0, 7, 9]\n    ]\n    return board\n\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(board: List[List[int]]) -> bool:\n    \"\"\"\n    The puzzle involves implementing a function to check if a given Sudoku board is valid, and providing a solution function to solve the Sudoku board.\n    \"\"\"\n    def is_valid(row, col, num):\n        for i in range(9):\n            if board[i][col] == num or board[row][i] == num or board[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == num:\n                return False\n        return True\n\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                return False\n            num = board[i][j]\n            board[i][j] = 0\n            if not is_valid(i, j, num):\n                return False\n            board[i][j] = num\n    return True\n\n\ndef g():\n    def solve_sudoku(board):\n        def is_valid(row, col, num):\n            for i in range(9):\n                if board[i][col] == num or board[row][i] == num or board[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == num:\n                    return False\n            return True\n\n        def backtrack():\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == 0:\n                        for num in range(1, 10):\n                            if is_valid(i, j, num):\n                                board[i][j] = num\n                                if backtrack():\n                                    return True\n                                board[i][j] = 0\n                        return False\n            return True\n\n        if backtrack():\n            return board\n        return None\n\n    empty_board = [[0 for _ in range(9)] for _ in range(9)]\n    return solve_sudoku(empty_board)\n\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(fib_value: int, n=6) -> bool:\n    \"\"\"\n    The puzzle involves two functions, f and g, where f checks if the output of g matches a Fibonacci number based on a given value of n.\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a == fib_value\n\n\ndef g(n=6):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(intersection: set[int]) -> bool:\n    \"\"\"\n    The puzzle requires defining a function f that takes a set as input and checks if the input set is the intersection of two predefined sets A and B. The solution function g returns a specific set, and the puzzle is solved if f(g()) returns True.\n    \"\"\"\n    A = {1, 2, 3, 4, 5}\n    B = {3, 4, 5, 6, 7}\n    return intersection == A.intersection(B)\n\n\ndef g():\n    return {3, 4, 5}\n\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(subsequences: List[List[int]]) -> bool:\n    \"\"\"\n    The puzzle involves finding the longest increasing subsequence in a list of numbers and checking if it matches the original list length.\n    \"\"\"\n    def longest_increasing_subsequence(nums):\n        if not nums:\n            return 0\n\n        dp = [1] * len(nums)\n\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n\n        return max(dp)\n\n    return longest_increasing_subsequence(subsequences[0]) == len(subsequences[0])\n\n\ndef g():\n    def find_subsequences(nums, index, path, subsequences):\n        if len(path) > 1:\n            subsequences.append(path[:])\n        for i in range(index, len(nums)):\n            if not path or nums[i] > path[-1]:\n                path.append(nums[i])\n                find_subsequences(nums, i + 1, path, subsequences)\n                path.pop()\n\n    nums = [1, 3, 2, 4, 7, 6]\n    subsequences = []\n    find_subsequences(nums, 0, [], subsequences)\n    return subsequences\n\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(target_sum: int, nums=[2, 4, 6, 8, 10, 1, 3, 5, 7, 9]) -> bool:\n    \"\"\"\n    The puzzle involves finding the maximum sum of non-adjacent elements in a list of numbers and checking if this sum equals a target sum.\n    \"\"\"\n    def max_non_adjacent_sum(nums):\n        incl = 0\n        excl = 0\n\n        for num in nums:\n            new_excl = max(incl, excl)\n            incl = excl + num\n            excl = new_excl\n\n        return max(incl, excl)\n\n    return max_non_adjacent_sum(nums) == target_sum\n\n\ndef g(nums=[2, 4, 6, 8, 10, 1, 3, 5, 7, 9]) -> int:\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n\n    for i in range(1, len(nums)):\n        if i == 1:\n            dp[i] = max(nums[0], nums[1])\n        else:\n            dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n\n    return dp[-1]\n\nassert f(g()) == True\n",
        "grade": null
    },
    {
        "program_str": "def f(moves: list) -> bool:\n    \"\"\"\n    The puzzle requires defining a function f that takes a list of moves as input and checks if the moves are valid to stay within a board of given size. The solution function g generates a list of moves to navigate within an 8x8 board.\n    \"\"\"\n    def is_valid_move(move):\n        return move[0] == 0 or move[1] == 0\n\n    current_position = (0, 0)\n    for move in moves:\n        new_position = (current_position[0] + move[0], current_position[1] + move[1])\n        if not is_valid_move(move) or new_position[0] < 0 or new_position[1] < 0:\n            return False\n        current_position = new_position\n\n    return True\n\n\ndef g(board_size=8):\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    return moves\n\nassert f(g()) == True\n",
        "grade": null
    }
]