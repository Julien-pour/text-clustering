[
    {
        "fitness": 1.0,
        "program_str": "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and string manipulation.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')",
        "solution_func": "def g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding a number that, when squared, starts with the digits '123456789'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, mathematical operations, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0",
        "solution_func": "def g():\n    return ('h' + 'o') * 1000",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a function that checks if a given string meets certain conditions related to the count of specific substrings."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and counting substrings in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking for a specific condition on the elements of the list. It also uses list comprehension and modulo operation. The solution generates a list based on a specific pattern to satisfy the conditions of the puzzle.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))",
        "solution_func": "def g():\n    return [((i + 1) % 999) for i in range(999)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a function that takes a list of integers and checks if the list is sorted in ascending order and contains all integers from 0 to 998. The solution function generates a list where each element is the remainder of (i+1) divided by 999."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and comparison, as well as list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for a specific condition using list comprehension.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])",
        "solution_func": "def g():\n    return [i for i in range(10) for j in range(i)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that checks if a given list of integers satisfies a specific condition. The solution involves generating a list based on a nested loop and passing it to the function to check."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and the count() method in Python. It also requires knowledge of nested loops and range() function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3",
        "solution_func": "def g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to define a function f(s: str) that checks if a certain condition is met, and a function g() that generates a string based on a mathematical operation and finds a substring with the highest count in the generated string. The assertion checks if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, mathematical operations, and set comprehension in Python. It tests the students' understanding of string slicing, counting substrings, and defining functions with specific conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and list operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')",
        "solution_func": "def g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to write a function that takes a list of integers and returns a boolean value based on a comparison with a given string. The solution function generates a list of integers based on the index of characters in another string."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves list comprehension, string manipulation, and comparison operations in Python. It tests the student's understanding of list indexing and comparison techniques in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and list operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))",
        "solution_func": "def g():\n    return ['1']",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that takes a list of strings as input and returns True if the minimum and maximum values in the list are equal to the string representation of the length of the list."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, comparison of strings and integers, and the use of the min, max, and len functions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Mathematical Operations",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')",
        "solution_func": "def g():\n    return 123.456 + 3.1415",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to determine if the result of a mathematical operation satisfies a specific condition using string manipulation."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if the result of adding two numbers satisfies a condition based on string manipulation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))",
        "solution_func": "def g():\n    return [(2 ** i) for i in range(20)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that checks if the sum of the first i elements in a list matches a specific formula for all i from 0 to 19. The solution generates a list of powers of 2 from 0 to 19 and checks if the function returns True for this list."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, summing elements in a list, and comparing the sum to a specific formula. The solution involves generating a list of powers of 2 using list comprehension and passing it to the function to check if it returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(i: int) -> bool:\n    return len(str(i + 1000)) > len(str(i + 1001))\ndef g():\n    return -1001\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and string manipulation to compare the lengths of two strings.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(i: int) -> bool:\n    return len(str(i + 1000)) > len(str(i + 1001))",
        "solution_func": "def g():\n    return -1001",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding a number that, when added to 1001, results in a number with a shorter length than when added to 1000."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how adding different numbers affects the length of the resulting number when converted to a string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and list comprehension to check if the sum of all pairs of elements in the list is equal to a specific set.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}",
        "solution_func": "def g():\n    return [0, 1, 2, 3, 17]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function that takes a list of integers and checks if the sum of all possible pairs of integers in the list matches a specific set of values."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves set comprehension and comparison to a predefined set of values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for unique elements in the list.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3",
        "solution_func": "def g():\n    return list(range(3)) * 10",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a function that takes a list of integers as input and returns True if all elements are different from their adjacent elements and the list contains exactly 3 unique elements."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking for uniqueness of elements in a list and the presence of exactly 3 unique elements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and iteration over a list of strings.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')",
        "solution_func": "def g():\n    return list(next(zip('dee', 'doo', 'dah!')))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that checks if a given list of strings matches a specific pattern defined by the zip function."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how the zip function works in Python and how to compare tuples to check for a specific pattern.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]\ndef g():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, sorting and ordering, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]",
        "solution_func": "def g():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a string that is a palindrome and is an anagram of the phrase 'Permute me true'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, sorting, and checking for palindromes and anagrams.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]",
        "solution_func": "def g():\n    return [1, 2, 3, 3]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that takes a list of integers and returns a boolean value based on specific conditions. The solution function g returns a list of integers that satisfies the conditions of function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list indexing and comparison operations in Python. It also requires the student to correctly implement the conditions specified in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, list operations, and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995",
        "solution_func": "def g():\n    return [0, 4] + list(range(6, 1000))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that takes a list of integers as input and returns True if the conditions specified in the function are met. The student also needs to implement a function g that generates a list of integers to be passed to function f, such that the assertion statement at the end of the code passes."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking conditions related to the elements in the input list and their properties. The solution function g generates a list that satisfies the conditions specified in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]",
        "solution_func": "def g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves calculating the angles of the hour and minute hands of a clock and checking if the absolute difference between them matches a target angle or its complement."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of angles, loops, and conditional statements in Python to calculate the angles of the clock hands and check for the target angle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Backtracking, Number Theory",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1",
        "solution_func": "def g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining two functions, f(n) and g(), where f checks a specific condition on an input integer n and g iterates through integers to find the first one that satisfies the condition in f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves a loop that checks a condition on an integer n and a loop in the solution function g() that iterates through integers to find the first one that satisfies the condition in f(). The solution function g() returns the first integer that satisfies the condition in f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves geometry and coordinate manipulation to solve a combinatorial problem.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points",
        "solution_func": "def g(side = 10, num_points = 20):\n    from itertools import combinations",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves generating a set of unique coordinates within a grid, ensuring that no three points are collinear, and checking if a specific condition is met based on the generated coordinates."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of nested loops, assertions, itertools combinations, and mathematical concepts related to collinearity of points in a plane.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, iteration, and combination generation using itertools. It also includes conditional logic and assertion checks.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
        "solution_func": "def g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to find a combination of stamps from a given set of options that sum up to a target value, while also considering a maximum number of stamps allowed."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given combination of stamps satisfies certain conditions, such as the total sum being equal to the target value and the number of stamps not exceeding a maximum limit.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves geometric calculations and constraints to ensure that a set of rectangles form a perfect square. It also includes assertions to validate the input data. The solution generates a list of coordinates and side lengths for rectangles that form a perfect square when summed up.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2",
        "solution_func": "def g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of lists as input and performs certain checks on the input list to determine if it satisfies certain conditions. The solution function g generates a specific list of lists that satisfies the conditions of function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, and conditional checks in Python. It also requires knowledge of list comprehension and mathematical calculations. The solution function g provides a specific list that satisfies the conditions of function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))",
        "solution_func": "def g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that checks a specific condition on a given input string, and a function g that finds a specific value in the input string to satisfy the condition in function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of string manipulation, counting characters in a string, and using list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, conditional logic, and sorting and ordering.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True",
        "solution_func": "def g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding a number 'n' such that the square of 'n' contains all digits from 0 to 9 exactly once."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if the square of a number 'n' contains all digits from 0 to 9 exactly once. The function f(n) checks this condition, and the function g() iterates through numbers to find the required 'n'.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and Exception Handling.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)",
        "solution_func": "def g():\n    return \"8*8-1\"",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a string expression using only the characters '1', '8', '-', '+', '*', and '/' that evaluates to 63 and contains two '8's and one '1'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves using the given characters to form a valid mathematical expression that evaluates to 63 with specific constraints on the number of '8's and '1's in the expression.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, conditional logic, and evaluating expressions using the `eval()` function.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)",
        "solution_func": "def g():\n    return \"8*8-1**8\"",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a string expression using only the characters '1', '8', '-', '+', '*', and '/' that evaluates to 63 and contains three occurrences of the digit '8' and one occurrence of the digit '1'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves creating a mathematical expression using specific characters that evaluates to a specific value and satisfies certain conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Backtracking, List Manipulation, and Algorithm Optimization.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal",
        "solution_func": "def g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a problem of pouring water between jugs with different capacities to reach a specific goal state."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of list manipulation, loops, and conditionals in Python to solve the pouring water problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])",
        "solution_func": "def g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the functions f and g, and use them to determine if the assertion statement is True or False."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and comparison, as well as understanding the logic within the functions f and g. The student needs to analyze the code to determine if the assertion statement is correct based on the functions provided.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves geometry and coordinate manipulation to cover a target area with given corners and dimensions.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
        "solution_func": "def g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of corners and some parameters, and checks if the corners cover a specific target area. The solution function g generates the corners based on the parameters and checks if f returns True for those corners."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, sets, and assertions in Python. It also requires knowledge of function definitions and function calls with default parameters. The solution function g generates the corners based on the parameters and checks if the function f returns True for those corners.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation to check if the input list satisfies a certain condition based on a predefined list of trips. The solution function uses list comprehension to calculate the sum of elements in each sublist of trips and return a list of boolean values based on the condition 'sum(s) >= 2'. The assert statement checks if the puzzle function f returns True when applied to the solution function g.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))",
        "solution_func": "def g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that takes a list of boolean values and checks if the length of the list matches a predefined list of trips, and if the sum of each trip is greater than or equal to 2. The solution function g generates a list of boolean values based on the sum of each trip in a given list of trips."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves working with lists, boolean values, list comprehension, and conditional statements in Python. It tests the student's understanding of list operations and boolean logic. The solution function g demonstrates list comprehension and boolean comparisons in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))",
        "solution_func": "def g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining two functions, f and g, where f checks if certain conditions are met based on a list of scores and a threshold value, and g calculates the number of scores that are greater than or equal to the threshold value. The puzzle requires understanding of list comprehension, conditionals, and function composition in Python."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given solution function g meets the conditions specified in function f. Function f checks if all scores before a certain index are greater than or equal to a threshold value, and all scores after that index are less than the threshold value. Function g calculates the number of scores that are greater than or equal to the threshold value. The assert statement at the end ensures that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)",
        "solution_func": "def g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that generates a string with a dot between each consonant in a given string, excluding vowels. The solution function then checks if the generated string satisfies certain conditions based on the input string."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and assertion checks. It tests the student's understanding of string operations and control flow in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, Conditional Logic, and Set Operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
        "solution_func": "def g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of squares and checks if they cover a specific target area in a grid. The solution function g generates a list of squares based on the dimensions of the grid and ensures that the target area is covered by these squares."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how the function f checks if a list of squares covers a target area in a grid, and how the function g generates squares to satisfy this condition. It requires knowledge of list comprehension, loops, and conditional statements in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
        "solution_func": "def g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves comparing two strings with different conditions based on the value of n. The solution function g() compares the strings and returns a value based on the comparison. The puzzle function f() checks if the comparison result from g() satisfies certain conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string comparison and conditional checks based on the value of n. The solution function g() returns a value based on the comparison of two strings, and the puzzle function f() checks if the result from g() meets the specified conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True",
        "solution_func": "def g(word = 'silon'):\n    return word[0].upper() + word[1:]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires defining a function f(s: str, word='silon') that checks if the input string s matches a specific pattern defined by the word 'silon'. The solution function g(word = 'silon') generates a modified version of the word 'silon' by capitalizing the first letter. The puzzle tests whether the solution function g satisfies the condition of the function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and conditional checks in Python. It tests the understanding of string indexing, comparison, and function composition. This puzzle can be used to teach Python programming concepts related to strings and functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))",
        "solution_func": "def g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand and analyze a function f that compares characters in a string and a function g that manipulates the input string to remove consecutive duplicate characters. The goal is to ensure that the output of function g satisfies the conditions set by function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and comprehension in Python. Students need to understand how the functions f and g interact and how to manipulate strings to meet the conditions of f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation to solve a linear algebra problem.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))",
        "solution_func": "def g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of integers and a default list of lists of integers as input. The function checks if the sum of each column in the default list plus the corresponding element in the input list equals zero. The solution function g calculates the negation of the sum of each column in the default list."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, summing elements in lists, and checking conditions using all(). The solution function g uses list comprehensions and negation to calculate the required sums.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list comprehension. It does not explicitly involve any of the other topics listed.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand how to define functions with default parameters and use list comprehension to calculate a sum. The student needs to ensure that the function g() returns the correct value to satisfy the condition in function f()."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, default parameters, list comprehension, and function invocation. It tests the student's ability to correctly implement a function that satisfies a given condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and iterative algorithms.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
        "solution_func": "def g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the given functions f and g, and determine if g is a solution to f by checking if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding loops, assertions, and comparison operators in Python. The student needs to analyze the functions f and g to determine if g is a solution to f based on the given conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, Conditional Logic, and Function Calls.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m",
        "solution_func": "def g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that checks if the result of another function g satisfies a certain condition after some operations on a given number."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle tests the understanding of Python functions, loops, conditional statements, and arithmetic operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
        "solution_func": "def g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves two functions, f and g, where f checks if a certain condition is met based on a list of pairs, and g calculates a value based on the same list of pairs. The goal is to find a pair of values that satisfies the condition in f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding the logic of the f function which checks if a certain condition is met based on the pairs provided. The g function calculates a value based on the pairs, and the goal is to find a pair of values that satisfies the condition in f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
        "solution_func": "def g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand and implement a function that checks if the input string has more uppercase letters than lowercase letters, and returns True if the condition is met."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves counting the number of uppercase letters in a given string and comparing it to the length of the string to determine if the string should be converted to all uppercase or all lowercase. The solution function g() correctly implements this logic and returns the modified string based on the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'",
        "solution_func": "def g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function g that finds the indices of characters in a given string that spell out the word 'intelligent'. The function f checks if the indices are in sorted order and if the characters at those indices form the word 'intelligent'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and list operations in Python. It tests the student's understanding of loops, string indexing, and list comprehension.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, conditional logic, and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))",
        "solution_func": "def g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand the functions f and g, and use them to solve a challenge involving counting the occurrences of '4' and '7' in a number."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number meets certain conditions based on the count of '4' and '7' in the number. The solution function g generates a number based on the input number, and the puzzle is solved when f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse",
        "solution_func": "def g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand string manipulation in Python and boolean logic. The student needs to create a function g that reverses the target string if reverse is True, and appends 'x' to the target string if reverse is False. The function f then checks if the result of g is equal to the target string in reverse order based on the value of reverse parameter."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, understanding of slicing in Python, boolean logic, and function composition. It tests the student's ability to create a function that meets specific criteria and to understand how the functions interact to produce the desired result.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)",
        "solution_func": "def g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function g(a, d) that returns a string with 'a' repeated 'a' times and 'd' repeated 'd' times. The function f(s, a, d) checks if the input string 's' contains 'a' repeated 'a' times, 'd' repeated 'd' times, and has a length equal to the sum of 'a' and 'd'. The assert statement checks if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "This puzzle is a good exercise to test the student's understanding of string manipulation, function definition, and function invocation in Python. It also reinforces the concept of function composition and parameter passing in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check for unique digits in a number, as well as mathematical operations to generate a list of numbers within a range. It also includes conditional logic to filter the numbers based on a condition. Finally, it uses set operations to check for uniqueness in the generated list of numbers.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count",
        "solution_func": "def g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function f that takes a list of integers and checks if each integer in the list has unique digits and falls within a specified range. The function g generates a list of integers within the specified range that have unique digits. The puzzle is to ensure that function f returns True when applied to the output of function g."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, set operations, and range generation in Python. It also tests the student's ability to define functions with default arguments and use assertions for validation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and list comprehension.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))",
        "solution_func": "def g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the use of list comprehension and the sum function in Python to calculate a sum based on a condition."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if the sum of a list of numbers based on a condition is equal to a given total, and defining a function g that calculates this sum. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation to achieve a specific target value. It does not directly relate to other topics such as recursion, dynamic programming, or graph theory.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
        "solution_func": "def g(target = 17):\n    return [[0, 2]] * target",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that takes a list of pairs of integers and a target value, and checks if the difference between the second and first element in each pair is at least 2. The function g generates a list of pairs of integers based on the target value. The puzzle is to ensure that f(g()) returns True for a specific target value."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, and conditional statements in Python. It also requires the student to correctly implement the logic to check the difference between elements in pairs. The solution function g generates the input list based on the target value, and the challenge is to ensure that f correctly evaluates this list to return True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
        "solution_func": "def g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand string manipulation and mathematical operations in Python to determine if a given string satisfies a specific condition based on a mathematical calculation."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves converting numbers to strings, manipulating strings, and performing mathematical calculations to check if a condition is met.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len",
        "solution_func": "def g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that takes a list of strings representing states, a start state, a combo state, and a target length. The function checks if the list of states can reach the combo state from the start state by changing one digit at a time. The solution function g generates a sequence of states to reach the combo state from the start state."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, string operations, and conditional logic in Python. It also requires understanding of loops and mathematical operations to generate the sequence of states.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations to solve the algorithmic challenge.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))",
        "solution_func": "def g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that checks if a certain condition is met based on a list of states, a start value, a combo value, and a target length. The solution function g generates a list of values based on the start and combo values until a certain condition is met."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves manipulating lists of integers and checking conditions based on the differences between elements. It requires understanding of list comprehension, zip function, and modulo operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and permutations and combinations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target",
        "solution_func": "def g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that takes a string and checks if the string can be transformed into a target string using a specific permutation. The solution function g generates a string that can be transformed into the target string using the inverse permutation. The assertion at the end checks if applying g to f results in True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of permutations in Python. It requires the student to implement the inverse permutation function to solve the challenge.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking conditions based on the elements in the lists.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
        "solution_func": "def g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves checking if a given list of lists meets certain conditions based on the input parameters and constraints provided in the functions f and g."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding list manipulation, set operations, list comprehensions, and assertions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)",
        "solution_func": "def g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a function g that generates a list of integers based on the input parameters n and length, such that the function f returns True when applied to the generated list."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list meets certain conditions based on the input parameters and the elements in the list. The solution function g generates a list that satisfies the conditions specified in the puzzle function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding a subsequence in a list that satisfies certain conditions.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
        "solution_func": "def g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand the f and g functions, and how to use them to find the correct start index in a sequence to satisfy the given conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given start index in a sequence satisfies certain conditions based on the sum of elements in a subsequence. The solution function g uses a lambda function to find the start index that minimizes the sum of elements in the subsequence.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
        "solution_func": "def g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the starting index of a subsequence in a given sequence such that the sum of the subsequence is greater than or equal to a specified lower bound."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list slicing, summing elements of a subsequence, and using the max function with a lambda function to find the starting index of the subsequence.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
        "solution_func": "def g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining two functions, f and g, where f checks if the product of a subsequence of a given sequence is greater than a specified lower bound, and g finds the starting index of the subsequence that maximizes the product."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions, use loops, calculate products of subsequences, and find the index that maximizes a function. It also requires understanding how to use default arguments and assert statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list operations, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))",
        "solution_func": "def g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that takes a list of integers and checks if the list meets certain conditions. The student also needs to implement a function g that generates a list of integers based on the given total and number of elements. The solution function g should return a list that satisfies the conditions of function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, conditions, and arithmetic calculations in Python. It tests the student's ability to generate a list based on a given total and number of elements, and then check if the generated list meets specific conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper",
        "solution_func": "def g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that takes a list of rotations and a target string as input, and checks if applying the rotations to the alphabet string results in the target string. The function g generates a list of rotations to transform the alphabet string into the target string."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves manipulating strings and lists in Python to achieve a specific transformation. It tests the student's understanding of string manipulation and list operations in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dynamic programming and list manipulation.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)",
        "solution_func": "def g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves checking if a list of bills satisfies certain conditions and then finding a solution using dynamic programming to meet those conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of list manipulation, condition checking, and dynamic programming in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, set operations, list manipulation, and algorithm optimization.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)",
        "solution_func": "def g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that checks if a list of numbers satisfies certain conditions, and a function g that generates a list of numbers based on given options. The solution g generates a list of numbers that meets the conditions specified in function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, set operations, and algorithmic thinking to generate a list of numbers that satisfies the conditions specified in function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and functions.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06",
        "solution_func": "def g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f(x) that checks if a quadratic equation with given coefficients has a root within a small tolerance. The solution function g() calculates the root of the quadratic equation using the quadratic formula and returns it."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding quadratic equations, roots, and the quadratic formula in Python. It tests the student's ability to define functions, work with coefficients, and solve equations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to solve a quadratic equation and check the roots satisfy a condition.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06",
        "solution_func": "def g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of roots and coefficients as input and checks if a certain condition is met. The solution function g calculates the roots of a quadratic equation using the coefficients provided and returns them in a list. The assertion checks if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding quadratic equations, roots, and coefficients. It tests the student's ability to implement a function to check a condition based on the roots and coefficients, as well as calculate the roots of a quadratic equation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])",
        "solution_func": "def g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that checks if the sum of the digits in a given number is equal to a specific value. The solution function then calculates a specific number based on the given value."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves working with string manipulation, integer conversion, and arithmetic operations in Python. It tests the student's understanding of list comprehension, summing elements in a list, and string concatenation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(z: float, v=9, d=0.0001) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 9, d = 0.0001):\n    return v * d\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(z: float, v=9, d=0.0001) -> bool:\n    return int(z * 1 / d % 10) == v",
        "solution_func": "def g(v = 9, d = 0.0001):\n    return v * d",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that checks if a certain condition is met based on the input parameters, and a function g that returns a value based on the input parameters. The goal is to ensure that f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function composition and parameter passing in Python. Students need to understand how the functions f and g interact to satisfy the condition in the assert statement.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
        "solution_func": "def g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function that generates a list of numbers based on given parameters, and then check if the generated list satisfies certain conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list generation using range() function in Python and checking conditions on the generated list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)",
        "solution_func": "def g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand a given function f that takes a list of integers as input and returns a boolean value based on a mathematical condition. The solution function g takes no input and returns a list of integers. The challenge is to find the correct values for a, b, c, and d in function g such that f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding mathematical operations, list indexing, and function calls in Python. Students need to manipulate the values of a, b, c, and d in function g to satisfy the condition in function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
        "solution_func": "def g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the given functions f and g, and determine if the assertion f(g()) == True holds true based on the conditions specified in the functions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding the conditions in the functions f and g, and applying them to check if the assertion is true.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and function definition.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
        "solution_func": "def g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves two functions, f(x) and g(a, b), where f checks if a given integer x satisfies a specific condition based on the values of a and b, and g calculates a value for x based on the values of a and b. The puzzle requires finding the correct value of x that satisfies the condition in f when passed through g."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge where the solution function g calculates a value for x based on the input parameters a and b, and the function f checks if the calculated value of x satisfies a specific condition. The puzzle is suitable for teaching Python programming concepts such as function definition, parameter passing, and conditional statements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list operations, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to write a function f(x) that takes a list of integers and checks if the length of the list is equal to a given value, the sum of the list is equal to a given value, and all elements in the list are greater than 0. The solution function g() generates a list of integers based on the given values of n and s that satisfy the conditions for function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, condition checking, and function implementation in Python. It also requires the student to understand how to generate a list based on given conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as List Manipulation, Conditional Logic, Set Operations, and Brute Force Search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function g that generates a list of integers based on certain conditions, and the function f checks if the generated list meets specific criteria."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves generating a list of integers with specific properties and then checking if the generated list satisfies certain conditions. The student needs to understand list manipulation, arithmetic operations, and conditional statements to solve this puzzle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, List operations",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
        "solution_func": "def g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f(x) that checks if a given string x is equal to a predefined list of characters s up to a certain length n. The solution function g() generates a string by joining characters from the predefined list s up to length n and returns it."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle is focused on string manipulation and list comprehension in Python. It tests the student's understanding of string comparison and list iteration.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, conditional logic, and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])",
        "solution_func": "def g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that checks certain conditions on a list of integers, and a function g that generates a list of integers based on certain calculations. The goal is to ensure that function f returns True when applied to the output of function g."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves list manipulation, condition checking, and arithmetic calculations in Python. It tests the student's understanding of list comprehension, set operations, and loop logic.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking a condition based on the sorted sum. The solution generates a list of integers and a target value to satisfy the condition in the puzzle.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
        "solution_func": "def g(t = 364928431, n = 1088):\n    return [1] * n + [t]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f(x: List[int], t=364928431, n=1088) that checks if the sum of the elements in the input list x exceeds a threshold t before reaching a certain index n. The solution function g(t, n) generates a list of n+1 elements with all values as 1 except the last element which is set to t. The puzzle is to ensure that f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and conditional statements in Python. It also tests the student's ability to write functions with default arguments and use of assert statements for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, s1='t', s2='qu', count1=86, count2=83) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 't', s2 = 'qu', count1 = 86, count2 = 83):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, s1='t', s2='qu', count1=86, count2=83) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])",
        "solution_func": "def g(s1 = 't', s2 = 'qu', count1 = 86, count2 = 83):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that checks if a given string meets certain conditions, and a function g that generates a string based on input parameters. The goal is to ensure that f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle tests the students' understanding of string manipulation, function parameters, and condition checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, List Comprehension",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))",
        "solution_func": "def g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand how to check if a list of substrings can be found in a given string in a specific order, and then generate a new string based on the substrings provided."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, string manipulation, and understanding of how to check for substrings in a given string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))",
        "solution_func": "def g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires defining a function f(s: str, substrings=['foo', 'bar', 'baz']) that checks if all substrings and their reverse are present in the input string s. The solution function g(substrings=['foo', 'bar', 'baz']) constructs a string by concatenating the substrings and their reverse. The assertion checks if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, list comprehension, and checking conditions. It can be used to teach students about string operations, list manipulation, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and list operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1",
        "solution_func": "def g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the second largest string in a list of strings and checking if it exists in the list."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting and ordering topics.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1",
        "solution_func": "def g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding a string in a list of strings that is the second smallest when sorted in ascending order, and then checking if the reverse of that string is present in the list."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, list sorting, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
        "solution_func": "def g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand string slicing in Python and how to compare two strings."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given string matches a specific substring of a target string. The solution function g returns a substring of the target string based on the provided length. The assertion at the end checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Brute Force Search",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count",
        "solution_func": "def g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that checks if a given substring appears a certain number of times in a given string, and a function g that iterates through all possible substrings of the string to find one that meets the count criteria."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and understanding of function interactions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t",
        "solution_func": "def g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that checks if a given string has balanced parentheses and contains a specific substring. The solution function g generates a string with balanced parentheses based on the input string."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, counting characters, and checking for balanced parentheses. The solution function g demonstrates how to generate a string with balanced parentheses based on the input string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Brute Force Search, Set Operations, Permutations and Combinations, and Importing Modules (Itertools).",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
        "solution_func": "def g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of squares and dimensions m and n, and checks if certain conditions are met. The solution function g generates permutations of indices and checks if the conditions are satisfied."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, set operations, assertions, and permutations in Python. It also requires knowledge of indexing and tuple unpacking.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves backtracking and algorithm optimization to solve the Knight's Tour problem using Warnsdorff's heuristic. It also includes sorting and ordering to check if the tour is valid.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that checks if a given tour is valid based on certain conditions, and a function g that generates a tour using Warnsdorff's heuristic algorithm. The puzzle requires students to understand the tour validation criteria and implement the tour generation algorithm."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves a combination of algorithmic understanding and Python programming skills. It can be used to teach students about tour validation and heuristic algorithms in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Backtracking, Recursion, Brute Force Search, and Algorithm Optimization.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a game where the player and a bot take turns removing objects from heaps. The goal is for the player to make a move that leads to a winning state, while the bot tries to prevent this by making optimal moves. The player wins if all heaps are empty at the end of their turn."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves implementing a game strategy where the player needs to make moves to reach a winning state while the bot tries to prevent this. The solution function g() implements the player's strategy to win the game by making optimal moves.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if a list of probabilities sums up to 1 and if the maximum difference between any two probabilities is less than a threshold.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06",
        "solution_func": "def g():\n    return [1 / 3] * 3",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f(probs: List[float]) that checks if the sum of probabilities in a list is approximately equal to 1 and if the maximum difference between any two probabilities in the list is less than a small threshold. The solution function g() returns a list of three equal probabilities that sum up to 1."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, mathematical calculations, and assertions in Python. It also tests the student's ability to implement a function that checks conditions on a list of probabilities.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "Graph Theory (paths, edges, vertices)",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)",
        "solution_func": "def g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves checking if a given list of edges forms a triangle in a graph based on certain conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of graph theory concepts and list manipulation in Python to check if a given set of edges forms a triangle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves graph theory (paths, edges, vertices) and backtracking.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True",
        "solution_func": "def g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves checking if a given path is valid based on a list of edges, and finding a path that covers all nodes in the graph represented by the edges."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of graph traversal and path validation in Python. It also involves using dictionaries to store paths in a graph.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "Graph Theory (paths, edges, vertices)",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0",
        "solution_func": "def g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves checking if a given path in a graph is valid based on a set of edges. The goal is to determine if the path is of even length."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given path in a graph is valid based on a set of edges, and the function g generates paths in the graph. The solution g generates paths in the graph and ensures that the path is of even length. The assert statement at the end checks if the solution g is correct for the puzzle f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves graph theory, backtracking, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])",
        "solution_func": "def g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves checking if a given path in a graph is valid based on a set of edges. The function f checks if the path is valid, and the function g generates the path based on the edges provided."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves graph traversal and checking if a path is valid in the graph. It requires understanding of lists, dictionaries, loops, and conditional statements in Python. This puzzle can be used to teach Python programming concepts related to graph traversal and validation of paths in a graph.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic to solve a challenge related to matching characters in a ring structure.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower",
        "solution_func": "def g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves two functions, f and g, where f defines an algorithmic challenge related to manipulating a given ring string, and g provides a solution to the challenge by finding a specific position in the ring string. The solution is validated by asserting that f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of string manipulation, dictionaries, loops, and conditional statements in Python. It challenges students to analyze and manipulate the given ring string to find the correct position based on certain conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as recursion, number theory (gcd), set operations, and backtracking.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True",
        "solution_func": "def g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining two functions in Python, f and g, where f defines an algorithmic challenge related to number theory and list manipulation, and g provides a solution to the challenge. The goal is to ensure that the solution g satisfies the conditions specified in the challenge function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves concepts of number theory, list comprehension, recursion, and algorithmic thinking. It requires understanding of functions, loops, sets, and assertions in Python. The challenge function f checks for certain conditions in a list of numbers, while the solution function g generates a list of numbers that satisfy those conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, recursion, and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)",
        "solution_func": "def g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of indices and a starting value a0, and checks if certain conditions are met. The solution function g generates a list of indices based on a starting value, ensuring that the conditions in f are satisfied."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding the algorithmic challenge of generating a list of indices based on a starting value and checking if specific conditions are met. It requires knowledge of loops, conditionals, and set operations in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))",
        "solution_func": "def g(n = 9):\n    return [-1, -1, 2] * (n // 3)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that takes a list of integers and a number n as input. The function checks if the length of the list is equal to n and if a specific condition is met for each element in the list. The student also needs to implement a function g that generates a list based on the input n. The puzzle is to ensure that the function f returns True when applied to the output of function g."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, indexing, and list comprehension in Python. It also requires the student to grasp the concept of function composition and assertion testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Binary Operations (bitwise shifting, AND, OR) and Algorithm Optimization.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))",
        "solution_func": "def g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves implementing a function f that checks if a specific condition is met for a list of integers, and then implementing a solution function g that uses Gaussian elimination to decode vectors and solve the condition."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations, Gaussian elimination, and checking if a condition is met for a list of integers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise operations, brute force search, randomization, and probability and statistics.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4",
        "solution_func": "def g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that checks if a certain condition is met based on a list of integers and a set of vectors. The solution function g uses a brute force approach to find a solution that satisfies the condition set by f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations, list comprehension, random number generation, and a brute force approach to find a solution. It requires understanding of bitwise manipulation and algorithmic thinking.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and number theory (finding the greatest common divisor).",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the greatest common divisor (GCD) of two numbers and checking if it satisfies certain conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the GCD of two numbers using the Euclidean algorithm and checking if the result meets specific criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and recursion.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound",
        "solution_func": "def g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the greatest common divisor (GCD) of a list of numbers and checking if the GCD is greater than or equal to a specified lower bound."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the greatest common divisor (GCD) of a list of numbers using a specific algorithm and checking if the result meets a certain condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and number theory.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)",
        "solution_func": "def g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the greatest common divisor (GCD) of two numbers and checking if a given number satisfies certain conditions based on the GCD."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the greatest common divisor (GCD) of two numbers and using it to check if a given number meets specific criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, recursion, and number theory.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound",
        "solution_func": "def g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f(n) that checks if a given number n satisfies certain conditions based on a list of numbers and an upper bound. The solution function g() calculates a value based on the list of numbers and an upper bound, and the puzzle is solved if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number satisfies certain conditions based on a list of numbers and an upper bound. The solution function calculates a value based on the list of numbers and an upper bound, and the puzzle is solved if the conditions are met.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, set operations, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n",
        "solution_func": "def g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining two functions, f and g, where f checks if the sum of squares of numbers in a list is equal to a given number, and g generates a list of numbers whose sum of squares equals the given number."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves concepts of list comprehension, dictionary comprehension, and iteration. It also requires understanding of mathematical operations like squaring numbers and checking for sums of squares.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))",
        "solution_func": "def g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to implement a function f that takes a list of integers and a parameter k, and checks if certain conditions are met based on the elements of the list. The solution function g generates a list of integers that satisfies the conditions of function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves working with lists, loops, and conditions in Python. It also requires understanding of list manipulation and mathematical operations. The solution function g generates a list that satisfies the conditions of function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and number theory, specifically the use of the pow function and checking if a certain condition holds true. It also involves understanding modular arithmetic and the Fermat's little theorem. The solution involves finding a specific number that satisfies the condition in the puzzle.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int) -> bool:\n    return pow(2, n, n) == 3",
        "solution_func": "def g():\n    return 4700063497",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f(n) that checks if 2^n modulo n is equal to 3. The solution function g() returns a specific number, and the assertion checks if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding the pow() function in Python, modulo operation, and how to write a solution function that satisfies the condition of f(g()) == True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Probability and Statistics, Importing Modules (Itertools, etc.)",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len",
        "solution_func": "def g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves generating random numbers and calculating probabilities to determine if a certain condition is met. The solution iterates through different values to find the best one that satisfies the condition."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding probability calculations and iterating through values to find the best solution. It requires knowledge of random number generation and probability concepts in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves probability and statistics concepts along with mathematical operations. It also includes iterative calculations and comparison operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06",
        "solution_func": "def g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves calculating probabilities and checking if the calculated probability matches a target probability within a certain threshold."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of probability calculations and loops in Python. It involves calculating probabilities based on given conditions and checking for a specific target probability.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b",
        "solution_func": "def g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand string manipulation in Python. They need to determine if adding a specific string to another string results in a given target string."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if adding a specific string to another string results in a target string. The solution function g extracts a substring from the target string based on the lengths of the input strings provided. The assert statement checks if the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, n=1000) -> bool:\n    return len(s) == n",
        "solution_func": "def g(n = 1000):\n    return 'a' * n",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function that generates a string of 'a' characters of a specified length, and another function that checks if the length of the generated string is equal to a given number."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of function definitions, string manipulation, and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and exception handling.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target",
        "solution_func": "def g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of integers and two strings as input, and checks if a specific slicing operation on one of the strings matches the target string. The solution function g uses itertools.product to generate all possible combinations of indices for slicing the string and returns the indices that satisfy the condition in function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding slicing operations in Python strings and using itertools.product to generate combinations of indices. It also requires handling exceptions for invalid index values. This puzzle can be used to teach Python to master's students in CS as it covers string manipulation, list operations, and exception handling.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and indexing operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index",
        "solution_func": "def g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand how to use the index method on strings in Python and how to compare the result to a given index value."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves using the index method to find the position of a substring within a larger string and comparing it to a specified index value. The solution function g returns a substring starting from a given index in the big_str. The assert statement checks if the puzzle function f returns True when applied to the solution function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index",
        "solution_func": "def g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand how the index method works in Python and how to manipulate strings using ord and chr functions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves finding the index of a substring in a given string and then generating a new string based on certain conditions. The solution uses a while loop to find a character not present in the substring and then creates a new string using that character and the given substring.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)",
        "solution_func": "def g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function g that iterates over a string 'a' and checks if a substring of length 'length' is present in string 'b'. The function f checks if the output of function g satisfies certain conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and conditional checks, which are fundamental concepts in Python programming. It also requires understanding of function parameters and return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations, Permutations and Combinations",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))",
        "solution_func": "def g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that generates all possible substrings of a given string and checks if a list of substrings satisfies certain conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves working with string manipulation, sets, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length",
        "solution_func": "def g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the functions f and g, and use them to check if the assertion f(g()) == True holds true."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string meets certain conditions based on the count of a substring and the length of the string. The solution function g generates a string based on the provided parameters, and the puzzle function f checks if the conditions are satisfied.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, List Operations",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string",
        "solution_func": "def g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to implement a function that splits a string into parts and then joins them back together to form the original string."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, slicing, and joining operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))",
        "solution_func": "def g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that checks if a list of strings can be joined using a separator to form a specific string, and that none of the strings in the list contain the separator. The solution function g splits a given string using a specified separator and returns a list of strings."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, list operations, and understanding of the join and split methods in Python. It also tests the student's ability to write functions that meet specific criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to List Operations, Set Operations, and Mathematical Operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups",
        "solution_func": "def g(dups = 23476):\n    return [1] * (dups + 1)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function that checks for duplicates in a list of integers. The solution function creates a list with a specified number of duplicates and returns it."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, set operations, and function arguments in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and searching for a specific element in a list. It also includes the concept of indexing and comparison.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target",
        "solution_func": "def g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to implement a function that finds the index of a target element in a list and then checks if the element at that index is equal to the target."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list indexing and the index method in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, indexing, and comparison operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0",
        "solution_func": "def g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the index of a target value in a list and checking if the value at that index is equal to the target value and the index is less than 0."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list indexing, comparison, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, iteration, exception handling, and assertion testing.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target",
        "solution_func": "def g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of integers and checks if a specific sublist matches a target sublist. The solution function g iterates through all possible combinations of indices to find the sublist that matches the target sublist."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves list slicing and iteration through all possible combinations of indices. It tests the student's understanding of list operations and iteration in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=93252338) -> bool:\n    return -x == a",
        "solution_func": "def g(a = 93252338):\n    return - a",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand function calls and parameter passing in Python. The student needs to determine the value of 'x' that makes the assertion true."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves a function f that checks if the negative of the input parameter is equal to a given value. The function g returns the negative of a given value. The student needs to understand how to pass parameters and call functions to make the assertion true.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b",
        "solution_func": "def g(a = 1073258, b = 72352549):\n    return b - a",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the concept of function parameters and return values in Python. The student needs to determine the correct value to return from function g in order to satisfy the condition in function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves defining two functions, f and g, where f checks if the sum of a parameter and a default value equals another default value. The student needs to find the correct value to return from function g to make the assertion in the puzzle pass.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b",
        "solution_func": "def g(a = 9688203125538303, b = -293093369321912):\n    return a + b",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand function parameters and return values in Python. The student needs to determine if the function g() correctly solves the challenge defined in function f()."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding function parameters, return values, and how to check if a solution function correctly solves a challenge function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b",
        "solution_func": "def g(a = -8783800228130606, b = -508993556991975):\n    return a - b",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand default function arguments and function composition in Python."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves defining a function f with default arguments and checking if the function g, which returns the difference between the default arguments, satisfies the condition in f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a",
        "solution_func": "def g(a = -141336, b = 72):\n    return a // b",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to determine if a given mathematical expression is true based on the values of a and b provided in the functions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how the mathematical expression in function f is evaluated based on the values of a and b. The solution function g should return the result of a divided by b.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a",
        "solution_func": "def g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f(n) that checks if a specific mathematical condition is met, and a function g() that iterates through a range of values to find a solution that satisfies the condition in f(n). The assert statement at the end verifies if the solution returned by g() satisfies the condition in f(n)."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves basic arithmetic operations and iteration to find a solution that satisfies a given condition. It can be used to teach students about function definitions, mathematical operations, and iteration in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a",
        "solution_func": "def g(a = -3411193412414137, b = -9070455318026063):\n    return a * b",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the concept of function composition and parameter passing in Python. The student needs to determine the correct values of 'a' and 'b' such that the function 'g' returns the correct result for function 'f'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how function composition works in Python and how default parameter values are used. The student needs to find the correct values of 'a' and 'b' such that the function 'g' returns the correct result for function 'f'.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a",
        "solution_func": "def g(a = 2617350631613713636):\n    return int(a ** 0.5)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the square root of a given number and checking if the square of the result is equal to the given number."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate square roots in Python and using them to verify a condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)",
        "solution_func": "def g(a = 2732656229):\n    return a ** 0.5",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "Given a function f(x) that checks if the absolute difference between x squared and a is less than 10^(-3), and a function g() that returns the square root of a, the puzzle requires finding the value of a such that f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding function composition and mathematical operations in Python, specifically squaring and square rooting. It also tests the understanding of function parameters and return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0",
        "solution_func": "def g(a = 1363713245):\n    return -a ** 0.5",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding a value of x that satisfies a specific condition involving a given constant 'a'. The solution function g returns the negative square root of the constant 'a'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding mathematical operations in Python, specifically exponentiation and comparison. It also requires knowledge of function definitions and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'",
        "solution_func": "def g():\n    return \"world\"",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires defining a function f(s: str) that checks if the input string concatenated with 'Hello ' is equal to 'Hello world'. The solution function g() returns the string 'world' and the assertion checks if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle is a simple string manipulation and comparison task that tests the student's understanding of string concatenation and equality comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'",
        "solution_func": "def g():\n    return \"world\"[::-1]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to reverse the string 'world' and concatenate it with 'Hello' to check if it equals 'Hello world'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of string slicing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3",
        "solution_func": "def g():\n    return [1, 2]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function g() that returns a list of two integers, and the function f(x) checks if the list has exactly two elements and their sum is equal to 3."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle is a simple one that tests the student's understanding of list manipulation and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))",
        "solution_func": "def g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to generate a list of 1000 strings where each string contains 'a' repeated (i+2) times followed by a single 'b'. The puzzle function f checks if the list meets two conditions: all strings are unique and each string has more 'a's than 'b's."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves list comprehension, string manipulation, and understanding of set operations and all() function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(s.lower().split())\n    return s == s[::-1]\ndef g():\n    return \"A man a plan a canal Panama\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(s.lower().split())\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"A man a plan a canal Panama\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome after removing spaces and converting all characters to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to write a function that checks if a given string is a palindrome after removing spaces and converting all characters to lowercase. The provided solution function should return a specific string that is a palindrome after the required modifications.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in ascending order using a specific algorithm.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is sorted in non-decreasing order, and a function g that returns a sorted list of integers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and indexing in Python. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime or not using a brute force search algorithm.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a function g that returns a number, and the function f checks if the number is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to check if a given number is prime.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    clean_str = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_str == clean_str[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation and Conditional Logic are used in this puzzle.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    clean_str = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_str == clean_str[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function to check if a given string is a palindrome after removing non-alphanumeric characters and converting all characters to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string is a palindrome after removing non-alphanumeric characters and converting all characters to lowercase. The solution function g() returns a specific string that is a palindrome after cleaning it up.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking for duplicate elements in a list of integers.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and returns True if there are duplicate elements in the list, and a function g that returns a list with duplicate elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation and the use of set to check for duplicates in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(x: List[int], n=10) -> bool:\n    return x[-1] == x[-2] + x[-3]\n\ndef g(n=10):\n    fib = [0, 1]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    \n    return fib\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Fibonacci sequence generation and checking a specific condition on the generated sequence.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(x: List[int], n=10) -> bool:\n    return x[-1] == x[-2] + x[-3]",
        "solution_func": "def g(n=10):\n    fib = [0, 1]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    \n    return fib",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that generates a list of Fibonacci numbers up to a given limit, and then checks if the last three numbers in the list satisfy a specific condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating Fibonacci numbers and checking a specific condition on the last three numbers in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    s = ''.join(random.choices(letters, k=10))\n    return s + s[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.), Probability and Statistics",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    s = ''.join(random.choices(letters, k=10))\n    return s + s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, the puzzle requires generating a random string and its reverse, and checking if the combined string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, generating random strings, and checking for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(words: List[str]) -> bool:\n    return all(sorted(word) == sorted(words[0]) for word in words)\ndef g():\n    import random\n    words = ['listen', 'silent', 'enlist', 'tinsel', 'inlets']\n    random.shuffle(words)\n    return words\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting and ordering topics.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(words: List[str]) -> bool:\n    return all(sorted(word) == sorted(words[0]) for word in words)",
        "solution_func": "def g():\n    import random\n    words = ['listen', 'silent', 'enlist', 'tinsel', 'inlets']\n    random.shuffle(words)\n    return words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f that takes a list of strings and checks if all the strings are anagrams of each other. The solution function g generates a list of strings, shuffles them randomly, and returns the shuffled list. The assertion checks if f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of strings are anagrams of each other, which is a good exercise in understanding list comprehension and string manipulation in Python. The solution function demonstrates the use of the random module and list shuffling. Overall, this puzzle can be used to teach Python programming concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(word == word[::-1] for word in words)\n\ndef g():\n    return [\"radar\", \"level\", \"rotor\", \"deified\", \"civic\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation by checking if each word in a list is a palindrome.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(word == word[::-1] for word in words)",
        "solution_func": "def g():\n    return [\"radar\", \"level\", \"rotor\", \"deified\", \"civic\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list of words are palindromes (words that are the same forwards and backwards). The function f() returns True if all words in the list are palindromes. The function g() returns a list of palindrome words."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in checking for palindromes in a list of words. It can be used to teach students about list comprehension and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int], target_sum=10) -> bool:\n    seen = set()\n    for num in numbers:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum=10):\n    return [3, 7]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Brute Force Search, and Conditional Logic.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int], target_sum=10) -> bool:\n    seen = set()\n    for num in numbers:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [3, 7]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the function f checks if there are two numbers in the list that add up to a target sum. The function g returns a list of numbers. The puzzle is to find a list of numbers that add up to the target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use a set to efficiently check for the presence of complementary numbers in a list. The solution function g returns a list that satisfies the condition of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(input_str: str) -> bool:\n    return input_str == input_str[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(input_str: str) -> bool:\n    return input_str == input_str[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome (reads the same forwards and backwards) by comparing the string to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks if a string is a palindrome and providing a solution that returns a specific palindrome string to test the function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int, factorial=120) -> bool:\n    def calculate_factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * calculate_factorial(num - 1)\n    \n    return calculate_factorial(n) == factorial\n\ndef g(factorial=120):\n    return 5\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Recursion, and Conditional Logic.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int, factorial=120) -> bool:\n    def calculate_factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * calculate_factorial(num - 1)\n    \n    return calculate_factorial(n) == factorial",
        "solution_func": "def g(factorial=120):\n    return 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that calculates the factorial of a given number and compares it to a predefined factorial value. The solution function g returns a specific number, and the puzzle checks if the factorial of that number matches the predefined factorial value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple factorial calculation and comparison, which can be a good introductory exercise for students learning Python. The solution function g always returns 5, which makes it easy for students to understand and test the puzzle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return s.lower() == s.lower()[::-1] and any(char.lower() in vowels for char in s)\n\ndef g():\n    return \"Able was I ere I saw Elba\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return s.lower() == s.lower()[::-1] and any(char.lower() in vowels for char in s)",
        "solution_func": "def g():\n    return \"Able was I ere I saw Elba\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that checks if a given string is a palindrome and contains at least one vowel. The solution function returns a specific palindrome string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, checking for palindromes, and checking for the presence of vowels in a string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, key='name', value='Alice') -> bool:\n    return data.get(key) == value and len(data) > 1\ndef g(key='name', value='Alice'):\n    return {key: value, 'age': 30, 'city': 'New York'}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic to check if a certain key-value pair exists in the dictionary and if the dictionary has more than one key-value pair.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: dict, key='name', value='Alice') -> bool:\n    return data.get(key) == value and len(data) > 1",
        "solution_func": "def g(key='name', value='Alice'):\n    return {key: value, 'age': 30, 'city': 'New York'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary, a key, and a value as input and returns True if the value associated with the key in the dictionary is equal to the given value and the dictionary has more than one key-value pair. The solution function g creates a dictionary with specific key-value pairs and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, checking key-value pairs, and understanding function assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list, threshold=5) -> bool:\n    return all(num % 2 == 0 for num in numbers) and sum(numbers) > threshold\ndef g(threshold=5):\n    return [2*i for i in range(1, threshold+4)]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list, threshold=5) -> bool:\n    return all(num % 2 == 0 for num in numbers) and sum(numbers) > threshold",
        "solution_func": "def g(threshold=5):\n    return [2*i for i in range(1, threshold+4)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are even and if the sum of the numbers is greater than a given threshold. The solution function g generates a list of even numbers based on a given threshold, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, checking for even numbers, summing a list, and function assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]\n\ndef g(length=6):\n    import string\n    import random\n    letters = string.ascii_lowercase\n    palindrome = ''.join(random.choice(letters) for _ in range(length))\n    return palindrome + palindrome[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Recursion",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]",
        "solution_func": "def g(length=6):\n    import string\n    import random\n    letters = string.ascii_lowercase\n    palindrome = ''.join(random.choice(letters) for _ in range(length))\n    return palindrome + palindrome[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome after removing spaces and converting to lowercase, and a function g(length) that generates a random palindrome string of a given length, the puzzle requires finding a palindrome string generated by g that satisfies the palindrome check in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, generating random strings, and checking for palindromes in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(primes: List[int], lower_bound=10, upper_bound=50) -> bool:\n    return all(p > 1 for p in primes) and all(all(p % i != 0 for i in range(2, p)) for p in primes) and all(lower_bound <= p <= upper_bound for p in primes)\ndef g(lower_bound=10, upper_bound=50):\n    primes = []\n    for num in range(lower_bound, upper_bound + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    return primes\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers within a given range using a brute force approach. It also includes list comprehension and assertion testing.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(primes: List[int], lower_bound=10, upper_bound=50) -> bool:\n    return all(p > 1 for p in primes) and all(all(p % i != 0 for i in range(2, p)) for p in primes) and all(lower_bound <= p <= upper_bound for p in primes)",
        "solution_func": "def g(lower_bound=10, upper_bound=50):\n    primes = []\n    for num in range(lower_bound, upper_bound + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers are prime numbers within a specified range, and a function g that generates a list of prime numbers within a given range. The solution function g generates prime numbers and the puzzle function f validates if the generated numbers are prime within the specified range."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and range checking in Python. The solution function g generates prime numbers using a basic prime number checking algorithm, and the puzzle function f validates the generated list of prime numbers within a specified range.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(fibonacci: List[int], limit=100) -> bool:\n    return all(fibonacci[i] == fibonacci[i-1] + fibonacci[i-2] for i in range(2, len(fibonacci))) and all(f <= limit for f in fibonacci)\ndef g(limit=100):\n    fibonacci = [0, 1]\n    while fibonacci[-1] + fibonacci[-2] <= limit:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Recursion, Mathematical Operations, and Conditional Logic.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(fibonacci: List[int], limit=100) -> bool:\n    return all(fibonacci[i] == fibonacci[i-1] + fibonacci[i-2] for i in range(2, len(fibonacci))) and all(f <= limit for f in fibonacci)",
        "solution_func": "def g(limit=100):\n    fibonacci = [0, 1]\n    while fibonacci[-1] + fibonacci[-2] <= limit:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of Fibonacci numbers up to a given limit and then check if the generated list satisfies the Fibonacci sequence property and if all numbers in the list are within the specified limit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating Fibonacci numbers up to a limit and then checking if the generated list satisfies the Fibonacci sequence property and if all numbers are within the specified limit.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nimport random\ndef f(numbers: List[int], lower_bound=1, upper_bound=10, num_elements=5) -> bool:\n    return len(numbers) == len(set(numbers)) and all(lower_bound <= n <= upper_bound for n in numbers) and len(numbers) == num_elements\ndef g(lower_bound=1, upper_bound=10, num_elements=5):\n    return random.sample(range(lower_bound, upper_bound + 1), num_elements)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating a list of random numbers within a specified range and length, and then checking if the list contains unique elements within the specified bounds.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\nimport random\ndef f(numbers: List[int], lower_bound=1, upper_bound=10, num_elements=5) -> bool:\n    return len(numbers) == len(set(numbers)) and all(lower_bound <= n <= upper_bound for n in numbers) and len(numbers) == num_elements",
        "solution_func": "def g(lower_bound=1, upper_bound=10, num_elements=5):\n    return random.sample(range(lower_bound, upper_bound + 1), num_elements)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random numbers within a specified range and check if the list meets certain conditions such as having unique elements, elements within a specified range, and a specific number of elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random numbers and checking if the list satisfies certain conditions using the provided function f() and solution function g().",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    s = ''.join(random.choice(letters) for _ in range(5))\n    return s + s[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.), Pattern Recognition",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    s = ''.join(random.choice(letters) for _ in range(5))\n    return s + s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s) that checks if a given string is a palindrome, and a function g() that generates a random string and its reverse. The puzzle requires g() to generate a string that is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, palindrome checking, and random generation in Python. It is a suitable puzzle to teach Python programming to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    seen = set()\n    for num in nums:\n        if 10 - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g() -> List[int]:\n    import random\n    return random.sample(range(1, 10), 5)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and conditional logic to check if a certain condition is met within a list of numbers.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    seen = set()\n    for num in nums:\n        if 10 - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g() -> List[int]:\n    import random\n    return random.sample(range(1, 10), 5)",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if there are two numbers in the list that add up to 10. The function g generates a list of 5 random integers between 1 and 10. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding sets, iteration, and random number generation in Python. It also requires understanding how to check if a specific condition is met in a list of integers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all([matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0]))])\n\ndef g() -> List[List[int]]:\n    import random\n    n = 4\n    matrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            matrix[j][i] = matrix[i][j]\n    return matrix\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. The solution generates a random symmetric matrix and checks if the function f correctly identifies it as symmetric.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all([matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix[0]))])",
        "solution_func": "def g() -> List[List[int]]:\n    import random\n    n = 4\n    matrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            matrix[j][i] = matrix[i][j]\n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given square matrix is symmetric along its main diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to generate a random square matrix and then check if it is symmetric along its main diagonal.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(arr: List[int], diff=5) -> bool:\n    if len(arr) < 2:\n        return False\n    return all(arr[i + 1] - arr[i] == diff for i in range(len(arr) - 1))\n\ndef g(start=10, end=50, diff=5):\n    return [start + i * diff for i in range((end - start) // diff + 1)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation to generate a list with a specific difference between elements. It also includes conditional logic to check if the generated list satisfies the condition specified in the function f.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(arr: List[int], diff=5) -> bool:\n    if len(arr) < 2:\n        return False\n    return all(arr[i + 1] - arr[i] == diff for i in range(len(arr) - 1))",
        "solution_func": "def g(start=10, end=50, diff=5):\n    return [start + i * diff for i in range((end - start) // diff + 1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the elements in a list are in arithmetic progression with a given difference, and a function g that generates a list of numbers in arithmetic progression. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, arithmetic progression, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, template='racecar') -> bool:\n    return s == s[::-1]\n\ndef g(template='racecar'):\n    return template + template[-2::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, template='racecar') -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(template='racecar'):\n    return template + template[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a template string 'racecar', function f checks if the input string is a palindrome. Function g generates a palindrome string based on the template. The puzzle tests whether function g generates a palindrome string that satisfies function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and checking for palindromes. It is a suitable puzzle to teach Python programming concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, char='a', count=3) -> bool:\n    return s.count(char) >= count\n\ndef g(char='a', count=3):\n    return char * count + 'bcd' + char\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation, Conditional Logic, and Function Calls.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, char='a', count=3) -> bool:\n    return s.count(char) >= count",
        "solution_func": "def g(char='a', count=3):\n    return char * count + 'bcd' + char",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string contains a specified character a for a certain count, and another function g that generates a string with the specified character repeated a certain number of times followed by 'bcd' and the character again. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, function parameters, and function return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: float, threshold=50.0) -> bool:\n    return num ** 2 > threshold\n\ndef g(threshold=50.0):\n    return threshold + 1\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: float, threshold=50.0) -> bool:\n    return num ** 2 > threshold",
        "solution_func": "def g(threshold=50.0):\n    return threshold + 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the square of a given number is greater than a threshold, and g returns the threshold plus 1. The puzzle requires g to be implemented in a way that satisfies the condition f(g()) == True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple comparison operation and requires understanding of function definitions and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(num=17):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    prime = num + 1\n    while not is_prime(prime):\n        prime += 1\n    return prime\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(num=17):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    prime = num + 1\n    while not is_prime(prime):\n        prime += 1\n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num) which checks if a given number is prime, and g(num) which finds the next prime number after the input number. The goal is to ensure that the output of g is a prime number according to the criteria defined in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to find the next prime number. It tests the student's knowledge of loops, conditionals, and functions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\n\ndef g(target_sum=10):\n    return [1, target_sum - 1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=10):\n    return [1, target_sum - 1]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if there are two numbers in the list that add up to a target sum. The function g returns a list with two numbers that add up to the target sum. The puzzle is to determine if function g provides a valid solution for function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, indexing, and checking for a specific condition in a list. It also requires understanding how the functions interact to solve the challenge.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], substring='python') -> bool:\n    return any(substring in s for s in strings)\n\ndef g(substring='python'):\n    return ['Hello, I love programming in python!', 'Python is a great language', 'I enjoy using Python']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], substring='python') -> bool:\n    return any(substring in s for s in strings)",
        "solution_func": "def g(substring='python'):\n    return ['Hello, I love programming in python!', 'Python is a great language', 'I enjoy using Python']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given substring is present in any of the strings in a list. The solution function g returns a list of strings containing the specified substring 'python', and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list comprehension and string manipulation in Python. It can be used to teach students how to check for a substring in a list of strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(lst: list) -> bool:\n    return max(lst) > 50\n\ndef g():\n    random_list = [random.randint(1, 100) for _ in range(5)]\n    return random_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating a random list of numbers and checking if the maximum number in the list is greater than 50.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int) -> bool:\n    return len(str(i + 1000)) > len(str(i + 1001))\ndef g():\n    return -1001\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True"
        ],
        "problem_func": "import random\n\ndef f(lst: list) -> bool:\n    return max(lst) > 50",
        "solution_func": "def g():\n    random_list = [random.randint(1, 100) for _ in range(5)]\n    return random_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(lst) that checks if the maximum value in a list is greater than 50. Another function g() generates a random list of 5 integers between 1 and 100, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, generating random numbers, and understanding how to use functions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int) -> bool:\n    return len(str(i + 1000)) > len(str(i + 1001))\ndef g():\n    return -1001\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    clean_s = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_s == clean_s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    clean_s = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_s == clean_s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function to check if a given string is a palindrome after removing non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a string is a palindrome after removing non-alphanumeric characters and ignoring case. The solution function returns a specific string that is a palindrome after cleaning it up.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    pattern = [1, 2, 3]\n    idx = 0\n    for num in lst:\n        if num == pattern[idx]:\n            idx += 1\n            if idx == len(pattern):\n                return True\n    return False\n\ndef g():\n    return [1, 5, 2, 3, 7, 8, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Conditional Logic and List Manipulation.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int]) -> bool:\n    pattern = [1, 2, 3]\n    idx = 0\n    for num in lst:\n        if num == pattern[idx]:\n            idx += 1\n            if idx == len(pattern):\n                return True\n    return False",
        "solution_func": "def g():\n    return [1, 5, 2, 3, 7, 8, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f(lst: List[int]) that checks if a given list contains a specific pattern [1, 2, 3]. The solution function g() returns a list that contains the pattern [1, 2, 3]."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for a specific pattern in a list, which can be a good exercise for understanding list traversal and pattern matching in Python. It also involves understanding how to write functions that return boolean values based on certain conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: bool, threshold=10) -> bool:\n    return len(result) == threshold and all(x in result for x in range(threshold))\ndef g(threshold=10):\n    return list(set(range(threshold)))\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and conditional logic to check if a list contains all numbers from 0 to a given threshold.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: bool, threshold=10) -> bool:\n    return len(result) == threshold and all(x in result for x in range(threshold))",
        "solution_func": "def g(threshold=10):\n    return list(set(range(threshold)))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that generates a list of unique numbers up to a specified threshold, and then checks if the list meets certain conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list generation, set operations, and boolean conditions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, n=5) -> bool:\n    return result == n * (n + 1) // 2\ndef g(n=5):\n    if n == 0:\n        return 0\n    else:\n        return n + g(n - 1)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Recursion, and Conditional Logic.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, n=5) -> bool:\n    return result == n * (n + 1) // 2",
        "solution_func": "def g(n=5):\n    if n == 0:\n        return 0\n    else:\n        return n + g(n - 1)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the result is equal to the sum of the first n natural numbers, and g recursively calculates the sum of the first n natural numbers. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding recursion and the sum of the first n natural numbers. It can be used to teach Python programming concepts like recursion and function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: bool, key='age') -> bool:\n    return result[key] >= 18\ndef g(key='age'):\n    return {'name': 'Alice', 'age': 25, 'city': 'New York'}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: bool, key='age') -> bool:\n    return result[key] >= 18",
        "solution_func": "def g(key='age'):\n    return {'name': 'Alice', 'age': 25, 'city': 'New York'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a specified key in a dictionary has a value greater than or equal to 18, and g returns a dictionary with 'age' as one of the keys. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of dictionary access and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, target_length=10) -> bool:\n    return len(s) == target_length and s.isalpha()\n\ndef g(target_length=10):\n    import random\n    return ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(target_length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, target_length=10) -> bool:\n    return len(s) == target_length and s.isalpha()",
        "solution_func": "def g(target_length=10):\n    import random\n    return ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(target_length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that generates a random string of a specified length and checks if the string is composed of alphabetic characters only."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random string of a specified length and checking if the string consists of alphabetic characters only. The solution function should generate the random string and the puzzle function should check if the generated string meets the specified criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    return [i**2 for i in range(1, 6)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in non-decreasing order. The solution generates a list of squares of numbers from 1 to 5 and checks if it is sorted.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [i**2 for i in range(1, 6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is sorted in non-decreasing order, and a function g that generates a list of squares of integers from 1 to 5. The assertion checks if f applied to the result of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the ability to define functions and apply them correctly.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return 'radar'\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return 'radar'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abc') -> bool:\n    return all(s[i:i+3] in pattern for i in range(0, len(s), 3)) and len(s) % 3 == 0\n\ndef g(pattern='abc'):\n    return ''.join([pattern[i % 3] for i in range(30)])\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Pattern Recognition",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abc') -> bool:\n    return all(s[i:i+3] in pattern for i in range(0, len(s), 3)) and len(s) % 3 == 0",
        "solution_func": "def g(pattern='abc'):\n    return ''.join([pattern[i % 3] for i in range(30)])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string follows a specific pattern of substrings, and a function g that generates a string based on a given pattern. The assertion tests if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, pattern matching, and understanding of list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name', value='Alice', age=30) -> bool:\n    return key in d and d[key] == value and 'age' in d and d['age'] == age\n\ndef g(name='Alice', age=30):\n    return {'name': name, 'age': age, 'occupation': 'Engineer'}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, conditional logic, and function calling.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='name', value='Alice', age=30) -> bool:\n    return key in d and d[key] == value and 'age' in d and d['age'] == age",
        "solution_func": "def g(name='Alice', age=30):\n    return {'name': name, 'age': age, 'occupation': 'Engineer'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary as input and checks if the dictionary contains specific key-value pairs. Another function g is defined to create a dictionary with specified key-value pairs. The puzzle tests if function f returns True when called with the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions with default arguments, working with dictionaries, and checking for specific key-value pairs in a dictionary.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='a') -> bool:\n    return key in d and isinstance(d[key], dict) and 'b' in d[key] and d[key]['b'] == 'success'\ndef g():\n    return {'a': {'b': 'success'}}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking for specific keys and values within nested dictionaries.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='a') -> bool:\n    return key in d and isinstance(d[key], dict) and 'b' in d[key] and d[key]['b'] == 'success'",
        "solution_func": "def g():\n    return {'a': {'b': 'success'}}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary as input and checks if the dictionary contains a key 'a' with a nested dictionary containing a key 'b' with the value 'success'. The function g returns a dictionary with the required structure to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the presence of specific keys and values in nested dictionaries within a given dictionary. The solution function g returns a dictionary that meets the criteria set by function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='Python') -> bool:\n    return key in d and d[key] == 3.8\ndef g(key='Python'):\n    return {'Python': 3.8, 'Java': 11.0, 'C++': 17.3}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic to check if a key exists in the dictionary and if its corresponding value is equal to a specific value.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='Python') -> bool:\n    return key in d and d[key] == 3.8",
        "solution_func": "def g(key='Python'):\n    return {'Python': 3.8, 'Java': 11.0, 'C++': 17.3}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function f(d: dict, key='Python') that checks if a specific key exists in a dictionary and its corresponding value is 3.8. The solution function g(key='Python') returns a dictionary with key-value pairs. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, checking key existence and value comparison. It tests the students' understanding of dictionary operations and function implementation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s: str = \"radar\") -> str:\n    return s + s[-2::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s: str = \"radar\") -> str:\n    return s + s[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, write a function g(s) that creates a palindrome by appending the reverse of the string excluding the last character. The assertion checks if g() produces a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and checking for palindromes. It requires students to create a function that appends the reverse of a string excluding the last character to make a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(strings: List[str]) -> bool:\n    return len(set(strings)) == len(strings)\n\ndef g(strings: List[str] = ['apple', 'banana', 'cherry', 'apple', 'date']) -> List[str]:\n    return list(set(strings))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Set Operations and Conditional Logic.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(strings: List[str]) -> bool:\n    return len(set(strings)) == len(strings)",
        "solution_func": "def g(strings: List[str] = ['apple', 'banana', 'cherry', 'apple', 'date']) -> List[str]:\n    return list(set(strings))",
        "quality": [
            null
        ],
        "description": [
            "Given a list of strings, the puzzle function f checks if all strings in the list are unique. The solution function g removes duplicates from the list of strings."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of sets and list operations in Python. The solution function g uses set to remove duplicates from the list of strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return s == s[::-1]\n\ndef g(s=\"A man, a plan, a canal, Panama!\"):\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation and Conditional Logic are used in the problem f and solution g.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return s == s[::-1]",
        "solution_func": "def g(s=\"A man, a plan, a canal, Panama!\"):\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome after removing non-alphanumeric characters and converting all characters to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to write a function that checks if a string is a palindrome after removing non-alphanumeric characters and converting all characters to lowercase. The provided solution function simply returns a specific string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(primes: List[int], limit=30) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return all([is_prime(num) for num in primes]) and all([num <= limit for num in primes])\n\ndef g(limit=30) -> List[int]:\n    primes = []\n    is_prime = [True] * (limit + 1)\n    p = 2\n    while p**2 <= limit:\n        if is_prime[p]:\n            for i in range(p**2, limit + 1, p):\n                is_prime[i] = False\n        p += 1\n\n    for p in range(2, limit + 1):\n        if is_prime[p]:\n            primes.append(p)\n\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and generating a list of prime numbers within a given limit. It also includes the concepts of list comprehension, loops, and boolean operations.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(primes: List[int], limit=30) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return all([is_prime(num) for num in primes]) and all([num <= limit for num in primes])",
        "solution_func": "def g(limit=30) -> List[int]:\n    primes = []\n    is_prime = [True] * (limit + 1)\n    p = 2\n    while p**2 <= limit:\n        if is_prime[p]:\n            for i in range(p**2, limit + 1, p):\n                is_prime[i] = False\n        p += 1\n\n    for p in range(2, limit + 1):\n        if is_prime[p]:\n            primes.append(p)\n\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(primes: List[int], limit=30) and g(limit=30), where f checks if a list of numbers are prime and within a limit, and g generates a list of prime numbers up to a given limit. The assertion at the end checks if the generated list of primes satisfies the conditions of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for prime numbers and generating a list of prime numbers up to a given limit. It combines concepts of prime number checking, list comprehension, and algorithmic thinking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(primes: list, limit=30) -> bool:\n    all_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return all(p in primes for p in all_primes) and all(p <= limit for p in primes)\n\ndef g(limit=30):\n    primes = []\n    for num in range(2, limit + 1):\n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and using a list comprehension to check for conditions. It also uses a mathematical operation (square root) to optimize the prime number checking algorithm.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(primes: list, limit=30) -> bool:\n    all_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    return all(p in primes for p in all_primes) and all(p <= limit for p in primes)",
        "solution_func": "def g(limit=30):\n    primes = []\n    for num in range(2, limit + 1):\n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of prime numbers generated by a function meets certain criteria defined in another function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand prime numbers, list comprehension, and boolean logic in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sorted_unique_list: list, expected=['x', 'w', 'u', 'r', 'm', 'k', 'a']) -> bool:\n    return sorted_unique_list == expected\n\ndef g(elements=['a', 'x', 'k', 'r', 'a', 'w', 'm', 'w', 'u']):\n    unique_list = list(set(elements))\n    return sorted(unique_list, reverse=True)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, list operations, and sorting and ordering.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(sorted_unique_list: list, expected=['x', 'w', 'u', 'r', 'm', 'k', 'a']) -> bool:\n    return sorted_unique_list == expected",
        "solution_func": "def g(elements=['a', 'x', 'k', 'r', 'a', 'w', 'm', 'w', 'u']):\n    unique_list = list(set(elements))\n    return sorted(unique_list, reverse=True)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to write a function that takes a list of elements, removes duplicates, sorts the elements in reverse order, and compares the result to an expected list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, set operations, sorting, and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, diff=2) -> bool:\n    return any(lst[i + 2] - lst[i + 1] == diff and lst[i + 1] - lst[i] == diff for i in range(len(lst) - 2))\ndef g(diff=2):\n    return [1, 3, 5, 7, 9, 11]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check for a specific pattern in a list of numbers.",
        "idx_generation": 4,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
            "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, diff=2) -> bool:\n    return any(lst[i + 2] - lst[i + 1] == diff and lst[i + 1] - lst[i] == diff for i in range(len(lst) - 2))",
        "solution_func": "def g(diff=2):\n    return [1, 3, 5, 7, 9, 11]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if there exists a sequence of numbers in a list where the difference between consecutive elements is equal to a given value. The solution function g generates a list of numbers with a specific difference between consecutive elements, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and checking conditions in a list. The solution function g generates a list with the specified difference between elements to satisfy the condition in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a matrix is symmetric along its diagonal, which falls under the topic of Matrix Operations.",
        "idx_generation": 4,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
            "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(matrix: list) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given matrix is symmetric along its main diagonal. The solution function g returns a specific matrix, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of matrix symmetry along the main diagonal in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1] and len(s) > 1\ndef g() -> str:\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    half_len = random.randint(1, 5)\n    palindrome_half = ''.join(random.choices(letters, k=half_len))\n    return palindrome_half + (palindrome_half[::-1])\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 4,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1] and len(s) > 1",
        "solution_func": "def g() -> str:\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    half_len = random.randint(1, 5)\n    palindrome_half = ''.join(random.choices(letters, k=half_len))\n    return palindrome_half + (palindrome_half[::-1])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s: str) that checks if a given string is a palindrome and has a length greater than 1. The function g() generates a random palindrome string and its reverse, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding palindrome strings and string manipulation in Python. It also requires knowledge of random module and list slicing. This puzzle can be used to teach Python programming concepts to master's students in CS.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    return str(num) == str(num)[::-1]\ndef g(num=12321):\n    return num\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a number is a palindrome.",
        "idx_generation": 4,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    return str(num) == str(num)[::-1]",
        "solution_func": "def g(num=12321):\n    return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given number is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(num) that checks if a given number is a palindrome by comparing it with its reverse. The function g(num) returns a default number 12321. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(lst[i] + 1 == lst[i + 1] for i in range(len(lst) - 1))\ndef g(length=5):\n    import random\n    start = random.randint(1, 10)\n    return list(range(start, start + length))\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is consecutive, and generating a list of consecutive numbers using random start and length.",
        "idx_generation": 4,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
            "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(lst[i] + 1 == lst[i + 1] for i in range(len(lst) - 1))",
        "solution_func": "def g(length=5):\n    import random\n    start = random.randint(1, 10)\n    return list(range(start, start + length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(lst) that checks if the elements in a list are consecutive integers, and a function g(length) that generates a list of consecutive integers of a specified length. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, all function, random module, and assertions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(filter(str.isalnum, s)).lower()\n    return s == s[::-1]\n\ndef g(s='A man, a plan, a canal, Panama!'):\n    import re\n    return re.sub(r'[^a-zA-Z0-9]', '', s)[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Regular Expressions",
        "idx_generation": 4,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(filter(str.isalnum, s)).lower()\n    return s == s[::-1]",
        "solution_func": "def g(s='A man, a plan, a canal, Panama!'):\n    import re\n    return re.sub(r'[^a-zA-Z0-9]', '', s)[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a string, the puzzle f(\u2026) checks if the string is a palindrome after removing non-alphanumeric characters and converting to lowercase. The solution g(\u2026) removes non-alphanumeric characters from the input string and reverses it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for palindromes and using regular expressions to remove non-alphanumeric characters. It is a good puzzle to teach string manipulation and palindrome checking in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    for a in nums:\n        for b in nums:\n            for c in nums:\n                if a**2 + b**2 == c**2:\n                    return True\n    return False\n\ndef g():\n    for a in range(1, 100):\n        for b in range(a, 100):\n            c = (a**2 + b**2) ** 0.5\n            if c.is_integer():\n                return [a, b, int(c)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 4,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    for a in nums:\n        for b in nums:\n            for c in nums:\n                if a**2 + b**2 == c**2:\n                    return True\n    return False",
        "solution_func": "def g():\n    for a in range(1, 100):\n        for b in range(a, 100):\n            c = (a**2 + b**2) ** 0.5\n            if c.is_integer():\n                return [a, b, int(c)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a Pythagorean triplet in a given list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires checking if there exists a Pythagorean triplet (a, b, c) in the list of numbers such that a^2 + b^2 = c^2.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], sequence=[1, 2, 3, 4, 5]) -> bool:\n    return all(num in sequence for num in nums) and len(nums) == len(sequence)\n\ndef g():\n    return list(range(1, 6))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers contains a specific sequence of numbers and has the same length as the sequence. The solution generates a list of numbers from 1 to 5.",
        "idx_generation": 4,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], sequence=[1, 2, 3, 4, 5]) -> bool:\n    return all(num in sequence for num in nums) and len(nums) == len(sequence)",
        "solution_func": "def g():\n    return list(range(1, 6))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and checks if all the integers are in a specific sequence [1, 2, 3, 4, 5] and if the length of the list is 5. The solution function g returns a list of integers from 1 to 5."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python to master's students in CS as it involves list manipulation, list comprehension, and boolean operations.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], target=0) -> bool:\n    total = sum(nums)\n    if total % 2 != 0:\n        return False\n\n    target_sum = total // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n\n    return dp[target_sum]\ndef g():\n    return [5, 2, 3, 8, 6, 4]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Dynamic Programming, List Operations",
        "idx_generation": 4,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], target=0) -> bool:\n    total = sum(nums)\n    if total % 2 != 0:\n        return False\n\n    target_sum = total // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n\n    for num in nums:\n        for i in range(target_sum, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n\n    return dp[target_sum]",
        "solution_func": "def g():\n    return [5, 2, 3, 8, 6, 4]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and a target value, and checks if it is possible to split the list into two sublists with equal sum. The solution function g returns a specific list of integers that satisfies this condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves dynamic programming and the concept of subset sum problem. It is a good exercise to understand dynamic programming and algorithmic thinking in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, result='') -> bool:\n    s = ''.join(filter(str.isalnum, s)).lower()\n    return s == s[::-1]\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 4,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, result='') -> bool:\n    s = ''.join(filter(str.isalnum, s)).lower()\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string is a palindrome after removing non-alphanumeric characters and converting to lowercase. The solution function g returns a specific string that is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, palindrome checking, and function calling in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(primes: list, n=10) -> bool:\n    return len(primes) == n and all(num > 1 and all(num % i != 0 for i in range(2, int(num**0.5) + 1)) for num in primes)\ndef g(n=10):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime numbers, list manipulation, loops, and conditionals.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True",
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(primes: list, n=10) -> bool:\n    return len(primes) == n and all(num > 1 and all(num % i != 0 for i in range(2, int(num**0.5) + 1)) for num in primes)",
        "solution_func": "def g(n=10):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that generates a list of prime numbers up to a given limit and then checks if the list contains exactly 'n' prime numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating prime numbers and checking if the generated list contains the correct number of primes.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(largest_prime: int) -> bool:\n    return largest_prime == 17\n    \ndef g():\n    num = 289\n    prime_factors = []\n    i = 2\n    while i * i <= num:\n        if num % i:\n            i += 1\n        else:\n            num //= i\n            prime_factors.append(i)\n    if num > 1:\n        prime_factors.append(num)\n    \n    return max(prime_factors)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves finding the largest prime factor of a number and checking if it is equal to 17.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(largest_prime: int) -> bool:\n    return largest_prime == 17",
        "solution_func": "def g():\n    num = 289\n    prime_factors = []\n    i = 2\n    while i * i <= num:\n        if num % i:\n            i += 1\n        else:\n            num //= i\n            prime_factors.append(i)\n    if num > 1:\n        prime_factors.append(num)\n    \n    return max(prime_factors)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the largest prime factor of a given number and checking if it is equal to 17."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves finding the largest prime factor of a number and comparing it to 17. The solution function g() calculates the largest prime factor of the number 289 and returns it. The puzzle function f(largest_prime) checks if the largest prime factor is equal to 17.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sum_even: int) -> bool:\n    return sum_even == 10\n    \ndef g(limit=10):\n    a, b = 0, 1\n    fib_sequence = []\n    while b < limit:\n        if b % 2 == 0:\n            fib_sequence.append(b)\n        a, b = b, a + b\n    \n    return sum(fib_sequence)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and Recursion.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(sum_even: int) -> bool:\n    return sum_even == 10",
        "solution_func": "def g(limit=10):\n    a, b = 0, 1\n    fib_sequence = []\n    while b < limit:\n        if b % 2 == 0:\n            fib_sequence.append(b)\n        a, b = b, a + b\n    \n    return sum(fib_sequence)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a Fibonacci sequence up to a given limit, sum the even numbers in the sequence, and check if the sum is equal to 10."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding Fibonacci sequence generation, identifying even numbers in the sequence, summing them up, and comparing the sum to a specific value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, length=5) -> bool:\n    return any(s[i:i+length] == s[i:i+length][::-1] for i in range(len(s) - length + 1))\ndef g(length=5):\n    return 'a' * length + 'abba' + 'a' * length\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, length=5) -> bool:\n    return any(s[i:i+length] == s[i:i+length][::-1] for i in range(len(s) - length + 1))",
        "solution_func": "def g(length=5):\n    return 'a' * length + 'abba' + 'a' * length",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if any substring of a given string is a palindrome, and a function g that generates a string with a palindrome substring. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and checking for palindromes in substrings. It can be used to teach students about string slicing, palindrome detection, and function testing with assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\ndef g(target=10):\n    return [i for i in range(1, target+1)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as list manipulation, loops, and conditional logic.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], target=10) -> bool:\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [i for i in range(1, target+1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a sublist of a given list of integers that sums up to a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves iterating through all possible sublists of the given list and checking if the sum of the sublist equals the target value.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return 'racecar'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return 'racecar'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome and a function g() that returns the string 'racecar'. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for m in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[m] == k:\n                    return True\n    return False\n\ndef g(k=3):\n    return [1, 1, k-2]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Brute Force Search",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], k=3) -> bool:\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for m in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[m] == k:\n                    return True\n    return False",
        "solution_func": "def g(k=3):\n    return [1, 1, k-2]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding three numbers in a list that sum up to a given value k."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves iterating through all possible combinations of three numbers in the list and checking if their sum equals the given value k.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=8) -> bool:\n    seen = set()\n    for row in matrix:\n        for elem in row:\n            if target - elem in seen:\n                return True\n            seen.add(elem)\n    return False\n\ndef g(target=8):\n    return [[1, target-1], [3, 5]]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves searching for a specific target value in a 2D matrix using a set to store seen elements. It also includes list manipulation and comparison operations.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]], target=8) -> bool:\n    seen = set()\n    for row in matrix:\n        for elem in row:\n            if target - elem in seen:\n                return True\n            seen.add(elem)\n    return False",
        "solution_func": "def g(target=8):\n    return [[1, target-1], [3, 5]]",
        "quality": [
            null
        ],
        "description": [
            "Given a matrix of integers, the function f checks if there are two elements in the matrix that sum up to a target value. The function g generates a matrix based on the target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for a specific condition in a matrix and generating a matrix based on a target value. The solution function g generates a matrix that satisfies the condition checked by function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, threshold=100) -> bool:\n    return result > threshold\ndef g(numbers=[3, 7, 11, 15]):\n    return sum(numbers) * len(numbers)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
            "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, threshold=100) -> bool:\n    return result > threshold",
        "solution_func": "def g(numbers=[3, 7, 11, 15]):\n    return sum(numbers) * len(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given result is greater than a threshold, and a function g that calculates the sum of a list of numbers multiplied by the length of the list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic understanding of function definitions, parameter passing, and comparison operations in Python. It also tests the students' ability to understand and apply the concept of function composition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1]\ndef g(word=\"level\"):\n    return word[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
            "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1]",
        "solution_func": "def g(word=\"level\"):\n    return word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome by comparing it to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(palindrome) that returns True if the input string is a palindrome. It also defines a function g(word) that returns the reverse of the input word. The puzzle asserts that f(g()) should return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sums: int, target=15) -> bool:\n    return sums == target\ndef g(numbers=[5, 3, 7]):\n    return sum(sorted(numbers))\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and sorting and ordering.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
            "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "def f(sums: int, target=15) -> bool:\n    return sums == target",
        "solution_func": "def g(numbers=[5, 3, 7]):\n    return sum(sorted(numbers))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a function that calculates the sum of a list of numbers, sorts the list, and then checks if the sum is equal to a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions, work with default arguments, calculate the sum of a list, and use the sorted function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(strings: list) -> bool:\n    return any('python' in s for s in strings)\n\ndef g():\n    return ['hello python', 'pythonista', 'coding in Python', 'learn programming']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True"
        ],
        "problem_func": "def f(strings: list) -> bool:\n    return any('python' in s for s in strings)",
        "solution_func": "def g():\n    return ['hello python', 'pythonista', 'coding in Python', 'learn programming']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if any string in a given list contains the word 'python'."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a function f that checks if any string in a list contains the word 'python', and a function g that returns a list of strings. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(tuples: list) -> bool:\n    return all(sum(tup) <= sum(tuples[i + 1]) for i, tup in enumerate(tuples[:-1]))\n\ndef g():\n    return [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves comparing the sum of tuples in a list with the sum of subsequent tuples in the list.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True"
        ],
        "problem_func": "def f(tuples: list) -> bool:\n    return all(sum(tup) <= sum(tuples[i + 1]) for i, tup in enumerate(tuples[:-1]))",
        "solution_func": "def g():\n    return [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples as input and checks if the sum of each tuple is less than or equal to the sum of the next tuple in the list. The solution function g returns a list of tuples, and the assertion checks if f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, tuple manipulation, and the all() function in Python. It also tests the ability to compare sums of tuples in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Brute Force Search, and Conditional Logic.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding if there are two numbers in a list that add up to a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there are two numbers in a list that sum up to a target value. The function f() checks for this condition, and function g() provides a list of numbers to test this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(fact: int, num=5) -> bool:\n    result = 1\n    for i in range(1, num + 1):\n        result *= i\n    return result == fact\n\ndef g(num=5):\n    fact = 1\n    for i in range(1, num + 1):\n        fact *= i\n    return fact\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and permutations and combinations.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(fact: int, num=5) -> bool:\n    result = 1\n    for i in range(1, num + 1):\n        result *= i\n    return result == fact",
        "solution_func": "def g(num=5):\n    fact = 1\n    for i in range(1, num + 1):\n        fact *= i\n    return fact",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the factorial of a given number matches a given value, and g calculates the factorial of a given number. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of functions, loops, and factorial calculation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)\ndef g():\n    return 'abcde'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g():\n    return 'abcde'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if all characters in a given string are unique, and a function g() that returns a string 'abcde'. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of checking for unique characters in a string and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(li: List[int]) -> bool:\n    return all(li[i] - li[i-1] == li[1] - li[0] for i in range(2, len(li)))\ndef g():\n    return [1, 3, 5, 7, 9]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check the pattern in a list of integers.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(li: List[int]) -> bool:\n    return all(li[i] - li[i-1] == li[1] - li[0] for i in range(2, len(li)))",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the given list of integers follows an arithmetic progression pattern, and a function g that returns a specific list of integers. The assertion checks if function f returns True for the list returned by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and arithmetic progression. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm. It does not involve any complex topics such as dynamic programming or graph theory.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a function g that returns a number, and the function f checks if the number is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function that returns a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, key=\"python\") -> bool:\n    return all(char in text for char in key)\n\ndef g(key=\"python\") -> str:\n    return ''.join(key[i % len(key)] for i in range(len(key) * 2))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, key=\"python\") -> bool:\n    return all(char in text for char in key)",
        "solution_func": "def g(key=\"python\") -> str:\n    return ''.join(key[i % len(key)] for i in range(len(key) * 2))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if all characters in a given text are present in a specified key string. The solution function g generates a string by repeating the characters of the key string twice. The assertion checks if f applied to the result of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of list comprehensions in Python. It tests the student's ability to generate a string based on a given key and check if all characters in the generated string are present in a given text.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=3) -> bool:\n    return any([c*n in s for c in set(s)])\n\ndef g(n=3):\n    return ''.join([c*n for c in 'abcde'])\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation and Set Operations are used in the problem f and solution g.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=3) -> bool:\n    return any([c*n in s for c in set(s)])",
        "solution_func": "def g(n=3):\n    return ''.join([c*n for c in 'abcde'])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if any character in a given string is repeated n times consecutively, and a function g that generates a string with characters 'abcde' repeated n times. The puzzle requires g to be passed to f and the assertion to be True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and list comprehension in Python. It tests the understanding of how to check for consecutive character repetitions in a string and generate a string with repeated characters.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int], target=7) -> bool:\n    seen = set()\n    for num in lst:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=7):\n    return [1, target-1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Set Operations and Brute Force Search.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int], target=7) -> bool:\n    seen = set()\n    for num in lst:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=7):\n    return [1, target-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if there are two numbers in the list that add up to a specific target value. The function g returns a list containing two numbers that add up to the target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use a set to efficiently check for the presence of a pair of numbers that sum up to a target value in a list. The solution function g provides a simple example of such a pair.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=2) -> bool:\n    return all([s[i] == s[-i-1] for i in range(0, len(s)//n)])\n\ndef g(n=2):\n    return 'racecar' * n\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=2) -> bool:\n    return all([s[i] == s[-i-1] for i in range(0, len(s)//n)])",
        "solution_func": "def g(n=2):\n    return 'racecar' * n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome when divided into n equal parts, and a function g that generates a string 'racecar' repeated n times. The puzzle tests whether f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, list comprehension, and function definition in Python. It also tests the concept of palindromes and slicing strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    return str(num) == str(num)[::-1] and all(num % i != 0 for i in range(2, int(num**0.5)+1))\n    \ndef g():\n    num = 11\n    while True:\n        if str(num) == str(num)[::-1] and all(num % i != 0 for i in range(2, int(num**0.5)+1)):\n            return num\n        num += 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a number is a palindrome, mathematical operations to check for prime numbers, and brute force search to find the next number that satisfies the conditions.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "def f(s: str, s1='t', s2='qu', count1=86, count2=83) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 't', s2 = 'qu', count1 = 86, count2 = 83):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    return str(num) == str(num)[::-1] and all(num % i != 0 for i in range(2, int(num**0.5)+1))",
        "solution_func": "def g():\n    num = 11\n    while True:\n        if str(num) == str(num)[::-1] and all(num % i != 0 for i in range(2, int(num**0.5)+1)):\n            return num\n        num += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a number is a palindrome and a prime number. The solution iterates through numbers starting from 11 until it finds a number that satisfies both conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a number is a palindrome and a prime number. The solution iterates through numbers starting from 11 until it finds a number that meets both criteria. The solution function g() returns the first number that satisfies the conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(s: str) -> bool:\n    s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    return s == s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.), Pattern Recognition",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "def f(s: str, s1='t', s2='qu', count1=86, count2=83) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 't', s2 = 'qu', count1 = 86, count2 = 83):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True"
        ],
        "problem_func": "import re\n\ndef f(s: str) -> bool:\n    s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires writing a function that checks if a given string is a palindrome after removing non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using regular expressions to remove non-alphanumeric characters, converting the string to lowercase, and checking if it is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == sorted(lst)\n\ndef g(length=5):\n    import random\n    lst = random.sample(range(1, 100), length)\n    return sorted(lst)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers randomly generated, which falls under the topic of Sorting and Ordering.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == sorted(lst)",
        "solution_func": "def g(length=5):\n    import random\n    lst = random.sample(range(1, 100), length)\n    return sorted(lst)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that generates a list of random numbers, sorts the list, and then checks if the sorted list is equal to the original list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(length=5):\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    half_length = length // 2\n    palindrome_half = ''.join(random.choice(letters) for _ in range(half_length))\n    palindrome = palindrome_half + palindrome_half[::-1]\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to create a palindrome and check if a string is a palindrome.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(length=5):\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    half_length = length // 2\n    palindrome_half = ''.join(random.choice(letters) for _ in range(half_length))\n    palindrome = palindrome_half + palindrome_half[::-1]\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s: str) that checks if a given string is a palindrome, and a function g(length=5) that generates a random palindrome string of a specified length. The puzzle tests whether the generated palindrome string is correctly identified as a palindrome by the function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for palindromes in strings and generating random palindrome strings. It can be used to teach concepts of string manipulation and function testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s='radar') -> str:\n    return s + s[-2::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True",
            "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='radar') -> str:\n    return s + s[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it with its reverse. The solution function constructs a palindrome by appending the reverse of the string excluding the last character."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and checking for palindromes in Python. It is suitable for teaching basic string operations and conditionals in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport string\nimport random\n\ndef f(password: str) -> bool:\n    return len(password) >= 8 and any(char.isdigit() for char in password) and any(char.isalpha() for char in password)\n\ndef g() -> str:\n    chars = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(chars) for _ in range(random.randint(8, 12)))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "import string\nimport random\n\ndef f(password: str) -> bool:\n    return len(password) >= 8 and any(char.isdigit() for char in password) and any(char.isalpha() for char in password)",
        "solution_func": "def g() -> str:\n    chars = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(chars) for _ in range(random.randint(8, 12)))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random password of length between 8 to 12 characters, containing at least one digit and one alphabet character."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a given password meets certain criteria and generating a random password to test this function.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: list, value='b') -> bool:\n    return all(d.get('key') == value for d in data)\ndef g(value='b'):\n    return [{'key': value}] * 5\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking if all dictionaries in the list have a specific key-value pair. The solution generates a list of dictionaries with the specified key-value pair.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
            "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: list, value='b') -> bool:\n    return all(d.get('key') == value for d in data)",
        "solution_func": "def g(value='b'):\n    return [{'key': value}] * 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all dictionaries in a list have a key with a specific value, and a function g that generates a list of dictionaries with the specified key value. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, dictionary key access, and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: list, target=7) -> bool:\n    def search_nested(data):\n        for item in data:\n            if isinstance(item, list):\n                if search_nested(item):\n                    return True\n            elif item == target:\n                return True\n        return False\n    return search_nested(data)\ndef g(target=7):\n    return [1, 2, [3, [4, 5], 6], [7, 8]]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion and conditional logic to search for a target value in a nested list.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
            "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: list, target=7) -> bool:\n    def search_nested(data):\n        for item in data:\n            if isinstance(item, list):\n                if search_nested(item):\n                    return True\n            elif item == target:\n                return True\n        return False\n    return search_nested(data)",
        "solution_func": "def g(target=7):\n    return [1, 2, [3, [4, 5], 6], [7, 8]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires implementing a function f that searches for a target value in a nested list, and a function g that returns a specific nested list. The goal is to check if the target value is present in the nested list returned by g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding nested lists and recursion in Python to search for a target value. The solution function g returns a nested list, and the challenge function f recursively searches for the target value within the nested list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int, n=10) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    return sum([num for num in range(2, n+1) if is_prime(num)]) == total\ndef g(n=10):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    return sum([num for num in range(2, n+1) if is_prime(num)])\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to Number Theory (checking for prime numbers) and Mathematical Operations (summing numbers).",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True",
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(total: int, n=10) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    return sum([num for num in range(2, n+1) if is_prime(num)]) == total",
        "solution_func": "def g(n=10):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    return sum([num for num in range(2, n+1) if is_prime(num)])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, f(total: int, n=10) and g(n=10), where f checks if the sum of prime numbers from 2 to n is equal to a given total, and g calculates the sum of prime numbers from 2 to n. The assertion at the end checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, function definitions, list comprehensions, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: list, target=[2, 4, 6, 8, 10]) -> bool:\n    return all(num in target for num in result) and len(result) == len(target)\ndef g(target=[2, 4, 6, 8, 10]):\n    return [num for num in target if num % 2 == 0]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and conditional logic to check if a list contains specific elements and has a specific length. The solution uses list comprehension and mathematical operations to filter even numbers from a given list.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: list, target=[2, 4, 6, 8, 10]) -> bool:\n    return all(num in target for num in result) and len(result) == len(target)",
        "solution_func": "def g(target=[2, 4, 6, 8, 10]):\n    return [num for num in target if num % 2 == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all elements in a given list are present in a target list and if the lengths of both lists are equal. The solution function g returns a list of even numbers from the target list. The assertion checks if the solution function g satisfies the conditions of the puzzle function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, checking list elements, and asserting the correctness of a solution function. It can be used to teach Python programming concepts related to list operations and function evaluation.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    mid = len(s) // 2\n    return s[:mid].isupper() and s[mid:].islower() and s[:mid] == s[:mid][::-1] and s[mid:] == s[mid:][::-1]\ndef g():\n    base_str = \"Racecar\"\n    return base_str.upper() + base_str.lower()[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    mid = len(s) // 2\n    return s[:mid].isupper() and s[mid:].islower() and s[:mid] == s[:mid][::-1] and s[mid:] == s[mid:][::-1]",
        "solution_func": "def g():\n    base_str = \"Racecar\"\n    return base_str.upper() + base_str.lower()[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f(s: str) that checks if a given string s meets certain conditions related to its casing and symmetry, and a function g() that generates a string based on a base string 'Racecar'. The solution g() creates a string that satisfies the conditions of f(s) when passed to it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the casing and symmetry of a string, and the solution function g() generates a string that meets these conditions. The puzzle is suitable for teaching Python programming concepts related to string manipulation and condition checking.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(seq: List[int]) -> bool:\n    diff = seq[1] - seq[0]\n    return all(seq[i] - seq[i - 1] == diff for i in range(2, len(seq)))\ndef g(start=5, diff=3, n=6):\n    return [start + i * diff for i in range(n)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if a sequence follows an arithmetic progression pattern.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(seq: List[int]) -> bool:\n    diff = seq[1] - seq[0]\n    return all(seq[i] - seq[i - 1] == diff for i in range(2, len(seq)))",
        "solution_func": "def g(start=5, diff=3, n=6):\n    return [start + i * diff for i in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of integers forms an arithmetic sequence, and a function g that generates an arithmetic sequence based on the provided parameters. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of arithmetic sequences and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i, len(matrix)))\ndef g(size=4):\n    return [[i * j for j in range(1, size + 1)] for i in range(1, size + 1)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and checking for symmetry. It also includes list comprehension and assertion testing.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i, len(matrix)))",
        "solution_func": "def g(size=4):\n    return [[i * j for j in range(1, size + 1)] for i in range(1, size + 1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given matrix is symmetric along its main diagonal, and a function g that generates a matrix based on a given size. The assertion checks if the generated matrix satisfies the symmetry condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding matrix symmetry and list comprehension in Python. It provides a practical application of checking symmetry in matrices using list comprehension and indexing. This puzzle can be used to teach Python programming concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    return sum(numbers) == target_sum\n\ndef g(target_sum=100):\n    num_list = [10, 20, 30, 40]\n    num_list.append(target_sum - sum(num_list))\n    return num_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the sum of a list of numbers is equal to a target sum.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True",
            "def f(s: str, s1='t', s2='qu', count1=86, count2=83) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 't', s2 = 'qu', count1 = 86, count2 = 83):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    return sum(numbers) == target_sum",
        "solution_func": "def g(target_sum=100):\n    num_list = [10, 20, 30, 40]\n    num_list.append(target_sum - sum(num_list))\n    return num_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of a list of numbers is equal to a target sum, and a function g that generates a list of numbers such that their sum is equal to the target sum. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions in Python, manipulate lists, and use the assert statement for testing. It also requires understanding of basic arithmetic operations and list manipulation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, sequence='abc') -> bool:\n    return s.find(sequence) != -1\n\ndef g(sequence='abc'):\n    num_repeats = len(sequence) * 3\n    return sequence * num_repeats\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True",
            "def f(s: str, s1='t', s2='qu', count1=86, count2=83) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 't', s2 = 'qu', count1 = 86, count2 = 83):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, sequence='abc') -> bool:\n    return s.find(sequence) != -1",
        "solution_func": "def g(sequence='abc'):\n    num_repeats = len(sequence) * 3\n    return sequence * num_repeats",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given sequence is present in a string, and a function g that generates a sequence repeated multiple times. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and the find method in Python. The solution function g generates a sequence by repeating it multiple times, and the puzzle requires understanding of how to check for a specific sequence in a string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1][::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1][::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that returns the string 'radar'. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(primes: list) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return all(is_prime(p) for p in primes)\ndef g(n=5):\n    def generate_primes(count):\n        primes = []\n        num = 2\n        while len(primes) < count:\n            if all(num % p != 0 for p in primes):\n                primes.append(num)\n            num += 1\n        return primes\n    return generate_primes(n)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and generating prime numbers using a brute force search approach.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(primes: list) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return all(is_prime(p) for p in primes)",
        "solution_func": "def g(n=5):\n    def generate_primes(count):\n        primes = []\n        num = 2\n        while len(primes) < count:\n            if all(num % p != 0 for p in primes):\n                primes.append(num)\n            num += 1\n        return primes\n    return generate_primes(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if all numbers in a given list are prime, and a function g that generates a specified number of prime numbers. The solution g generates prime numbers and the function f checks if they are all prime."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of prime numbers, list comprehension, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    return any(num % 2 == 0 for num in li) and any(num % 2 != 0 for num in li)\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation to check for even and odd numbers in a list.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(li: List[int]) -> bool:\n    return any(num % 2 == 0 for num in li) and any(num % 2 != 0 for num in li)",
        "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding if a list contains both even and odd numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list contains both even and odd numbers using list comprehension and the 'any' function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return any(word == word[::-1] for word in words)\n\ndef g() -> List[str]:\n    return [\"level\", \"hello\", \"python\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a word is a palindrome.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return any(word == word[::-1] for word in words)",
        "solution_func": "def g() -> List[str]:\n    return [\"level\", \"hello\", \"python\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if any word in a list is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a function that checks if any word in a list is a palindrome, and the solution provides a list of words to test this function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)\ndef g():\n    return [2, 4, 6, 8, 10]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even, which falls under Mathematical Operations and Conditional Logic.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: list) that checks if all numbers in a list are even, and a function g() that returns a list of even numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and defining functions in Python. It is suitable for teaching Python concepts related to list manipulation and function definitions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return all(isinstance(key, str) for key in d.keys())\ndef g():\n    return {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all keys in a dictionary are strings.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return all(isinstance(key, str) for key in d.keys())",
        "solution_func": "def g():\n    return {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(d: dict) -> bool that checks if all keys in a dictionary are strings. The solution function g() returns a dictionary with string keys, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the types of keys in a dictionary and verifying the correctness of the solution function. It focuses on understanding dictionary keys and type checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, original_text=\"racecar\") -> bool:\n    return text == text[::-1]\ndef g(original_text=\"racecar\"):\n    return original_text + original_text[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True",
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, original_text=\"racecar\") -> bool:\n    return text == text[::-1]",
        "solution_func": "def g(original_text=\"racecar\"):\n    return original_text + original_text[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given text is a palindrome, and a function g that generates a palindrome by concatenating a text with its reverse. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically checking for palindromes and reversing strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int], threshold=5) -> bool:\n    return any(num ** 0.5 == int(num ** 0.5) for num in numbers) and len(numbers) >= threshold\ndef g(threshold=5):\n    numbers = [i ** 2 for i in range(1, threshold)]\n    numbers.append(threshold)\n    return numbers\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True",
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int], threshold=5) -> bool:\n    return any(num ** 0.5 == int(num ** 0.5) for num in numbers) and len(numbers) >= threshold",
        "solution_func": "def g(threshold=5):\n    numbers = [i ** 2 for i in range(1, threshold)]\n    numbers.append(threshold)\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if any number in a list is a perfect square and if the length of the list is greater than or equal to a threshold. The solution function g generates a list of squares of numbers up to a given threshold and appends the threshold itself. The assertion checks if the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, checking for perfect squares, and using assertions for testing. It also requires knowledge of function parameters and return values in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, diff=5) -> bool:\n    return any(arr[i + 1] - arr[i] == diff for i in range(len(arr) - 1))\ndef g(diff=5):\n    return [i * diff for i in range(10)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list, diff=5) -> bool:\n    return any(arr[i + 1] - arr[i] == diff for i in range(len(arr) - 1))",
        "solution_func": "def g(diff=5):\n    return [i * diff for i in range(10)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if there exists a pair of consecutive elements in a list where the difference between them is equal to a given value. The solution function g generates a list of numbers with a specified difference between consecutive elements, and the assertion checks if f returns True for the output of g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and checking conditions in a list. It also requires understanding how to generate a list with a specific pattern using a function. The assertion at the end ensures that the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str, pattern='ABAB') -> bool:\n    return all(word[i] == pattern[i % len(pattern)] for i in range(len(word)))\n\ndef g(pattern='ABAB') -> str:\n    return pattern * 3\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation, Conditional Logic, and Mathematical Operations.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str, pattern='ABAB') -> bool:\n    return all(word[i] == pattern[i % len(pattern)] for i in range(len(word)))",
        "solution_func": "def g(pattern='ABAB') -> str:\n    return pattern * 3",
        "quality": [
            null
        ],
        "description": [
            "Given a function f that checks if a word matches a given pattern, and a function g that generates a pattern, the puzzle requires finding a pattern that satisfies the word pattern matching condition when passed through f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how the pattern matching function f works and finding a suitable pattern using function g that satisfies the condition in f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, target_char='a') -> bool:\n    return s.count(target_char) >= 2\ndef g(target_char='a'):\n    return target_char * 2 + 'bc' + target_char\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, target_char='a') -> bool:\n    return s.count(target_char) >= 2",
        "solution_func": "def g(target_char='a'):\n    return target_char * 2 + 'bc' + target_char",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s: str, target_char='a') that returns True if the input string s contains at least two occurrences of the target character, and a function g(target_char='a') that returns a string with the target character repeated twice followed by 'bc' and the target character again, the puzzle requires finding a target character that satisfies the condition in f(g()) == True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the functions f and g, and determining the target character that makes the assertion f(g()) == True hold true.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='age', min_age=18) -> bool:\n    return key in d and d[key] >= min_age\ndef g():\n    return {'name': 'Alice', 'age': 20}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, conditional logic, and assertion testing.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='age', min_age=18) -> bool:\n    return key in d and d[key] >= min_age",
        "solution_func": "def g():\n    return {'name': 'Alice', 'age': 20}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a dictionary as input and checks if a specified key exists in the dictionary and if the corresponding value is greater than or equal to a specified minimum age. The solution function g returns a dictionary with a 'name' and 'age' key, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of dictionary manipulation and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(seq: List[int]) -> bool:\n    if len(seq) < 3:\n        return False\n    return all(seq[i] + seq[i + 1] == seq[i + 2] for i in range(len(seq) - 2))\n\ndef g(start1=0, start2=1, length=8):\n    fib_seq = [start1, start2]\n    while len(fib_seq) < length:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and sequence generation using Fibonacci sequence. It also includes conditional logic to check if a given sequence follows a specific pattern.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(seq: List[int]) -> bool:\n    if len(seq) < 3:\n        return False\n    return all(seq[i] + seq[i + 1] == seq[i + 2] for i in range(len(seq) - 2))",
        "solution_func": "def g(start1=0, start2=1, length=8):\n    fib_seq = [start1, start2]\n    while len(fib_seq) < length:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given sequence of numbers forms a Fibonacci sequence or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand the Fibonacci sequence and how to generate it using a function. They need to check if a given sequence follows the Fibonacci pattern.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(start=10):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_num = start\n    while not is_prime(prime_num):\n        prime_num += 1\n    return prime_num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) as it is checking for prime numbers.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(start=10):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_num = start\n    while not is_prime(prime_num):\n        prime_num += 1\n    return prime_num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num) which checks if a given number is prime, and g(start) which finds the next prime number starting from a given number. The goal is to find the next prime number after a given starting point using the g function and check if it is prime using the f function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to find the next prime number. It requires knowledge of loops, conditionals, and basic number operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1]\n\ndef g(length=5):\n    import string\n    import random\n    letters = string.ascii_lowercase\n    half_length = length // 2\n    if length % 2 == 0:\n        first_half = ''.join(random.choice(letters) for _ in range(half_length))\n        palindrome = first_half + first_half[::-1]\n    else:\n        first_half = ''.join(random.choice(letters) for _ in range(half_length))\n        middle_char = random.choice(letters)\n        palindrome = first_half + middle_char + first_half[::-1]\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1]",
        "solution_func": "def g(length=5):\n    import string\n    import random\n    letters = string.ascii_lowercase\n    half_length = length // 2\n    if length % 2 == 0:\n        first_half = ''.join(random.choice(letters) for _ in range(half_length))\n        palindrome = first_half + first_half[::-1]\n    else:\n        first_half = ''.join(random.choice(letters) for _ in range(half_length))\n        middle_char = random.choice(letters)\n        palindrome = first_half + middle_char + first_half[::-1]\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that generates a random palindrome string of a specified length and checks if it is indeed a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, palindrome checking, and random generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    triplets = [(a, b, c) for a in numbers for b in numbers for c in numbers if a**2 + b**2 == c**2]\n    return any(triplets)\n\ndef g(n=10):\n    import random\n    numbers = random.sample(range(1, n+1), n)\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    triplets = [(a, b, c) for a in numbers for b in numbers for c in numbers if a**2 + b**2 == c**2]\n    return any(triplets)",
        "solution_func": "def g(n=10):\n    import random\n    numbers = random.sample(range(1, n+1), n)\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a list of random numbers, finding all possible triplets from the list that satisfy the Pythagorean theorem, and checking if any such triplet exists."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a mathematical concept (Pythagorean theorem) and requires understanding of list comprehension and random number generation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(sum_primes: int, n=10) -> bool:\n    primes_sum = sum([i for i in range(2, n+1) if is_prime(i)])\n    return primes_sum == sum_primes\n\ndef g(n=10):\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return sum(primes)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(sum_primes: int, n=10) -> bool:\n    primes_sum = sum([i for i in range(2, n+1) if is_prime(i)])\n    return primes_sum == sum_primes",
        "solution_func": "def g(n=10):\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return sum(primes)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the sum of prime numbers from 2 to a given number is equal to a specified sum of prime numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of prime numbers, loops, list comprehension, and function calls in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sequence: list, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    return all(x in lst for x in sequence)\n\ndef g():\n    return [i for i in range(1, 10)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all elements in a given sequence are present in a predefined list.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(sequence: list, lst=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    return all(x in lst for x in sequence)",
        "solution_func": "def g():\n    return [i for i in range(1, 10)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all elements in a given sequence are present in a predefined list. The solution function g generates a sequence of numbers from 1 to 9 and passes it to f to return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all elements in a given sequence are present in a predefined list. The solution function generates the sequence of numbers and passes it to the checking function to validate the condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, base=2) -> bool:\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\ndef g(number=11, base=2):\n    return int(str(number), base)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, base=2) -> bool:\n    num_str = str(num)\n    return num_str == num_str[::-1]",
        "solution_func": "def g(number=11, base=2):\n    return int(str(number), base)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given number, when converted to a different base, remains the same when read in reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand number conversion and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\nimport string\n\ndef f(s: str) -> bool:\n    return any(c.islower() for c in s) and any(c.isupper() for c in s) and any(c.isdigit() for c in s)\n\ndef g(length=8):\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "String Manipulation, Randomization, Conditional Logic",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True"
        ],
        "problem_func": "import random\nimport string\n\ndef f(s: str) -> bool:\n    return any(c.islower() for c in s) and any(c.isupper() for c in s) and any(c.isdigit() for c in s)",
        "solution_func": "def g(length=8):\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random string of a specified length and checking if it contains at least one lowercase letter, one uppercase letter, and one digit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using string manipulation and random generation in Python to create a string and then checking if it meets certain criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s.lower() == s.lower()[::-1]\n\ndef g():\n    import random\n    import string\n\n    letters = string.ascii_letters\n    palindrome = ''.join(random.choice(letters) for _ in range(random.randint(5, 10)))\n    return palindrome + palindrome[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Randomization, Importing Modules",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s.lower() == s.lower()[::-1]",
        "solution_func": "def g():\n    import random\n    import string\n\n    letters = string.ascii_letters\n    palindrome = ''.join(random.choice(letters) for _ in range(random.randint(5, 10)))\n    return palindrome + palindrome[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s: str) that checks if a given string is a palindrome, and a function g() that generates a random string and its palindrome. The assertion checks if the generated string and its palindrome satisfy the palindrome condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, generating random strings, and checking for palindromes in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(start=50, end=200):\n    import random\n\n    while True:\n        num = random.randint(start, end)\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            return num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (primality testing) and Importing Modules (random).",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(start=50, end=200):\n    import random\n\n    while True:\n        num = random.randint(start, end)\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g(start, end) that generates a random number within a specified range and returns it only if it is a prime number. The puzzle requires students to understand prime numbers and random number generation in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a concept of prime numbers and random number generation, which are important topics in programming. It provides a practical application of checking for prime numbers using a random number generator.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, x=5) -> bool:\n    return sum([num for num in lst if num % 2 == 0]) > x\ndef g(x = 5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, x=5) -> bool:\n    return sum([num for num in lst if num % 2 == 0]) > x",
        "solution_func": "def g(x = 5):\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list as input and checks if the sum of even numbers in the list is greater than a given value x. The solution function g returns a list of numbers, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, filtering even numbers, and comparing the sum with a given value. The solution function g returns a list with both even and odd numbers to test the condition in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='age', threshold=18) -> bool:\n    return d.get(key, 0) >= threshold\ndef g(key='age', threshold=18):\n    return {'name': 'Alice', 'age': 22, 'city': 'New York'}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, conditional logic, and function calls.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='age', threshold=18) -> bool:\n    return d.get(key, 0) >= threshold",
        "solution_func": "def g(key='age', threshold=18):\n    return {'name': 'Alice', 'age': 22, 'city': 'New York'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a dictionary, a key, and a threshold as input and checks if the value associated with the key in the dictionary is greater than or equal to the threshold. The solution function g returns a dictionary with 'name', 'age', and 'city' keys, and the 'age' value is 22. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, accessing values by keys, and comparing values to a threshold. It tests the understanding of function calls, dictionary manipulation, and boolean comparisons in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abcabc') -> bool:\n    return pattern in s and len(s) % len(pattern) == 0\ndef g(pattern='abcabc'):\n    return pattern * 3\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abcabc') -> bool:\n    return pattern in s and len(s) % len(pattern) == 0",
        "solution_func": "def g(pattern='abcabc'):\n    return pattern * 3",
        "quality": [
            null
        ],
        "description": [
            "Given a pattern 'abcabc', the puzzle checks if the pattern appears in a string 's' and if the length of 's' is a multiple of the length of the pattern. The solution function returns the pattern repeated three times."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for a specific pattern in a string and verifying the length relationship. The solution function simply returns the pattern repeated three times.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return all((x % 2 == 0 and y % 2 == 1) for x, y in tuples)\ndef g():\n    return [(i, i + 1) for i in range(0, 10, 2)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list comprehension, iteration, and checking conditions on tuples.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return all((x % 2 == 0 and y % 2 == 1) for x, y in tuples)",
        "solution_func": "def g():\n    return [(i, i + 1) for i in range(0, 10, 2)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples and checks if all tuples satisfy a specific condition. The solution function g generates a list of tuples that satisfy the condition, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, tuple unpacking, and the all() function in Python. It also tests the ability to generate and validate tuples based on a given condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(words: List[str], target='python') -> bool:\n    return all(target in word for word in words)\ndef g():\n    return ['python is a programming language', 'python is versatile', 'python is fun']\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(words: List[str], target='python') -> bool:\n    return all(target in word for word in words)",
        "solution_func": "def g():\n    return ['python is a programming language', 'python is versatile', 'python is fun']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f that takes a list of strings and a target string as input, and checks if the target string is present in all the strings in the list. The solution function g returns a list of strings related to Python, and the puzzle is to check if the target string 'python' is present in all the strings in the list returned by g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a specific target string is present in all the strings in a given list. The solution function g returns a list of strings related to Python, and the puzzle tests if the target string 'python' is present in all the strings in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, pattern='abc123', max_length=100) -> bool:\n    return text.isalnum() and len(text) <= max_length and all(c in pattern for c in text)\ndef g(pattern='abc123', max_length=100):\n    import random\n    length = random.randint(1, max_length)\n    return ''.join(random.choice(pattern) for _ in range(length))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, pattern='abc123', max_length=100) -> bool:\n    return text.isalnum() and len(text) <= max_length and all(c in pattern for c in text)",
        "solution_func": "def g(pattern='abc123', max_length=100):\n    import random\n    length = random.randint(1, max_length)\n    return ''.join(random.choice(pattern) for _ in range(length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that generates a random string based on a given pattern and maximum length, and then checks if the generated string meets certain criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, random generation, and conditional checks in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, key='name', value='John Doe', age=30) -> bool:\n    return key in data and data[key] == value and 'age' in data and data['age'] == age\ndef g(key='name', value='John Doe', age=30):\n    return {key: value, 'age': age}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, conditional logic, and function assertion testing.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: dict, key='name', value='John Doe', age=30) -> bool:\n    return key in data and data[key] == value and 'age' in data and data['age'] == age",
        "solution_func": "def g(key='name', value='John Doe', age=30):\n    return {key: value, 'age': age}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given dictionary contains specific key-value pairs and then defining a function g that creates a dictionary with specified key-value pairs. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions with default arguments, work with dictionaries, and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime or not.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns the number 17 and assert that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to understand how to check for prime numbers and return a specific number to satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(str_list: List[str]) -> bool:\n    return len(str_list) == len(set(str_list))\ndef g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\"]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations to check for uniqueness of elements in a list of strings.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(str_list: List[str]) -> bool:\n    return len(str_list) == len(set(str_list))",
        "solution_func": "def g():\n    return [\"apple\", \"banana\", \"cherry\", \"date\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list of strings contains only unique elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that takes a list of strings and returns True if all elements in the list are unique. The solution function g returns a list of strings with unique elements, and the assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)\n\ndef g():\n    import random\n    import string\n    random.seed(1)\n    return ''.join(random.sample(string.ascii_lowercase, k=10))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g():\n    import random\n    import string\n    random.seed(1)\n    return ''.join(random.sample(string.ascii_lowercase, k=10))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(s) that checks if a string has all unique characters, and a function g() that generates a random string of length 10 using lowercase letters. The puzzle tests whether the generated random string has all unique characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for unique characters in a string and generating random strings in Python. It also tests the student's ability to use the set data structure and the random module in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return sum(x**2 for x in nums if x % 2 == 0) > 1000\n\ndef g():\n    import random\n    random.seed(3)\n    return random.choices(range(1, 101), k=10)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return sum(x**2 for x in nums if x % 2 == 0) > 1000",
        "solution_func": "def g():\n    import random\n    random.seed(3)\n    return random.choices(range(1, 101), k=10)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and returns True if the sum of the squares of even numbers in the list is greater than 1000. The solution function g generates a list of 10 random integers between 1 and 100, and the assertion checks if f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, conditional filtering, and random number generation in Python. It also tests the ability to write functions that meet specific criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], diff=3, length=3) -> bool:\n    for i in range(len(nums) - length + 1):\n        if all(nums[i + j] - nums[i + j - 1] == diff for j in range(1, length)):\n            return True\n    return False\n\ndef g(diff=3, length=3):\n    start = 1\n    return [start + i * diff for i in range(length)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves elements of list manipulation and conditional logic.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], diff=3, length=3) -> bool:\n    for i in range(len(nums) - length + 1):\n        if all(nums[i + j] - nums[i + j - 1] == diff for j in range(1, length)):\n            return True\n    return False",
        "solution_func": "def g(diff=3, length=3):\n    start = 1\n    return [start + i * diff for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers, a difference value, and a length value as parameters. The function checks if there exists a subsequence in the list where the elements have a constant difference equal to the given difference value and the length of the subsequence is equal to the given length. The solution function g generates a subsequence based on the difference and length parameters and checks if it satisfies the condition of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to iterate over a list and check for a specific condition within a subsequence. It also requires understanding list comprehension and generating a subsequence based on the given parameters.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if sum(nums[i:j]) == target_sum:\n                return True\n    return False\n\ndef g(target_sum=10):\n    return [2, 3, 5, 7, 8]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Brute Force Search as it iterates through all possible subarrays to find the target sum. It also involves List Operations as it manipulates lists to check for the target sum. Additionally, it involves Mathematical Operations as it calculates the sum of subarrays.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if sum(nums[i:j]) == target_sum:\n                return True\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [2, 3, 5, 7, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a sublist of numbers in a given list that adds up to a target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves iterating through all possible sublists of the given list and checking if the sum of any sublist equals the target sum. The solution function returns a specific sublist of numbers that adds up to the target sum.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, n=10) -> bool:\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return result == fib[n]\n\ndef g(n=10) -> int:\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Fibonacci sequence generation and comparison, which falls under Mathematical Operations and Recursion topics.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, n=10) -> bool:\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return result == fib[n]",
        "solution_func": "def g(n=10) -> int:\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given result is equal to the nth Fibonacci number and g calculates the nth Fibonacci number. The puzzle requires the student to ensure that the result of g satisfies the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding Fibonacci sequence generation and function composition in Python. It tests the student's ability to implement and use functions effectively to solve a specific problem.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(intersect: set, min_len=2, max_len=4) -> bool:\n    return min_len <= len(intersect) <= max_len\n\ndef g(min_len=2, max_len=4):\n    set1 = {1, 2, 3, 4, 5}\n    set2 = {4, 5, 6, 7, 8}\n    return set1 & set2\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and conditional logic to check if the intersection of two sets falls within a specified range of lengths.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True"
        ],
        "problem_func": "def f(intersect: set, min_len=2, max_len=4) -> bool:\n    return min_len <= len(intersect) <= max_len",
        "solution_func": "def g(min_len=2, max_len=4):\n    set1 = {1, 2, 3, 4, 5}\n    set2 = {4, 5, 6, 7, 8}\n    return set1 & set2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a set and two optional parameters min_len and max_len, and returns True if the length of the intersection of the set with another predefined set falls within the specified range. The solution function g creates two sets, finds their intersection, and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with sets, defining functions with optional parameters, and checking conditions on set intersections. It provides a practical exercise in using sets and function definitions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(numbers[i:i+3] == [1, 2, 3] for i in range(len(numbers) - 2))\n\ndef g():\n    return [5, 4, 1, 2, 3, 7, 8, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list contains a specific subsequence [1, 2, 3]. This requires iterating over the list and comparing consecutive sublists of length 3 with [1, 2, 3].",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(numbers[i:i+3] == [1, 2, 3] for i in range(len(numbers) - 2))",
        "solution_func": "def g():\n    return [5, 4, 1, 2, 3, 7, 8, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a sublist of length 3 in a given list that matches the pattern [1, 2, 3]."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there exists a sublist of length 3 in a given list that is equal to [1, 2, 3].",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(vowel in text for vowel in vowels)\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(vowel in text for vowel in vowels)",
        "solution_func": "def g():\n    return \"The quick brown fox jumps over the lazy dog\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all vowels are present in a given text string, and a function g that returns a specific text string. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for the presence of vowels in a text string and ensuring that the provided solution function g returns a specific text string that contains all vowels. The assertion confirms that the function f behaves as expected when applied to the output of function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] - numbers[i - 1] == numbers[1] - numbers[0] for i in range(2, len(numbers)))\n\ndef g():\n    return [2, 5, 8, 11, 14]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check if a list of numbers follows a specific pattern.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] - numbers[i - 1] == numbers[1] - numbers[0] for i in range(2, len(numbers)))",
        "solution_func": "def g():\n    return [2, 5, 8, 11, 14]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers follows an arithmetic progression pattern, and providing a solution function g that returns a specific list of numbers that satisfies the pattern."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and arithmetic progression. The solution function g returns a list that follows the arithmetic progression pattern.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=5) -> bool:\n    return len(s) == n and s[0] == 'A' and s[-1] == 'Z' and all(c.isalpha() for c in s[1:-1])\n    \ndef g(n=5):\n    return 'A' + 'B' * (n-2) + 'Z'\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=5) -> bool:\n    return len(s) == n and s[0] == 'A' and s[-1] == 'Z' and all(c.isalpha() for c in s[1:-1])",
        "solution_func": "def g(n=5):\n    return 'A' + 'B' * (n-2) + 'Z'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that generates a string of length n with 'A' as the first character, 'Z' as the last character, and all characters in between being 'B'. The function should then check if the generated string meets certain conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and checking conditions on the generated string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int], n=4) -> bool:\n    if len(lst) != n:\n        return False\n    diff = lst[1] - lst[0]\n    return all(lst[i] - lst[i-1] == diff for i in range(1, len(lst)))\n\ndef g(n=4):\n    return [i for i in range(1, n*2, 2)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and conditional logic to check for a specific pattern in the list.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int], n=4) -> bool:\n    if len(lst) != n:\n        return False\n    diff = lst[1] - lst[0]\n    return all(lst[i] - lst[i-1] == diff for i in range(1, len(lst)))",
        "solution_func": "def g(n=4):\n    return [i for i in range(1, n*2, 2)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f(lst: List[int], n=4) that checks if the input list follows an arithmetic progression with a common difference. The solution function g(n=4) generates a list of odd numbers up to 2n-1."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and arithmetic progression. The solution function generates the expected input for the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=6) -> bool:\n    return len(s) == n and s == s[:3] * 2\n\ndef g(n=6):\n    return 'ABC' * 2\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=6) -> bool:\n    return len(s) == n and s == s[:3] * 2",
        "solution_func": "def g(n=6):\n    return 'ABC' * 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is of length 6 and is equal to the first 3 characters repeated twice, and a function g that returns the string 'ABC' repeated twice. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], target='python') -> bool:\n    return any(target in word for word in words)\n\ndef g(words=['java', 'c++', 'python', 'javascript', 'ruby']):\n    return words\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation and Conditional Logic are used in the puzzle.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], target='python') -> bool:\n    return any(target in word for word in words)",
        "solution_func": "def g(words=['java', 'c++', 'python', 'javascript', 'ruby']):\n    return words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specific target word is present in a list of words. The solution function g returns a list of words, and the puzzle is to ensure that the target word 'python' is present in the list returned by g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in list comprehension and boolean checking. It tests the understanding of how to check for a specific element in a list using the 'in' keyword.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))\n\ndef g(nums=[3, 7, 2, 9, 5, 3]):\n    return nums\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations to check for duplicates in a list of numbers.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))",
        "solution_func": "def g(nums=[3, 7, 2, 9, 5, 3]):\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function f checks if there are any duplicate elements in the list. The solution function g returns a list of integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the concept of sets and checking for duplicates in a list. The solution function simply returns a list of integers without any duplicates.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(data: Dict[str, int], key='age') -> bool:\n    return key in data\n\ndef g(data={'name': 'Alice', 'age': 25, 'city': 'New York'}):\n    return data\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking if a key exists in the dictionary. It also includes default parameter value in a function definition.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Dict\n\ndef f(data: Dict[str, int], key='age') -> bool:\n    return key in data",
        "solution_func": "def g(data={'name': 'Alice', 'age': 25, 'city': 'New York'}):\n    return data",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specified key exists in a dictionary. The function g returns a dictionary with specific key-value pairs. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is focused on checking the existence of a key in a dictionary and understanding how to pass default arguments in a function. It is a simple puzzle suitable for teaching basic concepts in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(x >= y for x, y in zip(nums, nums[1:]))\ndef g():\n    import random\n    return sorted(random.sample(range(1, 20), 5), reverse=True)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of random numbers in descending order and checking if each element is greater than or equal to the next element. This involves concepts of sorting and ordering, list manipulation, and conditional logic.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
            "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return all(x >= y for x, y in zip(nums, nums[1:]))",
        "solution_func": "def g():\n    import random\n    return sorted(random.sample(range(1, 20), 5), reverse=True)",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function checks if each element is greater than or equal to the next element. The solution function generates a sorted list of 5 random integers between 1 and 20 in descending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the elements in a list are in non-decreasing order. The solution function generates a list of random integers and sorts them in descending order. The assertion at the end verifies that the solution function satisfies the puzzle function's condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    import random\n    import string\n\n    letters = string.ascii_lowercase\n    half_length = random.randint(1, 5)\n    palindrome_half = ''.join(random.choice(letters) for _ in range(half_length))\n    return palindrome_half + palindrome_half[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    import random\n    import string\n\n    letters = string.ascii_lowercase\n    half_length = random.randint(1, 5)\n    palindrome_half = ''.join(random.choice(letters) for _ in range(half_length))\n    return palindrome_half + palindrome_half[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random string, creating a palindrome by appending the reverse of the string to itself, and then checking if the resulting string is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    import sympy\n\n    return sympy.randprime(10, 100)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime using a brute force search algorithm and importing a module for generating random prime numbers.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import sympy\n\n    return sympy.randprime(10, 100)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(n) that checks if a given number is a prime number, and a function g() that generates a random prime number between 10 and 100 using the sympy library. The puzzle requires g() to generate a prime number and f() to verify if it is indeed a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, generating random prime numbers using a library, and checking if a number is prime. It is suitable for teaching Python programming concepts related to prime numbers and libraries.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: int, prime=5) -> bool:\n    if x <= 1:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\ndef g(index=3):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]  # Pre-computed list of prime numbers\n    return primes[index]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to prime numbers, mathematical operations, and conditional logic.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: int, prime=5) -> bool:\n    if x <= 1:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True",
        "solution_func": "def g(index=3):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]  # Pre-computed list of prime numbers\n    return primes[index]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(x) that checks if a given number x is a prime number, and a function g(index) that returns a pre-computed prime number based on the index provided. The puzzle requires g to return a prime number such that f confirms it as a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function interactions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return s == s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function to check if a given string is a palindrome after removing non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a string is a palindrome after removing non-alphanumeric characters and ignoring case. The solution function g() returns a specific string that is a palindrome after the required modifications.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    import sympy\n    return sympy.prime(10)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime using a simple algorithm and importing a module to generate prime numbers.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import sympy\n    return sympy.prime(10)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given number is a prime number using a specific algorithm and the sympy library in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and the use of external libraries in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i]**2 + nums[j]**2 == nums[k]**2:\n                    return True\n    return False\n\ndef g():\n    return [3, 4, 5, 12, 15, 17, 8, 10, 6]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting, nested loops, and checking for Pythagorean triplets.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i]**2 + nums[j]**2 == nums[k]**2:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [3, 4, 5, 12, 15, 17, 8, 10, 6]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a Pythagorean triplet in a given list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of numbers and then checking for the presence of a Pythagorean triplet (three numbers that satisfy the Pythagorean theorem).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    alphanumeric_s = ''.join(char.lower() for char in s if char.isalnum())\n    return alphanumeric_s == alphanumeric_s[::-1]\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    alphanumeric_s = ''.join(char.lower() for char in s if char.isalnum())\n    return alphanumeric_s == alphanumeric_s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome after removing all non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a string is a palindrome after removing non-alphanumeric characters and ignoring case.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 3:\n        return False\n    return all(nums[i] + nums[i+1] == nums[i+2] for i in range(len(nums) - 2))\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check if a given list of numbers follows a specific pattern.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 3:\n        return False\n    return all(nums[i] + nums[i+1] == nums[i+2] for i in range(len(nums) - 2))",
        "solution_func": "def g():\n    return [0, 1, 1, 2, 3, 5, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f(nums: List[int]) that checks if a list of integers satisfies a specific mathematical property. The solution function g() returns a list of integers that satisfies the property, and the puzzle is considered solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of integers satisfies a specific mathematical property, which is a good exercise for students to practice list manipulation and comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(words: List[str]) -> bool:\n    return all(sorted(word) == sorted(words[0]) for word in words)\ndef g():\n    return [\"listen\", \"enlist\", \"silent\"]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting and ordering topics.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(words: List[str]) -> bool:\n    return all(sorted(word) == sorted(words[0]) for word in words)",
        "solution_func": "def g():\n    return [\"listen\", \"enlist\", \"silent\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that checks if all words in a list have the same characters when sorted. The solution function returns a list of words that are anagrams of each other."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all words in a list are anagrams of each other by comparing their sorted characters. The solution function provides a list of anagrams as an example.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num: int) that checks if a given number is a prime number or not, and a function g() that returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    length = random.randint(5, 10)\n    half_length = length // 2\n    palindrome_half = ''.join(random.choices(letters, k=half_length))\n    palindrome = palindrome_half + (palindrome_half[::-1] if length % 2 == 0 else palindrome_half[-2::-1])\n    return palindrome\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to generate a palindrome and then check if it is indeed a palindrome.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    length = random.randint(5, 10)\n    half_length = length // 2\n    palindrome_half = ''.join(random.choices(letters, k=half_length))\n    palindrome = palindrome_half + (palindrome_half[::-1] if length % 2 == 0 else palindrome_half[-2::-1])\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a given string is a palindrome and then generating a random string to test this function. The solution function generates a random palindrome string and checks if the defined function returns True for it.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, target=\"racecar\") -> bool:\n    return s == target\ndef g(target=\"racecar\") -> str:\n    return target\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True",
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, target=\"racecar\") -> bool:\n    return s == target",
        "solution_func": "def g(target=\"racecar\") -> str:\n    return target",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string is equal to a target string 'racecar', and g returns the target string 'racecar'. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is straightforward and focuses on understanding function definitions and function calls in Python. It can be used to introduce basic concepts of functions and function return values in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, prime=7) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(prime=7) -> int:\n    prime += 1\n    while True:\n        is_prime = True\n        for i in range(2, int(prime ** 0.5) + 1):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return prime\n        prime += 1\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True",
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, prime=7) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime=7) -> int:\n    prime += 1\n    while True:\n        is_prime = True\n        for i in range(2, int(prime ** 0.5) + 1):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return prime\n        prime += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(num: int, prime=7) -> bool and g(prime=7) -> int. Function f checks if a given number is prime, while function g finds the next prime number after a given prime number. The puzzle requires function g to find the next prime number after the input prime number and function f to verify if the output of g is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to find the next prime number. It tests the student's knowledge of prime number checking and iteration. The solution function g incrementally finds the next prime number after the input prime number, and function f verifies if the output of g is a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: str) -> bool:\n    return 'ABC' in result\n\ndef g() -> str:\n    s = 'DEFABCXYZ'\n    return s[3:6] + s[0:3] + s[6:]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a specific substring is present in a given string.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: str) -> bool:\n    return 'ABC' in result",
        "solution_func": "def g() -> str:\n    s = 'DEFABCXYZ'\n    return s[3:6] + s[0:3] + s[6:]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks if the string 'ABC' is present in the input string. The solution function extracts a specific substring from a given string and rearranges it to form 'ABC'."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and checking for a specific substring within a given string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(my_dict: Dict[str, int]) -> bool:\n    return my_dict.get('key', 0) == 42\n\ndef g() -> Dict[str, int]:\n    return {'key': 42, 'other_key': 100}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Dict\n\ndef f(my_dict: Dict[str, int]) -> bool:\n    return my_dict.get('key', 0) == 42",
        "solution_func": "def g() -> Dict[str, int]:\n    return {'key': 42, 'other_key': 100}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a specific key in a dictionary has a value of 42, and a function g that returns a dictionary with the key 'key' having a value of 42. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom datetime import datetime\n\ndef f(result: bool, start_date='2022-01-01', end_date='2022-01-15', min_days=10, max_days=20) -> bool:\n    return min_days <= result <= max_days\n\ndef g(start_date='2022-01-01', end_date='2022-01-15', min_days=10, max_days=20):\n    start = datetime.strptime(start_date, '%Y-%m-%d')\n    end = datetime.strptime(end_date, '%Y-%m-%d')\n    delta = end - start\n    return delta.days\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves date manipulation, comparison, and assertion testing.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
            "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True"
        ],
        "problem_func": "from datetime import datetime\n\ndef f(result: bool, start_date='2022-01-01', end_date='2022-01-15', min_days=10, max_days=20) -> bool:\n    return min_days <= result <= max_days",
        "solution_func": "def g(start_date='2022-01-01', end_date='2022-01-15', min_days=10, max_days=20):\n    start = datetime.strptime(start_date, '%Y-%m-%d')\n    end = datetime.strptime(end_date, '%Y-%m-%d')\n    delta = end - start\n    return delta.days",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given result falls within a specified range of days, and a function g that calculates the number of days between two given dates. The assertion checks if the result of g falls within the specified range when passed to f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with datetime objects in Python to calculate the number of days between two dates and then checking if this result falls within a specified range. It requires understanding of datetime manipulation and comparison operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int], target_sum=1000) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return numbers[i] ** 2 + numbers[j] ** 2 == numbers[k] ** 2\n    return False\ndef g(target_sum=1000):\n    for a in range(1, target_sum):\n        for b in range(a + 1, target_sum):\n            c = target_sum - a - b\n            if a ** 2 + b ** 2 == c ** 2:\n                return [a, b, c]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Brute Force Search, Mathematical Operations, Conditional Logic",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int], target_sum=1000) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target_sum:\n                    return numbers[i] ** 2 + numbers[j] ** 2 == numbers[k] ** 2\n    return False",
        "solution_func": "def g(target_sum=1000):\n    for a in range(1, target_sum):\n        for b in range(a + 1, target_sum):\n            c = target_sum - a - b\n            if a ** 2 + b ** 2 == c ** 2:\n                return [a, b, c]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a Pythagorean triplet (a set of three integers that satisfy the Pythagorean theorem) from a given list of numbers that sum up to a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires checking if there exists a Pythagorean triplet in the list of numbers that sums up to the target value. The solution function g generates possible triplets and the function f checks if the generated triplet satisfies the Pythagorean condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    primes = []\n    is_prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if is_prime[p]:\n            for i in range(p * p, n + 1, p):\n                is_prime[i] = False\n        p += 1\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            primes.append(i)\n    return n in primes\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given number is a prime number using the Sieve of Eratosthenes algorithm.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    primes = []\n    is_prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if is_prime[p]:\n            for i in range(p * p, n + 1, p):\n                is_prime[i] = False\n        p += 1\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            primes.append(i)\n    return n in primes",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(n) that checks if a given number n is a prime number. The function g() returns the number 17, and the puzzle is to determine if 17 is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of prime numbers and how to check if a number is prime. The solution function g() returns a specific number (17) to be checked for primality using the function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list) -> bool:\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations and conditional logic. The function f uses a set to check for duplicates in a list, which is a set operation. It also uses conditional logic to return False if a duplicate is found. The solution function g returns a list of numbers. The assert statement checks if the function f applied to the output of function g returns True.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list) -> bool:\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires writing a function f(arr: list) that checks if there are any duplicate elements in a given list. The solution function g() returns a list of unique elements, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for duplicate elements in a list using a set data structure in Python. The solution function g() provides a list without duplicates, and the puzzle tests the correctness of the function f() by asserting its output.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(s: str) -> bool:\n    s = re.sub('[^a-zA-Z0-9]', '', s).lower()\n    return s == s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Pattern Recognition",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "import re\n\ndef f(s: str) -> bool:\n    s = re.sub('[^a-zA-Z0-9]', '', s).lower()\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "Given a function f that checks if a string is a palindrome after removing non-alphanumeric characters and converting to lowercase, provide a string that is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to understand how to check for palindromes in a string after certain transformations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, n=7, m=3) -> bool:\n    return n * m + n // m == result\ndef g(n=7, m=3):\n    return n * m + n // m\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, n=7, m=3) -> bool:\n    return n * m + n // m == result",
        "solution_func": "def g(n=7, m=3):\n    return n * m + n // m",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a result and two optional parameters n and m, and a function g that takes the same optional parameters. The goal is to check if the result of g with default parameters satisfies the condition defined in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function definitions, default parameters, and function invocation in Python. It requires students to analyze the given functions and determine if the assertion holds true.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(valid: list, numbers=[5, 12, 9, 3, 7]) -> bool:\n    return all(num % 3 == 0 for num in valid)\ndef g(numbers=[5, 12, 9, 3, 7]):\n    return [num for num in numbers if num % 3 == 0]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list comprehension, modulo operation, and assertion testing.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True"
        ],
        "problem_func": "def f(valid: list, numbers=[5, 12, 9, 3, 7]) -> bool:\n    return all(num % 3 == 0 for num in valid)",
        "solution_func": "def g(numbers=[5, 12, 9, 3, 7]):\n    return [num for num in numbers if num % 3 == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a given list are divisible by 3, and a function g that returns a list of numbers from a given list that are divisible by 3. The puzzle tests the correctness of function g by asserting that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and function composition in Python. It also tests the ability to define functions with default arguments and use them in function calls.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sorted_list: List[int]) -> bool:\n    if len(sorted_list) < 3:\n        return False\n    return all(sorted_list[i] + sorted_list[i+1] == sorted_list[i+2] for i in range(len(sorted_list) - 2))\n\ndef g(numbers=[1, 2, 3, 5, 8, 13]):\n    return sorted(numbers)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and checking if the sorted list satisfies a specific condition.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True",
            "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(sorted_list: List[int]) -> bool:\n    if len(sorted_list) < 3:\n        return False\n    return all(sorted_list[i] + sorted_list[i+1] == sorted_list[i+2] for i in range(len(sorted_list) - 2))",
        "solution_func": "def g(numbers=[1, 2, 3, 5, 8, 13]):\n    return sorted(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given list of integers satisfies a specific condition. The solution function generates a sorted list of numbers and checks if it satisfies the condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and checking a specific condition on the list elements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, target=30) -> bool:\n    for a in nums:\n        for b in nums:\n            for c in nums:\n                if a**2 + b**2 == c**2:\n                    return True\n    return False\n\ndef g(target=30):\n    triplet = [3, 4, 5]\n    return triplet + [target - sum(triplet)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, target=30) -> bool:\n    for a in nums:\n        for b in nums:\n            for c in nums:\n                if a**2 + b**2 == c**2:\n                    return True\n    return False",
        "solution_func": "def g(target=30):\n    triplet = [3, 4, 5]\n    return triplet + [target - sum(triplet)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a Pythagorean triplet in a given list of numbers that satisfies the condition a^2 + b^2 = c^2."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves iterating through all possible combinations of three numbers in the list to check if they form a Pythagorean triplet. The solution generates a specific Pythagorean triplet based on the target value and checks if it satisfies the condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom collections import Counter\n\ndef f(words: list, pair=('listen', 'silent')) -> bool:\n    return Counter(pair[0]) == Counter(pair[1]) and pair[0] in words and pair[1] in words\n\ndef g(pair=('listen', 'silent')):\n    return ['listen', 'silent', 'python', 'typhoon']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.), Set Operations",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True"
        ],
        "problem_func": "from collections import Counter\n\ndef f(words: list, pair=('listen', 'silent')) -> bool:\n    return Counter(pair[0]) == Counter(pair[1]) and pair[0] in words and pair[1] in words",
        "solution_func": "def g(pair=('listen', 'silent')):\n    return ['listen', 'silent', 'python', 'typhoon']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires checking if two words have the same characters and are present in a list of words."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the Counter class from the collections module to compare the characters in two words. The solution function g() returns a list of words, and the puzzle function f() checks if the pair of words 'listen' and 'silent' have the same characters and are present in the list of words returned by g().",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(pairs: list, target=10) -> bool:\n    for pair in pairs:\n        if sum(pair) == target:\n            return True\n    return False\n\ndef g(target=10):\n    return [(3, 7), (1, 9), (5, 5), (2, 8)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to find pairs of numbers that sum up to a target value.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(pairs: list, target=10) -> bool:\n    for pair in pairs:\n        if sum(pair) == target:\n            return True\n    return False",
        "solution_func": "def g(target=10):\n    return [(3, 7), (1, 9), (5, 5), (2, 8)]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of pairs of numbers, the function f checks if there exists a pair whose sum is equal to a target value. The function g returns a list of pairs of numbers. The puzzle is to find a pair of numbers in the list returned by g whose sum is equal to the target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there exists a pair of numbers in a list whose sum is equal to a target value. The solution function g returns a list of pairs of numbers that satisfy this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(chars: str = 'racecar') -> str:\n    return chars + chars[-2::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(chars: str = 'racecar') -> str:\n    return chars + chars[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that generates a palindrome by concatenating a string with its reverse excluding the last character. The assertion checks if the generated palindrome is correctly identified as a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(start: int = 20):\n    while True:\n        if all(start % i != 0 for i in range(2, int(start**0.5) + 1)):\n            return start\n        start += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to prime numbers, loops, and conditionals.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(start: int = 20):\n    while True:\n        if all(start % i != 0 for i in range(2, int(start**0.5) + 1)):\n            return start\n        start += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(num) checks if a number is prime, and g(start) finds the next prime number starting from a given number. The assert statement checks if the solution function g() returns a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for prime numbers and finding the next prime number. It can be used to teach students about prime numbers and basic looping in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))\n\ndef g(start: int = 1, diff: int = 3, length: int = 5):\n    return [start + diff*i for i in range(length)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check if a list of numbers forms an arithmetic sequence.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))",
        "solution_func": "def g(start: int = 1, diff: int = 3, length: int = 5):\n    return [start + diff*i for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers forms an arithmetic sequence with a given common difference, and a function g that generates a list of numbers in an arithmetic sequence based on the provided start, difference, and length parameters. The assertion at the end checks if function f returns True when applied to the list generated by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding arithmetic sequences and how to check if a list of numbers forms one. It also requires knowledge of list comprehension and function parameter defaults in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    palindrome = \"racecar\"\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    palindrome = \"racecar\"\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns a hardcoded palindrome string 'racecar'. The assert statement checks if the solution function g() correctly identifies the palindrome string as a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) as it checks if a given number is a prime number or not.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns the number 17. The puzzle is to verify that g() returns a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks for prime numbers and another function that returns a specific number. The challenge is to ensure that the specific number returned is a prime number according to the prime number checking function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns the string 'radar', which is a palindrome, and the assert statement confirms that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in ascending order using the `all` function and list comprehension. The solution generates a sorted list of numbers.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))",
        "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is sorted in ascending order, and a function g that returns a specific sorted list of integers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and indexing in Python. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, k=3) -> bool:\n    return sum(arr) / len(arr) > k\ndef g(k=3):\n    return [k * i for i in range(1, 6)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list, k=3) -> bool:\n    return sum(arr) / len(arr) > k",
        "solution_func": "def g(k=3):\n    return [k * i for i in range(1, 6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the average of a list of numbers is greater than a given value k, and a function g that generates a list of numbers based on the value of k. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the average of a list of numbers and comparing it to a given value. The solution function g generates a list of numbers based on the input value k.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='python', value=3) -> bool:\n    return key in d and d[key] == value\ndef g(key='python', value=3):\n    return {key: value, 'java': 1, 'c++': 2}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='python', value=3) -> bool:\n    return key in d and d[key] == value",
        "solution_func": "def g(key='python', value=3):\n    return {key: value, 'java': 1, 'c++': 2}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given key-value pair exists in a dictionary, and another function g that returns a dictionary with specific key-value pairs. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions that work with dictionaries in Python and ensuring that the function g returns the expected dictionary structure for f to evaluate to True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int, target=8) -> bool:\n    return n == target or (n % 2 == 0 and f(n // 2))\ndef g(target=8):\n    return target * 2\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion and mathematical operations.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int, target=8) -> bool:\n    return n == target or (n % 2 == 0 and f(n // 2))",
        "solution_func": "def g(target=8):\n    return target * 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a recursive function f that checks if a given number is equal to a target number or if it is even and recursively divides it by 2 until it reaches the target. The solution function g simply doubles the target number. The assertion checks if applying the solution to the puzzle function returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding recursion, conditional statements, and function composition in Python. It tests the student's ability to follow the logic of the functions and apply the solution correctly.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return d.get('name') == 'Alice' and d.get('age') == 25\ndef g():\n    return {'name': 'Alice', 'age': 25, 'occupation': 'Engineer'}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic to check if the dictionary contains specific key-value pairs.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return d.get('name') == 'Alice' and d.get('age') == 25",
        "solution_func": "def g():\n    return {'name': 'Alice', 'age': 25, 'occupation': 'Engineer'}",
        "quality": [
            null
        ],
        "description": [
            "Given a dictionary with keys 'name', 'age', and 'occupation', the puzzle requires checking if the 'name' is 'Alice' and the 'age' is 25."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if the 'name' is 'Alice' and the 'age' is 25 in a given dictionary. The solution function g returns a dictionary with these values to satisfy the condition in f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))\ndef g():\n    return [10, 8, 6, 4, 2, 0]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list is sorted in non-increasing order.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [10, 8, 6, 4, 2, 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers is sorted in non-increasing order, and a function g that returns a specific list of numbers. The puzzle is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of numbers is sorted in non-increasing order using the function f, and providing a specific list of numbers in function g to test the correctness of function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(primes: List[int], start=10, end=100) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(num) for num in primes)\ndef g(start=10, end=100):\n    return [num for num in range(start, end+1) if all(num % i != 0 for i in range(2, int(num**0.5)+1))]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to prime numbers, list comprehension, and assertion testing.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(primes: List[int], start=10, end=100) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(num) for num in primes)",
        "solution_func": "def g(start=10, end=100):\n    return [num for num in range(start, end+1) if all(num % i != 0 for i in range(2, int(num**0.5)+1))]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers generated by function g() contains only prime numbers within a specified range."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list comprehension, prime number checking, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [2, 8]  # Generate a list of numbers that sum up to the target\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Brute Force Search, and Conditional Logic.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 8]  # Generate a list of numbers that sum up to the target",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a pair of numbers in a list that sum up to a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there exists a pair of numbers in a given list that add up to a specified target value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=20) -> bool:\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False\n\ndef g(target=20):\n    return [[5, 5, 10], [8, 6, 6], [4, 7, 9]]  # Generate a matrix where each row sums up to the target\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic and list operations to check if the sum of any row in a matrix equals a target value.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]], target=20) -> bool:\n    for row in matrix:\n        if sum(row) == target:\n            return True\n    return False",
        "solution_func": "def g(target=20):\n    return [[5, 5, 10], [8, 6, 6], [4, 7, 9]]  # Generate a matrix where each row sums up to the target",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a matrix of integers and a target integer, and checks if any row in the matrix sums up to the target. The solution function g generates a matrix where each row sums up to the target, and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with matrices, iterating through rows, and checking sums. It also demonstrates how to generate a matrix with specific row sums.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"level\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, provide a string input to function g() such that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use the function f(s) to check if a given string is a palindrome and providing an appropriate string input to function g() to satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime or not.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number, and a function g() that returns the number 17. The puzzle requires g() to return a prime number for the assertion to pass."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function return values in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    return all(num % 2 == 0 for num in lst)\ndef g():\n    return [2, 4, 6, 8, 10, 12]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int]) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 10, 12]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function f checks if all the numbers in the list are even. The solution function g returns a list of even numbers, and the assertion checks if the puzzle function returns True for the solution."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all numbers in a list are even, which is a fundamental concept in Python. The solution provides a list of even numbers to test the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(count: int, element='apple', fruits=['apple', 'banana', 'apple', 'orange', 'apple'], threshold=3) -> bool:\n    return fruits.count(element) >= threshold and fruits.count(element) == count\ndef g(element='apple', fruits=['apple', 'banana', 'apple', 'orange', 'apple'], threshold=3):\n    return fruits.count(element)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(count: int, element='apple', fruits=['apple', 'banana', 'apple', 'orange', 'apple'], threshold=3) -> bool:\n    return fruits.count(element) >= threshold and fruits.count(element) == count",
        "solution_func": "def g(element='apple', fruits=['apple', 'banana', 'apple', 'orange', 'apple'], threshold=3):\n    return fruits.count(element)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the count of a specific element in a list of fruits is greater than or equal to a threshold and equal to a given count. The solution function g returns the count of a specific element in the list of fruits. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function parameters, default values, list methods, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\ndef g(size=3):\n    import numpy as np\n    matrix = np.random.randint(0, 10, (size, size))\n    matrix = (matrix + matrix.T) // 2  # Ensuring symmetry\n    return matrix.tolist()\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and symmetry checking, which falls under the topics of Mathematical Operations and Importing Modules (Itertools, etc.).",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(matrix: list) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g(size=3):\n    import numpy as np\n    matrix = np.random.randint(0, 10, (size, size))\n    matrix = (matrix + matrix.T) // 2  # Ensuring symmetry\n    return matrix.tolist()",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a random symmetric matrix and checking if all elements along the main diagonal are equal to their corresponding elements across the diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of matrix symmetry and comparison in Python using list comprehension and numpy operations.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, seq=[1, 2, 3]) -> bool:\n    return any((lst[i:i+len(seq)] == seq for i in range(len(lst) - len(seq) + 1)))\ndef g(seq=[1, 2, 3]):\n    return [4, 1, 2, 3, 5]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and searching for a subsequence within a list.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, seq=[1, 2, 3]) -> bool:\n    return any((lst[i:i+len(seq)] == seq for i in range(len(lst) - len(seq) + 1)))",
        "solution_func": "def g(seq=[1, 2, 3]):\n    return [4, 1, 2, 3, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given list contains a specific sequence of numbers. The solution function g generates a list and checks if it contains the sequence [1, 2, 3]."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for a specific sequence within a list using a given function and verifying the solution with another function. It tests the understanding of list slicing and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, n=5) -> bool:\n    has_even = any(num % 2 == 0 for num in lst)\n    has_odd = any(num % 2 != 0 for num in lst)\n    return has_even and has_odd\ndef g(n=5):\n    import random\n    return random.choices(range(1, 10), k=n)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and importing modules (random).",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, n=5) -> bool:\n    has_even = any(num % 2 == 0 for num in lst)\n    has_odd = any(num % 2 != 0 for num in lst)\n    return has_even and has_odd",
        "solution_func": "def g(n=5):\n    import random\n    return random.choices(range(1, 10), k=n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of random numbers and check if the list contains both even and odd numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, the any() function, and the random.choices() function in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, palindrome='radar') -> bool:\n    return s == s[::-1] and s == palindrome\ndef g(palindrome='radar'):\n    return palindrome\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, palindrome='radar') -> bool:\n    return s == s[::-1] and s == palindrome",
        "solution_func": "def g(palindrome='radar'):\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome and equal to a specified palindrome string. Another function g returns the specified palindrome string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, function definition, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime or not using a brute force search algorithm.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) which checks if a given number is prime or not, and g() which returns the number 17. The puzzle requires g() to return a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. This requires understanding of matrix operations and nested loops.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True",
        "solution_func": "def g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f(matrix: List[List[int]]) that checks if a given matrix is symmetric along its main diagonal. The function returns True if the matrix is symmetric and False otherwise. The solution function g() returns a sample matrix and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding matrix symmetry along the main diagonal and implementing a function to check for this property. It also requires knowledge of nested loops and list indexing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1] and len(s) % 2 == 0\ndef g(pattern='AB') -> str:\n    return pattern + pattern[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1] and len(s) % 2 == 0",
        "solution_func": "def g(pattern='AB') -> str:\n    return pattern + pattern[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome and has even length, and a function g(pattern) that returns the pattern concatenated with its reverse, find a pattern that satisfies f(g()) == True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers) and len(numbers) > 1\ndef g(start=1, step=2, count=5) -> List[int]:\n    return [start + step * i for i in range(count)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and checking if the list has more than one element.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers) and len(numbers) > 1",
        "solution_func": "def g(start=1, step=2, count=5) -> List[int]:\n    return [start + step * i for i in range(count)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define two functions: f(numbers) which checks if a list of numbers is sorted and has more than one element, and g(start, step, count) which generates a list of numbers based on the input parameters. The puzzle then asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting, list generation using a mathematical formula, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g() -> int:\n    num = 29\n    while True:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return num\n        num += 1\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search algorithm.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    num = 29\n    while True:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return num\n        num += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is prime, and a function g() that finds the next prime number starting from 29. The solution g() iterates through numbers to find the next prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to find the next prime number. It tests the student's knowledge of loops, conditionals, and prime number checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(arr: List[int], start=3, diff=5) -> bool:\n    return all(arr[i] - arr[i-1] == diff for i in range(1, len(arr))) and arr[0] == start\ndef g(start=3, diff=5):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves creating a list of numbers with a specific difference between consecutive elements and starting from a specific number. The solution generates the list based on the given parameters and checks if the list satisfies the condition defined in the puzzle.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(arr: List[int], start=3, diff=5) -> bool:\n    return all(arr[i] - arr[i-1] == diff for i in range(1, len(arr))) and arr[0] == start",
        "solution_func": "def g(start=3, diff=5):\n    return [start + i * diff for i in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function f(arr: List[int], start=3, diff=5) that checks if the elements in the input list 'arr' form an arithmetic sequence with a common difference 'diff' starting from 'start'. The function g(start=3, diff=5) generates a list of 5 elements in an arithmetic sequence based on the given start and difference values, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding arithmetic sequences and list comprehension in Python. It tests the students' ability to implement a function that checks for a specific pattern in a list and to generate a list based on a given pattern.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str) -> bool:\n    s = ''.join(char.lower() for char in palindrome if char.isalnum())\n    return s == s[::-1]\n\ndef g(input_str='A man, a plan, a canal, Panama!'):\n    s = ''.join(char.lower() for char in input_str if char.isalnum())\n    return s + s[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str) -> bool:\n    s = ''.join(char.lower() for char in palindrome if char.isalnum())\n    return s == s[::-1]",
        "solution_func": "def g(input_str='A man, a plan, a canal, Panama!'):\n    s = ''.join(char.lower() for char in input_str if char.isalnum())\n    return s + s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome after removing non-alphanumeric characters and ignoring case. The solution function concatenates the cleaned string with its reverse and returns the result."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, palindrome checking, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list, target_sum=18) -> bool:\n    return sum(numbers) == target_sum and all(num % 3 == 0 for num in numbers)\ndef g(target_sum = 18):\n    return [3, 6, 9]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking the sum of numbers in a list and checking if all numbers are divisible by 3.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list, target_sum=18) -> bool:\n    return sum(numbers) == target_sum and all(num % 3 == 0 for num in numbers)",
        "solution_func": "def g(target_sum = 18):\n    return [3, 6, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of numbers and a target sum as input, and checks if the sum of the numbers is equal to the target sum and if all numbers in the list are divisible by 3. The solution function g returns a specific list of numbers that meet the criteria, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, summing elements in a list, checking divisibility, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(numbers: list, n=7) -> bool:\n    return len(numbers) == n and all(sympy.isprime(num) for num in numbers)\ndef g(n = 7):\n    return [2, 3, 5, 7, 11, 13, 17]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers contains prime numbers using the sympy library. The solution generates a list of prime numbers up to a given limit.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "import sympy\n\ndef f(numbers: list, n=7) -> bool:\n    return len(numbers) == n and all(sympy.isprime(num) for num in numbers)",
        "solution_func": "def g(n = 7):\n    return [2, 3, 5, 7, 11, 13, 17]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that takes a list of numbers and checks if the list has exactly 7 elements and all elements are prime numbers. The solution function returns a list of the first 7 prime numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the length of a list and whether all elements in the list are prime numbers using the sympy library. The solution function returns a predefined list of the first 7 prime numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s='radar') -> str:\n    return s + s[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True",
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='radar') -> str:\n    return s + s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it with its reverse. The solution function appends the reverse of the input string to itself."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and checking for palindromes. It also tests the understanding of function composition and equality comparisons in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(x: int) -> bool:\n    if x < 2:\n        return False\n    for i in range(2, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True",
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(x: int) -> bool:\n    if x < 2:\n        return False\n    for i in range(2, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(x) that checks if a given integer x is a prime number, and a function g() that returns the integer 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, target_key='value', target_value=100) -> bool:\n    return target_key in data and data[target_key] == target_value\n\ndef g(target_key='value', target_value=100):\n    return {target_key: target_value}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and conditional logic to check if a specific key-value pair exists in a dictionary.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: dict, target_key='value', target_value=100) -> bool:\n    return target_key in data and data[target_key] == target_value",
        "solution_func": "def g(target_key='value', target_value=100):\n    return {target_key: target_value}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given key-value pair exists in a dictionary, and a function g that returns a dictionary with the specified key-value pair. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks for a specific key-value pair in a dictionary and how to create a dictionary with the required key-value pair. The assertion tests if the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name', value='Alice') -> bool:\n    return d[key] == value\ndef g(key='name', value='Alice'):\n    return {key: value}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and comparison.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True",
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='name', value='Alice') -> bool:\n    return d[key] == value",
        "solution_func": "def g(key='name', value='Alice'):\n    return {key: value}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given key-value pair exists in a dictionary, and another function g that creates a dictionary with the specified key-value pair. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, target='Python') -> bool:\n    return target in s\ndef g(target='Python'):\n    return f\"This is a string containing {target}\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True",
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, target='Python') -> bool:\n    return target in s",
        "solution_func": "def g(target='Python'):\n    return f\"This is a string containing {target}\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a target string is present in a given string, and a function g that generates a string containing the target string. The goal is to ensure that function g generates a string containing the target string and function f correctly identifies it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, string manipulation, and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(seq: list) -> bool:\n    return any(seq[i:i+3] == [1, 2, 3] for i in range(len(seq)-2))\ndef g():\n    return [4, 5, 1, 2, 3, 8, 9]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for a specific sequence of numbers within a list.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True"
        ],
        "problem_func": "def f(seq: list) -> bool:\n    return any(seq[i:i+3] == [1, 2, 3] for i in range(len(seq)-2))",
        "solution_func": "def g():\n    return [4, 5, 1, 2, 3, 8, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding if a list contains the subsequence [1, 2, 3]."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list contains the subsequence [1, 2, 3]. The function f(seq) checks for the presence of [1, 2, 3] in the list, and the function g() returns a list where the subsequence is present.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return any(s[i:j] == s[i:j][::-1] for i in range(len(s)) for j in range(i+4, len(s)+1))\ndef g():\n    return \"abcbaxyz\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return any(s[i:j] == s[i:j][::-1] for i in range(len(s)) for j in range(i+4, len(s)+1))",
        "solution_func": "def g():\n    return \"abcbaxyz\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a substring in a given string that is a palindrome of length 4 or more."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there exists a substring in a given string that is a palindrome of length 4 or more.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, threshold=200) -> bool:\n    return sum(x**2 for x in nums if x % 2 == 0) > threshold\ndef g():\n    return [2, 5, 8, 10, 12]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, threshold=200) -> bool:\n    return sum(x**2 for x in nums if x % 2 == 0) > threshold",
        "solution_func": "def g():\n    return [2, 5, 8, 10, 12]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of numbers and a threshold, and checks if the sum of squares of even numbers in the list is greater than the threshold. The solution function g returns a specific list of numbers to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, conditional filtering, and comparison operations in Python. It also requires implementing a function that calculates the sum of squares of even numbers in a list and comparing it to a threshold value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return all(x + y == 10 for x, y in tuples)\n\ndef g():\n    return [(x, 10 - x) for x in range(6)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and list comprehension. It also demonstrates the use of tuples and the `all` function in Python.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return all(x + y == 10 for x, y in tuples)",
        "solution_func": "def g():\n    return [(x, 10 - x) for x in range(6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples of integers and checks if the sum of each tuple's elements is equal to 10. The solution function g generates a list of tuples where the sum of each tuple's elements is 10, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, tuple unpacking, and the all() function in Python. It also tests the ability to generate tuples based on a specific condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nested_list: List[List[int]]) -> bool:\n    return all(isinstance(sub_list, list) and len(sub_list) > 0 and all(isinstance(x, int) for x in sub_list) for sub_list in nested_list)\n\ndef g():\n    return [[i for i in range(1, j+1)] for j in range(1, 6)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and comprehension, as well as type checking and validation. It does not directly relate to any of the provided topics.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nested_list: List[List[int]]) -> bool:\n    return all(isinstance(sub_list, list) and len(sub_list) > 0 and all(isinstance(x, int) for x in sub_list) for sub_list in nested_list)",
        "solution_func": "def g():\n    return [[i for i in range(1, j+1)] for j in range(1, 6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a nested list of integers and checks if each sub-list is non-empty and contains only integers. The solution function g generates a nested list of integers based on a specific pattern and asserts that f returns True for this generated list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the structure and content of a nested list of integers. The solution function generates a specific nested list pattern to test the function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='ABACADAEAF') -> bool:\n    return all(s[i] == pattern[i] for i in range(len(s)))\ndef g(pattern='ABACADAEAF'):\n    return pattern\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='ABACADAEAF') -> bool:\n    return all(s[i] == pattern[i] for i in range(len(s)))",
        "solution_func": "def g(pattern='ABACADAEAF'):\n    return pattern",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string matches a specific pattern, and a function g that returns the pattern. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to compare strings character by character and returning a specific pattern. The solution g simply returns the pattern for comparison in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    return np.array_equal(matrix, matrix.T)\ndef g(matrix=np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])):\n    return matrix + matrix.T\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves numpy arrays and checking for symmetry by comparing a matrix with its transpose.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "import numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    return np.array_equal(matrix, matrix.T)",
        "solution_func": "def g(matrix=np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])):\n    return matrix + matrix.T",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given matrix is equal to its transpose."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand matrix operations and the numpy library in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, sequence=[1, 3, 6, 10, 15, 21]) -> bool:\n    return all(nums[i] == sequence[i] for i in range(len(nums)))\ndef g(sequence=[1, 3, 6, 10, 15, 21]):\n    return sequence\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given list of numbers matches a specific sequence.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, sequence=[1, 3, 6, 10, 15, 21]) -> bool:\n    return all(nums[i] == sequence[i] for i in range(len(nums)))",
        "solution_func": "def g(sequence=[1, 3, 6, 10, 15, 21]):\n    return sequence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list of numbers matches a predefined sequence. The solution function g returns the predefined sequence. The puzzle is solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, equality comparison, and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g(s: str = \"racecar\"):\n    return s[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s: str = \"racecar\"):\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, and a function g(s) that returns the reverse of a string, the puzzle requires finding a string 's' such that f(g(s)) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically reversing a string and checking for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    cleaned_str = ''.join(char.lower() for char in s if char.isalnum())\n    return cleaned_str == cleaned_str[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    cleaned_str = ''.join(char.lower() for char in s if char.isalnum())\n    return cleaned_str == cleaned_str[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "Given a string, the puzzle checks if the string is a palindrome after removing non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string is a palindrome after removing non-alphanumeric characters and ignoring case. The solution function g() returns a specific string that is a palindrome, satisfying the puzzle condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'racecar'. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function f(num: int) that checks if a given number is a prime number. The student also needs to define a function g() that returns a specific number, and the puzzle is solved if f(g()) returns True for the given number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a prime number and ensuring that the function g() returns the number 17. The student needs to define f(num: int) to check for primality and g() to return 17.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\ndef g():\n    return [1, 3, 5, 7, 9]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in ascending order.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function f checks if the list is sorted in non-decreasing order. The solution function g returns a sorted list of odd numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list is sorted in non-decreasing order, which is a fundamental concept in programming. The solution provides an example of a sorted list of odd numbers to satisfy the puzzle condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(is_sorted: bool, arr=[-3, 0, 12, 24, 56, 89]) -> bool:\n    return arr == sorted(arr) == is_sorted\ndef g(arr=[-3, 0, 12, 24, 56, 89]):\n    return sorted(arr)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(is_sorted: bool, arr=[-3, 0, 12, 24, 56, 89]) -> bool:\n    return arr == sorted(arr) == is_sorted",
        "solution_func": "def g(arr=[-3, 0, 12, 24, 56, 89]):\n    return sorted(arr)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that sorts a given list and then checks if the sorted list is equal to the original list and if it is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to sort a list in Python and checking if the list is sorted in ascending order.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, text=\"radar\") -> bool:\n    return s == s[::-1]\ndef g(text = \"radar\"):\n    return text[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, text=\"radar\") -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(text = \"radar\"):\n    return text[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that returns the reverse of a default string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation in Python, specifically checking for palindromes and reversing strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, progression=[3, 6, 9, 12, 15]) -> bool:\n    for i in range(len(nums) - 2):\n        if nums[i] + nums[i + 2] == 2 * nums[i + 1]:\n            return True\n    return False\ndef g(progression = [3, 6, 9, 12, 15]):\n    return [progression[0] + i * (progression[1] - progression[0]) for i in range(len(progression))]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic. It checks if a given list of numbers forms an arithmetic progression.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, progression=[3, 6, 9, 12, 15]) -> bool:\n    for i in range(len(nums) - 2):\n        if nums[i] + nums[i + 2] == 2 * nums[i + 1]:\n            return True\n    return False",
        "solution_func": "def g(progression = [3, 6, 9, 12, 15]):\n    return [progression[0] + i * (progression[1] - progression[0]) for i in range(len(progression))]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers forms an arithmetic progression by comparing the sum of the first and third elements with twice the second element."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list manipulation, arithmetic progression, and function calling in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, n=17) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(n = 17):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, n=17) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(n = 17):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is prime, and a function g(n) that finds the nth prime number. The puzzle requires students to understand prime numbers and function composition in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the students' understanding of prime numbers and function composition in Python. It provides a practical application of checking for prime numbers and finding the nth prime number using functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    clean_s = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_s == clean_s[::-1]\n    \ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n    \nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation and Conditional Logic are used in this puzzle.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    clean_s = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_s == clean_s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if a given string is a palindrome after removing non-alphanumeric characters, and a solution function that returns a specific string. The assertion checks if the solution string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and checking for palindromes in Python. It is a good exercise for students to practice string operations and understanding palindrome concepts.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    return [i for i in range(1000)]\n    \nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in non-decreasing order. The solution generates a list of numbers from 0 to 999. This puzzle mainly focuses on Sorting and Ordering topic.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [i for i in range(1000)]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function f checks if the list is sorted in non-decreasing order. The solution function g generates a list of integers from 0 to 999. The assertion checks if the solution satisfies the puzzle condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list is sorted in non-decreasing order, which is a fundamental concept in programming. The solution generates a list that meets this condition. This puzzle can be used to teach students about list manipulation and sorting in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 9973\n    \nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 9973",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num: int) that checks if a given number is a prime number or not, and a function g() that returns a specific number. The puzzle requires g() to return a number such that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [3, 7]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Brute Force Search, and Conditional Logic.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [3, 7]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function f checks if there are two numbers in the list that add up to a target value. The solution function g returns a list of two integers. The puzzle is solved if the puzzle function returns True when called with the solution function's output as input."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of lists, sets, and iteration in Python. The solution function g returns a list of two integers that add up to the target value. The puzzle function f checks if there are two numbers in the input list that add up to the target value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], fib_length=5) -> bool:\n    if len(nums) < fib_length:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True\ndef g(fib_length=5):\n    fib_sequence = [1, 1, 2, 3, 5]\n    return fib_sequence\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given list of numbers forms a Fibonacci sequence of a specified length.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], fib_length=5) -> bool:\n    if len(nums) < fib_length:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] != nums[i-1] + nums[i-2]:\n            return False\n    return True",
        "solution_func": "def g(fib_length=5):\n    fib_sequence = [1, 1, 2, 3, 5]\n    return fib_sequence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list of numbers forms a Fibonacci sequence of a specified length. The solution function g returns a predefined Fibonacci sequence of the specified length."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check if a list of numbers forms a Fibonacci sequence and how to define a function to return a Fibonacci sequence of a given length.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. The solution function g() returns the string 'level', which is a palindrome. The assert statement confirms that the solution function g() correctly solves the challenge defined by function f(s).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm. It does not directly relate to any specific topic from the list provided.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num: int) -> bool and g() which returns 17. Function f(num) checks if a given number is a prime number or not. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(seq: list) -> bool:\n    for i in range(len(seq) - 2):\n        if seq[i] == seq[i + 1] - 1 == seq[i + 2] - 2 and sum(seq[i:i+3]) > 20:\n            return True\n    return False\n\ndef g() -> list:\n    return [5, 6, 7, 8, 9, 10, 11]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "def f(seq: list) -> bool:\n    for i in range(len(seq) - 2):\n        if seq[i] == seq[i + 1] - 1 == seq[i + 2] - 2 and sum(seq[i:i+3]) > 20:\n            return True\n    return False",
        "solution_func": "def g() -> list:\n    return [5, 6, 7, 8, 9, 10, 11]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if there exists a subsequence of three consecutive numbers in a list where each number is one less than the next, and the sum of the subsequence is greater than 20."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for a specific pattern in a list and verifying if the sum of the subsequence that matches the pattern is greater than 20.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, min_length=5, max_length=10) -> bool:\n    return len(set(s)) == len(s) and min_length <= len(s) <= max_length\ndef g(min_length=5, max_length=10):\n    import string\n    import random\n    length = random.randint(min_length, max_length)\n    return ''.join(random.sample(string.ascii_letters, length))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations, Importing Modules (Itertools, etc.)",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, min_length=5, max_length=10) -> bool:\n    return len(set(s)) == len(s) and min_length <= len(s) <= max_length",
        "solution_func": "def g(min_length=5, max_length=10):\n    import string\n    import random\n    length = random.randint(min_length, max_length)\n    return ''.join(random.sample(string.ascii_letters, length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to write a function that generates a random string of a specified length and checks if the string contains only unique characters within a given range of lengths."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, random generation, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(words: List[str], target='python') -> bool:\n    return any(target in word for word in words)\ndef g(target='python'):\n    return [char + target + char for char in 'abcdefghijklmnopqrstuvwxyz']\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(words: List[str], target='python') -> bool:\n    return any(target in word for word in words)",
        "solution_func": "def g(target='python'):\n    return [char + target + char for char in 'abcdefghijklmnopqrstuvwxyz']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a target word is present in a list of words, and a function g that generates a list of strings by appending the target word between each character in the alphabet. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, string manipulation, and the any() function in Python. It also tests the ability to pass functions as arguments and use them in assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return all(ord(s[i]) - ord(s[i-1]) == 1 for i in range(1, len(s)))\ndef g():\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join([alphabet[i % 26] for i in range(1, 11)])\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return all(ord(s[i]) - ord(s[i-1]) == 1 for i in range(1, len(s)))",
        "solution_func": "def g():\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join([alphabet[i % 26] for i in range(1, 11)])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the difference between the ASCII values of consecutive characters in a string is always 1, and a function g that generates a string using the English alphabet. The puzzle asserts that the output of function g satisfies the condition of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding ASCII values, string manipulation, list comprehension, and the all() function in Python. It requires students to generate a specific string using the English alphabet and check if it satisfies a specific condition based on ASCII values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(n: int) -> bool:\n    return is_prime(n) and str(n) == str(n)[::-1]\n\ndef g():\n    n = 11\n    while True:\n        if is_prime(n) and str(n) == str(n)[::-1]:\n            return n\n        n += 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as prime numbers, string manipulation, loops, and assertions.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(n: int) -> bool:\n    return is_prime(n) and str(n) == str(n)[::-1]",
        "solution_func": "def g():\n    n = 11\n    while True:\n        if is_prime(n) and str(n) == str(n)[::-1]:\n            return n\n        n += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding the smallest prime palindrome number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to implement functions to check for prime numbers and palindromes, and then find the smallest prime palindrome number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(lst[i] == lst[i-1] + lst[i-2] for i in range(2, len(lst)))\ndef g():\n    fib_list = [0, 1]\n    for _ in range(3, 10):\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves the topics of Mathematical Operations (1) and Recursion (3). The function f checks if a given list satisfies the Fibonacci sequence property, and the function g generates a list of Fibonacci numbers to test this property.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(lst[i] == lst[i-1] + lst[i-2] for i in range(2, len(lst)))",
        "solution_func": "def g():\n    fib_list = [0, 1]\n    for _ in range(3, 10):\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given list satisfies a specific condition based on the Fibonacci sequence. The solution generates a list of Fibonacci numbers and checks if it satisfies the condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the Fibonacci sequence and implementing a function to check a specific condition based on it. It provides a practical application of list manipulation and comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, word='radar') -> bool:\n    return s == s[::-1]\ndef g(word='radar'):\n    return word\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, word='radar') -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(word='radar'):\n    return word",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome, and a function g that returns a specific word. The assertion checks if the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding palindrome checking and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums) and len(nums) >= 5\ndef g():\n    return [num * 2 for num in range(1, 8)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and the list has at least 5 elements.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True",
            "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums) and len(nums) >= 5",
        "solution_func": "def g():\n    return [num * 2 for num in range(1, 8)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are even and the list has a length of at least 5. The solution function g generates a list of even numbers and checks if it satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and the len() function in Python. It also requires knowledge of how to generate a list of numbers using range() and perform operations on each element of the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(len(word) > 5 and word.isalpha() for word in words)\ndef g():\n    return ['pythonic', 'algorithm', 'programming', 'solution']\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True",
            "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(len(word) > 5 and word.isalpha() for word in words)",
        "solution_func": "def g():\n    return ['pythonic', 'algorithm', 'programming', 'solution']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a list of strings as input and returns True if all the strings have a length greater than 5 and consist only of alphabetic characters. The solution function provides a list of strings that meet the criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the length and alphabetic nature of strings in a list. The solution function provides a list of strings that satisfy the conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True",
            "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == 5\ndef g():\n    return \"aeiou\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True",
            "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count == 5",
        "solution_func": "def g():\n    return \"aeiou\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f(s: str) that counts the number of vowels in a given string and returns True if the count is equal to 5. The solution function g() returns the string 'aeiou', and the puzzle is solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves counting vowels in a string and checking if the count is equal to a specific number. It is a simple and straightforward puzzle that can be used to teach string manipulation and function calls in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(check: str, s=\"abcdeabcde\") -> bool:\n    return check in s\n\ndef g() -> str:\n    return \"abcde\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(check: str, s=\"abcdeabcde\") -> bool:\n    return check in s",
        "solution_func": "def g() -> str:\n    return \"abcde\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is present in a default string. The solution function g returns a specific string, and the puzzle asserts that f applied to the output of g should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "This puzzle is a simple string matching exercise where the function f checks if a given string is present in a default string. The solution function g returns a specific string that is present in the default string, satisfying the condition for f to return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 3:\n        return False\n    return all(nums[i] + nums[i + 1] == nums[i + 2] for i in range(len(nums) - 2))\n\ndef g() -> List[int]:\n    fib_sequence = [0, 1]\n    while fib_sequence[-1] + fib_sequence[-2] < 100:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a given list of numbers forms a Fibonacci sequence. The function f checks if the input list satisfies the Fibonacci sequence property, and the function g generates a Fibonacci sequence up to a certain limit. The assert statement verifies that the solution function g produces a valid Fibonacci sequence.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 3:\n        return False\n    return all(nums[i] + nums[i + 1] == nums[i + 2] for i in range(len(nums) - 2))",
        "solution_func": "def g() -> List[int]:\n    fib_sequence = [0, 1]\n    while fib_sequence[-1] + fib_sequence[-2] < 100:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers forms a Fibonacci sequence by summing up consecutive elements in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list manipulation, iteration, and the Fibonacci sequence.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(words[i] <= words[i+1] for i in range(len(words) - 1))\n\ndef g() -> List[str]:\n    return sorted([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"])\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(words[i] <= words[i+1] for i in range(len(words) - 1))",
        "solution_func": "def g() -> List[str]:\n    return sorted([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires sorting a list of words in alphabetical order and checking if the sorted list is in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of words and checking if the sorted list is in ascending order using the given functions f and g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return any(s[i:j] == s[i:j][::-1] for i in range(len(s)) for j in range(i+3, len(s)+1))\ndef g():\n    return \"racecar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return any(s[i:j] == s[i:j][::-1] for i in range(len(s)) for j in range(i+3, len(s)+1))",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a substring in a given string that is a palindrome of length 3 or more."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there exists a substring in a given string that is a palindrome of length 3 or more.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom sympy import isprime\n\ndef f(lst: list) -> bool:\n    return any(isprime(sum(lst[i:j])) for i in range(len(lst)) for j in range(i+2, len(lst)+1))\ndef g():\n    return [2, 3, 5, 7, 11]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if the sum of a sublist of numbers in a given list is a prime number.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "from sympy import isprime\n\ndef f(lst: list) -> bool:\n    return any(isprime(sum(lst[i:j])) for i in range(len(lst)) for j in range(i+2, len(lst)+1))",
        "solution_func": "def g():\n    return [2, 3, 5, 7, 11]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if there exists a subarray in a given list whose sum is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand list slicing, iteration, and prime number checking using the sympy library in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, pattern=[2, 4, 6]) -> bool:\n    return all(x == y for x, y in zip(arr, pattern))\ndef g(pattern=[2, 4, 6]):\n    return [x for x in range(2, len(pattern)*2, 2)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and comparison using zip function. It also includes assertion testing for correctness.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list, pattern=[2, 4, 6]) -> bool:\n    return all(x == y for x, y in zip(arr, pattern))",
        "solution_func": "def g(pattern=[2, 4, 6]):\n    return [x for x in range(2, len(pattern)*2, 2)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list matches a specific pattern, and a function g that generates a list based on a given pattern. The assertion tests if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension, zip function, and the all function in Python. It also requires understanding of function parameters and assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pal=\"racecar\") -> bool:\n    return s == pal\ndef g(pal=\"racecar\") -> str:\n    return pal\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pal=\"racecar\") -> bool:\n    return s == pal",
        "solution_func": "def g(pal=\"racecar\") -> str:\n    return pal",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string is equal to a predefined palindrome string, and g returns the predefined palindrome string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in defining functions and understanding function composition in Python. It tests the student's understanding of function calls and return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom sympy import isprime\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(isprime(num) for num in nums)\n\ndef g() -> List[int]:\n    return [2, 4, 7, 10, 15, 20]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if any number in a list is a prime number using the sympy library.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "from sympy import isprime\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(isprime(num) for num in nums)",
        "solution_func": "def g() -> List[int]:\n    return [2, 4, 7, 10, 15, 20]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if any of the numbers in a given list are prime numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function that checks if any of the numbers in a list are prime numbers, and then provide a list of numbers to test the function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int) -> bool:\n    return result == 120\n\ndef g(n=5):\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations (calculating factorial) and conditional logic (checking if result is equal to 120).",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True",
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int) -> bool:\n    return result == 120",
        "solution_func": "def g(n=5):\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that calculates the factorial of a given number and then check if the factorial is equal to 120."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves calculating the factorial of a number and checking if it equals a specific value, which tests the student's understanding of functions and loops in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    return all(num % 2 == 0 for num in lst)\ndef g():\n    return [num for num in range(1, 11) if num % 2 == 0]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list comprehension and checking if all elements in the list are even numbers.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int]) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g():\n    return [num for num in range(1, 11) if num % 2 == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: List[int]) that checks if all numbers in a list are even, and a function g() that generates a list of even numbers from 1 to 10. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and modulo operator in Python. It tests the ability to create a function that filters even numbers and another function that generates a list of even numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, find a string that satisfies the palindrome condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to check for palindromes in strings using slicing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(length=5):\n    return 'a' + 'b' * (length - 2) + 'a'\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(length=5):\n    return 'a' + 'b' * (length - 2) + 'a'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. It also defines a function g(length) that generates a string of length 'length' with 'a' at the beginning and end, and 'b' in between. The puzzle asserts that f(g()) should return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)\n\ndef g(length=4):\n    return list(range(1, length + 1))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and generating a list of integers using range function.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)",
        "solution_func": "def g(length=4):\n    return list(range(1, length + 1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list of numbers is sorted in ascending order. The solution generates a list of numbers from 1 to a specified length."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in checking if a list is sorted and generating a sorted list. It can be used to teach basic list manipulation and comparison in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(start=10, end=50):\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            return num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a brute force search algorithm.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(start=10, end=50):\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num) which checks if a number is prime, and g(start, end) which finds the first prime number within a given range. The puzzle requires students to understand prime numbers and iteration in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for prime numbers and understanding how to iterate over a range of numbers in Python. It tests the student's knowledge of basic algorithms and Python syntax.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list) -> bool:\n    return all(sum(row) == 15 for row in matrix) and all(sum(col) == 15 for col in zip(*matrix))\ndef g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves matrix manipulation and checking the sum of rows and columns. It also involves list comprehension and zip function in Python.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True"
        ],
        "problem_func": "def f(matrix: list) -> bool:\n    return all(sum(row) == 15 for row in matrix) and all(sum(col) == 15 for col in zip(*matrix))",
        "solution_func": "def g():\n    return [[2, 7, 6], [9, 5, 1], [4, 3, 8]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f(matrix) that checks if the rows and columns of a matrix sum up to 15. The solution function g() returns a specific matrix that satisfies this condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the sum of rows and columns in a matrix, which is a common programming concept. The solution provided demonstrates how to create a matrix that meets the specified criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text.isalpha() and text.islower()\ndef g():\n    return \"pythonprogramming\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text.isalpha() and text.islower()",
        "solution_func": "def g():\n    return \"pythonprogramming\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(text: str) -> bool that checks if the input text is composed of alphabetic characters and all characters are lowercase. The solution function g() returns a specific string 'pythonprogramming' and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "This puzzle is suitable for teaching Python to master's students in CS as it involves string manipulation, function definition, and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target: int, numbers=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) -> bool:\n    subset_sum = sum(numbers)\n    if subset_sum == target:\n        return True\n    return False\n\ndef g(numbers=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]):\n    return sum(numbers)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(target: int, numbers=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) -> bool:\n    subset_sum = sum(numbers)\n    if subset_sum == target:\n        return True\n    return False",
        "solution_func": "def g(numbers=[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]):\n    return sum(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of a given list of numbers is equal to a target number. The solution function g calculates the sum of a list of numbers and returns it. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle is not suitable for teaching Python as it does not require any algorithmic thinking or problem-solving skills. It simply checks if the sum of a predefined list of numbers is equal to a target number, which is not a challenging task for master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, unique_chars='') -> bool:\n    return len(set(s)) == len(s)\n\ndef g(unique_chars=''):\n    return ''.join(set(unique_chars))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, unique_chars='') -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g(unique_chars=''):\n    return ''.join(set(unique_chars))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string has all unique characters, and a function g that returns a string with unique characters. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, sets, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and Number Theory (primes).",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number or not, and a function g() that returns the number 17. The puzzle requires checking if the number returned by g() is a prime number using the function f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a prime number, which is a fundamental concept in programming. It also requires understanding how to define functions and use assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, is_palindrome=False) -> bool:\n    return s == s[::-1]\ndef g(s='racecar'):\n    return s + s[-2::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, is_palindrome=False) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='racecar'):\n    return s + s[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f to check if a given string is a palindrome, and a function g that generates a modified string by concatenating the original string with a reversed substring. The assertion checks if the modified string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list, is_arithmetic=False) -> bool:\n    if len(numbers) < 2:\n        return False\n    diff = numbers[1] - numbers[0]\n    return all(numbers[i] - numbers[i-1] == diff for i in range(2, len(numbers)))\ndef g(start=1, diff=3, length=5):\n    return [start + i * diff for i in range(length)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and List Operations.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list, is_arithmetic=False) -> bool:\n    if len(numbers) < 2:\n        return False\n    diff = numbers[1] - numbers[0]\n    return all(numbers[i] - numbers[i-1] == diff for i in range(2, len(numbers)))",
        "solution_func": "def g(start=1, diff=3, length=5):\n    return [start + i * diff for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers forms an arithmetic sequence, and a function g that generates an arithmetic sequence based on given parameters. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for an arithmetic sequence in a list of numbers and generating an arithmetic sequence using a given starting point, difference, and length.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    nums.sort()\n    return any((nums[i]**2 + nums[i+1]**2 == nums[i+2]**2) for i in range(len(nums)-2))\ndef g():\n    for a in range(1, 100):\n        for b in range(a, 100):\n            c = (a**2 + b**2) ** 0.5\n            if c == int(c):\n                return [a, b, int(c)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    nums.sort()\n    return any((nums[i]**2 + nums[i+1]**2 == nums[i+2]**2) for i in range(len(nums)-2))",
        "solution_func": "def g():\n    for a in range(1, 100):\n        for b in range(a, 100):\n            c = (a**2 + b**2) ** 0.5\n            if c == int(c):\n                return [a, b, int(c)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of integers satisfies the Pythagorean theorem for any three consecutive elements in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires sorting the list of integers and then checking if the sum of squares of two consecutive elements is equal to the square of the third element for any three consecutive elements in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]\ndef g():\n    return \"Able was I ere I saw Elba\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation and Palindrome checking",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"Able was I ere I saw Elba\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function to check if a given string is a palindrome after removing spaces and converting to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f(s: str) that checks if a given string is a palindrome after removing spaces and converting to lowercase. The solution function g() returns a specific string that is a palindrome when spaces are removed and converted to lowercase.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    n = random.randint(1, 10)\n    s = ''.join(random.choice(letters) for _ in range(n))\n    return s + s[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.), Pattern Recognition",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    n = random.randint(1, 10)\n    s = ''.join(random.choice(letters) for _ in range(n))\n    return s + s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, write a function g() that generates a random string and its palindrome, and returns their concatenation. The puzzle is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a randomly generated string and its palindrome concatenated together form a palindrome. The solution function g() generates such strings and their palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    seq = [1, 2, 3]\n    for i in range(len(lst) - len(seq) + 1):\n        if lst[i:i + len(seq)] == seq:\n            return True\n    return False\n\ndef g():\n    import random\n    n = random.randint(3, 10)\n    lst = [random.randint(1, 3) for _ in range(n)]\n    idx = random.randint(0, n - 3)\n    lst[idx:idx + 3] = [1, 2, 3]\n    return lst\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and brute force search.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int]) -> bool:\n    seq = [1, 2, 3]\n    for i in range(len(lst) - len(seq) + 1):\n        if lst[i:i + len(seq)] == seq:\n            return True\n    return False",
        "solution_func": "def g():\n    import random\n    n = random.randint(3, 10)\n    lst = [random.randint(1, 3) for _ in range(n)]\n    idx = random.randint(0, n - 3)\n    lst[idx:idx + 3] = [1, 2, 3]\n    return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(lst) that checks if a specific sequence [1, 2, 3] exists in a given list lst. The solution function g() generates a random list with elements 1, 2, or 3 and inserts the sequence [1, 2, 3] at a random position. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "This puzzle involves checking for a specific sequence in a list and manipulating lists using random elements. It can be used to teach students about list manipulation and sequence checking in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    import random\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_candidate = random.randint(2, 100)\n    while not is_prime(prime_candidate):\n        prime_candidate = random.randint(2, 100)\n    \n    return prime_candidate\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search algorithm. The solution generates random numbers and checks if they are prime until a prime number is found.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import random\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_candidate = random.randint(2, 100)\n    while not is_prime(prime_candidate):\n        prime_candidate = random.randint(2, 100)\n    \n    return prime_candidate",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is prime, and a function g() that generates a random prime number between 2 and 100. The puzzle requires g() to return a prime number that satisfies the condition f(g()) == True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = s.lower()\n    vowels = 'aeiou'\n    return s == s[::-1] and any(char in vowels for char in s)\ndef g():\n    return \"Able was I ere I saw Elba\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = s.lower()\n    vowels = 'aeiou'\n    return s == s[::-1] and any(char in vowels for char in s)",
        "solution_func": "def g():\n    return \"Able was I ere I saw Elba\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that checks if a given string is a palindrome and contains at least one vowel. The solution function returns a specific palindrome string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, checking for palindromes, and checking for the presence of vowels in a string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(lst: List[int]) -> bool:\n    return all(lst[i] - lst[i - 1] == 5 for i in range(1, len(lst)))\ndef g():\n    return [1, 6, 11, 16, 21]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the elements in the list have a difference of 5 between consecutive elements.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(lst: List[int]) -> bool:\n    return all(lst[i] - lst[i - 1] == 5 for i in range(1, len(lst)))",
        "solution_func": "def g():\n    return [1, 6, 11, 16, 21]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: List[int]) that checks if the difference between consecutive elements in the input list is always 5. The solution function g() returns a list where each element is 5 greater than the previous element, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the ability to create a list with a specific pattern.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sorted_list: list) -> bool:\n    return sorted_list == sorted([x for x in range(10) if x % 2 == 0])\n\ndef g():\n    return [x for x in range(10) if x % 2 == 0]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, sorting, and conditional logic.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(sorted_list: list) -> bool:\n    return sorted_list == sorted([x for x in range(10) if x % 2 == 0])",
        "solution_func": "def g():\n    return [x for x in range(10) if x % 2 == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that returns True if a given list is equal to a sorted list of even numbers from 0 to 8. The student must then implement a function that generates a list of even numbers from 0 to 8 and check if the function satisfies the condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, sorting, and comparison of lists in Python. It tests the student's ability to generate a specific list and compare it with a sorted list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int) -> bool:\n    return result == 120\n\ndef g(n=5):\n    if n == 1:\n        return 1\n    else:\n        return n * g(n-1)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and recursion.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int) -> bool:\n    return result == 120",
        "solution_func": "def g(n=5):\n    if n == 1:\n        return 1\n    else:\n        return n * g(n-1)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the result is equal to 120 and g calculates the factorial of a given number. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a factorial calculation and a comparison to a specific value. It requires understanding of recursion and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(length=5):\n    return 'a' + 'b' * (length - 2) + 'a'\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(length=5):\n    return 'a' + 'b' * (length - 2) + 'a'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle consists of two functions, f(s: str) -> bool which checks if a given string is a palindrome, and g(length=5) which generates a string of specified length with 'a' at the beginning and end, and 'b' in between. The puzzle asserts that the result of applying function g to function f should return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums)\n\ndef g(count=6):\n    return [num for num in range(2, 2*count+1, 2)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and generating a list of even numbers.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums)",
        "solution_func": "def g(count=6):\n    return [num for num in range(2, 2*count+1, 2)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are even, and a function g that generates a list of even numbers based on a given count. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and modulo operator in Python. It also tests the ability to define functions and use them together to solve a problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    clean_string = ''.join(char for char in string if char.isalpha()).lower()\n    return clean_string == clean_string[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(string: str) -> bool:\n    clean_string = ''.join(char for char in string if char.isalpha()).lower()\n    return clean_string == clean_string[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if a given string is a palindrome after removing non-alphabetic characters and converting to lowercase. The solution function returns a specific string that is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, checking for palindromes, and understanding list comprehensions in Python. It is a good puzzle to teach these concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    max_num = max(nums)\n    return set(range(1, max_num + 1)).issubset(nums)\n\ndef g():\n    return [3, 1, 2, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations and list manipulation to check if a list contains all numbers from 1 to the maximum number in the list.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    max_num = max(nums)\n    return set(range(1, max_num + 1)).issubset(nums)",
        "solution_func": "def g():\n    return [3, 1, 2, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and checks if all numbers from 1 to the maximum number in the list are present in the list. The solution function g returns a specific list of integers that satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, finding the maximum number in a list, and checking for the presence of a range of numbers in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)\ndef g():\n    return [num for num in range(1, 11) if num % 2 == 0]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and generating a list of even numbers using list comprehension.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g():\n    return [num for num in range(1, 11) if num % 2 == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all numbers in a list are even, and a function g() that generates a list of even numbers from 1 to 10. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and modulo operations in Python. It tests the ability to create a function that filters even numbers and another function that generates a list of even numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(num: int) -> bool:\n    return sympy.isprime(num)\ndef g():\n    return sympy.prime(5)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime using the sympy library in Python.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "import sympy\n\ndef f(num: int) -> bool:\n    return sympy.isprime(num)",
        "solution_func": "def g():\n    return sympy.prime(5)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the 5th prime number is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle uses the sympy library in Python to check if a given number is a prime number. The solution function g() returns the 5th prime number and the puzzle function f(num) checks if a number is prime.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix)) if i != j)\ndef g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all elements in a matrix are zero except for the diagonal elements.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix)) if i != j)",
        "solution_func": "def g():\n    return [[1, 0, 0], [0, 2, 0], [0, 0, 3]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f that checks if all elements in a matrix are 0 except for the diagonal elements. The solution function g returns a specific matrix that satisfies the condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking matrix elements and understanding list comprehensions in Python. It can be used to teach students about matrix manipulation and list comprehensions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(isinstance(x, int) for x in lst) and sum(lst) > 0\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking the type of elements in a list and calculating the sum of the list elements.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "def f(z: float, v=9, d=0.0001) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 9, d = 0.0001):\n    return v * d\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(isinstance(x, int) for x in lst) and sum(lst) > 0",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a list as input and checks if all elements in the list are integers and the sum of the list is greater than 0. The solution function returns a specific list, and the puzzle asserts that the puzzle function returns True when applied to the output of the solution function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the type of elements in a list and the sum of the list. The solution function returns a list that satisfies the conditions of the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, diff=5) -> bool:\n    return all(arr[i] - arr[i-1] == diff for i in range(1, len(arr)))\ndef g(diff=5):\n    return [i * diff for i in range(1, 6)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list, diff=5) -> bool:\n    return all(arr[i] - arr[i-1] == diff for i in range(1, len(arr)))",
        "solution_func": "def g(diff=5):\n    return [i * diff for i in range(1, 6)]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the puzzle function f checks if the difference between each consecutive pair of numbers is equal to a specified difference. The solution function g generates a list of numbers where each element is a multiple of the specified difference."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the difference between consecutive elements in a list, which is a common programming concept. The solution function generates a list based on a specified difference, demonstrating list comprehension and range usage in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(c.lower() for c in s if c.isalpha())\n    return s == s[::-1]\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(c.lower() for c in s if c.isalpha())\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function to check if a given string is a palindrome after removing non-alphabetic characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a string is a palindrome after removing non-alphabetic characters and ignoring case.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: str, unique=True) -> bool:\n    return len(set(x)) == len(x) if unique else len(set(x)) != len(x)\ndef g(input_str=\"python\", unique=True):\n    return ''.join(sorted(set(input_str), key=input_str.index) if unique else sorted(set(input_str), key=input_str.index)[::-1])\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: str, unique=True) -> bool:\n    return len(set(x)) == len(x) if unique else len(set(x)) != len(x)",
        "solution_func": "def g(input_str=\"python\", unique=True):\n    return ''.join(sorted(set(input_str), key=input_str.index) if unique else sorted(set(input_str), key=input_str.index)[::-1])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that checks if a given string contains all unique characters or not. The solution function sorts the unique characters in the input string in the original order or reverse order based on the 'unique' parameter and returns the result."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, set operations, sorting, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(n=17):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    return primes[n % len(primes)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and generating a list of prime numbers using a specific algorithm.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(n=17):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    return primes[n % len(primes)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given number is a prime number, and a function g(n) that returns a prime number from a predefined list based on the input. The assertion checks if the output of g satisfies the condition of being a prime number according to f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to check for primality. It also requires using a predefined list of prime numbers to return a prime number based on the input. The assertion tests the correctness of the solution by verifying if the output of g is indeed a prime number according to the function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(values: set, set_values={1, 2, 3, 4, 5, 6, 7}):\n    return values.issubset(set_values)\ndef g(dictionary={'a': 3, 'b': 5, 'c': 7}):\n    return set(dictionary.values())\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and dictionary manipulation in Python.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True"
        ],
        "problem_func": "def f(values: set, set_values={1, 2, 3, 4, 5, 6, 7}):\n    return values.issubset(set_values)",
        "solution_func": "def g(dictionary={'a': 3, 'b': 5, 'c': 7}):\n    return set(dictionary.values())",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the values in a set are a subset of a predefined set, and a function g that returns a set of values from a dictionary. The assertion checks if the values from g form a subset of the predefined set in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of sets, dictionaries, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, length=3) -> bool:\n    return any(s[i:i+length] == s[i:i+length][::-1] for i in range(len(s) - length + 1))\ndef g(length=3):\n    return \"abcbcba\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, length=3) -> bool:\n    return any(s[i:i+length] == s[i:i+length][::-1] for i in range(len(s) - length + 1))",
        "solution_func": "def g(length=3):\n    return \"abcbcba\"",
        "quality": [
            null
        ],
        "description": [
            "Given a string s, the function f(s, length=3) checks if there exists a substring of length 'length' in s that is a palindrome. The function g(length=3) returns a specific string 'abcbcba'. The puzzle is to determine if the function f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for palindromic substrings in a given string using a specific function g. The solution g returns a string that contains a palindromic substring, satisfying the condition for the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], diff=3) -> bool:\n    return all(nums[i+1] - nums[i] == diff for i in range(len(nums) - 1))\ndef g(diff=3):\n    return [1, 4, 7, 10, 13]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking the difference between consecutive elements.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], diff=3) -> bool:\n    return all(nums[i+1] - nums[i] == diff for i in range(len(nums) - 1))",
        "solution_func": "def g(diff=3):\n    return [1, 4, 7, 10, 13]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the difference between consecutive elements in a list is equal to a given value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand list comprehension and indexing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, target=42) -> bool:\n    return num ^ target == 0\n\ndef g(target = 42):\n    return target\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise XOR operation and comparison to check if the result is zero. It also includes a default target value of 42. The solution simply returns the target value.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, target=42) -> bool:\n    return num ^ target == 0",
        "solution_func": "def g(target = 42):\n    return target",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f(num: int, target=42) -> bool and g(target=42), where f checks if the XOR of the input number and a target value is equal to 0, and g simply returns the target value. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about bitwise XOR operation and function composition in Python. It tests the understanding of function calls and return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, target='racecar') -> bool:\n    return s == target[::-1]\n\ndef g(target = 'racecar'):\n    return target\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, target='racecar') -> bool:\n    return s == target[::-1]",
        "solution_func": "def g(target = 'racecar'):\n    return target",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string is equal to the reverse of a target string, and g returns the target string. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically reversing a string and comparing it to another string. It also tests the concept of function composition and function evaluation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \n\ndef f(words: List[str]) -> bool:\n    sentence = ' '.join(words)\n    sentence = ''.join(char for char in sentence if char.isalnum()).lower()\n    return sentence == sentence[::-1]\n\ndef g():\n    return [\"A\", \"man\", \"a\", \"plan\", \"a\", \"canal\", \"Panama\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \n\ndef f(words: List[str]) -> bool:\n    sentence = ' '.join(words)\n    sentence = ''.join(char for char in sentence if char.isalnum()).lower()\n    return sentence == sentence[::-1]",
        "solution_func": "def g():\n    return [\"A\", \"man\", \"a\", \"plan\", \"a\", \"canal\", \"Panama\"]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of words, the puzzle checks if the concatenated and cleaned string of words is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that takes a list of words, concatenates them, removes non-alphanumeric characters, converts to lowercase, and checks if the resulting string is a palindrome. The solution function g returns a specific list of words that forms a palindrome when concatenated and cleaned.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \n\ndef f(numbers: List[int]) -> bool:\n    if len(numbers) < 3:\n        return True\n    diff = numbers[1] - numbers[0]\n    return all(numbers[i] - numbers[i-1] == diff for i in range(2, len(numbers)))\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers forms an arithmetic progression.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \n\ndef f(numbers: List[int]) -> bool:\n    if len(numbers) < 3:\n        return True\n    diff = numbers[1] - numbers[0]\n    return all(numbers[i] - numbers[i-1] == diff for i in range(2, len(numbers)))",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of numbers forms an arithmetic sequence, and a function g that returns a specific list of numbers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation and arithmetic sequences in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \n\ndef f(numbers: List[int]) -> bool:\n    squares = [num ** 2 for num in numbers]\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] ** 2 + numbers[j] ** 2 in squares:\n                return True\n    return False\n\ndef g():\n    return [3, 4, 5, 6, 8]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \n\ndef f(numbers: List[int]) -> bool:\n    squares = [num ** 2 for num in numbers]\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] ** 2 + numbers[j] ** 2 in squares:\n                return True\n    return False",
        "solution_func": "def g():\n    return [3, 4, 5, 6, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a pair of numbers in a list such that the sum of their squares is also present in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there exist two numbers in a list whose squares sum up to a number that is also present in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abcde', length=10) -> bool:\n    return len(s) == length and all(x in s for x in pattern) and s == ''.join([pattern[i % len(pattern)] for i in range(length)])\ndef g(pattern='abcde', length=10):\n    return ''.join([pattern[i % len(pattern)] for i in range(length)])\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abcde', length=10) -> bool:\n    return len(s) == length and all(x in s for x in pattern) and s == ''.join([pattern[i % len(pattern)] for i in range(length)])",
        "solution_func": "def g(pattern='abcde', length=10):\n    return ''.join([pattern[i % len(pattern)] for i in range(length)])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that generates a string based on a given pattern and length, and then checks if the generated string meets certain conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, list comprehension, and boolean conditions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. The solution function g() returns the string 'racecar', which is a palindrome. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    nums.sort()\n    return any((x ** 2 + y ** 2 == z ** 2) for x in nums for y in nums for z in nums if x < y < z)\ndef g():\n    return [3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and sorting and ordering.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    nums.sort()\n    return any((x ** 2 + y ** 2 == z ** 2) for x in nums for y in nums for z in nums if x < y < z)",
        "solution_func": "def g():\n    return [3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves sorting a list of numbers and checking if there exists a Pythagorean triplet in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to understand list comprehension, sorting, and the concept of Pythagorean triplets.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a brute force search algorithm.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(n) that checks if a number is prime, write a function g() that returns a specific number and assert that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves writing a function g() that returns a specific number which when passed to function f(n) returns True, indicating that the number is prime.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n) and n > 2\ndef g():\n    return sympy.nextprime(10)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "import sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n) and n > 2",
        "solution_func": "def g():\n    return sympy.nextprime(10)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the next prime number after 10 is greater than 2 and prime."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to use the sympy library to find the next prime number after 10 and then check if it is greater than 2 and prime.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='ABC') -> bool:\n    return pattern in s\ndef g(pattern='ABC'):\n    return f\"This string contains the pattern: {pattern}\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='ABC') -> bool:\n    return pattern in s",
        "solution_func": "def g(pattern='ABC'):\n    return f\"This string contains the pattern: {pattern}\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given pattern is present in a string, and a function g that generates a string containing the pattern. The goal is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function composition and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, sequence=[1, 2, 3, 4]) -> bool:\n    return all(elem in lst for elem in sequence)\ndef g(sequence=[1, 2, 3, 4]):\n    return [x for x in range(10)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking if a specific sequence is present in the list.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, sequence=[1, 2, 3, 4]) -> bool:\n    return all(elem in lst for elem in sequence)",
        "solution_func": "def g(sequence=[1, 2, 3, 4]):\n    return [x for x in range(10)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if all elements in a predefined sequence are present in the output of a function that generates a list of numbers from 0 to 9."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function f(lst, sequence=[1, 2, 3, 4]) checks if all elements in the predefined sequence are present in the input list. The function g(sequence=[1, 2, 3, 4]) generates a list of numbers from 0 to 9. The assertion tests if the output of g contains all elements of the predefined sequence.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n)\ndef g():\n    return sympy.prime(5)  # Generating the 5th prime number\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime using the sympy library and generating prime numbers.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "import sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n)",
        "solution_func": "def g():\n    return sympy.prime(5)  # Generating the 5th prime number",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the 5th prime number is a prime number using the sympy library in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and the sympy library in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(result: int, property_value=1716) -> bool:\n    return result % property_value == 0\ndef g(property_value=1716):\n    return math.factorial(property_value)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and importing modules (math). It also involves checking if a certain property holds true, which can be related to conditional logic and number theory (factors).",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(result: int, property_value=1716) -> bool:\n    return result % property_value == 0",
        "solution_func": "def g(property_value=1716):\n    return math.factorial(property_value)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given result is divisible by a specified property value, and a function g that calculates the factorial of the property value. The puzzle requires g to be the solution to f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions in Python, use the math module, and ensure that the solution function g satisfies the condition set by function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(length=7):\n    base_str = \"racecar\"  # A base palindrome string\n    return base_str[:length]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(length=7):\n    base_str = \"racecar\"  # A base palindrome string\n    return base_str[:length]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a string is a palindrome and then creating a function that returns a substring of a base palindrome string. The assertion at the end verifies that the solution function correctly identifies the substring as a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 7, 9, 11]  # A list with a mix of even and odd numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation to check for the presence of both even and odd numbers in a list.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)",
        "solution_func": "def g():\n    return [2, 4, 6, 7, 9, 11]  # A list with a mix of even and odd numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list contains both even and odd numbers, and a function g that returns a list with a mix of even and odd numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the any() function, and the modulo operator to check for even and odd numbers in a list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str) -> bool:\n    cleaned_palindrome = ''.join(char.lower() for char in palindrome if char.isalnum())\n    return cleaned_palindrome == cleaned_palindrome[::-1]\n\ndef g():\n    import random\n    words = [\"racecar\", \"Madam, in Eden I'm Adam.\", \"A man, a plan, a canal, Panama!\"]\n    return random.choice(words)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check for palindromes. It also includes importing modules and using random.choice() to select a palindrome string from a list of examples.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str) -> bool:\n    cleaned_palindrome = ''.join(char.lower() for char in palindrome if char.isalnum())\n    return cleaned_palindrome == cleaned_palindrome[::-1]",
        "solution_func": "def g():\n    import random\n    words = [\"racecar\", \"Madam, in Eden I'm Adam.\", \"A man, a plan, a canal, Panama!\"]\n    return random.choice(words)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string is a palindrome after removing non-alphanumeric characters, and a function g that returns a random palindrome string from a list of examples. The assertion tests if function f returns True for the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, checking for palindromes, and using random.choice() function. It can be a good exercise to test understanding of string operations and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(prime_list: list, target_prime=17) -> bool:\n    return target_prime in prime_list\n\ndef g(start=1, end=20):\n    prime_list = [num for num in range(start, end + 1) if is_prime(num)]\n    return prime_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as importing modules (math), mathematical operations, list comprehension, conditional logic, and function definition.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
            "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(prime_list: list, target_prime=17) -> bool:\n    return target_prime in prime_list",
        "solution_func": "def g(start=1, end=20):\n    prime_list = [num for num in range(start, end + 1) if is_prime(num)]\n    return prime_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a specific prime number is present in a list of prime numbers generated within a given range using a function f and a solution function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers, list comprehension, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef is_perfect_square(num):\n    return int(num**0.5)**2 == num\n\ndef f(fib_list: list, term=13) -> bool:\n    return any(is_perfect_square(num) for num in fib_list)\n\ndef g(term=13):\n    fib_list = [0, 1]\n    while len(fib_list) < term:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as recursion, mathematical operations, and conditional logic.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
            "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True"
        ],
        "problem_func": "def is_perfect_square(num):\n    return int(num**0.5)**2 == num\n\ndef f(fib_list: list, term=13) -> bool:\n    return any(is_perfect_square(num) for num in fib_list)",
        "solution_func": "def g(term=13):\n    fib_list = [0, 1]\n    while len(fib_list) < term:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if any number in a list of Fibonacci numbers is a perfect square."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to generate a list of Fibonacci numbers and then check if any of these numbers are perfect squares using a helper function.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n)\ndef g():\n    return sympy.prime(5)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to Number Theory (checking for prime numbers) and Importing Modules (using the sympy library).",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True"
        ],
        "problem_func": "import sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n)",
        "solution_func": "def g():\n    return sympy.prime(5)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a specific prime number is prime using the sympy library in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and the usage of the sympy library in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, n=10) -> bool:\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a < num:\n            a, b = b, a + b\n        return a == num\n    \n    fibonacci_sequence = [0, 1]\n    for i in range(2, n):\n        fibonacci_sequence.append(fibonacci_sequence[i-1] + fibonacci_sequence[i-2])\n    \n    return lst == fibonacci_sequence\n\ndef g(n=10):\n    fibonacci_list = [0, 1]\n    for i in range(2, n):\n        fibonacci_list.append(fibonacci_list[i-1] + fibonacci_list[i-2])\n    return fibonacci_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Fibonacci sequence generation and comparison with a given list. It also includes functions, loops, and assertions.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, n=10) -> bool:\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a < num:\n            a, b = b, a + b\n        return a == num\n    \n    fibonacci_sequence = [0, 1]\n    for i in range(2, n):\n        fibonacci_sequence.append(fibonacci_sequence[i-1] + fibonacci_sequence[i-2])\n    \n    return lst == fibonacci_sequence",
        "solution_func": "def g(n=10):\n    fibonacci_list = [0, 1]\n    for i in range(2, n):\n        fibonacci_list.append(fibonacci_list[i-1] + fibonacci_list[i-2])\n    return fibonacci_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(lst: list, n=10) that checks if a given list is equal to the first n numbers in the Fibonacci sequence. Another function g(n=10) generates the first n numbers in the Fibonacci sequence. The puzzle requires ensuring that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of generating Fibonacci sequence and comparing lists in Python. It also requires understanding function composition and assertion testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(primes: list, n=20) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_numbers = [num for num in range(2, n) if is_prime(num)]\n    return primes == prime_numbers\n\ndef g(n=20):\n    prime_list = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            prime_list.append(num)\n    return prime_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to prime numbers, list comprehension, loops, and functions.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(primes: list, n=20) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_numbers = [num for num in range(2, n) if is_prime(num)]\n    return primes == prime_numbers",
        "solution_func": "def g(n=20):\n    prime_list = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            prime_list.append(num)\n    return prime_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of prime numbers matches the list of prime numbers generated by another function g. Function g generates prime numbers up to a given limit using a specific algorithm."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime number generation and comparison in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g(input_str='racecar'):\n    return input_str + input_str[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(input_str='racecar'):\n    return input_str + input_str[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, the puzzle requires defining a function g(input_str) that returns a string concatenated with its reverse, and ensuring that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically reversing a string and checking for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(arr: List[int]) -> bool:\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\ndef g(input_list=[5, 3, 8, 2, 1, 7]):\n    return sorted(input_list)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers in ascending order using the `sorted` function. This falls under the topic of Sorting and Ordering.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(arr: List[int]) -> bool:\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))",
        "solution_func": "def g(input_list=[5, 3, 8, 2, 1, 7]):\n    return sorted(input_list)",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function f checks if the list is sorted in non-decreasing order. The solution function g returns a sorted version of the input list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list is sorted in non-decreasing order and then sorting the list using a solution function. The solution function correctly sorts the input list, satisfying the puzzle condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abc') -> bool:\n    return pattern in s\ndef g(pattern='abc'):\n    return pattern * 5\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abc') -> bool:\n    return pattern in s",
        "solution_func": "def g(pattern='abc'):\n    return pattern * 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given pattern is present in a string and g generates a string by repeating a pattern multiple times. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function calls and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a given matrix is symmetric along its diagonal. It requires understanding of nested lists, list comprehension, and the `all` function in Python.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f that checks if a given matrix is symmetric across its main diagonal. The solution function g returns a specific matrix and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking symmetry in a matrix and requires understanding of list comprehension and indexing in Python. It can be used to teach concepts of nested lists and boolean expressions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(start=10, end=100):\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1)):\n            return num\n    assert False, \"No prime number found in the range\"\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True",
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(start=10, end=100):\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1)):\n            return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g(start, end) that finds the first prime number within a specified range. The puzzle requires students to understand prime numbers and iteration in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a common programming concept of checking for prime numbers and iterating over a range of numbers. It can be used to teach students about prime numbers and iteration in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g(input_str='radar'):\n    return input_str + input_str[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True",
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g(input_str='radar'):\n    return input_str + input_str[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given text is a palindrome and g generates a palindrome by concatenating a string with its reverse. The assertion checks if the solution g produces a palindrome that satisfies the condition of being a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically reversing a string and checking for palindromes. It also tests the student's ability to define functions and use them in conjunction to solve a problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    if len(numbers) < 2:\n        return False\n    diff = numbers[1] - numbers[0]\n    for i in range(2, len(numbers)):\n        if numbers[i] - numbers[i-1] != diff:\n            return False\n    return True\n\ndef g(start=1, diff=3, length=5):\n    return [start + i * diff for i in range(length)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Brute Force Search and Mathematical Operations.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True",
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    if len(numbers) < 2:\n        return False\n    diff = numbers[1] - numbers[0]\n    for i in range(2, len(numbers)):\n        if numbers[i] - numbers[i-1] != diff:\n            return False\n    return True",
        "solution_func": "def g(start=1, diff=3, length=5):\n    return [start + i * diff for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers generated based on a start value, difference, and length follows an arithmetic sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to generate a list of numbers in an arithmetic sequence and then check if the generated list follows the arithmetic sequence pattern.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(missing: int, pattern='even', numbers=[2, 6, 10, 14, 18, 22, 26]) -> bool:\n    if pattern == 'even':\n        return missing % 2 == 0\n    elif pattern == 'odd':\n        return missing % 2 != 0\n    else:\n        return False\n\ndef g(pattern='even', numbers=[2, 6, 10, 14, 18, 22, 26]):\n    expected_sum = (len(numbers) + 1) * (numbers[0] + numbers[-1]) // 2\n    actual_sum = sum(numbers)\n    return expected_sum - actual_sum\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and mathematical operations to determine if a missing number fits a certain pattern. The solution uses mathematical operations to calculate the missing number based on a given pattern and list of numbers.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(missing: int, pattern='even', numbers=[2, 6, 10, 14, 18, 22, 26]) -> bool:\n    if pattern == 'even':\n        return missing % 2 == 0\n    elif pattern == 'odd':\n        return missing % 2 != 0\n    else:\n        return False",
        "solution_func": "def g(pattern='even', numbers=[2, 6, 10, 14, 18, 22, 26]):\n    expected_sum = (len(numbers) + 1) * (numbers[0] + numbers[-1]) // 2\n    actual_sum = sum(numbers)\n    return expected_sum - actual_sum",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a missing number in a sequence follows a specific pattern (even or odd) based on the given pattern and numbers. The solution function g calculates the missing number in the sequence and checks if it satisfies the pattern specified in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions with default arguments, perform arithmetic operations on lists, and use assert statements for testing. It also requires knowledge of modulo operations and list manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_product: int, numbers=[-2, -5, 0, 3, 7, -4, 2, -1, 6]) -> bool:\n    return max_product == max(numbers) * sorted(numbers)[-2]\n\ndef g(numbers=[-2, -5, 0, 3, 7, -4, 2, -1, 6]):\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[-1] * sorted_numbers[-2]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, sorting and ordering, and conditional logic.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(max_product: int, numbers=[-2, -5, 0, 3, 7, -4, 2, -1, 6]) -> bool:\n    return max_product == max(numbers) * sorted(numbers)[-2]",
        "solution_func": "def g(numbers=[-2, -5, 0, 3, 7, -4, 2, -1, 6]):\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[-1] * sorted_numbers[-2]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the maximum product of the two largest numbers in a list and checking if it matches a given value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and comparison of products in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, write a function g() that returns the string 'radar' and assert that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check for palindromes and another function to return a specific string. The assertion checks if the palindrome function returns True for the specific string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) == len(set(nums))\n\ndef g() -> List[int]:\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations to check for uniqueness of elements in a list.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) == len(set(nums))",
        "solution_func": "def g() -> List[int]:\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list of integers contains only unique elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a list of integers contains only unique elements. It then provides a solution function g that returns a list of integers with unique elements. The assertion at the end verifies that the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (primality testing) and Mathematical Operations (square root calculation).",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns the number 17. The puzzle requires g() to return a number that satisfies the prime check in f()"
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime number checking and implementing a function that returns a specific number to pass the prime check.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'racecar'. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(arr: List[int]) -> bool:\n    diff = arr[1] - arr[0]\n    return all(arr[i] - arr[i - 1] == diff for i in range(2, len(arr)))\ndef g():\n    return [1, 3, 5, 7, 9]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a given list of integers forms an arithmetic progression.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(arr: List[int]) -> bool:\n    diff = arr[1] - arr[0]\n    return all(arr[i] - arr[i - 1] == diff for i in range(2, len(arr)))",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(arr: List[int]) -> bool that checks if the elements in the input list form an arithmetic sequence. The solution function g() returns a list [1, 3, 5, 7, 9] which is an arithmetic sequence, satisfying the condition of f(g()) == True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for an arithmetic sequence in a list and providing a solution that forms an arithmetic sequence. This can be a good exercise to practice list manipulation and understanding of arithmetic sequences in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, length=7) -> bool:\n    return s == s[::-1]\ndef g(length=7):\n    return 'a' * length + 'b' + 'a' * length\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, length=7) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(length=7):\n    return 'a' * length + 'b' + 'a' * length",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that generates a string with a specific pattern. The assertion checks if the output of g satisfies the condition of being a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom sympy import primefactors\ndef f(factors: list, num=420) -> bool:\n    return set(factors) == set(primefactors(num))\ndef g(num=420):\n    return primefactors(num)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime factors, set operations, and importing modules (Sympy).",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True"
        ],
        "problem_func": "from sympy import primefactors\ndef f(factors: list, num=420) -> bool:\n    return set(factors) == set(primefactors(num))",
        "solution_func": "def g(num=420):\n    return primefactors(num)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if the prime factors of a given number match a provided list of factors."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the sympy library to find the prime factors of a number and comparing them with a given list of factors. The solution function should return the prime factors of the input number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, size=10) -> bool:\n    return nums == sorted(nums, reverse=True)\ndef g(size=10):\n    return list(range(size, 0, -1))\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in reverse order and generating a list in reverse order using range function. It does not explicitly involve any specific topics from the list provided.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, size=10) -> bool:\n    return nums == sorted(nums, reverse=True)",
        "solution_func": "def g(size=10):\n    return list(range(size, 0, -1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers is sorted in descending order, and a function g that generates a list of numbers in descending order. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting in descending order and generating a list of numbers in descending order using range. The solution function g generates a list in descending order, and the puzzle function f checks if the input list is sorted in descending order.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=5) -> bool:\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1] and len(s) == n\ndef g(n=5):\n    return \"radar\"[:n]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True",
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=5) -> bool:\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1] and len(s) == n",
        "solution_func": "def g(n=5):\n    return \"radar\"[:n]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string is a palindrome of a specific length after removing spaces and converting to lowercase. The solution function g returns a substring of a specific length from the word 'radar'. The assertion checks if the solution function satisfies the condition of the puzzle function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, palindrome checking, and slicing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: list, order=\"descending\") -> bool:\n    if order == \"ascending\":\n        return all(data[i][0] <= data[i + 1][0] for i in range(len(data) - 1))\n    elif order == \"descending\":\n        return all(data[i][0] >= data[i + 1][0] for i in range(len(data) - 1))\n    else:\n        return False\ndef g(order=\"descending\"):\n    if order == \"ascending\":\n        return [(i, i + 1) for i in range(10)]\n    elif order == \"descending\":\n        return [(i, i) for i in range(10, 0, -1)]\n    else:\n        return []\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of tuples in either ascending or descending order. It also includes a simple assertion to check the correctness of the solution.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True",
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: list, order=\"descending\") -> bool:\n    if order == \"ascending\":\n        return all(data[i][0] <= data[i + 1][0] for i in range(len(data) - 1))\n    elif order == \"descending\":\n        return all(data[i][0] >= data[i + 1][0] for i in range(len(data) - 1))\n    else:\n        return False",
        "solution_func": "def g(order=\"descending\"):\n    if order == \"ascending\":\n        return [(i, i + 1) for i in range(10)]\n    elif order == \"descending\":\n        return [(i, i) for i in range(10, 0, -1)]\n    else:\n        return []",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given list of tuples is sorted in either ascending or descending order based on the order parameter. g generates a list of tuples in either ascending or descending order based on the order parameter, and the assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of tuples in either ascending or descending order and checking if the sorting is correct using the f function. The g function generates the list of tuples in the specified order. The assert statement ensures that the solution g satisfies the condition of f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\nimport string\n\ndef f(password: str, length=12, uppercase=1, digits=1, special=1) -> bool:\n    if len(password) != length:\n        return False\n    if sum(1 for char in password if char.isupper()) < uppercase:\n        return False\n    if sum(1 for char in password if char.isdigit()) < digits:\n        return False\n    if sum(1 for char in password if not char.isalnum()) < special:\n        return False\n    return True\n\ndef g(length=12, uppercase=1, digits=1, special=1):\n    password = ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length))\n    return password\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Random Module, Importing Modules (Itertools, etc.)",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True"
        ],
        "problem_func": "import random\nimport string\n\ndef f(password: str, length=12, uppercase=1, digits=1, special=1) -> bool:\n    if len(password) != length:\n        return False\n    if sum(1 for char in password if char.isupper()) < uppercase:\n        return False\n    if sum(1 for char in password if char.isdigit()) < digits:\n        return False\n    if sum(1 for char in password if not char.isalnum()) < special:\n        return False\n    return True",
        "solution_func": "def g(length=12, uppercase=1, digits=1, special=1):\n    password = ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length))\n    return password",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that checks if a given password meets certain criteria such as length, uppercase letters, digits, and special characters. The solution function g generates a random password based on the specified criteria and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with string manipulation, conditionals, and random generation in Python. It provides a practical exercise for students to understand password validation and generation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list, n=5) -> bool:\n    for i in range(n):\n        if matrix[i][i] != 1:\n            return False\n    return True\n\ndef g(n=5):\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        matrix[i][i] = 1\n    return matrix\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and validation of a specific condition within the matrix.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True"
        ],
        "problem_func": "def f(matrix: list, n=5) -> bool:\n    for i in range(n):\n        if matrix[i][i] != 1:\n            return False\n    return True",
        "solution_func": "def g(n=5):\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        matrix[i][i] = 1\n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires writing a function f(matrix: list, n=5) that checks if the diagonal elements of a given matrix are all equal to 1. The solution function g(n=5) generates a matrix with diagonal elements set to 1 and returns it. The puzzle is to implement f and g functions such that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the diagonal elements of a matrix and generating a matrix with diagonal elements set to 1. It tests the understanding of matrix manipulation and function implementation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(primes: list, limit=50) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in primes)\n\ndef g(limit=50):\n    primes = []\n    for num in range(2, limit+1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime numbers, list comprehension, and algorithm optimization.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True"
        ],
        "problem_func": "def f(primes: list, limit=50) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in primes)",
        "solution_func": "def g(limit=50):\n    primes = []\n    for num in range(2, limit+1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(primes: list, limit=50) and g(limit=50), where f checks if a list of numbers are prime and g generates a list of prime numbers up to a given limit. The assertion at the end checks if the output of g satisfies the condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and function composition in Python. It provides a practical exercise in implementing prime number generation and checking algorithms.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nimport random\n\ndef f(num: int, nums=[35, 46, 21, 73, 58, 39]) -> bool:\n    return num == max(nums)\n\ndef g(nums=[35, 46, 21, 73, 58, 39]) -> int:\n    return max(nums)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding the maximum value in a list and checking if a given number is equal to the maximum value in the list.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\nimport random\n\ndef f(num: int, nums=[35, 46, 21, 73, 58, 39]) -> bool:\n    return num == max(nums)",
        "solution_func": "def g(nums=[35, 46, 21, 73, 58, 39]) -> int:\n    return max(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that returns the maximum value from a list of numbers, and another function that checks if the maximum value matches a given number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to find the maximum value in a list and comparing it with a given number.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(s: str, d={'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) -> bool:\n    return all(char in d for char in s)\n\ndef g(s='abcde') -> Dict[str, int]:\n    return {char: ord(char) - ord('a') + 1 for char in set(s)}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and dictionary operations.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Dict\n\ndef f(s: str, d={'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) -> bool:\n    return all(char in d for char in s)",
        "solution_func": "def g(s='abcde') -> Dict[str, int]:\n    return {char: ord(char) - ord('a') + 1 for char in set(s)}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(s: str, d: Dict[str, int]) -> bool checks if all characters in a given string are keys in a dictionary, and g(s: str) -> Dict[str, int] creates a dictionary mapping characters to their positions in the alphabet. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all characters in a string are present in a predefined dictionary and then creating a dictionary mapping characters to their positions in the alphabet. The assert statement ensures that the solution function g() satisfies the condition of the puzzle function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], lists=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    return sum(nums) == sum(sum(lst) for lst in lists)\n\ndef g(lists=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> List[int]:\n    return [sum(lst) for lst in lists]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation, summing elements in a list, and list comprehension. It does not involve any specific topics from the list provided.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], lists=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> bool:\n    return sum(nums) == sum(sum(lst) for lst in lists)",
        "solution_func": "def g(lists=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> List[int]:\n    return [sum(lst) for lst in lists]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if the sum of a list of numbers is equal to the sum of the sums of sublists in a predefined list of lists. g calculates the sum of sublists in a given list of lists. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves list manipulation and comprehension in Python. It tests the understanding of list operations and comparison of sums. The assert statement ensures that the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, length=10, char='x') -> bool:\n    return len(s) == length and s.count(char) == length\ndef g(length=10, char='x'):\n    return char * length\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True",
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, length=10, char='x') -> bool:\n    return len(s) == length and s.count(char) == length",
        "solution_func": "def g(length=10, char='x'):\n    return char * length",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s: str, length=10, char='x') -> bool that checks if a string s has a specific length and consists of a specific character repeated that many times, and a function g(length=10, char='x') that generates a string with the specified length and character, the puzzle requires finding the correct input for g() such that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the requirements of function f and generating the correct input for function g to satisfy the conditions of f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return all((k.startswith('key_') and v % 2 == 0 for k, v in d.items()))\ndef g():\n    return {f'key_{i}': i*2 for i in range(1, 6)}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking conditions on the keys and values.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True",
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return all((k.startswith('key_') and v % 2 == 0 for k, v in d.items()))",
        "solution_func": "def g():\n    return {f'key_{i}': i*2 for i in range(1, 6)}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary as input and checks if all keys start with 'key_' and all corresponding values are even numbers. The solution function g generates a dictionary where keys start with 'key_' and values are even numbers based on a range. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, list comprehension, and assertion testing in Python. It tests the understanding of dictionary comprehension, string manipulation, and logical conditions in Python programming.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial, n=5, result=120) -> bool:\n    return factorial == result\ndef g(n=5):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations (calculating factorial) and conditional logic (checking if factorial is equal to a given result).",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]\nassert f(g()) == True"
        ],
        "problem_func": "def f(factorial, n=5, result=120) -> bool:\n    return factorial == result",
        "solution_func": "def g(n=5):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the factorial of a given number matches a specified result, and a function g that calculates the factorial of a given number. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of factorial calculation and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a string is a palindrome.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. The solution function g() returns the string 'radar', which is a palindrome. The assert statement confirms that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) which checks if a given number is a prime number, and g() which returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the function f(n) to determine if a given number (in this case, 17) is a prime number. The solution function g() simply returns the number 17. The assertion checks if f(g()) returns True, indicating that 17 is a prime number.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i]**2 + nums[j]**2 == nums[k]**2:\n                    return True\n    return False\n\ndef g():\n    return [3, 4, 5, 6, 8]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Sorting and Ordering, Number Theory",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i]**2 + nums[j]**2 == nums[k]**2:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [3, 4, 5, 6, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a Pythagorean triplet in a given list of integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of integers and then checking for the presence of a Pythagorean triplet (three numbers that satisfy the Pythagorean theorem). The solution function returns a list that contains a Pythagorean triplet.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)\ndef g():\n    import string\n    return ''.join(set(string.ascii_lowercase))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g():\n    import string\n    return ''.join(set(string.ascii_lowercase))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if a string has all unique characters, and a function g() that generates a string with all lowercase letters. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, set operations, and function definition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(prod: int, nums=[3, 7, 2, 5, 9, 4, 8]) -> bool:\n    return prod == max(nums) * sorted(nums)[-2]\ndef g(nums=[3, 7, 2, 5, 9, 4, 8]):\n    return max(nums) * sorted(nums)[-2]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(prod: int, nums=[3, 7, 2, 5, 9, 4, 8]) -> bool:\n    return prod == max(nums) * sorted(nums)[-2]",
        "solution_func": "def g(nums=[3, 7, 2, 5, 9, 4, 8]):\n    return max(nums) * sorted(nums)[-2]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that calculates the product of the two largest numbers in a list and then check if this product is equal to a given input."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and comparison operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == lst[::-1]\ndef g():\n    return [1, 2, 3, 3, 2, 1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list is a palindrome (String Manipulation).",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == lst[::-1]",
        "solution_func": "def g():\n    return [1, 2, 3, 3, 2, 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given list is a palindrome (reads the same forwards and backwards). The function f(lst) returns True if the list is a palindrome, and function g() returns a specific list to be checked for palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list slicing in Python and checking for palindromes. It is a simple and straightforward puzzle that can be used to teach basic list manipulation and comparison in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, ascending=True) -> bool:\n    if ascending:\n        return arr == sorted(arr)\n    else:\n        return arr == sorted(arr, reverse=True)\n\ndef g(arr=[5, 3, 8, 1, 6], ascending=True):\n    return sorted(arr) if ascending else sorted(arr, reverse=True)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in ascending or descending order and checking if the sorted list matches the original list. This relates to topics such as Sorting and Ordering, Conditional Logic, and Mathematical Operations.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list, ascending=True) -> bool:\n    if ascending:\n        return arr == sorted(arr)\n    else:\n        return arr == sorted(arr, reverse=True)",
        "solution_func": "def g(arr=[5, 3, 8, 1, 6], ascending=True):\n    return sorted(arr) if ascending else sorted(arr, reverse=True)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given list is sorted in ascending or descending order, and g generates a sorted list based on the input parameters. The puzzle requires g to be implemented in a way that satisfies the sorting condition checked by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle provides a simple algorithmic challenge related to sorting lists in ascending or descending order. The solution function g generates a sorted list based on the input parameters, and the puzzle requires g to be implemented correctly to pass the sorting check in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, is_palindrome=True) -> bool:\n    return s == s[::-1] if is_palindrome else s != s[::-1]\n\ndef g(s='radar', is_palindrome=True):\n    return s[::-1] if is_palindrome else s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, is_palindrome=True) -> bool:\n    return s == s[::-1] if is_palindrome else s != s[::-1]",
        "solution_func": "def g(s='radar', is_palindrome=True):\n    return s[::-1] if is_palindrome else s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given string is a palindrome or not based on a boolean parameter, and g returns the reversed string based on a boolean parameter. The puzzle requires g to be called with default parameters to satisfy the condition in the assert statement."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and boolean parameters in Python functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, is_prime=True) -> bool:\n    if is_prime:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef g(num=17, is_prime=True):\n    def is_prime_number(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    next_num = num + 1\n    while True:\n        if is_prime_number(next_num):\n            return next_num\n        next_num += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime numbers, loops, functions, and assertions.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, is_prime=True) -> bool:\n    if is_prime:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False",
        "solution_func": "def g(num=17, is_prime=True):\n    def is_prime_number(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    next_num = num + 1\n    while True:\n        if is_prime_number(next_num):\n            return next_num\n        next_num += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num: int, is_prime=True) and g(num=17, is_prime=True), where f checks if a given number is prime and g finds the next prime number after a given number. The puzzle requires g to find the next prime number after 17 and f to validate if the result is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to find the next prime number after a given number. It tests the student's knowledge of prime number checking and algorithmic thinking.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g() -> str:\n    palindrome = \"racecar\"\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g() -> str:\n    palindrome = \"racecar\"\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given string is a palindrome by comparing it with its reverse. The solution function g returns a predefined palindrome string 'racecar'. The assert statement checks if the solution function g returns a palindrome string that satisfies the palindrome condition in function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) as it checks if a given number is a prime number or not.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding whether a given number is a prime number or not. The function f(num) checks if the input number is prime, and the function g() returns the number 17. The puzzle asserts that g() returns a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and how to check if a number is prime. The solution function g() returns a specific number (17) which is a prime number, satisfying the condition in the puzzle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(sorted_list: List[int], nums=[4, 2, 7, 1, 5]) -> bool:\n    return sorted_list == sorted(nums)\ndef g(nums=[4, 2, 7, 1, 5]):\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers using a brute force search approach.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(sorted_list: List[int], nums=[4, 2, 7, 1, 5]) -> bool:\n    return sorted_list == sorted(nums)",
        "solution_func": "def g(nums=[4, 2, 7, 1, 5]):\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function g that sorts a list of numbers in ascending order using bubble sort, and then check if the sorted list matches a predefined list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves implementing a sorting algorithm and checking if the sorted list matches a predefined list. It tests the student's understanding of sorting algorithms and list manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(binary_num: str, decimal=42) -> bool:\n    return binary_num == bin(decimal)[2:]\ndef g(decimal=42):\n    return bin(decimal)[2:]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True"
        ],
        "problem_func": "def f(binary_num: str, decimal=42) -> bool:\n    return binary_num == bin(decimal)[2:]",
        "solution_func": "def g(decimal=42):\n    return bin(decimal)[2:]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given binary number is equal to the binary representation of a given decimal number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of binary representation in Python and function calls.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, is_palindrome=True, is_prime=True) -> bool:\n    if is_palindrome:\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            is_palindrome = True\n        else:\n            is_palindrome = False\n    if is_prime:\n        if num < 2:\n            is_prime = False\n        else:\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n    return is_palindrome and is_prime\n\ndef g(num=131):\n    return num\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Number Theory (factors, primes, etc.)",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, is_palindrome=True, is_prime=True) -> bool:\n    if is_palindrome:\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            is_palindrome = True\n        else:\n            is_palindrome = False\n    if is_prime:\n        if num < 2:\n            is_prime = False\n        else:\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n    return is_palindrome and is_prime",
        "solution_func": "def g(num=131):\n    return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given number is both a palindrome and a prime number. The function g returns a default number, and the puzzle requires finding a number that satisfies both conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for palindromes and prime numbers in Python. Students will need to implement the logic for both conditions in the function f and find a number that satisfies both conditions in function g.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom collections import Counter\n\ndef f(word: str, is_anagram=True) -> bool:\n    def check_anagram(word1, word2):\n        return Counter(word1) == Counter(word2)\n    \n    return check_anagram(word, \"silent\") if is_anagram else not check_anagram(word, \"listen\")\n\ndef g(word=\"listen\"):\n    return word\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves String Manipulation and Importing Modules (Itertools, etc.)",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "from collections import Counter\n\ndef f(word: str, is_anagram=True) -> bool:\n    def check_anagram(word1, word2):\n        return Counter(word1) == Counter(word2)\n    \n    return check_anagram(word, \"silent\") if is_anagram else not check_anagram(word, \"listen\")",
        "solution_func": "def g(word=\"listen\"):\n    return word",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given word is an anagram of the word 'silent'. The solution function simply returns the word 'listen'."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for anagrams using the Counter class from the collections module in Python. The solution function is straightforward and returns a predefined word.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list, is_fibonacci=True) -> bool:\n    if is_fibonacci:\n        def is_perfect_square(x):\n            return int(x**0.5)**2 == x\n\n        def is_fibonacci_number(n):\n            return is_perfect_square(5*n*n + 4) or is_perfect_square(5*n*n - 4)\n\n        for i in range(2, len(numbers)):\n            if numbers[i] != numbers[i-1] + numbers[i-2]:\n                is_fibonacci = False\n                break\n\n    return is_fibonacci\n\ndef g(numbers=[0, 1, 1, 2, 3, 5]):\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given list of numbers forms a Fibonacci sequence.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list, is_fibonacci=True) -> bool:\n    if is_fibonacci:\n        def is_perfect_square(x):\n            return int(x**0.5)**2 == x\n\n        def is_fibonacci_number(n):\n            return is_perfect_square(5*n*n + 4) or is_perfect_square(5*n*n - 4)\n\n        for i in range(2, len(numbers)):\n            if numbers[i] != numbers[i-1] + numbers[i-2]:\n                is_fibonacci = False\n                break\n\n    return is_fibonacci",
        "solution_func": "def g(numbers=[0, 1, 1, 2, 3, 5]):\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers forms a Fibonacci sequence or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of Fibonacci numbers and checking if a list of numbers follows the Fibonacci sequence pattern.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=5, c='e') -> bool:\n    return s.count(c) == n\ndef g(n=5, c='e'):\n    return c * n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True",
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=5, c='e') -> bool:\n    return s.count(c) == n",
        "solution_func": "def g(n=5, c='e'):\n    return c * n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given string contains a specific character a certain number of times, and g generates a string with a specific character repeated a certain number of times. The assertion at the end checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of function parameters and return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name', value='Alice') -> bool:\n    return d.get(key) == value\ndef g(key='name', value='Alice'):\n    return {key: value}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True",
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='name', value='Alice') -> bool:\n    return d.get(key) == value",
        "solution_func": "def g(key='name', value='Alice'):\n    return {key: value}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given key-value pair exists in a dictionary, and a function g that creates a dictionary with a specified key-value pair. The puzzle tests whether function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary operations and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\ndef g():\n    return [1, 2, 3, 4, 5, 6]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in ascending order. This involves understanding list manipulation and comparison operations.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is sorted in ascending order, and a function g that returns a sorted list of integers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the ability to define functions and use them in assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict) -> bool:\n    return all(key in data for key in ['name', 'age', 'city']) and data['age'] > 18\ndef g():\n    return {'name': 'Alice', 'age': 25, 'city': 'New York'}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking the presence of keys in a dictionary and comparing the value of a key to a specific value.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: dict) -> bool:\n    return all(key in data for key in ['name', 'age', 'city']) and data['age'] > 18",
        "solution_func": "def g():\n    return {'name': 'Alice', 'age': 25, 'city': 'New York'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function g() to return a dictionary with keys 'name', 'age', and 'city', and the value of 'age' should be greater than 18. The function f(data: dict) checks if the dictionary meets these conditions and returns True if it does."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and boolean conditions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int, primes=[2, 3, 5, 7, 11]) -> bool:\n    return any(n % (p1 * p2) == 0 for i, p1 in enumerate(primes) for p2 in primes[i + 1:])\ndef g(primes=[2, 3, 5, 7, 11]) -> int:\n    return primes[0] * primes[1]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given number is divisible by the product of two prime numbers from a given list of primes. The solution calculates the product of the first two prime numbers from the list and checks if the puzzle function returns True for this product.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int, primes=[2, 3, 5, 7, 11]) -> bool:\n    return any(n % (p1 * p2) == 0 for i, p1 in enumerate(primes) for p2 in primes[i + 1:])",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11]) -> int:\n    return primes[0] * primes[1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given number is divisible by the product of any two prime numbers from a list of primes. The solution function g returns the product of the first two prime numbers from the list and asserts that f applied to g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking divisibility by the product of prime numbers and requires understanding of list comprehension and prime numbers. It is suitable for teaching Python programming concepts related to list manipulation and conditionals.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\ndef g() -> List[List[int]]:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. This involves concepts of matrix manipulation and comparison.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g() -> List[List[int]]:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given matrix is symmetric along its main diagonal. The solution function g returns a specific matrix that is symmetric along its main diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, indexing in a 2D list, and the all() function in Python. It also requires knowledge of matrix symmetry along the main diagonal.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abab', n=5) -> bool:\n    return s == pattern * n\ndef g(pattern='abab', n=5):\n    return pattern * n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and function parameter manipulation.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abab', n=5) -> bool:\n    return s == pattern * n",
        "solution_func": "def g(pattern='abab', n=5):\n    return pattern * n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string is equal to a specified pattern repeated a certain number of times, and g generates the pattern repeated a certain number of times. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, parameter passing, string manipulation, and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, target_sum=10, target_key='b') -> bool:\n    return sum(d.values()) == target_sum and target_key in d.keys() and len(d) == 3\ndef g(target_sum=10, target_key='b'):\n    return {'a': 3, 'b': 4, 'c': 3}\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, target_sum=10, target_key='b') -> bool:\n    return sum(d.values()) == target_sum and target_key in d.keys() and len(d) == 3",
        "solution_func": "def g(target_sum=10, target_key='b'):\n    return {'a': 3, 'b': 4, 'c': 3}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary, a target sum, and a target key as parameters. The function checks if the sum of values in the dictionary is equal to the target sum, the target key is present in the dictionary, and the dictionary has a length of 3. The solution function g returns a specific dictionary that satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, checking conditions on dictionary values, keys, and length, and understanding function parameters and return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(prefix='racecar'):\n    return prefix + prefix[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(prefix='racecar'):\n    return prefix + prefix[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given string is a palindrome and g generates a palindrome by concatenating a string with its reverse. The assertion tests if the generated palindrome satisfies the palindrome check."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically reversing a string and checking for palindromes. It also tests the concept of function composition and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\n\ndef g(n=3):\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = i + j\n    return matrix\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. The solution generates a matrix with values based on the sum of row and column indices. This puzzle primarily focuses on topics related to matrix manipulation and symmetry.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))",
        "solution_func": "def g(n=3):\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = i + j\n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given square matrix is symmetric along its main diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to implement a function that checks if a square matrix is symmetric along its main diagonal. The solution generates a matrix with a specific pattern and then checks if the function correctly identifies it as symmetric.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    palindrome = \"racecar\"\n    return palindrome\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True",
            "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    palindrome = \"racecar\"\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns a predefined palindrome string 'racecar' and asserts that f(g()) is True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return any(is_prime(num) for num in nums)\ndef g():\n    prime_list = [2, 4, 7, 9, 10]\n    return prime_list\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to Number Theory (checking for prime numbers) and List Operations (iterating over a list).",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True",
            "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return any(is_prime(num) for num in nums)",
        "solution_func": "def g():\n    prime_list = [2, 4, 7, 9, 10]\n    return prime_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if any number in a given list is a prime number. The solution function g returns a list of numbers, and the puzzle is solved if f returns True when applied to the list returned by g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for prime numbers in a list and requires understanding of functions, loops, and conditionals in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    key_to_check = 'apple'\n    return key_to_check in d\ndef g():\n    key_value_pairs = {'apple': 5, 'banana': 3, 'cherry': 8}\n    return key_value_pairs\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking for the presence of a specific key in the dictionary.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True",
            "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    key_to_check = 'apple'\n    return key_to_check in d",
        "solution_func": "def g():\n    key_value_pairs = {'apple': 5, 'banana': 3, 'cherry': 8}\n    return key_value_pairs",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(d: dict) that checks if a specific key 'apple' exists in a dictionary. The solution function g() returns a dictionary with key-value pairs, and the assertion checks if the key 'apple' exists in the dictionary returned by g()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise that tests the understanding of dictionary operations in Python. It can be used to introduce students to dictionary manipulation and key existence checks.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(missing: int, nums=[1, 2, 3, 5, 6, 7, 8, 9]) -> bool:\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] != 1:\n            return missing == nums[i-1] + 1\n    return False\n\ndef g(nums=[1, 2, 3, 5, 6, 7, 8, 9]):\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] != 1:\n            return nums[i-1] + 1\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for missing numbers in a sequence. It also requires understanding of loops and conditional statements.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(missing: int, nums=[1, 2, 3, 5, 6, 7, 8, 9]) -> bool:\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] != 1:\n            return missing == nums[i-1] + 1\n    return False",
        "solution_func": "def g(nums=[1, 2, 3, 5, 6, 7, 8, 9]):\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] != 1:\n            return nums[i-1] + 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a specific number is missing from a list of consecutive numbers. The function g generates the missing number from the list and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is focused on understanding list manipulation and conditional statements in Python. It requires the student to identify a missing number in a list of consecutive numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str, min_length=6) -> bool:\n    return palindrome == palindrome[::-1] and len(palindrome) > min_length\n\ndef g(text='radar'):\n    return text + text[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True",
            "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str, min_length=6) -> bool:\n    return palindrome == palindrome[::-1] and len(palindrome) > min_length",
        "solution_func": "def g(text='radar'):\n    return text + text[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f that checks if a string is a palindrome of a certain minimum length, and a function g that generates a palindrome by appending the reverse of a given text, the puzzle requires finding a text that satisfies the palindrome condition with a minimum length of 6."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding palindrome strings and string manipulation in Python to generate palindromes. The solution function g generates a palindrome by appending the reverse of a given text, and the challenge function f checks if the generated palindrome meets the length requirement and is indeed a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport string\n\ndef f(s: str) -> bool:\n    s = ''.join(char for char in s if char.isalnum()).lower()\n    return s == s[::-1]\n\ndef g():\n    alphanumeric_chars = string.ascii_letters + string.digits\n    palindrome_str = 'A man, a plan, a canal, Panama!'\n    return ''.join(char for char in palindrome_str if char.lower() in alphanumeric_chars)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True"
        ],
        "problem_func": "import string\n\ndef f(s: str) -> bool:\n    s = ''.join(char for char in s if char.isalnum()).lower()\n    return s == s[::-1]",
        "solution_func": "def g():\n    alphanumeric_chars = string.ascii_letters + string.digits\n    palindrome_str = 'A man, a plan, a canal, Panama!'\n    return ''.join(char for char in palindrome_str if char.lower() in alphanumeric_chars)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome after removing non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, palindrome checking, and list comprehension in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] + nums[i+1] == nums[i+2] for i in range(len(nums)-2))\n\ndef g():\n    return [1, 1, 2, 3, 5, 8, 13]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if a sequence of numbers follows a specific pattern.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] + nums[i+1] == nums[i+2] for i in range(len(nums)-2))",
        "solution_func": "def g():\n    return [1, 1, 2, 3, 5, 8, 13]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers satisfies a specific mathematical property, and providing a solution function g that returns a list of numbers that satisfies the property."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the sum of consecutive elements in a list equals the next element, and providing a list that satisfies this condition as the solution.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, common_diff=3) -> bool:\n    n = len(lst)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if lst[i+1] - lst[i] == common_diff and lst[i+2] - lst[i+1] == common_diff:\n            return True\n    return False\n\ndef g(length=5, common_diff=3):\n    start = 0\n    lst = [start + i * common_diff for i in range(length)]\n    return lst\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking for arithmetic progression in a list of numbers.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, common_diff=3) -> bool:\n    n = len(lst)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if lst[i+1] - lst[i] == common_diff and lst[i+2] - lst[i+1] == common_diff:\n            return True\n    return False",
        "solution_func": "def g(length=5, common_diff=3):\n    start = 0\n    lst = [start + i * common_diff for i in range(length)]\n    return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if there exists a sequence of three consecutive elements in a list with a common difference. The function g generates a list with a specified length and common difference. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, loops, and conditional statements in Python. It is suitable for teaching Python programming concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(s: str) -> bool:\n    cleaned_str = re.sub(r'[^a-zA-Z]', '', s).lower()\n    return cleaned_str == cleaned_str[::-1]\n\ndef g(s='A man, a plan, a canal, Panama!') -> str:\n    cleaned_str = re.sub(r'[^a-zA-Z]', '', s).lower()\n    return cleaned_str + cleaned_str[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Regular Expressions",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "import re\n\ndef f(s: str) -> bool:\n    cleaned_str = re.sub(r'[^a-zA-Z]', '', s).lower()\n    return cleaned_str == cleaned_str[::-1]",
        "solution_func": "def g(s='A man, a plan, a canal, Panama!') -> str:\n    cleaned_str = re.sub(r'[^a-zA-Z]', '', s).lower()\n    return cleaned_str + cleaned_str[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome after removing non-alphabetic characters and converting it to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand string manipulation using regular expressions, removing non-alphabetic characters, converting to lowercase, and checking for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return all(nums[i] >= nums[i+1] for i in range(len(nums) - 1))\n\ndef g(length=5):\n    return sorted(range(length), reverse=True)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in descending order and checking if the list is sorted in non-increasing order. This involves concepts of sorting and conditional logic.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return all(nums[i] >= nums[i+1] for i in range(len(nums) - 1))",
        "solution_func": "def g(length=5):\n    return sorted(range(length), reverse=True)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions: f(nums) checks if a list of numbers is sorted in non-increasing order, and g(length) generates a sorted list of numbers in non-increasing order. The assertion checks if the generated list satisfies the sorting condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of numbers is sorted in non-increasing order and generating a sorted list in non-increasing order. The solution function g(length) creates a sorted list in reverse order, satisfying the condition of function f(nums).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, num=5) -> bool:\n    return result % num == 0\ndef g(num=5):\n    from math import factorial\n    return factorial(num)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and importing modules (math). The solution uses the math module to calculate the factorial of a number and checks if the result is divisible by a given number.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, num=5) -> bool:\n    return result % num == 0",
        "solution_func": "def g(num=5):\n    from math import factorial\n    return factorial(num)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the result of g is divisible by a given number. The assert statement checks if the result of g satisfies the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge of checking divisibility. The solution function g calculates the factorial of a number, and the condition in function f checks if the factorial result is divisible by a given number.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, diff=2) -> bool:\n    return all(nums[i] - nums[i-1] == diff for i in range(1, len(nums)))\ndef g(diff=2):\n    return [i for i in range(1, 6, diff)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, diff=2) -> bool:\n    return all(nums[i] - nums[i-1] == diff for i in range(1, len(nums)))",
        "solution_func": "def g(diff=2):\n    return [i for i in range(1, 6, diff)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the elements in a list have a constant difference specified by the 'diff' parameter, and a function g that generates a list of numbers with a specified difference. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the ability to define functions with default parameters and use them in conjunction to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, math.isqrt(num) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(num=7):\n    return num\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, Importing Modules (Itertools, etc.), and Number Theory (factors, primes, etc.).",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, math.isqrt(num) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(num=7):\n    return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g(num) that returns a specific number (default is 7). The puzzle requires g to be a prime number for f(g()) to return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s='racecar'):\n    return s + s[::-1][1:]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='racecar'):\n    return s + s[::-1][1:]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given string is a palindrome and g generates a palindrome by concatenating a string with its reverse excluding the first character. The assertion checks if g produces a palindrome according to f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(filter(str.isalnum, s.lower()))  # Removing non-alphanumeric characters and converting to lowercase\n    return s == s[::-1]  # Checking if the string is a palindrome\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(filter(str.isalnum, s.lower()))  # Removing non-alphanumeric characters and converting to lowercase\n    return s == s[::-1]  # Checking if the string is a palindrome",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome after removing non-alphanumeric characters and converting it to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, filtering non-alphanumeric characters, converting to lowercase, and checking for palindromes in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, ascending=True) -> bool:\n    if ascending:\n        return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n    else:\n        return all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))\ndef g(nums=[3, 1, 4, 1, 5, 9, 2, 6]):\n    return sorted(nums)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves sorting a list of numbers in either ascending or descending order and then checking if the list is sorted correctly. It demonstrates the use of conditional logic and sorting and ordering topics.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True",
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, ascending=True) -> bool:\n    if ascending:\n        return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n    else:\n        return all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g(nums=[3, 1, 4, 1, 5, 9, 2, 6]):\n    return sorted(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given list of numbers is sorted in either ascending or descending order. The solution function sorts a default list of numbers and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a good fit for teaching Python to master's students in CS as it covers the concepts of list manipulation, conditional statements, and function implementation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g(s='radar'):\n    return s[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True",
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='radar'):\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome and a function g(s) that returns the reverse of a string, the puzzle requires finding a string that is a palindrome using the function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and using the provided functions to check for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. This requires understanding of matrix manipulation and comparison operations.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True",
            "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))",
        "solution_func": "def g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a matrix as input and checks if the matrix is symmetric along its main diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given matrix is symmetric along its main diagonal by comparing the elements at corresponding positions across the diagonal.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(sorted(word) == sorted(words[0]) for word in words)\n\ndef g():\n    return ['listen', 'silent', 'enlist']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting and ordering topics.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True",
            "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(sorted(word) == sorted(words[0]) for word in words)",
        "solution_func": "def g():\n    return ['listen', 'silent', 'enlist']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that checks if all words in a list have the same characters when sorted. The solution function returns a list of words that are anagrams of each other."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all words in a list are anagrams of each other. The solution function returns a list of anagrams to satisfy the puzzle condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"racecar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given string is a palindrome by comparing it to its reverse. The solution function g returns the string 'racecar', which is a palindrome, and the assertion checks if f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\ndef g():\n    return [2, 3, 5, 8, 10]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers contains both even and odd numbers.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)",
        "solution_func": "def g():\n    return [2, 3, 5, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers contains both even and odd numbers, and a function g that returns a specific list of integers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the any() function, and the modulo operator in Python to check for even and odd numbers in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is a prime number or not.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a function g that returns a number, and the function f checks if the number is a prime number. The assertion checks if the function f returns True for the number returned by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to check if a given number is prime. It also requires understanding how to call a function and use assertions for testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, palindrome='racecar') -> bool:\n    return s == s[::-1]\ndef g(palindrome='racecar'):\n    return palindrome\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, palindrome='racecar') -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(palindrome='racecar'):\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome, and a function g that returns a predefined palindrome string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and checking for palindromes. It is a simple exercise that can help students practice writing functions and understanding function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, prime=997) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(n=997):\n    return n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (checking for prime numbers) and Mathematical Operations (checking divisibility).",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, prime=997) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(n=997):\n    return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(num: int, prime=997) that checks if a given number is prime or not, and a function g(n=997) that returns a number. The puzzle tests whether the number returned by g is prime or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is prime using the function f, and then verifying this using the function g. The solution g returns a number which is then checked for primality by function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(number: int, factorial=720) -> bool:\n    fact = 1\n    for i in range(1, number + 1):\n        fact *= i\n    return fact == factorial\ndef g(factorial=720):\n    return 6\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic. It checks if the factorial of a given number matches a predefined factorial value.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(number: int, factorial=720) -> bool:\n    fact = 1\n    for i in range(1, number + 1):\n        fact *= i\n    return fact == factorial",
        "solution_func": "def g(factorial=720):\n    return 6",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that calculates the factorial of a given number and compares it to a predefined factorial value. The function g returns a specific number, and the puzzle checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of factorial calculation and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(1, len(nums)))\n\ndef g() -> List[int]:\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers forms an arithmetic progression.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(1, len(nums)))",
        "solution_func": "def g() -> List[int]:\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of numbers forms an arithmetic sequence, and a function g that returns a specific list of numbers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list operations and iteration in Python, as well as the concept of arithmetic sequences. It requires students to implement a function that checks for a specific pattern in a list of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) == len(set(nums))\n\ndef g() -> List[int]:\n    return [4, 8, 15, 16, 23, 42]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for uniqueness in a list of integers.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) == len(set(nums))",
        "solution_func": "def g() -> List[int]:\n    return [4, 8, 15, 16, 23, 42]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers contains only unique elements, and a function g that returns a specific list of integers. The assertion checks if f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, uniqueness of elements, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], prefix='abc', count=5) -> bool:\n    return all(s.startswith(prefix) for s in strings) and len(strings) == count\n\ndef g(prefix='abc', count=5):\n    return [prefix + str(i) for i in range(1, count + 1)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], prefix='abc', count=5) -> bool:\n    return all(s.startswith(prefix) for s in strings) and len(strings) == count",
        "solution_func": "def g(prefix='abc', count=5):\n    return [prefix + str(i) for i in range(1, count + 1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings, a prefix, and a count as input. The function checks if all strings in the list start with the given prefix and if the length of the list is equal to the count. The solution function g generates a list of strings with the specified prefix and count."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, string manipulation, and function parameters in Python. It also requires knowledge of the all() function and list slicing. The solution function g demonstrates how to generate a list of strings with a specific prefix and count.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], key='xyz', value=42) -> bool:\n    return key in dictionary and dictionary[key] == value\n\ndef g(key='xyz', value=42):\n    return {key: value}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Dict\n\ndef f(dictionary: Dict[str, int], key='xyz', value=42) -> bool:\n    return key in dictionary and dictionary[key] == value",
        "solution_func": "def g(key='xyz', value=42):\n    return {key: value}",
        "quality": [
            null
        ],
        "description": [
            "Given a dictionary and default key-value pair, the function f checks if the key exists in the dictionary and its value matches the default value. The function g returns a dictionary with the default key-value pair."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a key-value pair exists in a dictionary. The solution function g returns a dictionary with the specified key-value pair. The assertion at the end checks if the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], start=1, end=5) -> bool:\n    return all(start <= x <= end and start <= y <= end for x, y in tuples)\n\ndef g(start=1, end=5):\n    return [(i, j) for i in range(start, end + 1) for j in range(start, end + 1)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list comprehension to generate tuples within a specified range and then check if all tuples satisfy a given condition.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], start=1, end=5) -> bool:\n    return all(start <= x <= end and start <= y <= end for x, y in tuples)",
        "solution_func": "def g(start=1, end=5):\n    return [(i, j) for i in range(start, end + 1) for j in range(start, end + 1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples and two optional parameters, start and end. The function checks if all elements in the tuples are within the range defined by start and end. The solution function g generates all possible tuples within the specified range and returns them."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, tuple unpacking, and the all() function in Python. It also tests the ability to define functions with optional parameters and use them in conjunction with list comprehensions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(primes: List[int], limit=50, count=15) -> bool:\n    return len(primes) == count and all(num > 1 and all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)) for num in primes) and all(num < limit for num in primes)\n\ndef g(limit=50, count=15):\n    primes = []\n    num = 2\n    while len(primes) < count:\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.), Conditional Logic, Brute Force Search",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(primes: List[int], limit=50, count=15) -> bool:\n    return len(primes) == count and all(num > 1 and all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)) for num in primes) and all(num < limit for num in primes)",
        "solution_func": "def g(limit=50, count=15):\n    primes = []\n    num = 2\n    while len(primes) < count:\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of prime numbers generated by a function meets certain criteria defined in another function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires generating a list of prime numbers and then checking if the list contains a specific count of primes, all primes are greater than 1, and all primes are below a certain limit.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(pattern: str, n=5) -> bool:\n    return len(pattern) == n and all(int(pattern[i]) == i + 1 for i in range(n))\n\ndef g(n=5):\n    return ''.join(str(i) for i in range(1, n+1))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True"
        ],
        "problem_func": "def f(pattern: str, n=5) -> bool:\n    return len(pattern) == n and all(int(pattern[i]) == i + 1 for i in range(n))",
        "solution_func": "def g(n=5):\n    return ''.join(str(i) for i in range(1, n+1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that generates a string of numbers from 1 to n and then checks if the generated string matches a specific pattern."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, list comprehension, and boolean logic in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str, s='racecar') -> bool:\n    return palindrome == palindrome[::-1]\ndef g(s='racecar'):\n    return s + s[::-1][1:]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str, s='racecar') -> bool:\n    return palindrome == palindrome[::-1]",
        "solution_func": "def g(s='racecar'):\n    return s + s[::-1][1:]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it to its reverse. The solution function concatenates the string with its reverse, excluding the first character, and returns the result."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for palindromes and manipulating strings in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list, symmetric=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\ndef g(symmetric=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return [[symmetric[j][i] for j in range(len(symmetric))] for i in range(len(symmetric))]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and checking for symmetry. It also includes list comprehension and assertion testing.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(matrix: list, symmetric=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g(symmetric=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]):\n    return [[symmetric[j][i] for j in range(len(symmetric))] for i in range(len(symmetric))]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given matrix is symmetric by comparing its elements with their transposed positions in the matrix."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of matrix symmetry and transposition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, char='a') -> bool:\n    return s == s[::-1] and char in s\ndef g(char='a'):\n    return \"racecar\" + char + \"racecar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, char='a') -> bool:\n    return s == s[::-1] and char in s",
        "solution_func": "def g(char='a'):\n    return \"racecar\" + char + \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome and contains a specific character, and a function g that constructs a string with the required properties. The assertion checks if the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, checking for palindromes, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    clean_s = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_s == clean_s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    clean_s = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_s == clean_s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if a given string is a palindrome after removing non-alphanumeric characters and converting all characters to lowercase. The solution function returns a specific string that is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, palindrome checking, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(x: int, n=25) -> bool:\n    return x == n**2\ndef g(n=25):\n    return n**2\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and importing modules (math). It checks if a given number is equal to the square of a specified number.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(x: int, n=25) -> bool:\n    return x == n**2",
        "solution_func": "def g(n=25):\n    return n**2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(x) that checks if the input x is equal to the square of a given number n. The function g() returns the square of a given number n, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, parameter passing, and function invocation in Python. It also tests the concept of function composition and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='apple', value='red') -> bool:\n    return d[key] == value\ndef g(key='apple', value='red'):\n    return {key: value}\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking if a specific key-value pair exists in the dictionary.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='apple', value='red') -> bool:\n    return d[key] == value",
        "solution_func": "def g(key='apple', value='red'):\n    return {key: value}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given key-value pair exists in a dictionary, and another function g that creates a dictionary with a specified key-value pair. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int, m=17) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return n == m\ndef g(m=17):\n    return m\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (primes) and Mathematical Operations.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int, m=17) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return n == m",
        "solution_func": "def g(m=17):\n    return m",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given number n is a prime number or not, and a function g() that returns a specific number. The puzzle requires g() to return a number such that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_value: int, numbers=[8, 15, 24, 11, 6]) -> bool:\n    return max_value == max(numbers)\ndef g(numbers=[8, 15, 24, 11, 6]):\n    return max(numbers)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding the maximum value in a list and checking if it matches a given value.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True"
        ],
        "problem_func": "def f(max_value: int, numbers=[8, 15, 24, 11, 6]) -> bool:\n    return max_value == max(numbers)",
        "solution_func": "def g(numbers=[8, 15, 24, 11, 6]):\n    return max(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given value is equal to the maximum value in a list of numbers. The solution function g returns the maximum value from a list of numbers, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that compares a value to the maximum value in a list, and how to find the maximum value in a list using the max() function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\nimport string\n\ndef f(password: str, length=8, uppercase=True, digits=True, special_chars=True) -> bool:\n    criteria = [uppercase and any(c.isupper() for c in password),\n                digits and any(c.isdigit() for c in password),\n                special_chars and any(c in string.punctuation for c in password),\n                len(password) == length]\n    return all(criteria)\n\ndef g(length=8, uppercase=True, digits=True, special_chars=True):\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choices(password_chars, k=length))\n    return password\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True",
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "import random\nimport string\n\ndef f(password: str, length=8, uppercase=True, digits=True, special_chars=True) -> bool:\n    criteria = [uppercase and any(c.isupper() for c in password),\n                digits and any(c.isdigit() for c in password),\n                special_chars and any(c in string.punctuation for c in password),\n                len(password) == length]\n    return all(criteria)",
        "solution_func": "def g(length=8, uppercase=True, digits=True, special_chars=True):\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choices(password_chars, k=length))\n    return password",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a generated password meets certain criteria, and a function g that generates a random password based on specified parameters. The assertion at the end checks if the generated password satisfies the criteria set by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random password and checking if it meets specific criteria such as length, uppercase letters, digits, and special characters. The solution function g generates a password based on the given parameters, and the puzzle function f verifies if the generated password meets the criteria. The assertion at the end ensures that the solution function g produces a password that satisfies the criteria set by f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    a, b, c = sorted(nums)\n    return a**2 + b**2 == c**2\ndef g(n=5):\n    for a in range(1, n):\n        for b in range(a, n):\n            c = (a**2 + b**2) ** 0.5\n            if c.is_integer() and c <= n:\n                return [a, b, int(c)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and sorting and ordering.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    a, b, c = sorted(nums)\n    return a**2 + b**2 == c**2",
        "solution_func": "def g(n=5):\n    for a in range(1, n):\n        for b in range(a, n):\n            c = (a**2 + b**2) ** 0.5\n            if c.is_integer() and c <= n:\n                return [a, b, int(c)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers forms a Pythagorean triplet, where the sum of the squares of two numbers is equal to the square of the third number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of Pythagorean triplets and basic looping in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum == n\ndef g(n=10):\n    nums = list(range(1, n + 1))\n    missing_num = nums.pop()\n    return nums\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum == n",
        "solution_func": "def g(n=10):\n    nums = list(range(1, n + 1))\n    missing_num = nums.pop()\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of numbers is missing one specific number from a sequence of numbers, and a function g that generates a list of numbers with one missing number from a given range. The assertion at the end checks if the solution function g returns the correct list to satisfy the condition of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the expected sum of a sequence of numbers, comparing it with the actual sum of a list of numbers, and determining the missing number in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g(s='racecar'):\n    return s + s[-2::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='racecar'):\n    return s + s[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome. The function f(s) returns True if the input string is equal to its reverse, and the function g(s) constructs a palindrome by appending the reverse of the string excluding the last character."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and checking for palindromes. It requires knowledge of string slicing and comparison.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g():\n    palindrome = \"radar\"\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    palindrome = \"radar\"\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that checks if a given word is a palindrome by comparing it with its reverse. The solution function g() returns the word 'radar' and asserts that f(g()) is True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g():\n    return [2, 4, 6, 7, 9, 11]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers contains both even and odd numbers.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)",
        "solution_func": "def g():\n    return [2, 4, 6, 7, 9, 11]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and returns True if the list contains both even and odd numbers. The solution function g returns a list with both even and odd numbers to satisfy the condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for the presence of both even and odd numbers in a list. The solution function g provides a list that contains both even and odd numbers to meet the condition set by function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a matrix is symmetric along its diagonal. This requires understanding of matrix operations and nested loops.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given matrix is symmetric along its main diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given matrix is symmetric along its main diagonal by comparing elements at corresponding positions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \n\ndef f(sorted_list: List[int]) -> bool:\n    mid = len(sorted_list) // 2\n    return sum(sorted_list[:mid]) < sum(sorted_list[mid:])\n\ndef g(size=10):\n    import random\n    random_list = random.sample(range(1, 100), size)\n    return sorted(random_list)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and comparing the sums of the two halves of the sorted list.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True",
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \n\ndef f(sorted_list: List[int]) -> bool:\n    mid = len(sorted_list) // 2\n    return sum(sorted_list[:mid]) < sum(sorted_list[mid:])",
        "solution_func": "def g(size=10):\n    import random\n    random_list = random.sample(range(1, 100), size)\n    return sorted(random_list)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement two functions: f takes a sorted list of integers and checks if the sum of the first half is less than the sum of the second half, while g generates a random sorted list of integers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list slicing, sorting, and comparison of sums. It also requires knowledge of random number generation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(mid_char: str, word='radar') -> bool:\n    return word == word[::-1] and mid_char == word[len(word) // 2]\ndef g(word='radar'):\n    return word[len(word) // 2]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(mid_char: str, word='radar') -> bool:\n    return word == word[::-1] and mid_char == word[len(word) // 2]",
        "solution_func": "def g(word='radar'):\n    return word[len(word) // 2]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the middle character of a given word and checking if the word is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, indexing, and checking for palindromes in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(diff: int, numbers=[2, 5, 8, 12, 17]) -> bool:\n    return all(numbers[i] < numbers[i + 1] for i in range(len(numbers) - 1)) and diff == max(numbers) - min(numbers)\ndef g(numbers=[2, 5, 8, 12, 17]):\n    return max(numbers) - min(numbers)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if a list of numbers is in ascending order and if the difference between the maximum and minimum numbers in the list is equal to a given value.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(diff: int, numbers=[2, 5, 8, 12, 17]) -> bool:\n    return all(numbers[i] < numbers[i + 1] for i in range(len(numbers) - 1)) and diff == max(numbers) - min(numbers)",
        "solution_func": "def g(numbers=[2, 5, 8, 12, 17]):\n    return max(numbers) - min(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the difference between the maximum and minimum values in a list of numbers and checking if the list is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list of numbers is sorted in ascending order and if the difference between the maximum and minimum values in the list is equal to a specified value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(lst: list, n=20) -> bool:\n    primes = list(sympy.primerange(2, n+1))\n    return all(p in lst for p in primes)\n    \ndef g(n=20):\n    return list(sympy.primerange(2, n+1))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves importing a module (Sympy) to generate prime numbers and then using list operations to check if all prime numbers up to a given number are present in a given list.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "import sympy\n\ndef f(lst: list, n=20) -> bool:\n    primes = list(sympy.primerange(2, n+1))\n    return all(p in lst for p in primes)",
        "solution_func": "def g(n=20):\n    return list(sympy.primerange(2, n+1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of prime numbers up to a given limit is contained within another list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to generate a list of prime numbers using sympy in Python and then check if these primes are present in a given list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s=\"radar\"):\n    return s[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s=\"radar\"):\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g(s) that returns the reverse of the input string. The assertion tests if the reverse of a default string 'radar' is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    def is_fibonacci(n):\n        if n == 0 or n == 1:\n            return True\n        a, b = 0, 1\n        while b < n:\n            a, b = b, a + b\n        return b == n\n\n    return all(is_fibonacci(num) for num in lst)\n\ndef g(n=13):\n    fibonacci = [0, 1]\n    while fibonacci[-1] + fibonacci[-2] <= n:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers are Fibonacci numbers and generating Fibonacci numbers up to a certain limit.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    def is_fibonacci(n):\n        if n == 0 or n == 1:\n            return True\n        a, b = 0, 1\n        while b < n:\n            a, b = b, a + b\n        return b == n\n\n    return all(is_fibonacci(num) for num in lst)",
        "solution_func": "def g(n=13):\n    fibonacci = [0, 1]\n    while fibonacci[-1] + fibonacci[-2] <= n:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(lst) that checks if all numbers in a list are Fibonacci numbers, and a function g(n) that generates a list of Fibonacci numbers up to a given limit. The assertion checks if the generated Fibonacci numbers satisfy the condition of being all Fibonacci numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding Fibonacci numbers and list comprehension in Python. It requires students to implement a function to generate Fibonacci numbers and another function to check if a list of numbers are Fibonacci numbers.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, n=3) -> bool:\n    return sum(lst) > n * len(lst)\ndef g(n=3):\n    return [n+1] * n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, n=3) -> bool:\n    return sum(lst) > n * len(lst)",
        "solution_func": "def g(n=3):\n    return [n+1] * n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of elements in a list is greater than a specified value multiplied by the length of the list. The solution function g generates a list of a specified value repeated a certain number of times, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic understanding of list operations, function definitions, and comparison operations in Python. It can be used to teach students about function composition and list manipulation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name', value='Alice') -> bool:\n    return key in d.keys() and d[key] == value\ndef g(key='name', value='Alice'):\n    return {key: value, 'age': 30}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='name', value='Alice') -> bool:\n    return key in d.keys() and d[key] == value",
        "solution_func": "def g(key='name', value='Alice'):\n    return {key: value, 'age': 30}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary and checks if a specific key-value pair exists in the dictionary. The solution function g creates a dictionary with the specified key-value pair and an additional key-value pair for 'age'. The assertion checks if the solution function g satisfies the condition of the puzzle function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, checking key-value pairs, and understanding function calls in Python. It can be used to teach students about dictionary manipulation and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abcabcabc') -> bool:\n    return len(s) % 3 == 0 and all((s[i] == pattern[i % 3] for i in range(len(s))))\ndef g(pattern='abcabcabc'):\n    return pattern * 3\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abcabcabc') -> bool:\n    return len(s) % 3 == 0 and all((s[i] == pattern[i % 3] for i in range(len(s))))",
        "solution_func": "def g(pattern='abcabcabc'):\n    return pattern * 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a repetition of a specific pattern in groups of three characters, and a function g that generates the pattern repeated three times. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, list comprehension, and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], diff=3) -> bool:\n    return all((nums[i] - nums[i-1] == diff for i in range(1, len(nums))))\ndef g(diff=3):\n    return [i * diff for i in range(1, 6)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], diff=3) -> bool:\n    return all((nums[i] - nums[i-1] == diff for i in range(1, len(nums))))",
        "solution_func": "def g(diff=3):\n    return [i * diff for i in range(1, 6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the elements in a list have a constant difference specified by the 'diff' parameter. The solution function g generates a list of numbers with a specified difference and asserts that f returns True for this generated list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and function parameters in Python. It also tests the ability to create a list with a specific difference between elements and validate the correctness of the solution using the assert statement.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, count=3) -> bool:\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\ndef g(count=3):\n    return '(' * count + ')' * count\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, count=3) -> bool:\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "solution_func": "def g(count=3):\n    return '(' * count + ')' * count",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string of parentheses is balanced, and a function g that generates a string with a specified count of balanced parentheses. The assertion at the end confirms that the generated string satisfies the balance condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of balanced parentheses and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(elements: list, target=[1, 2, 3, 2, 1]) -> bool:\n    return elements == elements[::-1]\n\ndef g(target=[1, 2, 3, 2, 1]):\n    return target\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation by checking if a list is a palindrome.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(elements: list, target=[1, 2, 3, 2, 1]) -> bool:\n    return elements == elements[::-1]",
        "solution_func": "def g(target=[1, 2, 3, 2, 1]):\n    return target",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list is a palindrome, and a function g that returns a predefined list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation in Python, specifically checking for palindromes. The solution g simply returns a predefined list, and the puzzle tests if the function f correctly identifies the list as a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int, threshold=100) -> bool:\n    return sum(total) > threshold\ndef g(threshold=100):\n    return [20, 30, 60, 15, 25]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True"
        ],
        "problem_func": "def f(total: int, threshold=100) -> bool:\n    return sum(total) > threshold",
        "solution_func": "def g(threshold=100):\n    return [20, 30, 60, 15, 25]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a total and a threshold as input and returns True if the sum of the total is greater than the threshold. The solution function g returns a list of numbers, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, parameter passing, list manipulation, and comparison operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='temperature', threshold=50) -> bool:\n    return key in d and d[key] > threshold\ndef g(key='temperature', threshold=50):\n    return {'humidity': 70, 'temperature': 60, 'pressure': 1020}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='temperature', threshold=50) -> bool:\n    return key in d and d[key] > threshold",
        "solution_func": "def g(key='temperature', threshold=50):\n    return {'humidity': 70, 'temperature': 60, 'pressure': 1020}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a dictionary as input and checks if a specified key in the dictionary has a value greater than a specified threshold. The solution function g returns a dictionary with temperature value greater than the threshold. The assertion checks if the puzzle condition is met."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, checking key-value pairs, and understanding function calls in Python. It tests the understanding of function parameters and return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, separator=' ') -> bool:\n    return s == s[::-1]\ndef g(s='radar', separator=' '):\n    return s + separator + s[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, separator=' ') -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='radar', separator=' '):\n    return s + separator + s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given string is a palindrome and g constructs a palindrome string by concatenating the input string with its reverse. The assertion checks if the output of g satisfies the condition of being a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, pattern=[1, 2, 3]) -> bool:\n    pattern_len = len(pattern)\n    return any(lst[i:i+pattern_len] == pattern for i in range(len(lst) - pattern_len + 1))\ndef g(pattern=[1, 2, 3]):\n    return pattern * 3\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and pattern matching, which can be categorized under String Manipulation and Pattern Recognition.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, pattern=[1, 2, 3]) -> bool:\n    pattern_len = len(pattern)\n    return any(lst[i:i+pattern_len] == pattern for i in range(len(lst) - pattern_len + 1))",
        "solution_func": "def g(pattern=[1, 2, 3]):\n    return pattern * 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given list contains a specific pattern of elements, and a function g that generates a pattern to be checked by f. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list slicing and comparison in Python. The solution function g generates a pattern to be checked by f, and the assertion checks if f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name', value='Alice') -> bool:\n    return key in d and d[key] == value\ndef g(key='name', value='Alice'):\n    return {key: value, 'age': 30}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='name', value='Alice') -> bool:\n    return key in d and d[key] == value",
        "solution_func": "def g(key='name', value='Alice'):\n    return {key: value, 'age': 30}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given key-value pair exists in a dictionary and g returns a dictionary with the specified key-value pair. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, is_palindrome=False) -> bool:\n    return s == s[::-1]\ndef g(s = ''):\n    return s[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True",
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, is_palindrome=False) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s = ''):\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s: str, is_palindrome=False) -> bool that checks if a string is a palindrome, and a function g(s='') that returns the reverse of a string, the puzzle requires g to be implemented in a way that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and checking for palindromes. The solution function g should reverse the input string to satisfy the condition f(g()) == True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
            "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return nums == sorted(nums)\n\ndef g():\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and checking if it is sorted. This falls under the topic of Sorting and Ordering.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
            "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return nums == sorted(nums)",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given list of numbers is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(nums) that returns True if the input list of numbers is sorted in ascending order. The solution function g() returns a predefined sorted list, and the assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(lst: list, limit=100) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return all([is_prime(num) for num in lst])\n\ndef g(limit=100):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in range(2, limit) if is_prime(num)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, recursion, and number theory (primes).",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(lst: list, limit=100) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return all([is_prime(num) for num in lst])",
        "solution_func": "def g(limit=100):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in range(2, limit) if is_prime(num)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers contains only prime numbers up to a certain limit. The function f(lst: list, limit=100) checks if all numbers in the list are prime, while the function g(limit=100) generates a list of prime numbers up to the given limit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and list comprehension in Python. The functions f and g demonstrate how to check for prime numbers and generate a list of prime numbers respectively.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, y=[3, 5, 7, 9]) -> bool:\n    return len(lst) == 4 and all(elem in y for elem in lst)\ndef g(y=[3, 5, 7, 9]):\n    return y\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic and list operations.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, y=[3, 5, 7, 9]) -> bool:\n    return len(lst) == 4 and all(elem in y for elem in lst)",
        "solution_func": "def g(y=[3, 5, 7, 9]):\n    return y",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list has exactly 4 elements and all elements are present in a predefined list. The solution function g returns the predefined list and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, function definitions, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, y='Welcome to Python') -> bool:\n    return len(s) == 2 * len(y) and s.startswith('Wel') and s.endswith('thon')\ndef g(y='Welcome to Python'):\n    return y * 2\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, y='Welcome to Python') -> bool:\n    return len(s) == 2 * len(y) and s.startswith('Wel') and s.endswith('thon')",
        "solution_func": "def g(y='Welcome to Python'):\n    return y * 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is twice the length of a default string and starts with 'Wel' and ends with 'thon'. The solution function g returns the default string repeated twice, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of function parameters and return values in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list) -> bool:\n    return arr == sorted(arr)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if it is sorted. This falls under the topic of Sorting and Ordering.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list) -> bool:\n    return arr == sorted(arr)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given list is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(arr) that returns True if the input list is sorted in ascending order. It also provides a solution function g() that returns a sorted list [1, 2, 3, 4, 5] and asserts that f(g()) is True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, k=3) -> bool:\n    for i in range(len(text)):\n        for j in range(i + k, len(text) + 1):\n            if text[i:j] == text[i:j][::-1]:\n                return True\n    return False\n\ndef g(k=3):\n    return 'ab' * k\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, k=3) -> bool:\n    for i in range(len(text)):\n        for j in range(i + k, len(text) + 1):\n            if text[i:j] == text[i:j][::-1]:\n                return True\n    return False",
        "solution_func": "def g(k=3):\n    return 'ab' * k",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding if there exists a substring in a given text that is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there exists a palindrome substring of length k in a given text.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=5):\n    return [1, target-1]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations and Conditional Logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], target=5) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=5):\n    return [1, target-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if there are two numbers in the list that add up to a specific target value. The function g generates a list that always contains two numbers that add up to the target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use a set to efficiently check for the presence of a specific number in a list. The solution function g always returns a list that satisfies the condition of the puzzle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    target_sum = sum(matrix[0])\n    for i in range(1, n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-1-i] for i in range(n)) != target_sum:\n        return False\n    return True\n\ndef g(n=3):\n    magic_square = [[0]*n for _ in range(n)]\n    num = 1\n    i, j = 0, n//2\n    while num <= n*n:\n        magic_square[i][j] = num\n        num += 1\n        newi, newj = (i-1) % n, (j+1)%n\n        if magic_square[newi][newj]:\n            i += 1\n        else:\n            i, j = newi, newj\n    return magic_square\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Brute Force Search, Mathematical Operations, and Conditional Logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    target_sum = sum(matrix[0])\n    for i in range(1, n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-1-i] for i in range(n)) != target_sum:\n        return False\n    return True",
        "solution_func": "def g(n=3):\n    magic_square = [[0]*n for _ in range(n)]\n    num = 1\n    i, j = 0, n//2\n    while num <= n*n:\n        magic_square[i][j] = num\n        num += 1\n        newi, newj = (i-1) % n, (j+1)%n\n        if magic_square[newi][newj]:\n            i += 1\n        else:\n            i, j = newi, newj\n    return magic_square",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given matrix is a magic square or not. The function f checks if the input matrix is a magic square by verifying the sum of rows, columns, and diagonals. The function g generates a magic square of size n."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding magic squares and their properties in Python. It requires knowledge of loops, conditionals, and list manipulation. It is a suitable puzzle for teaching Python programming to master's students in CS as it covers algorithmic challenges and solution verification.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns a specific text 'radar'. The assertion tests if the function f correctly identifies 'radar' as a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums) - 1))\n\ndef g():\n    import random\n    size = random.randint(1, 10)\n    nums = sorted(random.sample(range(1, 100), size))\n    return nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers in ascending order using random sampling and checking if the list is sorted correctly.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    import random\n    size = random.randint(1, 10)\n    nums = sorted(random.sample(range(1, 100), size))\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random list of integers, sorting it, and then checking if the list is in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random list of integers, sorting it, and checking if the list is in ascending order using the provided functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\ndef g():\n    def generate_palindrome(word):\n        if len(word) == 0:\n            return \"\"\n        else:\n            return word[0] + generate_palindrome(word[1:]) + word[0]\n    return generate_palindrome(\"level\")\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a word is a palindrome. The solution uses recursion to generate a palindrome from a given word.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    def generate_palindrome(word):\n        if len(word) == 0:\n            return \"\"\n        else:\n            return word[0] + generate_palindrome(word[1:]) + word[0]\n    return generate_palindrome(\"level\")",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not using recursion."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a word is a palindrome and another function that generates a palindrome using recursion. The solution function generates the palindrome for the word 'level' and checks if it is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    return all(num % 2 == 0 for num in numbers)\ndef g():\n    numbers = [2, 4, 6, 8, 10]\n    return numbers\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    return all(num % 2 == 0 for num in numbers)",
        "solution_func": "def g():\n    numbers = [2, 4, 6, 8, 10]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are even, and a function g that returns a list of even numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and the modulo operator in Python. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(dictionary: dict) -> bool:\n    return dictionary.get('key') == 100\ndef g():\n    data = {'key': 100, 'other_key': 200}\n    return data\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and comparison, which falls under the topic of data structures and conditional logic.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(dictionary: dict) -> bool:\n    return dictionary.get('key') == 100",
        "solution_func": "def g():\n    data = {'key': 100, 'other_key': 200}\n    return data",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a specific key in a dictionary has a value of 100, and a function g that returns a dictionary with the key 'key' set to 100. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, accessing values by keys, and understanding how functions can be used to manipulate and check data structures in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, n=7) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(n=7):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes[-1]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search algorithm and list comprehension. It also includes function definition, nested functions, and assertion testing.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, n=7) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(n=7):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes[-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is prime, and a function g(n) that finds the nth prime number. The puzzle requires using the g function to find a prime number and then checking if it is prime using the f function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of prime numbers, functions, loops, and list comprehension in Python. It tests the understanding of defining functions, iterating over ranges, and list comprehension to solve a problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, n=['a', 'b', 'c', 'd', 'e']) -> bool:\n    return len(lst) == len(set(lst))\ndef g(n=['a', 'b', 'c', 'd', 'e']):\n    import random\n    return random.sample(n, len(n))\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations to check for uniqueness of elements in a list. The solution uses random sampling to generate a list with unique elements.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, n=['a', 'b', 'c', 'd', 'e']) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g(n=['a', 'b', 'c', 'd', 'e']):\n    import random\n    return random.sample(n, len(n))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list has unique elements, and a function g that generates a random sample of elements from a predefined list. The assertion checks if the output of g satisfies the condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, set operations, random sampling, and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(arr: List[int]) -> bool:\n    if len(arr) < 2:\n        return True\n    diff = arr[1] - arr[0]\n    return all(arr[i] - arr[i-1] == diff for i in range(2, len(arr)))\ndef g():\n    return [1, 3, 5, 7, 9]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given list of integers forms an arithmetic progression.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(arr: List[int]) -> bool:\n    if len(arr) < 2:\n        return True\n    diff = arr[1] - arr[0]\n    return all(arr[i] - arr[i-1] == diff for i in range(2, len(arr)))",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of integers forms an arithmetic sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function that checks if a list of integers forms an arithmetic sequence with a common difference.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom collections import Counter\ndef f(s: str) -> bool:\n    counts = Counter(s)\n    odd_count = sum(1 for count in counts.values() if count % 2 != 0)\n    return odd_count <= 1\ndef g():\n    return \"aabbcc\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.), Set Operations",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "from collections import Counter\ndef f(s: str) -> bool:\n    counts = Counter(s)\n    odd_count = sum(1 for count in counts.values() if count % 2 != 0)\n    return odd_count <= 1",
        "solution_func": "def g():\n    return \"aabbcc\"",
        "quality": [
            null
        ],
        "description": [
            "Given a string, the puzzle f(\u2026) checks if the string can be rearranged to form a palindrome (a word that reads the same forwards and backwards). The solution g(\u2026) returns a string that can be rearranged to form a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves counting the frequency of characters in the input string and checking if at most one character has an odd count. The solution returns a string that has an even count for each character, making it possible to rearrange into a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int], common_diff=5) -> bool:\n    return all(numbers[i] - numbers[i-1] == common_diff for i in range(1, len(numbers)))\ndef g(common_diff=5):\n    import random\n    start = random.randint(1, 10)\n    numbers = [start + i * common_diff for i in range(5)]\n    return numbers\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and random number generation.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int], common_diff=5) -> bool:\n    return all(numbers[i] - numbers[i-1] == common_diff for i in range(1, len(numbers)))",
        "solution_func": "def g(common_diff=5):\n    import random\n    start = random.randint(1, 10)\n    numbers = [start + i * common_diff for i in range(5)]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers generated with a common difference satisfies a specific condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires generating a list of numbers with a common difference and checking if the difference between consecutive elements is equal to the common difference.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(x: str, palindrome=\"race a car\") -> bool:\n    clean_str = re.sub(r'[^a-zA-Z0-9]', '', x).lower()\n    return clean_str == clean_str[::-1]\n\ndef g(palindrome=\"race a car\"):\n    clean_palindrome = re.sub(r'[^a-zA-Z0-9]', '', palindrome).lower()\n    return clean_palindrome + clean_palindrome[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation using regular expressions to clean and check for palindromes.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "import re\n\ndef f(x: str, palindrome=\"race a car\") -> bool:\n    clean_str = re.sub(r'[^a-zA-Z0-9]', '', x).lower()\n    return clean_str == clean_str[::-1]",
        "solution_func": "def g(palindrome=\"race a car\"):\n    clean_palindrome = re.sub(r'[^a-zA-Z0-9]', '', palindrome).lower()\n    return clean_palindrome + clean_palindrome[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given string is a palindrome after removing non-alphanumeric characters and converting to lowercase, and g generates a palindrome string based on a given input string. The puzzle requires g to be implemented in a way that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, regular expressions, and palindrome checking in Python. It tests the student's understanding of string operations and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=17):\n    def is_prime(num):\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    next_prime = n + 1\n    while not is_prime(next_prime):\n        next_prime += 1\n    return next_prime\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(n=17):\n    def is_prime(num):\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    next_prime = n + 1\n    while not is_prime(next_prime):\n        next_prime += 1\n    return next_prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) which checks if a given number is a prime number, and g(n) which finds the next prime number after a given number. The assertion checks if g() returns the next prime number after 17."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and the implementation of a function to find the next prime number. It requires knowledge of loops, conditionals, and basic number operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom collections import Counter\n\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g(lst=[1, 2, 2, 3, 4, 4, 5]):\n    return [item for item, count in Counter(lst).items() if count == 1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for unique elements in a list using set operations and Counter from collections module.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "from collections import Counter\n\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g(lst=[1, 2, 2, 3, 4, 4, 5]):\n    return [item for item, count in Counter(lst).items() if count == 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list contains only unique elements, and a function g that returns a list of elements that appear only once in the input list. The assertion checks if function f applied to the output of function g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, set operations, and dictionary comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(sorted_list: list, threshold=0) -> bool:\n    return all(x >= threshold for x in sorted_list)\n\ndef g(size=10, threshold=5):\n    random_list = random.sample(range(1, 100), size)\n    sorted_list = sorted(random_list, reverse=True)\n    return sorted_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in descending order and checking if all elements are greater than or equal to a threshold value.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True"
        ],
        "problem_func": "import random\n\ndef f(sorted_list: list, threshold=0) -> bool:\n    return all(x >= threshold for x in sorted_list)",
        "solution_func": "def g(size=10, threshold=5):\n    random_list = random.sample(range(1, 100), size)\n    sorted_list = sorted(random_list, reverse=True)\n    return sorted_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that checks if all elements in a sorted list are greater than or equal to a given threshold. The solution function g generates a sorted list of random numbers and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The student needs to understand how to generate a sorted list of random numbers, pass it to the function f along with a threshold, and ensure that the function f returns True when all elements in the list are greater than or equal to the threshold.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(strings: List[str], target_string=\"python\") -> bool:\n    return target_string in strings\ndef g(target_string=\"python\"):\n    import random\n    import string\n    strings = [''.join(random.choices(string.ascii_lowercase, k=6)) for _ in range(10)]\n    strings.append(target_string)\n    return strings\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and importing modules (random, string).",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(strings: List[str], target_string=\"python\") -> bool:\n    return target_string in strings",
        "solution_func": "def g(target_string=\"python\"):\n    import random\n    import string\n    strings = [''.join(random.choices(string.ascii_lowercase, k=6)) for _ in range(10)]\n    strings.append(target_string)\n    return strings",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a target string is in a list of randomly generated strings, and a function g that generates a list of random strings including the target string. The assertion at the end checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to generate random strings, create a list of strings, and check for the presence of a target string in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return sum(x**2 for x in nums) % 5 == 0\n\ndef g() -> List[int]:\n    return [(i**2 + 3) for i in range(50)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True",
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return sum(x**2 for x in nums) % 5 == 0",
        "solution_func": "def g() -> List[int]:\n    return [(i**2 + 3) for i in range(50)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define a function that checks if the sum of squares of numbers in a list is divisible by 5. The solution function generates a list of squares of numbers with an offset and checks if the puzzle function returns True for this list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, modulo operator, and function definition in Python. It provides a practical application of these concepts.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, prefix='Hello', suffix='World') -> bool:\n    return s[:len(prefix)] == prefix and s[-len(suffix):] == suffix\ndef g(prefix='Hello', suffix='World'):\n    return prefix + 'Python' + suffix\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, prefix='Hello', suffix='World') -> bool:\n    return s[:len(prefix)] == prefix and s[-len(suffix):] == suffix",
        "solution_func": "def g(prefix='Hello', suffix='World'):\n    return prefix + 'Python' + suffix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string starts with a specified prefix and ends with a specified suffix. The solution function g constructs a string using the provided prefix and suffix, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string slicing in Python and how to define functions with default arguments. The solution function g constructs a string using the provided prefix and suffix, and the puzzle checks if the constructed string satisfies the conditions set by function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name', value='Alice') -> bool:\n    return d.get(key) == value\ndef g(key='name', value='Alice'):\n    return {key: 'Alice'}\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and comparison, as well as function parameter passing and assertion testing.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='name', value='Alice') -> bool:\n    return d.get(key) == value",
        "solution_func": "def g(key='name', value='Alice'):\n    return {key: 'Alice'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given key-value pair exists in a dictionary, and a function g that returns a dictionary with a specified key-value pair. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary operations and function calls in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    return arr == sorted(arr)\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if it is sorted. This falls under the topic of Sorting and Ordering (index 14).",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(arr: List[int]) -> bool:\n    return arr == sorted(arr)",
        "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g() that returns a list of integers, and the function f(arr) checks if the input list is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of list sorting in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s) that checks if a given string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    return any(num % 2 == 0 for num in arr) and any(num % 2 != 0 for num in arr)\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for even and odd numbers in a list.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(arr: List[int]) -> bool:\n    return any(num % 2 == 0 for num in arr) and any(num % 2 != 0 for num in arr)",
        "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers contains both even and odd numbers, and a function g that returns a specific list of integers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the any() function, and the concept of even and odd numbers in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers contains both even and odd numbers, and a function g that returns a specific list of numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the any() function, and the concept of even and odd numbers in Python. It also tests the ability to define functions and use them in assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s.lower() == s.lower()[::-1]\ndef g():\n    return \"Racecar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s.lower() == s.lower()[::-1]",
        "solution_func": "def g():\n    return \"Racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string is a palindrome (reads the same forwards and backwards), and a function g that returns the string 'Racecar'. The assertion checks if the function f applied to the output of function g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and palindrome checking in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return all(nums[i] - nums[i-1] == nums[1] - nums[0] for i in range(1, len(nums)))\ndef g():\n    return [3, 6, 9, 12, 15]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers forms an arithmetic sequence.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return all(nums[i] - nums[i-1] == nums[1] - nums[0] for i in range(1, len(nums)))",
        "solution_func": "def g():\n    return [3, 6, 9, 12, 15]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers forms an arithmetic sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function that checks if a given list of numbers forms an arithmetic sequence. The solution function generates a list that forms an arithmetic sequence and asserts that the function returns True for this list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(text: str) -> bool:\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text).lower()\n    return cleaned_text == cleaned_text[::-1]\n\ndef g(text=\"A man, a plan, a canal, Panama!\"):\n    return ''.join([char for char in text if char.isalnum()]).lower()\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Pattern Recognition",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True"
        ],
        "problem_func": "import re\n\ndef f(text: str) -> bool:\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text).lower()\n    return cleaned_text == cleaned_text[::-1]",
        "solution_func": "def g(text=\"A man, a plan, a canal, Panama!\"):\n    return ''.join([char for char in text if char.isalnum()]).lower()",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given text is a palindrome after removing non-alphanumeric characters and converting to lowercase. The solution function g removes non-alphanumeric characters from a default text and returns the cleaned text."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, regular expressions, and checking for palindromes. It is a good puzzle to teach Python programming concepts related to strings, regular expressions, and functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(chars=['a', 'b', 'c']):\n    chars.sort()\n    palindrome = \"\"\n    for char in chars:\n        palindrome = char + palindrome + char\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Sorting and Ordering",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(chars=['a', 'b', 'c']):\n    chars.sort()\n    palindrome = \"\"\n    for char in chars:\n        palindrome = char + palindrome + char\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s) that checks if a given string is a palindrome, and a function g(chars) that creates a palindrome string using a list of characters. The assertion checks if the output of g() is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, sorting, and checking for palindromes in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == [1, 2, 3, 4, 5]\ndef g():\n    return list(range(1, 6))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and comparison.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == [1, 2, 3, 4, 5]",
        "solution_func": "def g():\n    return list(range(1, 6))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: list) that checks if the input list is [1, 2, 3, 4, 5], and a function g() that returns a list of numbers from 1 to 5. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about defining a function to check equality of lists and another function to generate a specific list. It involves basic list manipulation and comparison in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return any(num % 2 == 0 for num in lst) and any(num % 2 != 0 for num in lst)\ndef g():\n    return [1, 3, 5, 7, 2, 4, 6]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for even and odd numbers in a list using list comprehension and logical operators.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return any(num % 2 == 0 for num in lst) and any(num % 2 != 0 for num in lst)",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 2, 4, 6]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: list) -> bool that checks if a list contains both even and odd numbers. The solution function g() returns a list with both even and odd numbers to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions and the any() function in Python to check for the presence of even and odd numbers in a list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return any(c.islower() for s in lst for c in s) and any(c.isupper() for s in lst for c in s)\ndef g():\n    return ['Hello', 'world', 'Python']\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation is used to check for lowercase and uppercase characters in the strings.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return any(c.islower() for s in lst for c in s) and any(c.isupper() for s in lst for c in s)",
        "solution_func": "def g():\n    return ['Hello', 'world', 'Python']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that checks if a list of strings contains both lowercase and uppercase characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension and the any() function to check for lowercase and uppercase characters in a list of strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(index = 5):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == index:\n                return num\n        num += 1\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search algorithm. It also includes concepts of loops, conditionals, and functions.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(index = 5):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == index:\n                return num\n        num += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given number is a prime number, and a function g(index) that finds the nth prime number. The puzzle requires students to understand prime numbers and function composition in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a common programming concept (prime numbers) and requires students to implement a function to check for prime numbers and another function to find the nth prime number. It is suitable for teaching Python programming to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(primes: list, limit=100) -> bool:\n    return all(p > 1 and all(p % i != 0 for i in range(2, int(math.sqrt(p)) + 1)) for p in primes) and len(primes) > 0\n\ndef g(limit=100):\n    primes = []\n    for num in range(2, limit):\n        if all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1)):\n            primes.append(num)\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search approach and mathematical operations.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(primes: list, limit=100) -> bool:\n    return all(p > 1 and all(p % i != 0 for i in range(2, int(math.sqrt(p)) + 1)) for p in primes) and len(primes) > 0",
        "solution_func": "def g(limit=100):\n    primes = []\n    for num in range(2, limit):\n        if all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1)):\n            primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers are prime numbers and if the list is not empty, and defining a function g that generates a list of prime numbers up to a given limit. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sequence: list, n=5) -> bool:\n    return len(sequence) == n and all(sequence[i] + sequence[i + 1] == sequence[i + 2] for i in range(n - 2))\n\ndef g(n=5):\n    sequence = [0, 1]\n    while len(sequence) < n:\n        sequence.append(sequence[-2] + sequence[-1])\n    return sequence\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and sequence generation using Fibonacci numbers.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(sequence: list, n=5) -> bool:\n    return len(sequence) == n and all(sequence[i] + sequence[i + 1] == sequence[i + 2] for i in range(n - 2))",
        "solution_func": "def g(n=5):\n    sequence = [0, 1]\n    while len(sequence) < n:\n        sequence.append(sequence[-2] + sequence[-1])\n    return sequence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f(sequence: list, n=5) that checks if a given sequence follows a specific pattern, and a function g(n=5) that generates a sequence based on a specific rule. The assert statement checks if the generated sequence satisfies the pattern defined in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, and pattern recognition in Python. It tests the student's ability to implement a function to check a specific pattern and generate a sequence that follows that pattern.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sum_of_squares: int, n=5) -> bool:\n    return sum_of_squares == sum(i**2 for i in range(1, n + 1))\n\ndef g(n=5):\n    return sum(i**2 for i in range(1, n + 1))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the sum of squares of numbers from 1 to n is equal to a given value.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(sum_of_squares: int, n=5) -> bool:\n    return sum_of_squares == sum(i**2 for i in range(1, n + 1))",
        "solution_func": "def g(n=5):\n    return sum(i**2 for i in range(1, n + 1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of squares of numbers from 1 to n is equal to a given value, and a function g that calculates the sum of squares of numbers from 1 to n. The puzzle tests the correctness of function g by asserting that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions in Python, use list comprehensions, and test functions using assertions. It also reinforces the concept of function composition and testing for correctness.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num_list: list, target=30) -> bool:\n    return sum(num_list) == target and all(x % 2 == 0 for x in num_list)\ndef g(target=30):\n    return [6, 8, 16]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and List Operations.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "def f(num_list: list, target=30) -> bool:\n    return sum(num_list) == target and all(x % 2 == 0 for x in num_list)",
        "solution_func": "def g(target=30):\n    return [6, 8, 16]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of numbers that sum up to a target value of 30 and all numbers in the list are even."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, summing elements in a list, and checking for even numbers in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name', value='Alice') -> bool:\n    return key in d and d[key] == value\ndef g(key='name', value='Alice'):\n    return {'name': 'Alice', 'age': 25}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='name', value='Alice') -> bool:\n    return key in d and d[key] == value",
        "solution_func": "def g(key='name', value='Alice'):\n    return {'name': 'Alice', 'age': 25}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given key-value pair exists in a dictionary, and another function g that returns a dictionary with specific key-value pairs. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: list, lst=[2, 4, 6, 8]) -> bool:\n    return len(x) == len(lst) and all([x[i] % 2 == 0 for i in range(len(x))])\ndef g(lst=[2, 4, 6, 8]):\n    return [num * 2 for num in lst]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, iteration, and checking conditions. It does not directly involve any advanced topics such as recursion, dynamic programming, or graph theory.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: list, lst=[2, 4, 6, 8]) -> bool:\n    return len(x) == len(lst) and all([x[i] % 2 == 0 for i in range(len(x))])",
        "solution_func": "def g(lst=[2, 4, 6, 8]):\n    return [num * 2 for num in lst]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that takes a list as input and checks if the list has the same length as a predefined list and if all elements in the input list are even numbers. The solution function doubles each element in a predefined list and returns the result."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, checking list length, and checking for even numbers. The solution function demonstrates list comprehension and returning a modified list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: int, k=7) -> bool:\n    return x % k == 3 and x > k\ndef g(k=7):\n    return k * 2 + 3\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: int, k=7) -> bool:\n    return x % k == 3 and x > k",
        "solution_func": "def g(k=7):\n    return k * 2 + 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given integer x satisfies a specific condition, and a function g that returns a value based on a parameter k. The puzzle requires using g to find a value that satisfies the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions with parameters in Python, and using one function to satisfy the condition of another function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], diff=2) -> bool:\n    nums_set = set(nums)\n    for num1 in nums:\n        if num1 + diff in nums_set and num1 + 2*diff in nums_set:\n            return True\n    return False\n\ndef g(diff=2):\n    nums = [1, 3, 5, 7, 9, 11, 13]\n    return nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Conditional Logic, and Brute Force Search.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], diff=2) -> bool:\n    nums_set = set(nums)\n    for num1 in nums:\n        if num1 + diff in nums_set and num1 + 2*diff in nums_set:\n            return True\n    return False",
        "solution_func": "def g(diff=2):\n    nums = [1, 3, 5, 7, 9, 11, 13]\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if there are three numbers in the list such that the second number is the first number plus a given difference, and the third number is the first number plus twice the difference. The function g returns a predefined list of integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for a specific pattern in a list of integers and returning a predefined list. The solution function g always returns a list that satisfies the condition checked by function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves searching for a pair of numbers in a list that sum up to a target value.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 4, 6, 8]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if there are two numbers in the list that add up to a specific target value. The function g returns a list of integers. The puzzle is to determine if the function f returns True when called with the output of function g as input."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how the function f checks for the presence of two numbers that add up to a target value in a list. The function g provides a list of integers to test this functionality.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(missing_num: int, divisor=5, start=1, end=20) -> bool:\n    return missing_num % divisor == 0\ndef g(divisor=5, start=1, end=20):\n    sequence = list(range(start, end))\n    missing_num = sum(sequence) - sum(range(start, end))  # Calculate missing number\n    return missing_num\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True"
        ],
        "problem_func": "def f(missing_num: int, divisor=5, start=1, end=20) -> bool:\n    return missing_num % divisor == 0",
        "solution_func": "def g(divisor=5, start=1, end=20):\n    sequence = list(range(start, end))\n    missing_num = sum(sequence) - sum(range(start, end))  # Calculate missing number\n    return missing_num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a missing number in a sequence is divisible by a given divisor. The function g generates a sequence of numbers and calculates the missing number in the sequence. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic arithmetic operations and understanding of function calls in Python. It can be used to teach students about function definitions, arithmetic calculations, and assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(words: List[str], target_word='python') -> bool:\n    count = sum(word == target_word for word in words)\n    if count <= 1:\n        return False\n    for i in range(2, int(count ** 0.5) + 1):\n        if count % i == 0:\n            return False\n    return True\ndef g(target_word='python'):\n    words = ['python', 'is', 'a', 'popular', 'programming', 'language', 'python']\n    return words\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic to check if a target word appears more than once in a list of words.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(words: List[str], target_word='python') -> bool:\n    count = sum(word == target_word for word in words)\n    if count <= 1:\n        return False\n    for i in range(2, int(count ** 0.5) + 1):\n        if count % i == 0:\n            return False\n    return True",
        "solution_func": "def g(target_word='python'):\n    words = ['python', 'is', 'a', 'popular', 'programming', 'language', 'python']\n    return words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of words and a target word as input. It checks if the target word appears more than once in the list and if the count of occurrences is a prime number. The solution function g returns a list of words with the target word appearing multiple times."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the students' understanding of list comprehension, counting occurrences in a list, checking for prime numbers, and function return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g() that returns the number 17. The puzzle requires g() to be passed as an argument to f() and for f(g()) to return True if the number returned by g() is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(char for char in s if char.isalpha()).lower()\n    return s == s[::-1]\ndef g():\n    import random\n    import string\n\n    letters = string.ascii_letters\n    length = random.randint(5, 10)\n    palindrome_half = ''.join(random.choice(letters) for _ in range(length))\n    return palindrome_half + palindrome_half[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic, Importing Modules",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(char for char in s if char.isalpha()).lower()\n    return s == s[::-1]",
        "solution_func": "def g():\n    import random\n    import string\n\n    letters = string.ascii_letters\n    length = random.randint(5, 10)\n    palindrome_half = ''.join(random.choice(letters) for _ in range(length))\n    return palindrome_half + palindrome_half[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s: str) that checks if a given string is a palindrome after removing non-alphabetic characters and converting to lowercase. The solution function g() generates a random palindrome string and tests it using function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, palindrome checking, random generation, and function testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(number: int) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is a prime number or not.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(number: int) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given number is a prime number, and a function g that returns the number 17. The puzzle requires g to be called and passed to f, with the assertion that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, number=5) -> bool:\n    factorial = 1\n    for i in range(1, number + 1):\n        factorial *= i\n    return result == factorial\n\ndef g(number=5):\n    factorial = 1\n    for i in range(1, number + 1):\n        factorial *= i\n    return factorial\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and recursion.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, number=5) -> bool:\n    factorial = 1\n    for i in range(1, number + 1):\n        factorial *= i\n    return result == factorial",
        "solution_func": "def g(number=5):\n    factorial = 1\n    for i in range(1, number + 1):\n        factorial *= i\n    return factorial",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the result is equal to the factorial of a given number, and a function g that calculates the factorial of a given number. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of functions, loops, and factorial calculation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given text is a palindrome.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns the text 'radar'. The assert statement checks if f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(input_str: str = \"racecar\") -> str:\n    return input_str + input_str[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True",
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(input_str: str = \"racecar\") -> str:\n    return input_str + input_str[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(s) which checks if a given string is a palindrome, and g(input_str) which appends the reverse of the input string to itself. The puzzle asserts that the output of g() satisfies the condition of f() being True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically checking for palindromes and reversing strings. It also tests the concept of function composition and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(grid: List[List[int]]) -> bool:\n    def is_valid(arr):\n        return len(arr) == len(set(arr))\n    \n    n = len(grid)\n    \n    for i in range(n):\n        if not is_valid(grid[i]) or not is_valid([grid[j][i] for j in range(n)]):\n            return False\n    \n    for i in range(0, n, 3):\n        for j in range(0, n, 3):\n            if not is_valid([grid[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]):\n                return False\n    \n    return True\n\ndef g(input_grid: List[List[int]] = [[5, 3, 4], [6, 7, 2], [1, 9, 8]]):\n    n = len(input_grid)\n    return [[(i * n + i // 3 + j) % (n * n) + 1 for j in range(n)] for i in range(n)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking the validity of a Sudoku grid. It requires understanding of nested lists, iteration, and checking uniqueness of elements in rows, columns, and subgrids.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True",
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(grid: List[List[int]]) -> bool:\n    def is_valid(arr):\n        return len(arr) == len(set(arr))\n    \n    n = len(grid)\n    \n    for i in range(n):\n        if not is_valid(grid[i]) or not is_valid([grid[j][i] for j in range(n)]):\n            return False\n    \n    for i in range(0, n, 3):\n        for j in range(0, n, 3):\n            if not is_valid([grid[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]):\n                return False\n    \n    return True",
        "solution_func": "def g(input_grid: List[List[int]] = [[5, 3, 4], [6, 7, 2], [1, 9, 8]]):\n    n = len(input_grid)\n    return [[(i * n + i // 3 + j) % (n * n) + 1 for j in range(n)] for i in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given Sudoku grid is valid or not. The function f(grid) checks if the Sudoku grid is valid based on row, column, and subgrid constraints. The function g(input_grid) generates a sample Sudoku grid. The assertion at the end checks if the generated Sudoku grid is valid according to the constraints defined in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a Sudoku grid validation algorithm which can be a good exercise for students to understand algorithmic constraints in Python. It combines list manipulation, nested loops, and validation logic. The provided solution function g() generates a sample Sudoku grid which can be used for testing the validation function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(seq: list) -> bool:\n    if len(seq) < 3:\n        return False\n    return all(seq[i] + seq[i+1] == seq[i+2] for i in range(len(seq) - 2))\n\ndef g(input_list: list = [0, 1, 1, 2, 3, 5]):\n    while len(input_list) < 5:\n        input_list.append(input_list[-1] + input_list[-2])\n    return input_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check a sequence for a specific pattern. It also uses recursion to generate a sequence. The solution uses a while loop and mathematical operations to generate a Fibonacci-like sequence.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True",
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(seq: list) -> bool:\n    if len(seq) < 3:\n        return False\n    return all(seq[i] + seq[i+1] == seq[i+2] for i in range(len(seq) - 2))",
        "solution_func": "def g(input_list: list = [0, 1, 1, 2, 3, 5]):\n    while len(input_list) < 5:\n        input_list.append(input_list[-1] + input_list[-2])\n    return input_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given list satisfies a specific mathematical property, and a function g that generates a list following a certain pattern. The assertion checks if the output of g satisfies the condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, mathematical operations, and comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    clean_s = ''.join(char for char in s.lower() if char.isalnum())\n    return clean_s == clean_s[::-1]\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
            "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    clean_s = ''.join(char for char in s.lower() if char.isalnum())\n    return clean_s == clean_s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome after removing non-alphanumeric characters and converting to lowercase, find a string g() that satisfies f(g()) == True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves finding a string that is a palindrome after removing non-alphanumeric characters and converting to lowercase.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, char='a') -> bool:\n    return s == s[::-1] and char in s\ndef g(char='a'):\n    return char + 'racecar' + char\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, char='a') -> bool:\n    return s == s[::-1] and char in s",
        "solution_func": "def g(char='a'):\n    return char + 'racecar' + char",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome and contains a specific character, and another function g that constructs a string with the specified character surrounding the word 'racecar'. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, checking for palindromes, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, num=7) -> bool:\n    return any([lst[i] == num and lst[i+1] == num*2 for i in range(len(lst)-1)])\ndef g(num=7):\n    return [num*i for i in range(1, 6)] + [num*2*i for i in range(1, 6)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for a specific pattern within the list.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, num=7) -> bool:\n    return any([lst[i] == num and lst[i+1] == num*2 for i in range(len(lst)-1)])",
        "solution_func": "def g(num=7):\n    return [num*i for i in range(1, 6)] + [num*2*i for i in range(1, 6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: list, num=7) that checks if there are consecutive elements in the input list where the second element is double the first element. The solution function g(num=7) generates a list of numbers where each element is either num*i or num*2*i. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and list manipulation in Python. It also tests the understanding of how to define functions with default arguments and use them in assertions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='color', value='blue') -> bool:\n    return key in d and d[key] == value\ndef g(key='color', value='blue'):\n    return {key: value, 'size': 'medium', 'shape': 'circle'}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='color', value='blue') -> bool:\n    return key in d and d[key] == value",
        "solution_func": "def g(key='color', value='blue'):\n    return {key: value, 'size': 'medium', 'shape': 'circle'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given key-value pair exists in a dictionary, and another function g that creates a dictionary with specific key-value pairs. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(seq: str, pattern='aba') -> bool:\n    if len(seq) < len(pattern):\n        return False\n    if seq[:len(pattern)] == pattern:\n        return True\n    else:\n        return f(seq[1:], pattern)\n\ndef g(pattern='aba'):\n    return pattern * 3\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and recursion.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(seq: str, pattern='aba') -> bool:\n    if len(seq) < len(pattern):\n        return False\n    if seq[:len(pattern)] == pattern:\n        return True\n    else:\n        return f(seq[1:], pattern)",
        "solution_func": "def g(pattern='aba'):\n    return pattern * 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given sequence starts with a specific pattern, and a function g that returns the pattern repeated three times. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves recursion in function f to check for the pattern in the sequence. Function g simply returns the pattern repeated three times. The assertion tests if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='color', value='blue') -> bool:\n    return d.get(key) == value\n\ndef g(key='color', value='blue'):\n    return {key: value, 'size': 'large'}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and comparison of values. It also includes default parameter values in function definition.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='color', value='blue') -> bool:\n    return d.get(key) == value",
        "solution_func": "def g(key='color', value='blue'):\n    return {key: value, 'size': 'large'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a specific key-value pair exists in a dictionary and g creates a dictionary with a specified key-value pair. The assertion at the end checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, function calls, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, target=[2, 4, 6, 8]) -> bool:\n    return all(lst[i] == target[i] for i in range(len(lst)))\ndef g(target=[2, 4, 6, 8]):\n    return [2*i for i in range(1, len(target) + 1)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and comparison with a target list. It also includes list comprehension and assertion testing.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, target=[2, 4, 6, 8]) -> bool:\n    return all(lst[i] == target[i] for i in range(len(lst)))",
        "solution_func": "def g(target=[2, 4, 6, 8]):\n    return [2*i for i in range(1, len(target) + 1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list matches a target list, and a function g that generates a list based on the target list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the ability to define functions with default arguments and use them in assertions for testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name', value='Alice') -> bool:\n    return d.get(key) == value\ndef g(key='name', value='Alice'):\n    return {key: value}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and comparison, which can be categorized under topics such as Data Structures and Conditional Logic.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='name', value='Alice') -> bool:\n    return d.get(key) == value",
        "solution_func": "def g(key='name', value='Alice'):\n    return {key: value}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given key-value pair exists in a dictionary, and a function g that creates a dictionary with the specified key-value pair. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary operations and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    for i in range(len(nums) - 2):\n        if nums[i] % 2 == 0 and nums[i + 1] % 2 == 0 and nums[i + 2] % 2 == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 2, 4, 6, 8, 10, 12, 14]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Conditional Logic and List Operations.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    for i in range(len(nums) - 2):\n        if nums[i] % 2 == 0 and nums[i + 1] % 2 == 0 and nums[i + 2] % 2 == 0:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 2, 4, 6, 8, 10, 12, 14]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(nums: List[int]) -> bool that checks if there are three consecutive even numbers in a list of integers. The solution function g() returns a list of integers with three consecutive even numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for a specific pattern in a list of integers and returning True if the pattern is found. The solution function provides an example list that satisfies the condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    cleaned_string = ''.join(char for char in string if char.isalpha()).lower()\n    return cleaned_string == cleaned_string[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(string: str) -> bool:\n    cleaned_string = ''.join(char for char in string if char.isalpha()).lower()\n    return cleaned_string == cleaned_string[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if a given string is a palindrome after removing non-alphabetic characters and converting all characters to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, filtering non-alphabetic characters, and checking for palindromes in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 3:\n        return False\n    return all(nums[i] + nums[i + 1] == nums[i + 2] for i in range(len(nums) - 2))\n\ndef g():\n    fib_sequence = [0, 1]\n    while fib_sequence[-1] + fib_sequence[-2] < 100:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and sequence generation using Fibonacci numbers.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 3:\n        return False\n    return all(nums[i] + nums[i + 1] == nums[i + 2] for i in range(len(nums) - 2))",
        "solution_func": "def g():\n    fib_sequence = [0, 1]\n    while fib_sequence[-1] + fib_sequence[-2] < 100:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers forms a Fibonacci sequence by summing up consecutive elements in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list manipulation, iteration, and the Fibonacci sequence.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(prime: int, limit=1000) -> bool:\n    if prime <= 1:\n        return False\n    for i in range(2, int(prime ** 0.5) + 1):\n        if prime % i == 0:\n            return False\n    return True\n\ndef g(limit=1000):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, limit) if is_prime(num)]\n    return max([p for p in primes if p < limit])\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and finding the maximum prime number below a given limit.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(prime: int, limit=1000) -> bool:\n    if prime <= 1:\n        return False\n    for i in range(2, int(prime ** 0.5) + 1):\n        if prime % i == 0:\n            return False\n    return True",
        "solution_func": "def g(limit=1000):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, limit) if is_prime(num)]\n    return max([p for p in primes if p < limit])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function to check if a given number is a prime number, and another function to find the largest prime number below a given limit. The solution function uses a nested function to check for prime numbers and then finds the largest prime number below the given limit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, nested functions, list comprehensions, and the concept of finding the largest prime number below a given limit.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str, text=\"racecar\") -> bool:\n    return palindrome == text\n\ndef g(text=\"racecar\"):\n    return text[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str, text=\"racecar\") -> bool:\n    return palindrome == text",
        "solution_func": "def g(text=\"racecar\"):\n    return text[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks if a given string is a palindrome, and then provide a solution function that reverses the default string 'racecar' and checks if it is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for palindromes in Python using string manipulation and function definition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    return [1, 2, 3, 4, 5, 6]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in ascending order.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is sorted in non-decreasing order, and a function g that returns a sorted list of integers. The puzzle is solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and list indexing in Python. It also tests the ability to define functions and use them in conjunction to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, k=7) -> bool:\n    for i in range(len(s) - k + 1):\n        substr = s[i:i+k]\n        if substr == substr[::-1]:\n            return True\n    return False\n\ndef g(k=7):\n    mid = k // 2\n    palindrome = 'a' * mid + ('b' if k % 2 != 0 else '') + 'a' * mid\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, k=7) -> bool:\n    for i in range(len(s) - k + 1):\n        substr = s[i:i+k]\n        if substr == substr[::-1]:\n            return True\n    return False",
        "solution_func": "def g(k=7):\n    mid = k // 2\n    palindrome = 'a' * mid + ('b' if k % 2 != 0 else '') + 'a' * mid\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a palindrome substring of length k in a given string s. The solution function g generates a palindrome string of length k. The puzzle is to check if the function f correctly identifies the palindrome substring in the generated string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, palindrome detection, and function testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target=42) -> bool:\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=42):\n    return [1, target-1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Brute Force Search, and Conditional Logic.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target=42) -> bool:\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=42):\n    return [1, target-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding two numbers in a list that add up to a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there are two numbers in a list that sum up to a target value. The solution function returns a list with two numbers that add up to the target value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(board: List[List[int]], target=16) -> bool:\n    for row in board:\n        if sum(row) == target:\n            return True\n    for col in range(len(board[0])):\n        if sum(row[col] for row in board) == target:\n            return True\n    return False\n\ndef g(target=16):\n    return [[4, 5, 7], [2, 1, 6], [3, 2, 3]]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the sum of rows or columns in a 2D list equals a target value.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(board: List[List[int]], target=16) -> bool:\n    for row in board:\n        if sum(row) == target:\n            return True\n    for col in range(len(board[0])):\n        if sum(row[col] for row in board) == target:\n            return True\n    return False",
        "solution_func": "def g(target=16):\n    return [[4, 5, 7], [2, 1, 6], [3, 2, 3]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a 2D list of integers and a target integer as input, and checks if any row or column in the 2D list sums up to the target integer. The solution function g returns a specific 2D list that satisfies the condition for the target integer."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to iterate over rows and columns of a 2D list, calculate the sum of elements, and compare it to a target value. The solution function g provides a specific 2D list that meets the sum condition for the target integer.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abc') -> bool:\n    return all(s[i] == pattern[i % len(pattern)] for i in range(len(s)))\ndef g(pattern='abc'):\n    return ''.join(pattern * (10 // len(pattern))) + pattern[:10 % len(pattern)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abc') -> bool:\n    return all(s[i] == pattern[i % len(pattern)] for i in range(len(s)))",
        "solution_func": "def g(pattern='abc'):\n    return ''.join(pattern * (10 // len(pattern))) + pattern[:10 % len(pattern)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string follows a specific pattern, and a function g that generates a string based on a given pattern. The assertion checks if the generated string satisfies the pattern check."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and pattern matching in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. This requires understanding of matrix operations and nested loops.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given matrix is symmetric along its main diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, indexing in a 2D list, and the all() function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g() -> str:\n    return \"racecar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns the string 'racecar', which is a palindrome, and the assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    total = sum(nums)\n    if total <= 1:\n        return False\n    for i in range(2, int(total ** 0.5) + 1):\n        if total % i == 0:\n            return False\n    return True\ndef g() -> list:\n    return [2, 3, 5, 7]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and number theory (primes).",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    total = sum(nums)\n    if total <= 1:\n        return False\n    for i in range(2, int(total ** 0.5) + 1):\n        if total % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> list:\n    return [2, 3, 5, 7]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(nums: list) that checks if the sum of a list of numbers is a prime number. The solution function g() returns a list of prime numbers and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the sum of a list of numbers is a prime number, which requires understanding of loops, conditionals, and basic arithmetic operations in Python. The solution function provides a list of prime numbers to test the algorithm.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'level'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) as it checks if a given number is a prime number or not.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding whether a given number is a prime number or not. The function f(n) checks if a number n is prime or not, and function g() returns the number 17. The puzzle asserts that the number 17 is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and how to check if a number is prime. The solution function g() returns a specific number (17) to test the prime number function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a word is a palindrome. The solution function returns the word 'radar', which is a palindrome. The puzzle function checks if the input word is equal to its reverse, indicating a palindrome.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that returns True if the word is a palindrome (reads the same forwards and backwards), and a function g() that returns the word 'radar'. The assert statement checks if f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))\n\ndef g(include_duplicates: bool = True) -> List[int]:\n    if include_duplicates:\n        return [1, 2, 3, 4, 4, 5]\n    else:\n        return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Set Operations and Conditional Logic.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))",
        "solution_func": "def g(include_duplicates: bool = True) -> List[int]:\n    if include_duplicates:\n        return [1, 2, 3, 4, 4, 5]\n    else:\n        return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of integers contains duplicates, and a function g that returns a list of integers with or without duplicates based on a parameter. The puzzle requires g to be called with the correct parameter to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation and function parameters in Python. It requires students to correctly call function g with the appropriate parameter to make function f return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, and a function g() that returns the number 17, the puzzle requires g() to return a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str, letter='a') -> bool:\n    return word == word[::-1] and letter in word\ndef g(letter='a'):\n    return f\"{letter}racecar{letter}\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str, letter='a') -> bool:\n    return word == word[::-1] and letter in word",
        "solution_func": "def g(letter='a'):\n    return f\"{letter}racecar{letter}\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a word is a palindrome and contains a specific letter, and a function g that constructs a word using a given letter and checks if it satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list, pattern=[1, 2, 3]) -> bool:\n    for i in range(len(numbers) - 2):\n        if numbers[i:i + 3] == pattern:\n            return True\n    return False\ndef g(pattern=[1, 2, 3]):\n    return pattern * 3\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list, pattern=[1, 2, 3]) -> bool:\n    for i in range(len(numbers) - 2):\n        if numbers[i:i + 3] == pattern:\n            return True\n    return False",
        "solution_func": "def g(pattern=[1, 2, 3]):\n    return pattern * 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list contains a specific pattern of consecutive elements. Another function g generates the pattern to be checked, and the assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list slicing, pattern matching, and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(board: List[List[int]]) -> bool:\n    def is_valid_row(row):\n        return len(set(row)) == len(row) and all(1 <= num <= 9 for num in row)\n\n    def is_valid_sudoku(board):\n        for row in board:\n            if not is_valid_row(row):\n                return False\n        for col in zip(*board):\n            if not is_valid_row(col):\n                return False\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                square = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]\n                if not is_valid_row(square):\n                    return False\n        return True\n\n    return is_valid_sudoku(board)\n\ndef g():\n    valid_sudoku = [\n        [5, 3, 4, 6, 7, 8, 9, 1, 2],\n        [6, 7, 2, 1, 9, 5, 3, 4, 8],\n        [1, 9, 8, 3, 4, 2, 5, 6, 7],\n        [8, 5, 9, 7, 6, 1, 4, 2, 3],\n        [4, 2, 6, 8, 5, 3, 7, 9, 1],\n        [7, 1, 3, 9, 2, 4, 8, 5, 6],\n        [9, 6, 1, 5, 3, 7, 2, 8, 4],\n        [2, 8, 7, 4, 1, 9, 6, 3, 5],\n        [3, 4, 5, 2, 8, 6, 1, 7, 9]\n    ]\n    return valid_sudoku\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves checking the validity of a Sudoku board, which requires knowledge of list manipulation, loops, conditions, and set operations.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(board: List[List[int]]) -> bool:\n    def is_valid_row(row):\n        return len(set(row)) == len(row) and all(1 <= num <= 9 for num in row)\n\n    def is_valid_sudoku(board):\n        for row in board:\n            if not is_valid_row(row):\n                return False\n        for col in zip(*board):\n            if not is_valid_row(col):\n                return False\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                square = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)]\n                if not is_valid_row(square):\n                    return False\n        return True\n\n    return is_valid_sudoku(board)",
        "solution_func": "def g():\n    valid_sudoku = [\n        [5, 3, 4, 6, 7, 8, 9, 1, 2],\n        [6, 7, 2, 1, 9, 5, 3, 4, 8],\n        [1, 9, 8, 3, 4, 2, 5, 6, 7],\n        [8, 5, 9, 7, 6, 1, 4, 2, 3],\n        [4, 2, 6, 8, 5, 3, 7, 9, 1],\n        [7, 1, 3, 9, 2, 4, 8, 5, 6],\n        [9, 6, 1, 5, 3, 7, 2, 8, 4],\n        [2, 8, 7, 4, 1, 9, 6, 3, 5],\n        [3, 4, 5, 2, 8, 6, 1, 7, 9]\n    ]\n    return valid_sudoku",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given 9x9 Sudoku board is valid or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of nested loops, list comprehensions, and conditional statements in Python. It also requires knowledge of Sudoku rules and validation techniques.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a word is a palindrome.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that checks if the input word is a palindrome. The solution function g() returns the word 'radar', and the puzzle asserts that f(g()) should return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    vowels = set('aeiou')\n    return set(s.lower()) == vowels\ndef g():\n    import itertools\n    vowels = 'aeiou'\n    for perm in itertools.permutations(vowels):\n        candidate = ''.join(perm)\n        if len(set(candidate)) == 5:\n            return candidate\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations, Permutations and Combinations",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    vowels = set('aeiou')\n    return set(s.lower()) == vowels",
        "solution_func": "def g():\n    import itertools\n    vowels = 'aeiou'\n    for perm in itertools.permutations(vowels):\n        candidate = ''.join(perm)\n        if len(set(candidate)) == 5:\n            return candidate",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a permutation of the vowels 'aeiou' that contains all 5 vowels exactly once, and then checking if this permutation satisfies a condition related to vowels in a given string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with sets, permutations, and string manipulation in Python to find a specific arrangement of vowels and checking if it meets a certain condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(pair: List[int], target=100) -> bool:\n    return sum(pair) == target\ndef g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == 100:\n                return [nums[i], nums[j]]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations and Brute Force Search.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(pair: List[int], target=100) -> bool:\n    return sum(pair) == target",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50, 60, 70, 80, 90]):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == 100:\n                return [nums[i], nums[j]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a pair of numbers from a list that sum up to a target value of 100."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function that checks if a pair of numbers from a list sum up to a target value of 100. The solution function iterates through the list to find such a pair.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, all_even=True) -> bool:\n    return all(num % 2 == 0 for num in lst) == all_even\ndef g(lst = [2, 4, 6, 8]):\n    return lst + [1] if not all(num % 2 == 0 for num in lst) else lst\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Conditional Logic, List Operations, and Mathematical Operations.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, all_even=True) -> bool:\n    return all(num % 2 == 0 for num in lst) == all_even",
        "solution_func": "def g(lst = [2, 4, 6, 8]):\n    return lst + [1] if not all(num % 2 == 0 for num in lst) else lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if all numbers in a list are even, and a function g that appends 1 to the list if any number is not even. The solution g returns the original list if all numbers are even. The puzzle tests whether the solution g satisfies the condition of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all numbers in a list are even and modifying the list accordingly. The solution function g appends 1 to the list if any number is not even, otherwise it returns the original list. The assert statement checks if the solution g satisfies the condition of function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(email: str, valid_format=True) -> bool:\n    return bool(re.match(r\"[^@]+@[^@]+\\.[^@]+\", email)) == valid_format\ndef g(email = 'example@email.com'):\n    return email\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation using regular expressions to validate an email format.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True"
        ],
        "problem_func": "import re\n\ndef f(email: str, valid_format=True) -> bool:\n    return bool(re.match(r\"[^@]+@[^@]+\\.[^@]+\", email)) == valid_format",
        "solution_func": "def g(email = 'example@email.com'):\n    return email",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if an email address is in a valid format using regular expressions, and a function g that returns an email address. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of regular expressions and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)\ndef g():\n    import string\n    return string.ascii_lowercase\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True",
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g():\n    import string\n    return string.ascii_lowercase",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if all characters in a given string are unique, and a function g() that returns all lowercase letters of the alphabet. The puzzle asserts that applying function f to the result of function g should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for unique characters in a string and returning all lowercase letters of the alphabet. It tests the understanding of string manipulation and set operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(arr: List[int]) -> bool:\n    return any((x*x + y*y == z*z) for x in arr for y in arr for z in arr if x != y and y != z and x != z)\ndef g():\n    return [3, 4, 5, 6, 8, 10]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if there exists a Pythagorean triplet in the given list of integers.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True",
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(arr: List[int]) -> bool:\n    return any((x*x + y*y == z*z) for x in arr for y in arr for z in arr if x != y and y != z and x != z)",
        "solution_func": "def g():\n    return [3, 4, 5, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if there exists a Pythagorean triplet in a given list of integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires checking if there are three distinct integers in the list that form a Pythagorean triplet (a^2 + b^2 = c^2). The solution function returns a list of integers that includes a Pythagorean triplet.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str, sentence='A man, a plan, a canal, Panama!') -> bool:\n    return ''.join(c.lower() for c in sentence if c.isalpha()) == ''.join(c.lower() for c in palindrome if c.isalpha())\n\ndef g(sentence='A man, a plan, a canal, Panama!'):\n    return ''.join(reversed(''.join(c.lower() for c in sentence if c.isalpha())))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
            "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str, sentence='A man, a plan, a canal, Panama!') -> bool:\n    return ''.join(c.lower() for c in sentence if c.isalpha()) == ''.join(c.lower() for c in palindrome if c.isalpha())",
        "solution_func": "def g(sentence='A man, a plan, a canal, Panama!'):\n    return ''.join(reversed(''.join(c.lower() for c in sentence if c.isalpha())))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome after removing non-alphabetic characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, palindrome checking, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) > 0 and all(num > 1 for num in nums) and all(num % 2 != 0 for num in nums)\n\ndef g(start=10, end=50) -> List[int]:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [num for num in range(start, end + 1) if is_prime(num)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, list manipulation, and prime number generation.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) > 0 and all(num > 1 for num in nums) and all(num % 2 != 0 for num in nums)",
        "solution_func": "def g(start=10, end=50) -> List[int]:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [num for num in range(start, end + 1) if is_prime(num)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers is non-empty, all elements are greater than 1, and all elements are odd. The solution function g generates a list of prime numbers within a given range and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, list operations, and prime number checking. It can be used to teach Python programming concepts such as list manipulation, conditionals, and functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=5) -> bool:\n    return len(s) == n and s.isalpha() and s.upper() == s\ndef g(n=5):\n    import random\n    return ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ', k=n))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and random module for generating random strings.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=5) -> bool:\n    return len(s) == n and s.isalpha() and s.upper() == s",
        "solution_func": "def g(n=5):\n    import random\n    return ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ', k=n))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that generates a random string of length n consisting of uppercase letters, and then check if the generated string is of length n, contains only alphabetic characters, and is in uppercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random string of uppercase letters and checking if it meets certain conditions using the provided function f and solution g.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, min_length=5) -> bool:\n    return s == s[::-1] and len(s) >= min_length\ndef g(min_length=5):\n    import random\n    letters = [chr(random.randint(97, 122)) for _ in range(min_length)]\n    return ''.join(letters) + ''.join(reversed(letters))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, min_length=5) -> bool:\n    return s == s[::-1] and len(s) >= min_length",
        "solution_func": "def g(min_length=5):\n    import random\n    letters = [chr(random.randint(97, 122)) for _ in range(min_length)]\n    return ''.join(letters) + ''.join(reversed(letters))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that generates a string of random lowercase letters, checks if the string is a palindrome, and has a minimum length of 5 characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, generating random characters, checking for palindromes, and using default function arguments in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(primes: list, max_num=100) -> bool:\n    return all(num > 1 for num in primes) and all(all(num % i != 0 for i in range(2, num)) for num in primes) and max(primes) <= max_num\ndef g(max_num=100):\n    primes = []\n    for num in range(2, max_num):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and using list comprehension and assertions in Python.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True"
        ],
        "problem_func": "def f(primes: list, max_num=100) -> bool:\n    return all(num > 1 for num in primes) and all(all(num % i != 0 for i in range(2, num)) for num in primes) and max(primes) <= max_num",
        "solution_func": "def g(max_num=100):\n    primes = []\n    for num in range(2, max_num):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers are prime numbers within a specified range, and a function g that generates a list of prime numbers up to a given maximum number. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and nested loops in Python. It tests the ability to generate prime numbers and check if a list of numbers are prime. It is suitable for teaching Python programming concepts related to loops, conditionals, and list operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abacaba') -> bool:\n    return s == pattern * (len(s) // len(pattern)) + pattern[:len(s) % len(pattern)]\ndef g(pattern='abacaba'):\n    return pattern\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abacaba') -> bool:\n    return s == pattern * (len(s) // len(pattern)) + pattern[:len(s) % len(pattern)]",
        "solution_func": "def g(pattern='abacaba'):\n    return pattern",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string matches a specific pattern, and a function g that returns the pattern. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. The solution function g() returns the string 'racecar', which is a palindrome. The assert statement confirms that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns the number 17, and assert that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a number is prime and then writing another function to return a specific number. The assertion checks if the second function returns a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sorted_list: list) -> bool:\n    return all(sorted_list[i] <= sorted_list[i+1] for i in range(len(sorted_list)-1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if it is sorted in ascending order.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "def f(sorted_list: list) -> bool:\n    return all(sorted_list[i] <= sorted_list[i+1] for i in range(len(sorted_list)-1))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given list is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given list is sorted in ascending order. It then provides a solution function g that returns a sorted list [1, 2, 3, 4, 5] and asserts that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='ABA') -> bool:\n    return s == s[::-1] and pattern in s\ndef g(pattern='ABA'):\n    palindrome = pattern + pattern[-2::-1]\n    return palindrome\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='ABA') -> bool:\n    return s == s[::-1] and pattern in s",
        "solution_func": "def g(pattern='ABA'):\n    palindrome = pattern + pattern[-2::-1]\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome and contains a specific pattern, and a function g that generates a palindrome based on a given pattern. The goal is to ensure that function g generates a palindrome that satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int, threshold=1000) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes_sum = sum(i for i in range(total) if is_prime(i))\n    return primes_sum > threshold\ndef g(threshold=1000):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    num = 2\n    primes = []\n    while sum(primes) <= threshold:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n\n    return sum(primes)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Number Theory (checking for prime numbers), Mathematical Operations (summing numbers), and Algorithm Optimization (finding an optimized solution to sum prime numbers).",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(total: int, threshold=1000) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes_sum = sum(i for i in range(total) if is_prime(i))\n    return primes_sum > threshold",
        "solution_func": "def g(threshold=1000):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    num = 2\n    primes = []\n    while sum(primes) <= threshold:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n\n    return sum(primes)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where the first function f checks if the sum of prime numbers up to a certain threshold is greater than a specified total, and the second function g calculates the sum of prime numbers up to the threshold. The puzzle requires understanding of prime numbers and function composition in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a concept of prime numbers and function composition, which are fundamental concepts in programming. It provides a practical challenge to apply these concepts in Python programming.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns the string 'radar', which is a palindrome, and the assertion confirms that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime or not using a simple algorithm. It also includes a function that generates a number to be checked for primality.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given integer n is a prime number. Another function g() returns the integer 17, and the puzzle requires g() to be passed as an argument to f() to check if 17 is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return True\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))\n\ndef g() -> List[int]:\n    return [1, 3, 5, 7, 9]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check if a list of numbers forms an arithmetic sequence.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return True\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))",
        "solution_func": "def g() -> List[int]:\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers forms an arithmetic sequence, and a function g that returns a specific list of integers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, and conditional statements in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=5) -> bool:\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]\n\ndef g(n=5):\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    palindrome = ''.join(random.choices(letters, k=n))\n    return palindrome + palindrome[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Recursion",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=5) -> bool:\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]",
        "solution_func": "def g(n=5):\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    palindrome = ''.join(random.choices(letters, k=n))\n    return palindrome + palindrome[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome after removing spaces and converting to lowercase. The function g generates a random palindrome string of a specified length. The puzzle requires g to generate a palindrome string that satisfies the condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, palindrome checking, random generation, and function calling in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \n\ndef f(arr: List[int], n=6) -> bool:\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n\ndef g(n=6):\n    import random\n    return sorted(random.sample(range(1, 100), n))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if the list is in ascending order. It also includes the use of random sampling and assertion testing.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \n\ndef f(arr: List[int], n=6) -> bool:\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))",
        "solution_func": "def g(n=6):\n    import random\n    return sorted(random.sample(range(1, 100), n))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of integers is sorted in non-decreasing order, and a function g that generates a random list of integers and sorts it. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and comparison in Python. It tests the student's knowledge of list comprehension, sorting, and function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, n=101) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(n=101):\n    import sympy\n    return sympy.prime(n)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (checking for prime numbers) and Importing Modules (using sympy library to generate prime numbers).",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, n=101) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(n=101):\n    import sympy\n    return sympy.prime(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g() that returns the nth prime number using the sympy library. The puzzle requires g() to return a prime number that satisfies the conditions of f(num) to evaluate to True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, using the sympy library to generate prime numbers, and implementing a function to check if a number is prime. It tests the student's knowledge of prime number generation and basic algorithmic thinking.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(result: List[int], target_sum=10) -> bool:\n    return sum(result) == target_sum and all(result[i] < result[i+1] for i in range(len(result)-1))\n\ndef g(target_sum=10):\n    result = [1]\n    while sum(result) < target_sum:\n        result.append(result[-1] + 1)\n    return result\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking conditions on the list elements.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(result: List[int], target_sum=10) -> bool:\n    return sum(result) == target_sum and all(result[i] < result[i+1] for i in range(len(result)-1))",
        "solution_func": "def g(target_sum=10):\n    result = [1]\n    while sum(result) < target_sum:\n        result.append(result[-1] + 1)\n    return result",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that checks if a list of integers sums up to a target sum and if each element in the list is less than the next element. The student also needs to implement a function g that generates a list of integers incrementally until the sum reaches the target sum. The assertion at the end checks if the solution function g satisfies the conditions of the puzzle function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, conditional statements, and loop structures in Python. It also tests the student's ability to write functions that work together to solve a specific problem.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(result: Dict[str, int], target_key='python') -> bool:\n    return target_key in result and result[target_key] % 2 == 0\n\ndef g(target_key='python'):\n    result = {str(i): i**2 for i in range(1, 11)}\n    result[target_key] = 10\n    return result\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Dict\n\ndef f(result: Dict[str, int], target_key='python') -> bool:\n    return target_key in result and result[target_key] % 2 == 0",
        "solution_func": "def g(target_key='python'):\n    result = {str(i): i**2 for i in range(1, 11)}\n    result[target_key] = 10\n    return result",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specific key in a dictionary has an even value, and a function g that creates a dictionary with squared values and sets a specific key to 10. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, checking for a specific key and its value, and understanding how the functions interact to satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))\n\ndef g() -> List[int]:\n    return [1, 2, 3, 2, 4]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations to check for duplicates in a list of integers.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))",
        "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 2, 4]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list contains duplicate elements, and a function g that returns a list with duplicate elements. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation and set operations in Python, as well as the concept of checking for duplicates in a list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) as it checks if a given number is a prime number or not.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num: int) -> bool and g() -> int. Function f checks if a given number is a prime number, and function g returns the number 17. The puzzle tests whether function f correctly identifies 17 as a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithm to check for prime numbers and a fixed solution that returns the number 17. The solution to the puzzle is straightforward and does not require complex programming concepts, making it suitable for teaching Python to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(sequence: List[int]) -> bool:\n    return all(sequence[i] == sequence[i-1] + sequence[i-2] for i in range(2, len(sequence)))\ndef g():\n    fibonacci = [0, 1]\n    for _ in range(2, 10):\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves the topics of Recursion, Mathematical Operations, and List Operations.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(sequence: List[int]) -> bool:\n    return all(sequence[i] == sequence[i-1] + sequence[i-2] for i in range(2, len(sequence)))",
        "solution_func": "def g():\n    fibonacci = [0, 1]\n    for _ in range(2, 10):\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given list of integers follows the Fibonacci sequence. The solution generates the first 10 Fibonacci numbers and returns them as a list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the Fibonacci sequence and implementing a function to check if a given list of integers follows the sequence. The solution generates the Fibonacci numbers and checks if the function correctly identifies them.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(primes: List[int]) -> bool:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(p) for p in primes)\ndef g(limit=20):\n    primes = []\n    for num in range(2, limit+1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime numbers, loops, and list comprehension.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(primes: List[int]) -> bool:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(p) for p in primes)",
        "solution_func": "def g(limit=20):\n    primes = []\n    for num in range(2, limit+1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if all numbers in a given list of integers are prime, and a function g that generates a list of prime numbers up to a specified limit. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. This requires understanding of nested lists, list comprehension, and comparison operations.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given matrix is symmetric along its main diagonal. The solution function g returns a specific matrix, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, nested lists, and the all() function in Python. It also tests the understanding of matrix symmetry along the main diagonal.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(board: List[List[int]]) -> bool:\n    def is_valid(arr):\n        return len(set(arr)) == len(arr)\n\n    def get_subgrid(board, row, col):\n        return [board[i][j] for i in range(row, row + 3) for j in range(col, col + 3)]\n\n    for row in board:\n        if not is_valid(row):\n            return False\n\n    for col in range(9):\n        if not is_valid([board[i][col] for i in range(9)]):\n            return False\n\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            if not is_valid(get_subgrid(board, i, j)):\n                return False\n\n    return True\n\ndef g():\n    valid_sudoku = [\n        [5, 3, 4, 6, 7, 8, 9, 1, 2],\n        [6, 7, 2, 1, 9, 5, 3, 4, 8],\n        [1, 9, 8, 3, 4, 2, 5, 6, 7],\n        [8, 5, 9, 7, 6, 1, 4, 2, 3],\n        [4, 2, 6, 8, 5, 3, 7, 9, 1],\n        [7, 1, 3, 9, 2, 4, 8, 5, 6],\n        [9, 6, 1, 5, 3, 7, 2, 8, 4],\n        [2, 8, 7, 4, 1, 9, 6, 3, 5],\n        [3, 4, 5, 2, 8, 6, 1, 7, 9]\n    ]\n    return valid_sudoku\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking the validity of a Sudoku board, which requires understanding of list manipulation, iteration, and set operations.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(board: List[List[int]]) -> bool:\n    def is_valid(arr):\n        return len(set(arr)) == len(arr)\n\n    def get_subgrid(board, row, col):\n        return [board[i][j] for i in range(row, row + 3) for j in range(col, col + 3)]\n\n    for row in board:\n        if not is_valid(row):\n            return False\n\n    for col in range(9):\n        if not is_valid([board[i][col] for i in range(9)]):\n            return False\n\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            if not is_valid(get_subgrid(board, i, j)):\n                return False\n\n    return True",
        "solution_func": "def g():\n    valid_sudoku = [\n        [5, 3, 4, 6, 7, 8, 9, 1, 2],\n        [6, 7, 2, 1, 9, 5, 3, 4, 8],\n        [1, 9, 8, 3, 4, 2, 5, 6, 7],\n        [8, 5, 9, 7, 6, 1, 4, 2, 3],\n        [4, 2, 6, 8, 5, 3, 7, 9, 1],\n        [7, 1, 3, 9, 2, 4, 8, 5, 6],\n        [9, 6, 1, 5, 3, 7, 2, 8, 4],\n        [2, 8, 7, 4, 1, 9, 6, 3, 5],\n        [3, 4, 5, 2, 8, 6, 1, 7, 9]\n    ]\n    return valid_sudoku",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given 9x9 Sudoku board is valid or not based on the rules of Sudoku. The function f(board) checks if the board is a valid Sudoku board, and the function g() provides a valid Sudoku board as input to f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves implementing a Sudoku board validation algorithm in Python. The function f() checks the validity of a given Sudoku board, and the function g() provides a valid Sudoku board as input to f(). The puzzle tests the understanding of nested loops, list comprehensions, and set operations in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = s.replace(\" \", \"\").lower()\n    return s == s[::-1]\n\ndef g():\n    return \"A man a plan a canal Panama\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = s.replace(\" \", \"\").lower()\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"A man a plan a canal Panama\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function to check if a given string is a palindrome after removing spaces and converting to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a string is a palindrome after removing spaces and converting to lowercase. The solution function provides a string that is a palindrome when spaces are removed and converted to lowercase.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(char.lower() for char in s if char.isalnum())\n    return s == s[::-1]\n\ndef g():\n    import string\n    import random\n    letters = string.ascii_letters + string.digits\n    size = random.randint(5, 10)\n    palindrome = ''.join(random.choice(letters) for _ in range(size))\n    return palindrome + palindrome[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(char.lower() for char in s if char.isalnum())\n    return s == s[::-1]",
        "solution_func": "def g():\n    import string\n    import random\n    letters = string.ascii_letters + string.digits\n    size = random.randint(5, 10)\n    palindrome = ''.join(random.choice(letters) for _ in range(size))\n    return palindrome + palindrome[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s) that checks if a given string is a palindrome after removing non-alphanumeric characters and converting to lowercase. The solution function g() generates a random palindrome string and its reverse, and returns their concatenation."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, palindrome checking, random string generation, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return False\n\n    diff = nums[1] - nums[0]\n    for i in range(1, len(nums) - 1):\n        if nums[i + 1] - nums[i] != diff:\n            return False\n    return True\n\ndef g():\n    import random\n    start = random.randint(1, 5)\n    diff = random.randint(1, 5)\n    size = random.randint(3, 6)\n    return [start + i * diff for i in range(size)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers forms an arithmetic sequence with a common difference. The solution generates a random arithmetic sequence and checks if it satisfies the condition.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return False\n\n    diff = nums[1] - nums[0]\n    for i in range(1, len(nums) - 1):\n        if nums[i + 1] - nums[i] != diff:\n            return False\n    return True",
        "solution_func": "def g():\n    import random\n    start = random.randint(1, 5)\n    diff = random.randint(1, 5)\n    size = random.randint(3, 6)\n    return [start + i * diff for i in range(size)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(nums) and g(), where f checks if a list of numbers follows an arithmetic sequence and g generates a random arithmetic sequence to be checked by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of list manipulation and arithmetic sequences in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(nums: List[int]) -> bool:\n    return len(nums) == len(set(nums))\ndef g(start=1, step=2, length=8):\n    return list(range(start, start + step * length, step))\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for uniqueness in a list of numbers and generating a list of numbers with a specific pattern.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(nums: List[int]) -> bool:\n    return len(nums) == len(set(nums))",
        "solution_func": "def g(start=1, step=2, length=8):\n    return list(range(start, start + step * length, step))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list of numbers generated using a specified start, step, and length has unique elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of numbers with a specific pattern and then checking if all elements in the list are unique.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    clean_word = ''.join(word.split()).lower()\n    return clean_word == clean_word[::-1]\n\ndef g(word='A man a plan a canal Panama') -> str:\n    return word\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    clean_word = ''.join(word.split()).lower()\n    return clean_word == clean_word[::-1]",
        "solution_func": "def g(word='A man a plan a canal Panama') -> str:\n    return word",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if a given word is a palindrome after removing spaces and converting to lowercase. The solution function simply returns a specific sentence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is to check if a given sentence is a palindrome after removing spaces and converting to lowercase. The solution function always returns the same sentence, which is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n\ndef g(nums=[1, 2, 3, 4, 5]) -> List[int]:\n    return nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in ascending order using the `all` function and list comprehension. The solution simply returns a pre-defined sorted list of numbers.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]) -> List[int]:\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a list of numbers is sorted in non-decreasing order and g returns a predefined list of numbers. The puzzle tests whether the predefined list is sorted correctly."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple one that checks if a given list of numbers is sorted in non-decreasing order. The solution function g simply returns a predefined list of numbers. The puzzle can be used to teach students about list manipulation and boolean expressions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int, num=5) -> bool:\n    if num < 0:\n        return False\n    result = 1\n    for i in range(1, num + 1):\n        result *= i\n    return result == factorial\n\ndef g(num=5) -> int:\n    if num < 0:\n        return None\n    result = 1\n    for i in range(1, num + 1):\n        result *= i\n    return result\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Factorial calculation using iterative approach",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True"
        ],
        "problem_func": "def f(factorial: int, num=5) -> bool:\n    if num < 0:\n        return False\n    result = 1\n    for i in range(1, num + 1):\n        result *= i\n    return result == factorial",
        "solution_func": "def g(num=5) -> int:\n    if num < 0:\n        return None\n    result = 1\n    for i in range(1, num + 1):\n        result *= i\n    return result",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(factorial: int, num=5) and g(num=5), where f checks if the factorial of a number matches a given factorial value, and g calculates the factorial of a number. The puzzle requires g to be called within f to check if the factorial calculation is correct."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate factorials and how to call one function within another function in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    palindrome = \"racecar\"\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    palindrome = \"racecar\"\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. It also defines a function g() that returns a hardcoded palindrome string 'racecar'. The assert statement checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (primality testing) and Mathematical Operations (square root calculation).",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(num: int) that checks if a given number is a prime number. Another function g() returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a prime number and then asserting that the function g() returns a specific number. The solution to the puzzle is to ensure that the function f(num) correctly identifies 17 as a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, n=5) -> bool:\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n    \n    return factorial(n) == result\n\ndef g(n=5) -> int:\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n    \n    return factorial(n)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Recursion, Mathematical Operations, and Function Definitions.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, n=5) -> bool:\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n    \n    return factorial(n) == result",
        "solution_func": "def g(n=5) -> int:\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n    \n    return factorial(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the factorial of a given number matches a result, and g calculates the factorial of a given number. The puzzle tests the correctness of the factorial calculation."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple factorial calculation challenge, which is a common programming exercise. It can be used to teach recursion and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(10 <= num <= 20 for num in lst)\ndef g():\n    return list(range(10, 21))\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are within a specific range.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(10 <= num <= 20 for num in lst)",
        "solution_func": "def g():\n    return list(range(10, 21))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: list) that checks if all numbers in a list are between 10 and 20, and a function g() that returns a list of numbers from 10 to 20. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and range() function in Python. It tests the ability to create a function that meets a specific condition and verify its correctness using an assertion statement.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num > 1 and all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)) for num in lst)\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers are prime numbers using a primality test algorithm.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num > 1 and all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)) for num in lst)",
        "solution_func": "def g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all numbers in a list are prime numbers, and a function g() that returns a list of prime numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and prime number checking using a simple algorithm. The solution function g() returns a list of prime numbers to test the function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return 'racecar'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return 'racecar'",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s: str) -> bool that checks if a string is a palindrome, provide a string 'racecar' to function g() to return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string is a palindrome using the function f(s: str) -> bool and providing the string 'racecar' to function g() to return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list) -> bool:\n    diff = arr[1] - arr[0]\n    return all(arr[i] - arr[i - 1] == diff for i in range(2, len(arr)))\ndef g():\n    return [2, 4, 6, 8, 10]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and List Operations.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list) -> bool:\n    diff = arr[1] - arr[0]\n    return all(arr[i] - arr[i - 1] == diff for i in range(2, len(arr)))",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers forms an arithmetic sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to check if a list of numbers forms an arithmetic sequence by calculating the common difference between consecutive elements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(nums: list) -> bool:\n    return any(sympy.isprime(num) for num in nums)\ndef g():\n    return [4, 6, 7, 10, 12]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if any number in a list is a prime number using the sympy library.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "import sympy\n\ndef f(nums: list) -> bool:\n    return any(sympy.isprime(num) for num in nums)",
        "solution_func": "def g():\n    return [4, 6, 7, 10, 12]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if any of the numbers in a given list are prime numbers using the sympy library."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the sympy library to check for prime numbers in a list of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)\ndef g():\n    import string\n    return ''.join(set(string.ascii_lowercase))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g():\n    import string\n    return ''.join(set(string.ascii_lowercase))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if a string has all unique characters, and a function g() that generates a string with all lowercase letters. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, set operations, and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return nums == nums[::-1]\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a list is a palindrome, which falls under String Manipulation and List Operations.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return nums == nums[::-1]",
        "solution_func": "def g():\n    return [1, 2, 3, 2, 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given list of integers is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a list of integers is a palindrome by comparing it with its reverse. The solution function g returns a specific list that is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(words: list, is_palindrome=True) -> bool:\n    sentence = ' '.join(words).replace(' ', '').lower()\n    return sentence == sentence[::-1]\n\ndef g(words=['Able', 'was', 'I', 'ere', 'I', 'saw', 'Elba']) -> list:\n    return words\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True"
        ],
        "problem_func": "def f(words: list, is_palindrome=True) -> bool:\n    sentence = ' '.join(words).replace(' ', '').lower()\n    return sentence == sentence[::-1]",
        "solution_func": "def g(words=['Able', 'was', 'I', 'ere', 'I', 'saw', 'Elba']) -> list:\n    return words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given list of words forms a palindrome sentence when concatenated and stripped of spaces and case. The solution function g returns a predefined list of words. The assertion checks if the solution function g satisfies the condition of the function f."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of words forms a palindrome sentence. The solution function simply returns a list of words, which does not satisfy the condition of the function f. Therefore, this puzzle may not be suitable for teaching Python programming to master's students in CS as it does not provide a meaningful challenge or learning opportunity.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sentence: str) -> bool:\n    clean_sentence = ''.join(sentence.lower().split())\n    return clean_sentence == clean_sentence[::-1]\n\ndef g(sentence='A man a plan a canal Panama'):\n    return sentence\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic to check if a sentence is a palindrome.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
            "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True"
        ],
        "problem_func": "def f(sentence: str) -> bool:\n    clean_sentence = ''.join(sentence.lower().split())\n    return clean_sentence == clean_sentence[::-1]",
        "solution_func": "def g(sentence='A man a plan a canal Panama'):\n    return sentence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given sentence is a palindrome (reads the same forwards and backwards) after removing spaces and converting all characters to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a sentence is a palindrome after removing spaces and converting to lowercase, and then providing a solution that returns a specific sentence to test the function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, threshold=10) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return num > threshold\n\ndef g(threshold=10):\n    prime = 2\n    candidate = 3\n    while True:\n        is_prime = True\n        for i in range(2, int(candidate ** 0.5) + 1):\n            if candidate % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            if candidate > threshold:\n                return candidate\n        candidate += 2\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime numbers, loops, and conditionals.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, threshold=10) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return num > threshold",
        "solution_func": "def g(threshold=10):\n    prime = 2\n    candidate = 3\n    while True:\n        is_prime = True\n        for i in range(2, int(candidate ** 0.5) + 1):\n            if candidate % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            if candidate > threshold:\n                return candidate\n        candidate += 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num, threshold) that checks if a given number is a prime number greater than a specified threshold. The solution function g(threshold) generates prime numbers greater than the threshold and returns the first prime number that satisfies the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, loops, and function interactions in Python. It provides a practical application of prime number generation and checking. It is suitable for teaching Python programming concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f(s: str) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns the string 'radar', which is a palindrome, and the assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime or not using a simple algorithm. It covers topics such as number theory (primes) and mathematical operations.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g() that returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abc', length=15) -> bool:\n    return len(s) == length and all(s[i:i+3] == pattern for i in range(0, length, 3))\ndef g(pattern='abc', length=15):\n    return ''.join([pattern[i % 3] for i in range(length)])\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Pattern Recognition",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abc', length=15) -> bool:\n    return len(s) == length and all(s[i:i+3] == pattern for i in range(0, length, 3))",
        "solution_func": "def g(pattern='abc', length=15):\n    return ''.join([pattern[i % 3] for i in range(length)])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string follows a specific pattern of substrings. The solution function g generates a string based on a given pattern and length, and the puzzle tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, list comprehension, and function parameter usage in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, n=5) -> bool:\n    return result == n * (n + 1) // 2\ndef g(n = 5):\n    if n == 0:\n        return 0\n    else:\n        return n + g(n - 1)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Recursion.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, n=5) -> bool:\n    return result == n * (n + 1) // 2",
        "solution_func": "def g(n = 5):\n    if n == 0:\n        return 0\n    else:\n        return n + g(n - 1)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the result of g is equal to the sum of the first n natural numbers. The recursive function g calculates the sum of the first n natural numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge related to calculating the sum of the first n natural numbers using recursion. It can be used to teach recursion and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g() -> str:\n    return 'racecar'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return 'racecar'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns the string 'racecar' which is a palindrome, and the assertion checks if f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return any(is_prime(num) for num in numbers)\n\ndef g(start=1, end=20) -> List[int]:\n    primes = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers in a list of integers using a brute force approach. The solution generates a list of prime numbers within a given range using a similar brute force method. The topics involved in this puzzle are Number Theory (primes) and Brute Force Search.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int]) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return any(is_prime(num) for num in numbers)",
        "solution_func": "def g(start=1, end=20) -> List[int]:\n    primes = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(numbers) checks if any number in a list is a prime number, and g(start=1, end=20) generates a list of prime numbers between 1 and 20. The assertion at the end checks if the solution function g() satisfies the condition of the puzzle function f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves identifying prime numbers in a list and generating prime numbers within a specific range. It provides practice in understanding prime number checking and generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, key='name', value='Alice', count=3) -> bool:\n    if len(data) == count and key in data:\n        return data[key] == value\n    return False\n\ndef g(key='name', value='Alice', count=3):\n    return {key: value, 'age': 30, 'country': 'USA'} if key not in ['age', 'country'] else {key: value, 'city': 'New York', 'status': 'active'}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, conditional logic, and function calls.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: dict, key='name', value='Alice', count=3) -> bool:\n    if len(data) == count and key in data:\n        return data[key] == value\n    return False",
        "solution_func": "def g(key='name', value='Alice', count=3):\n    return {key: value, 'age': 30, 'country': 'USA'} if key not in ['age', 'country'] else {key: value, 'city': 'New York', 'status': 'active'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given dictionary contains a specific key-value pair and has a certain count of elements, and g generates a dictionary based on input parameters. The puzzle tests whether f returns True when called with the output of g as an argument."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, checking key-value pairs, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], common_diff=5) -> bool:\n    return all(nums[i] - nums[i-1] == common_diff for i in range(1, len(nums)))\ndef g(common_diff=5):\n    return [i * common_diff for i in range(10)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True",
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], common_diff=5) -> bool:\n    return all(nums[i] - nums[i-1] == common_diff for i in range(1, len(nums)))",
        "solution_func": "def g(common_diff=5):\n    return [i * common_diff for i in range(10)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers generated by multiplying a common difference by a range of numbers satisfies a specific arithmetic sequence condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list comprehension, arithmetic sequences, and the 'all' function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, key='name', value='Alice') -> bool:\n    return key in data and data[key] == value and len(data) == 2\ndef g(key='name', value='Alice'):\n    return {key: value, 'age': 30}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, conditional logic, and function assertion.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True",
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: dict, key='name', value='Alice') -> bool:\n    return key in data and data[key] == value and len(data) == 2",
        "solution_func": "def g(key='name', value='Alice'):\n    return {key: value, 'age': 30}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given dictionary contains a specific key-value pair and has a specific length, and a function g that returns a dictionary with the specified key-value pair and another key-value pair. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions that manipulate dictionaries in Python and how to use assertions to test the functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, pattern=[1, 2, 4, 8, 16, 32]) -> bool:\n    return all(lst[i] == pattern[i] for i in range(len(pattern)))\ndef g(pattern=[1, 2, 4, 8, 16, 32]):\n    return [2**i for i in range(len(pattern))]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, pattern=[1, 2, 4, 8, 16, 32]) -> bool:\n    return all(lst[i] == pattern[i] for i in range(len(pattern)))",
        "solution_func": "def g(pattern=[1, 2, 4, 8, 16, 32]):\n    return [2**i for i in range(len(pattern))]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function g that generates a list of powers of 2 based on a given pattern, and then check if the generated list matches a predefined pattern using function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, exponentiation, and pattern matching in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list, property='symmetric') -> bool:\n    if property == 'symmetric':\n        return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n    elif property == 'diagonal_zeros':\n        return all(matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix)) if i != j)\n    else:\n        return False\ndef g(property='symmetric'):\n    if property == 'symmetric':\n        return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    elif property == 'diagonal_zeros':\n        return [[0, 2, 3], [2, 0, 5], [3, 5, 0]]\n    else:\n        return [[]]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves matrix manipulation and checking for symmetric and diagonal zeros properties. It also involves list comprehension and assertion testing.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(matrix: list, property='symmetric') -> bool:\n    if property == 'symmetric':\n        return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n    elif property == 'diagonal_zeros':\n        return all(matrix[i][j] == 0 for i in range(len(matrix)) for j in range(len(matrix)) if i != j)\n    else:\n        return False",
        "solution_func": "def g(property='symmetric'):\n    if property == 'symmetric':\n        return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    elif property == 'diagonal_zeros':\n        return [[0, 2, 3], [2, 0, 5], [3, 5, 0]]\n    else:\n        return [[]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(matrix, property) that checks if a given matrix satisfies a specific property (symmetric or diagonal_zeros) and a function g(property) that generates matrices based on the property. The puzzle requires students to understand matrix operations and conditional statements in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves matrix operations and conditional statements, which are fundamental concepts in Python programming. It provides a practical challenge for students to implement functions that operate on matrices and check for specific properties.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, difference=5) -> bool:\n    return all(nums[i] - nums[i-1] == difference for i in range(1, len(nums)))\ndef g(difference=5):\n    return [i * difference for i in range(1, 6)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, difference=5) -> bool:\n    return all(nums[i] - nums[i-1] == difference for i in range(1, len(nums)))",
        "solution_func": "def g(difference=5):\n    return [i * difference for i in range(1, 6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the elements in a list have a constant difference between them, and a function g that generates a list with a specified difference between elements. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the ability to define functions with default arguments and use them in conjunction to solve a problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))\n\ndef g(start=1, diff=3, length=5):\n    return [start + diff*i for i in range(length)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))",
        "solution_func": "def g(start=1, diff=3, length=5):\n    return [start + diff*i for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers forms an arithmetic sequence with a given difference, and a function g that generates a list of numbers in an arithmetic sequence based on the provided parameters. The assertion at the end checks if function f returns True when applied to the list generated by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding arithmetic sequences and how to check if a list of numbers forms such a sequence. It also requires knowledge of list comprehension and function parameter defaults in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 44,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given string is a palindrome by comparing it with its reverse. The solution function g returns the string 'level', which is a palindrome. The assert statement confirms that the solution function g returns a palindrome string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime or not using a simple algorithm. It also involves basic mathematical operations and conditional logic.",
        "idx_generation": 44,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(num) checks if a given number is a prime number, and g() returns the number 17. The puzzle tests whether the number returned by g() is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a specific number (17) is a prime number using the f(num) function. The solution g() returns the number 17, and the puzzle tests if this number is correctly identified as a prime number by the f() function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1]\n\ndef g():\n    unique_chars = ['a', 'b', 'c', 'd', 'e']\n    palindrome = ''.join(unique_chars + unique_chars[::-1])\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 44,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1]",
        "solution_func": "def g():\n    unique_chars = ['a', 'b', 'c', 'd', 'e']\n    palindrome = ''.join(unique_chars + unique_chars[::-1])\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not. The solution generates a palindrome string using a list of unique characters and their reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a generated palindrome string is indeed a palindrome. The solution creates a palindrome string by concatenating a list of unique characters with their reverse.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(number: int) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef g():\n    prime_formula = lambda x: 2 ** x - 1\n    return prime_formula(5)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (primes) and Mathematical Operations.",
        "idx_generation": 44,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(number: int) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    prime_formula = lambda x: 2 ** x - 1\n    return prime_formula(5)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function to check if a given number is a prime number, and then using a lambda function to generate a number based on a formula. The solution checks if the number generated by the lambda function is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of prime numbers, lambda functions, and function composition in Python. It provides a practical application of these concepts in a programming challenge.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(str_list: List[str]) -> bool:\n    return all(len(str_list[i]) >= len(str_list[i+1]) for i in range(len(str_list)-1)) and any(len(s) % 2 != 0 for s in str_list)\ndef g():\n    return sorted([\"python\", \"programming\", \"is\", \"fun\", \"and\", \"challenging\"], key=len, reverse=True)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting and ordering topics.",
        "idx_generation": 44,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True",
            "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(str_list: List[str]) -> bool:\n    return all(len(str_list[i]) >= len(str_list[i+1]) for i in range(len(str_list)-1)) and any(len(s) % 2 != 0 for s in str_list)",
        "solution_func": "def g():\n    return sorted([\"python\", \"programming\", \"is\", \"fun\", \"and\", \"challenging\"], key=len, reverse=True)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires sorting a list of strings in descending order of length and checking if any string in the list has an odd length."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the sorted() function with key=len and reverse=True to sort the list of strings by length in descending order. The solution then checks if any string in the sorted list has an odd length.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=17) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime = n\n    while not is_prime(prime):\n        prime += 1\n    return prime\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 44,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(n=17) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime = n\n    while not is_prime(prime):\n        prime += 1\n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) which checks if a given number is prime, and g(n) which finds the next prime number greater than or equal to a given number. The assertion at the end checks if the output of g(n) satisfies the condition of f(n) being True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves prime number checking and finding the next prime number, which are fundamental concepts in programming. It provides a good exercise for understanding functions, loops, and conditionals in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s=\"racecar\") -> str:\n    return s + s[-2::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 44,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s=\"racecar\") -> str:\n    return s + s[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where the first function checks if a given string is a palindrome and the second function generates a palindrome by concatenating a string with its reverse. The assertion at the end checks if the second function produces a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g(lst=[1, 2, 3, 4, 5, 3, 4]) -> list:\n    return list(set(lst))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations and checking for uniqueness in a list, which falls under the topic of Set Operations. It also involves understanding how to use the set data structure in Python.",
        "idx_generation": 44,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5, 3, 4]) -> list:\n    return list(set(lst))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list contains only unique elements by comparing the length of the list with the length of a set created from the list. The solution returns a list with unique elements by converting the input list to a set and then back to a list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the concept of sets in Python and how they can be used to remove duplicate elements from a list. It also tests the student's knowledge of list manipulation and comparison operations.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, pattern=[2, 4, 6, 8, 10]) -> bool:\n    return all((arr[i] == pattern[i % len(pattern)] for i in range(len(arr))))\ndef g(pattern=[2, 4, 6, 8, 10]):\n    return [pattern[i % len(pattern)] for i in range(len(pattern) * 3)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and pattern matching.",
        "idx_generation": 44,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list, pattern=[2, 4, 6, 8, 10]) -> bool:\n    return all((arr[i] == pattern[i % len(pattern)] for i in range(len(arr))))",
        "solution_func": "def g(pattern=[2, 4, 6, 8, 10]):\n    return [pattern[i % len(pattern)] for i in range(len(pattern) * 3)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list matches a specific pattern, and a function g that generates a list based on a given pattern. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, modulo operation, and the all() function in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='ab') -> bool:\n    return all((s[i] == pattern[i % len(pattern)] for i in range(len(s))))\ndef g(pattern='ab'):\n    return ''.join([pattern[i % len(pattern)] for i in range(10)])\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, List Comprehension",
        "idx_generation": 44,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='ab') -> bool:\n    return all((s[i] == pattern[i % len(pattern)] for i in range(len(s))))",
        "solution_func": "def g(pattern='ab'):\n    return ''.join([pattern[i % len(pattern)] for i in range(10)])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string follows a specific pattern, and a function g that generates a string based on a given pattern. The puzzle tests whether function g generates a string that satisfies the pattern checking function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, list comprehension, and modulo operation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(words: list) -> bool:\n    return ''.join(words) == ''.join(words)[::-1]\ndef g() -> list:\n    return ['race', 'car']\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 44,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
            "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True"
        ],
        "problem_func": "def f(words: list) -> bool:\n    return ''.join(words) == ''.join(words)[::-1]",
        "solution_func": "def g() -> list:\n    return ['race', 'car']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks if a list of words forms a palindrome when concatenated together."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of words forms a palindrome when concatenated together. The solution function should return a list of words that form a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s.lower() == s.lower()[::-1]\ndef g():\n    return \"Madam\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 44,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int) -> bool:\n    return len(str(i + 1000)) > len(str(i + 1001))\ndef g():\n    return -1001\nassert f(g()) == True",
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s.lower() == s.lower()[::-1]",
        "solution_func": "def g():\n    return \"Madam\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome (reads the same forwards and backwards) by comparing the lowercase version of the string with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f(s: str) that checks if a given string is a palindrome, and a function g() that returns the string 'Madam'. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int) -> bool:\n    return factorial == 120\ndef g():\n    num = 5\n    result = 1\n    for i in range(1, num + 1):\n        result *= i\n    return result\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations (calculating factorial) and conditional logic (checking if factorial is equal to a specific value).",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "def f(factorial: int) -> bool:\n    return factorial == 120",
        "solution_func": "def g():\n    num = 5\n    result = 1\n    for i in range(1, num + 1):\n        result *= i\n    return result",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that calculates the factorial of a given number and then check if the factorial is equal to 120."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the factorial of a number and then comparing it to a specific value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    return any(sum(nums[i:j]) == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums) + 1))\n\ndef g(target_sum=10):\n    return [1, 2, 3, 4]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Brute Force Search and List Operations.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    return any(sum(nums[i:j]) == target_sum for i in range(len(nums)) for j in range(i + 1, len(nums) + 1))",
        "solution_func": "def g(target_sum=10):\n    return [1, 2, 3, 4]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a sublist of a given list of integers whose sum is equal to a target sum. The solution function returns a specific sublist that meets the criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, sublists, and summing elements in a list. The solution function returns a sublist that sums up to the target sum.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return any(s == s[::-1] for s in strings)\n\ndef g():\n    return ['radar', 'level', 'racecar']\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return any(s == s[::-1] for s in strings)",
        "solution_func": "def g():\n    return ['radar', 'level', 'racecar']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if any string in a list is a palindrome, and a function g that returns a list of strings. The assertion checks if the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if any string in a list is a palindrome. The solution function g returns a list of strings that are palindromes, and the function f checks if any string in the list is a palindrome. The assertion confirms that the function f returns True when applied to the output of function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(data: List[dict], key='name', value='Alice') -> bool:\n    return any(d.get(key) == value for d in data)\n\ndef g(key='name', value='Alice'):\n    return [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Alice'}]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(data: List[dict], key='name', value='Alice') -> bool:\n    return any(d.get(key) == value for d in data)",
        "solution_func": "def g(key='name', value='Alice'):\n    return [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Alice'}]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that checks if a specific key-value pair exists in a list of dictionaries."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension and the any() function to check for the existence of a key-value pair in a list of dictionaries.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a given text is a palindrome. The solution function returns a specific palindrome text 'radar' to satisfy the condition of the puzzle.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns the text 'radar'. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    import random\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    num = random.randint(2, 100)\n    while not is_prime(num):\n        num = random.randint(2, 100)\n    return num\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search algorithm with a random number generator. It also includes the use of functions, loops, and conditional logic.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import random\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    num = random.randint(2, 100)\n    while not is_prime(num):\n        num = random.randint(2, 100)\n    return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is prime, and another function g() that generates a random number and ensures it is prime before returning it. The puzzle requires students to understand prime number checking and random number generation in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a common programming concept of checking for prime numbers and using random number generation in Python. It provides a practical application of these concepts.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(arr: List[int]) -> bool:\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\ndef g():\n    import random\n\n    arr = [random.randint(1, 100) for _ in range(5)]\n    arr.sort()\n    return arr\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers in ascending order using a random list generation and sorting algorithm.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(arr: List[int]) -> bool:\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))",
        "solution_func": "def g():\n    import random\n\n    arr = [random.randint(1, 100) for _ in range(5)]\n    arr.sort()\n    return arr",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of random integers, sorting the list, and then checking if the list is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random integers, sorting the list, and then checking if the list is sorted in ascending order using the provided functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    import string\n    import random\n\n    letters = string.ascii_lowercase\n    size = random.randint(3, 8)\n    half_size = size // 2\n    first_half = ''.join(random.choice(letters) for _ in range(half_size))\n    second_half = first_half[::-1] if size % 2 == 0 else first_half[:-1][::-1]\n    return first_half + second_half\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    import string\n    import random\n\n    letters = string.ascii_lowercase\n    size = random.randint(3, 8)\n    half_size = size // 2\n    first_half = ''.join(random.choice(letters) for _ in range(half_size))\n    second_half = first_half[::-1] if size % 2 == 0 else first_half[:-1][::-1]\n    return first_half + second_half",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. The solution function g() generates a random string and checks if it is a palindrome using f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    word = \"radar\"\n    return word + word[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    word = \"radar\"\n    return word + word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome by comparing it with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a string is a palindrome and then creating a solution function that generates a word and its reverse. The assertion checks if the solution function correctly identifies the word as a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(average: float, li=[4, 7, 10, 13, 16]) -> bool:\n    return sum(li) == average * len(li)\ndef g(li=[4, 7, 10, 13, 16]):\n    return sum(li) / len(li)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True",
            "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "def f(average: float, li=[4, 7, 10, 13, 16]) -> bool:\n    return sum(li) == average * len(li)",
        "solution_func": "def g(li=[4, 7, 10, 13, 16]):\n    return sum(li) / len(li)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the average of a given list is equal to the sum of the list divided by the length of the list. Another function g is defined to calculate the average of a given list. The puzzle tests whether function g can correctly solve the challenge defined by function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic concepts of list manipulation, arithmetic operations, and function definition in Python. It can be used to teach students how to define functions, work with lists, and understand the concept of average calculation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(unique_count: int, li=[3, 7, 2, 9, 5]) -> bool:\n    return unique_count == len(set(li))\ndef g(li=[3, 7, 2, 9, 5]):\n    return len(set(li))\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations to check for uniqueness of elements in a list.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True",
            "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "def f(unique_count: int, li=[3, 7, 2, 9, 5]) -> bool:\n    return unique_count == len(set(li))",
        "solution_func": "def g(li=[3, 7, 2, 9, 5]):\n    return len(set(li))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the number of unique elements in a list is equal to a given count, and a function g that returns the number of unique elements in a list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use sets to find unique elements in a list and comparing the count of unique elements with a given count.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(prime_sum: int, limit=1000) -> bool:\n    return sum(i for i in range(2, limit) if all(i % j != 0 for j in range(2, int(i**0.5) + 1)) and i > 1) == prime_sum\ndef g(limit=1000):\n    return sum(i for i in range(2, limit) if all(i % j != 0 for j in range(2, int(i**0.5) + 1)) and i > 1)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves prime numbers, summation, loops, and conditional logic.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(prime_sum: int, limit=1000) -> bool:\n    return sum(i for i in range(2, limit) if all(i % j != 0 for j in range(2, int(i**0.5) + 1)) and i > 1) == prime_sum",
        "solution_func": "def g(limit=1000):\n    return sum(i for i in range(2, limit) if all(i % j != 0 for j in range(2, int(i**0.5) + 1)) and i > 1)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of prime numbers up to a given limit is equal to a specified value. The solution function g calculates the sum of prime numbers up to a given limit. The puzzle tests whether the solution function g correctly calculates the sum of prime numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and function composition in Python. It provides a practical exercise in implementing and testing functions that deal with prime numbers and sums.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, max_sum=100) -> bool:\n    return sum(lst) <= max_sum\n\ndef g(max_sum=100):\n    return [i for i in range(max_sum // 10)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
            "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, max_sum=100) -> bool:\n    return sum(lst) <= max_sum",
        "solution_func": "def g(max_sum=100):\n    return [i for i in range(max_sum // 10)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of elements in a list is less than or equal to a given maximum sum, and a function g that generates a list of numbers based on a given maximum sum. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts related to functions, list comprehension, and assertions. It provides practice in defining functions, working with lists, and understanding how functions can be composed to solve a problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, pattern='abc') -> bool:\n    return pattern in text\n\ndef g(pattern='abc'):\n    return pattern * 2\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
            "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, pattern='abc') -> bool:\n    return pattern in text",
        "solution_func": "def g(pattern='abc'):\n    return pattern * 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given pattern is present in a text, with a default pattern of 'abc'. The function g returns the pattern repeated twice. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function calls and default arguments in Python. It requires students to understand how the functions f and g interact with each other.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) != len(set(lst))\n\nimport random\ndef g(size=10, minimum=1, maximum=10):\n    return [random.randint(minimum, maximum) for _ in range(size)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves checking for duplicate elements in a list generated randomly.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) != len(set(lst))\n\nimport random",
        "solution_func": "def g(size=10, minimum=1, maximum=10):\n    return [random.randint(minimum, maximum) for _ in range(size)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list contains duplicate elements, and a function g that generates a random list of integers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation and random number generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i, len(matrix)))\n\nimport random\ndef g(size=3):\n    matrix = [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        for j in range(i):\n            matrix[i][j] = matrix[j][i]\n    return matrix\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and symmetry checking.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "def f(matrix: list) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i, len(matrix)))\n\nimport random",
        "solution_func": "def g(size=3):\n    matrix = [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n    for i in range(size):\n        for j in range(i):\n            matrix[i][j] = matrix[j][i]\n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(matrix) that checks if a given matrix is symmetric along its main diagonal. The solution function g(size) generates a random square matrix and ensures it is symmetric along the main diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding matrix symmetry along the main diagonal and implementing a function to check for this property. The solution function generates random matrices and ensures symmetry along the main diagonal.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(count: int, s='hello world') -> bool:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum(1 for char in s if char.lower() in vowels) == count\n\ndef g(s='hello world'):\n    return sum(1 for char in s if char.lower() in ['a', 'e', 'i', 'o', 'u'])\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
            "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "def f(count: int, s='hello world') -> bool:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum(1 for char in s if char.lower() in vowels) == count",
        "solution_func": "def g(s='hello world'):\n    return sum(1 for char in s if char.lower() in ['a', 'e', 'i', 'o', 'u'])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if the count of vowels in a given string matches a specified count, and g calculates the count of vowels in a string. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with functions, string manipulation, list comprehension, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i+1, len(matrix)))\n\ndef g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i+1, len(matrix)))",
        "solution_func": "def g():\n    return [[1, 2, 3],\n            [2, 4, 5],\n            [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given matrix is symmetric along its main diagonal. The solution function g returns a specific matrix, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a good fit for teaching Python to master's students in CS as it involves working with matrices and understanding symmetry properties.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    import random\n    import string\n\n    word = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(3, 10)))\n    palindrome = word + word[::-1]\n\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic, Importing Modules",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True",
            "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    import random\n    import string\n\n    word = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(3, 10)))\n    palindrome = word + word[::-1]\n\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s: str) that checks if a given string is a palindrome, and a function g() that generates a random string and appends its reverse to create a palindrome. The assert statement checks if the generated palindrome satisfies the palindrome condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, palindrome checking, random string generation, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))\ndef g(start=5, diff=3, length=4):\n    return [start + diff*i for i in range(length)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check if a list of numbers follows an arithmetic progression pattern.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))",
        "solution_func": "def g(start=5, diff=3, length=4):\n    return [start + diff*i for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers forms an arithmetic sequence with a common difference, and a function g that generates an arithmetic sequence based on given parameters. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of arithmetic sequences and list comprehension in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g(base='racecar'):\n    return base + base[-2::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(base='racecar'):\n    return base + base[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(s: str) -> bool and g(base='racecar'), where f checks if a string is a palindrome and g generates a palindrome string based on a given base string. The assertion checks if g produces a palindrome string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, palindrome checking, and function composition in Python. It is a suitable puzzle for teaching Python programming to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    for a in nums:\n        for b in nums:\n            for c in nums:\n                if a**2 + b**2 == c**2:\n                    return True\n    return False\ndef g():\n    for a in range(1, 100):\n        for b in range(a, 100):\n            c = (a**2 + b**2)**0.5\n            if c.is_integer():\n                return [a, b, int(c)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    for a in nums:\n        for b in nums:\n            for c in nums:\n                if a**2 + b**2 == c**2:\n                    return True\n    return False",
        "solution_func": "def g():\n    for a in range(1, 100):\n        for b in range(a, 100):\n            c = (a**2 + b**2)**0.5\n            if c.is_integer():\n                return [a, b, int(c)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a Pythagorean triplet in a given range of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there exists a Pythagorean triplet (three numbers that satisfy the Pythagorean theorem) in a given range of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='ABC') -> bool:\n    return s.count('A') == s.count('B') == s.count('C')\ndef g(pattern='ABC'):\n    return pattern * 3\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True",
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='ABC') -> bool:\n    return s.count('A') == s.count('B') == s.count('C')",
        "solution_func": "def g(pattern='ABC'):\n    return pattern * 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the counts of 'A', 'B', and 'C' in a given string are equal, and a function g that returns a string pattern repeated three times. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, function definition, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='Name', value='Alice') -> bool:\n    return key in d and d[key] == value\ndef g(key='Name', value='Alice'):\n    return {key: value, 'Age': 25, 'Gender': 'Female'}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True",
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='Name', value='Alice') -> bool:\n    return key in d and d[key] == value",
        "solution_func": "def g(key='Name', value='Alice'):\n    return {key: value, 'Age': 25, 'Gender': 'Female'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given key-value pair exists in a dictionary, and another function g that returns a dictionary with specific key-value pairs. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks for key-value pairs in a dictionary and how to create a dictionary with specific key-value pairs. It also tests the understanding of function calls and assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g() -> List[int]:\n    return [num for num in range(1, 11) if num % 2 == 0]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list comprehension, iteration, and checking for even numbers in a list.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int]) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g() -> List[int]:\n    return [num for num in range(1, 11) if num % 2 == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if all numbers in a list are even, and a function g that generates a list of even numbers from 1 to 10. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and modulo operations in Python. It tests the student's ability to define functions, generate lists, and apply conditions to filter elements in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 13\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers, which falls under Number Theory (factors, primes, etc.).",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 13",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num: int) -> bool and g() -> int. Function f checks if a given number is a prime number, and function g returns the number 13. The puzzle tests whether function f correctly identifies 13 as a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithm to check for prime numbers and a fixed value return function. It is suitable for teaching basic concepts of functions and conditionals in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int, fact=120) -> bool:\n    return n == fact\ndef g(n=5):\n    if n == 0:\n        return 1\n    return n * g(n-1)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves recursion and mathematical operations.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
            "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int, fact=120) -> bool:\n    return n == fact",
        "solution_func": "def g(n=5):\n    if n == 0:\n        return 1\n    return n * g(n-1)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a recursive function to calculate the factorial of a number and check if it equals a predefined value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding recursion and factorial calculation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(is_palindrome: bool, s='radar') -> bool:\n    return s == s[::-1] == is_palindrome\n\ndef g(s='radar'):\n    return s[::-1] if s == s[::-1] else s  # Return the reversed string if it's a palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "def f(is_palindrome: bool, s='radar') -> bool:\n    return s == s[::-1] == is_palindrome",
        "solution_func": "def g(s='radar'):\n    return s[::-1] if s == s[::-1] else s  # Return the reversed string if it's a palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that returns the reversed string if it is a palindrome. The assertion checks if the solution function g satisfies the condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding palindrome strings and how to check for palindromes in Python. It also requires knowledge of string manipulation and conditional statements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, n=4, diff=3) -> bool:\n    for i in range(len(arr) - n + 1):\n        if all(arr[i + j + 1] - arr[i + j] == diff for j in range(n - 1)):\n            return True\n    return False\n\ndef g(n=4, diff=3):\n    start = 0\n    return [start + diff * i for i in range(n)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as list manipulation, loops, conditionals, and assertions.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list, n=4, diff=3) -> bool:\n    for i in range(len(arr) - n + 1):\n        if all(arr[i + j + 1] - arr[i + j] == diff for j in range(n - 1)):\n            return True\n    return False",
        "solution_func": "def g(n=4, diff=3):\n    start = 0\n    return [start + diff * i for i in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if there exists a subsequence in the input list where the elements have a constant difference of 'diff' for 'n' consecutive elements. The solution function g generates a list with a constant difference 'diff' for 'n' consecutive elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also requires understanding how to define functions with default arguments and how to use assert statements for testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(strings: list, sub='abc', freq=2) -> bool:\n    count = sum(string.count(sub) for string in strings)\n    return count >= freq\n\ndef g(sub='abc', freq=2):\n    return [sub * freq, 'xyz' + sub * freq + '123', 'def' + sub * freq]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True"
        ],
        "problem_func": "def f(strings: list, sub='abc', freq=2) -> bool:\n    count = sum(string.count(sub) for string in strings)\n    return count >= freq",
        "solution_func": "def g(sub='abc', freq=2):\n    return [sub * freq, 'xyz' + sub * freq + '123', 'def' + sub * freq]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings, a sub string, and a frequency as input. The function checks if the sub string appears in the strings with a frequency greater than or equal to the specified frequency. Another function g is defined to generate a list of strings based on the input sub string and frequency. The puzzle is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks for the frequency of a sub string in a list of strings. The solution function g generates strings based on the input sub string and frequency to satisfy the condition of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, key='score', threshold=80) -> bool:\n    return key in data and data[key] >= threshold\n\ndef g(key='score', threshold=80):\n    return {key: threshold + 5, 'name': 'Alice', 'age': 25}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Conditional Logic, Dictionary Manipulation, and Function Definition.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: dict, key='score', threshold=80) -> bool:\n    return key in data and data[key] >= threshold",
        "solution_func": "def g(key='score', threshold=80):\n    return {key: threshold + 5, 'name': 'Alice', 'age': 25}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a specified key in a dictionary has a value greater than or equal to a threshold, and g returns a dictionary with a key-value pair that does not meet the threshold. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as function definitions, dictionary manipulation, and boolean comparisons.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, n=10) -> bool:\n    def fibonacci_recursive(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n    \n    return result == fibonacci_recursive(n)\n\ndef g(n=10) -> int:\n    def fibonacci_recursive(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n\n    return fibonacci_recursive(n)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves recursion and mathematical operations as it deals with the Fibonacci sequence. The solution function g() calculates the Fibonacci sequence using recursion and the puzzle function f() checks if the result matches the Fibonacci sequence.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, n=10) -> bool:\n    def fibonacci_recursive(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n    \n    return result == fibonacci_recursive(n)",
        "solution_func": "def g(n=10) -> int:\n    def fibonacci_recursive(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n\n    return fibonacci_recursive(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the result of a given function g matches the result of a recursive Fibonacci function for a given input n. The solution function g calculates the nth Fibonacci number using recursion."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding recursion and function composition in Python. It tests the student's ability to define and call functions recursively to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(n) that checks if a given number n is a prime number. The solution function g() returns the number 17, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a prime number and testing the solution function with the number 17. The student needs to understand prime numbers and how the given functions work together to solve the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    return all(num > 0 for num in arr)\n\ndef g():\n    return [5, 12, 8, 3]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are greater than 0.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(arr: List[int]) -> bool:\n    return all(num > 0 for num in arr)",
        "solution_func": "def g():\n    return [5, 12, 8, 3]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are greater than 0, and a function g that returns a specific list of numbers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and function invocation in Python. It is a simple puzzle suitable for teaching basic Python concepts.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(pattern: str) -> bool:\n    return pattern == 'abab'\n\ndef g():\n    return 'abab'\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(pattern: str) -> bool:\n    return pattern == 'abab'",
        "solution_func": "def g():\n    return 'abab'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given pattern is equal to 'abab', and a function g that returns the pattern 'abab'. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple one that involves defining a function to check a specific pattern and then verifying the correctness of the solution. It can be used to introduce basic function definitions and assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(email: str) -> bool:\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return re.match(pattern, email) is not None\n\ndef g():\n    return \"example@email.com\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and importing modules (re module).",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "import re\n\ndef f(email: str) -> bool:\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return re.match(pattern, email) is not None",
        "solution_func": "def g():\n    return \"example@email.com\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given email address is valid by matching it against a specific pattern using regular expressions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using regular expressions to validate an email address format.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    a, b, c = sorted(nums)\n    return a ** 2 + b ** 2 == c ** 2\n\ndef g():\n    return [3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, sorting and ordering, and conditional logic.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    a, b, c = sorted(nums)\n    return a ** 2 + b ** 2 == c ** 2",
        "solution_func": "def g():\n    return [3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of integers forms a Pythagorean triplet."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires sorting the list of integers and then checking if the squared sum of the two smaller integers is equal to the square of the largest integer.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 13\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm. It does not directly relate to any of the listed topics.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 13",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and another function g() that returns the number 13. The puzzle requires g() to be passed to f() and the assertion checks if the result is True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function invocation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nimport math\n\ndef f(numbers: List[int], n=10) -> bool:\n    return any(math.isqrt(num1 * num2) ** 2 == num1 * num2 for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])\n    \ndef g(n=10):\n    return [i**2 for i in range(1, n+1)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and importing modules (math). It also includes list comprehension and assertion testing.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\nimport math\n\ndef f(numbers: List[int], n=10) -> bool:\n    return any(math.isqrt(num1 * num2) ** 2 == num1 * num2 for i, num1 in enumerate(numbers) for num2 in numbers[i+1:])",
        "solution_func": "def g(n=10):\n    return [i**2 for i in range(1, n+1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function f that takes a list of integers and a number n, and checks if the square of the square root of the product of any two numbers in the list is equal to the product of those two numbers. The solution function g generates a list of squares of numbers from 1 to n. The assertion checks if f applied to the result of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, mathematical operations, and the use of the math module in Python. It also tests the students' ability to write functions that manipulate lists and perform mathematical calculations.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, vowels='aeiou') -> bool:\n    s = s.lower()\n    return s == s[::-1] and any(char in vowels for char in s)\n\ndef g():\n    return \"Aibohphobia\"  # Aibohphobia is the fear of palindromes.\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, vowels='aeiou') -> bool:\n    s = s.lower()\n    return s == s[::-1] and any(char in vowels for char in s)",
        "solution_func": "def g():\n    return \"Aibohphobia\"  # Aibohphobia is the fear of palindromes.",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s: str, vowels='aeiou') -> bool that checks if a string is a palindrome and contains at least one vowel, and a function g() that returns the string 'Aibohphobia', the puzzle requires finding a string that is a palindrome and contains at least one vowel."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, palindrome checking, and character inclusion in a string. The solution function g() returns the string 'Aibohphobia', which satisfies the conditions of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom collections import Counter\n\ndef f(words: List[str], n=3) -> bool:\n    return all(Counter(word1) == Counter(word2) for i, word1 in enumerate(words) for word2 in words[i+1:])\n    \ndef g(n=3):\n    return ['dog', 'god', 'odg']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and importing modules (collections). It also involves list manipulation and iteration. The solution involves creating a list of words and checking if the Counter of each word is equal to the Counter of the other words in the list.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\nfrom collections import Counter\n\ndef f(words: List[str], n=3) -> bool:\n    return all(Counter(word1) == Counter(word2) for i, word1 in enumerate(words) for word2 in words[i+1:])",
        "solution_func": "def g(n=3):\n    return ['dog', 'god', 'odg']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the characters in each pair of words in a list are the same, and the solution provides a list of words where the characters are the same in different orders."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires comparing the character counts of each pair of words in a list. The solution provides a list of words with the same characters in different orders.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str, text='level') -> bool:\n    vowels = 'aeiou'\n    palindrome = palindrome.lower()\n    return palindrome == palindrome[::-1] and sum((char in vowels for char in palindrome)) == sum((char in vowels for char in text))\ndef g(text='level'):\n    return text[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
            "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str, text='level') -> bool:\n    vowels = 'aeiou'\n    palindrome = palindrome.lower()\n    return palindrome == palindrome[::-1] and sum((char in vowels for char in palindrome)) == sum((char in vowels for char in text))",
        "solution_func": "def g(text='level'):\n    return text[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome and has the same number of vowels as a default text string. The solution function g reverses the default text string and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for palindromes, counting vowels, and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\ndef g(n=10):\n    while True:\n        n += 1\n        if all(n % i != 0 for i in range(2, int(n**0.5)+1)):\n            return n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves Number Theory (factors, primes, etc.) and Brute Force Search topics.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(n=10):\n    while True:\n        n += 1\n        if all(n % i != 0 for i in range(2, int(n**0.5)+1)):\n            return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num) which checks if a given number is a prime number, and g(n) which finds the next prime number greater than a given number n. The assertion at the end checks if the solution function g() returns a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves prime number checking and finding the next prime number, which are fundamental concepts in programming. It provides a good exercise for understanding loops, conditions, and prime number algorithms in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return n == 5 or n * f(n-1)\n\ndef g():\n    return 5\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion, Mathematical Operations",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return n == 5 or n * f(n-1)",
        "solution_func": "def g():\n    return 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(n) that checks if a given integer n is equal to 5 or if n times f(n-1) evaluates to True. The solution function g() returns the integer 5. The puzzle asserts that f(g()) should evaluate to True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves recursion and logical operations to determine if a given integer meets certain conditions. The solution function returns a specific integer to satisfy the conditions of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(primes: list, n=20) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    assert all(is_prime(num) for num in primes)\n    return True\n\ndef g(n=20) -> list:\n    primes = []\n    for num in range(2, n+1):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    \n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime numbers, loops, and assertions.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(primes: list, n=20) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    assert all(is_prime(num) for num in primes)\n    return True",
        "solution_func": "def g(n=20) -> list:\n    primes = []\n    for num in range(2, n+1):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    \n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers are prime, and a function g that generates a list of prime numbers up to a given limit. The puzzle requires ensuring that the list of prime numbers generated by g satisfies the primality check in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, writing a primality check function, and generating a list of prime numbers. It tests the student's knowledge of prime numbers and algorithmic thinking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int, n=5) -> bool:\n    def calculate_factorial(num):\n        if num == 0:\n            return 1\n        return num * calculate_factorial(num - 1)\n    \n    return factorial == calculate_factorial(n)\n\ndef g(n=5):\n    def calculate_factorial(num):\n        if num == 0:\n            return 1\n        return num * calculate_factorial(num - 1)\n    \n    return calculate_factorial(n)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion and mathematical operations as it calculates the factorial of a number and checks if it matches a given value.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
            "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "def f(factorial: int, n=5) -> bool:\n    def calculate_factorial(num):\n        if num == 0:\n            return 1\n        return num * calculate_factorial(num - 1)\n    \n    return factorial == calculate_factorial(n)",
        "solution_func": "def g(n=5):\n    def calculate_factorial(num):\n        if num == 0:\n            return 1\n        return num * calculate_factorial(num - 1)\n    \n    return calculate_factorial(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the factorial of a given number is equal to a specified value, and g calculates the factorial of a given number. The puzzle tests the correctness of the factorial calculation function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple factorial calculation challenge and its solution. It can be used to teach basic recursion and function calling in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome_length_prime: bool, s='racecarabcracecar') -> bool:\n    return palindrome_length_prime == len(max((s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1) if s[i:j] == s[i:j][::-1]), key=len)) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\ndef g(s='racecarabcracecar'):\n    return len(max((s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1) if s[i:j] == s[i:j][::-1]), key=len))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation, conditional logic, and number theory (primes).",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome_length_prime: bool, s='racecarabcracecar') -> bool:\n    return palindrome_length_prime == len(max((s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1) if s[i:j] == s[i:j][::-1]), key=len)) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "solution_func": "def g(s='racecarabcracecar'):\n    return len(max((s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1) if s[i:j] == s[i:j][::-1]), key=len))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the length of the longest palindrome substring in a given string is a prime number from a specific list of prime numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of string manipulation, palindrome detection, list comprehension, and prime number checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, rev='racecar') -> bool:\n    return s == rev and s == s[::-1]\ndef g(rev='racecar'):\n    return rev\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, rev='racecar') -> bool:\n    return s == rev and s == s[::-1]",
        "solution_func": "def g(rev='racecar'):\n    return rev",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome and comparing it with a predefined string. The function g returns a predefined string, and the puzzle tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(missing_num: int, nums=[1, 2, 3, 5, 6, 7, 8]) -> bool:\n    return sum(nums) == sum(range(1, len(nums) + 2)) - missing_num\ndef g(nums=[1, 2, 3, 5, 6, 7, 8]):\n    n = len(nums)\n    return sum(range(1, n + 2)) - sum(nums)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and list manipulation to find a missing number in a sequence.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(missing_num: int, nums=[1, 2, 3, 5, 6, 7, 8]) -> bool:\n    return sum(nums) == sum(range(1, len(nums) + 2)) - missing_num",
        "solution_func": "def g(nums=[1, 2, 3, 5, 6, 7, 8]):\n    n = len(nums)\n    return sum(range(1, n + 2)) - sum(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a missing number in a list of integers by comparing the sum of the list with the sum of a range of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, summing elements in a list, and calculating the sum of a range of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums)\ndef g():\n    import random\n    return [random.randint(1, 100) * 2 for _ in range(random.randint(5, 10))]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating a list of random even numbers and checking if all numbers in the list are even.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums)",
        "solution_func": "def g():\n    import random\n    return [random.randint(1, 100) * 2 for _ in range(random.randint(5, 10))]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of random even numbers and checking if all numbers in the list are even."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, random number generation, and the all() function to check if all numbers in the generated list are even.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\ndef g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    length = random.randint(3, 8)\n    half_length = length // 2\n    palindrome_half = ''.join(random.choice(letters) for _ in range(half_length))\n    return palindrome_half + (palindrome_half[::-1] if length % 2 == 0 else palindrome_half[-2::-1])\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.), Pattern Recognition",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    length = random.randint(3, 8)\n    half_length = length // 2\n    palindrome_half = ''.join(random.choice(letters) for _ in range(half_length))\n    return palindrome_half + (palindrome_half[::-1] if length % 2 == 0 else palindrome_half[-2::-1])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that checks if a given word is a palindrome. The solution function g() generates a random string that is a palindrome and returns it. The assert statement checks if the generated string is indeed a palindrome.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sorted_list: list, numbers=[9, 3, 5, 1, 7, 2, 8, 4, 6]) -> bool:\n    return sorted(numbers) == sorted_list\ndef g(numbers=[9, 3, 5, 1, 7, 2, 8, 4, 6]):\n    return sorted(numbers)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and checking if the sorted list matches a given sorted list. This involves concepts of sorting and list manipulation.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True"
        ],
        "problem_func": "def f(sorted_list: list, numbers=[9, 3, 5, 1, 7, 2, 8, 4, 6]) -> bool:\n    return sorted(numbers) == sorted_list",
        "solution_func": "def g(numbers=[9, 3, 5, 1, 7, 2, 8, 4, 6]):\n    return sorted(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that takes a list of numbers and returns True if the list is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check if a list is sorted in Python using the sorted() function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(primes: list, start=10, end=50) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(p) for p in primes) and all(start <= p <= end for p in primes)\n\ndef g(start=10, end=50):\n    primes = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                primes.append(num)\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers within a given range and validating if a list of numbers consists of only prime numbers. The solution generates a list of prime numbers within the specified range using a brute force approach. The puzzle and solution primarily focus on Number Theory (primes) and Brute Force Search topics.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "def f(primes: list, start=10, end=50) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(p) for p in primes) and all(start <= p <= end for p in primes)",
        "solution_func": "def g(start=10, end=50):\n    primes = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of prime numbers falls within a specified range, and a function g that generates a list of prime numbers within a given range. The assertion at the end checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and function composition in Python. It tests the ability to generate prime numbers and validate them within a range using functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom datetime import datetime\nfrom random import randint\n\ndef f(dates: list, month=6, year=2023) -> bool:\n    unique_dates = set(dates)\n    valid_dates = all(date.month == month and date.year == year for date in unique_dates)\n    return len(unique_dates) == len(dates) and valid_dates\n\ndef g(month=6, year=2023, num_dates=5):\n    dates = []\n    while len(dates) < num_dates:\n        day = randint(1, 30)\n        date = datetime(year, month, day)\n        if date not in dates:\n            dates.append(date)\n    return dates\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves working with dates, sets, loops, and random number generation.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "from datetime import datetime\nfrom random import randint\n\ndef f(dates: list, month=6, year=2023) -> bool:\n    unique_dates = set(dates)\n    valid_dates = all(date.month == month and date.year == year for date in unique_dates)\n    return len(unique_dates) == len(dates) and valid_dates",
        "solution_func": "def g(month=6, year=2023, num_dates=5):\n    dates = []\n    while len(dates) < num_dates:\n        day = randint(1, 30)\n        date = datetime(year, month, day)\n        if date not in dates:\n            dates.append(date)\n    return dates",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a list of random dates in a specific month and year, checking for uniqueness, and verifying if all dates are in the specified month and year."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of generating random dates, checking for uniqueness, and filtering dates based on a specific month and year.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], n=5) -> bool:\n    return all(word.islower() for word in words) and len(set(words)) == n\n\ndef g(n=5):\n    import string\n    return [string.ascii_lowercase[:i] for i in range(1, n + 1)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], n=5) -> bool:\n    return all(word.islower() for word in words) and len(set(words)) == n",
        "solution_func": "def g(n=5):\n    import string\n    return [string.ascii_lowercase[:i] for i in range(1, n + 1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and an optional integer n, and checks if all words are lowercase and the number of unique words is equal to n. The solution function g generates a list of lowercase alphabets up to the specified length n and passes it to f to validate the condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of strings contains only lowercase words and has a specific number of unique words. The solution function generates a list of lowercase alphabets to satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: str, a='hello', b='world') -> bool:\n    return a in x and b in x\ndef g(a='hello', b='world'):\n    return a + ' ' + b\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: str, a='hello', b='world') -> bool:\n    return a in x and b in x",
        "solution_func": "def g(a='hello', b='world'):\n    return a + ' ' + b",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if two given strings are present in a given string x, and a function g that concatenates two strings. The puzzle tests if function f returns True when called with the output of function g as arguments."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, default arguments, string concatenation, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: list, a=5, b='Python') -> bool:\n    return a in x and b in x\ndef g(a=5, b='Python'):\n    return [1, 2, 3, 4, a, b]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: list, a=5, b='Python') -> bool:\n    return a in x and b in x",
        "solution_func": "def g(a=5, b='Python'):\n    return [1, 2, 3, 4, a, b]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if two given values are present in a list, and a function g that returns a list containing the two values. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, default arguments, list operations, and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: dict, a='key', b='value') -> bool:\n    return a in x and x[a] == b\ndef g(a='key', b='value'):\n    return {a: b, 'name': 'Alice', 'age': 30}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: dict, a='key', b='value') -> bool:\n    return a in x and x[a] == b",
        "solution_func": "def g(a='key', b='value'):\n    return {a: b, 'name': 'Alice', 'age': 30}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a specific key-value pair exists in a dictionary, and another function g that returns a dictionary with the specified key-value pair. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions that work with dictionaries in Python and how to use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\") -> str:\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s: str = \"racecar\") -> str:\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g(s) simply returns the string 'racecar'. The assertion statement checks if the solution function g() returns a palindrome string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(num: int = 17) -> int:\n    return num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (primality testing) and Mathematical Operations (square root calculation).",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(num: int = 17) -> int:\n    return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num) and g(num), where f checks if a number is prime and g returns a specific number. The assertion checks if g returns a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, is_palindrome=True) -> bool:\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    return s == s[::-1] and is_palindrome\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, is_palindrome=True) -> bool:\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    return s == s[::-1] and is_palindrome",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "Given a function f that checks if a string is a palindrome after removing non-alphanumeric characters and ignoring case, and a function g that returns a specific string, the puzzle requires g to return a palindrome string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a specific string is a palindrome after removing non-alphanumeric characters and ignoring case. The solution function g returns a palindrome string that matches the criteria of the function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, is_prime=True) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True and is_prime\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime or not using a simple algorithm.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, is_prime=True) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True and is_prime",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g() that returns a number, and the function f(num: int, is_prime=True) that checks if the number is a prime number. The puzzle asserts that the function f(g()) should return True when g() returns 17."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to check for primality. The student needs to define a function g() that returns a specific number to satisfy the condition of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(triplet: list, has_triplet=True) -> bool:\n    return any(a**2 + b**2 == c**2 for a in triplet for b in triplet for c in triplet) and has_triplet\ndef g():\n    return [3, 4, 5, 6, 8, 10]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and List Operations.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(triplet: list, has_triplet=True) -> bool:\n    return any(a**2 + b**2 == c**2 for a in triplet for b in triplet for c in triplet) and has_triplet",
        "solution_func": "def g():\n    return [3, 4, 5, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers forms a Pythagorean triplet and returning True if it does."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension and the Pythagorean theorem in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(seq: list, nums=[5, 9, 13, 17, 21, 25, 29]) -> bool:\n    if len(seq) != 3:\n        return False\n    return seq[1] - seq[0] == seq[2] - seq[1]\n    \ndef g(nums=[5, 9, 13, 17, 21, 25, 29]):\n    for i in range(len(nums)-2):\n        if nums[i+1] - nums[i] == nums[i+2] - nums[i+1]:\n            return [nums[i], nums[i+1], nums[i+2]]\n    return []\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic and mathematical operations to check if a given sequence of numbers satisfies a specific pattern.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(seq: list, nums=[5, 9, 13, 17, 21, 25, 29]) -> bool:\n    if len(seq) != 3:\n        return False\n    return seq[1] - seq[0] == seq[2] - seq[1]",
        "solution_func": "def g(nums=[5, 9, 13, 17, 21, 25, 29]):\n    for i in range(len(nums)-2):\n        if nums[i+1] - nums[i] == nums[i+2] - nums[i+1]:\n            return [nums[i], nums[i+1], nums[i+2]]\n    return []",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given list of 3 numbers forms an arithmetic sequence and g finds the first arithmetic sequence of 3 numbers in a predefined list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if a list of 3 numbers forms an arithmetic sequence and finding the first arithmetic sequence of 3 numbers in a predefined list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(prime_sum: int, n=20) -> bool:\n    if n < 2:\n        return False\n    if n == 2:\n        return prime_sum == 2\n    primes = []\n    for num in range(2, n+1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return prime_sum == sum(primes)\n\ndef g(n=20):\n    primes = []\n    for num in range(2, n+1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return sum(primes)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and summing them up to match a given prime sum. It also involves iteration and list manipulation.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(prime_sum: int, n=20) -> bool:\n    if n < 2:\n        return False\n    if n == 2:\n        return prime_sum == 2\n    primes = []\n    for num in range(2, n+1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return prime_sum == sum(primes)",
        "solution_func": "def g(n=20):\n    primes = []\n    for num in range(2, n+1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return sum(primes)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(prime_sum, n) that checks if the sum of prime numbers up to n is equal to a given prime_sum. The solution function g(n) calculates the sum of prime numbers up to n and returns it. The puzzle is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with prime numbers and checking if the sum of prime numbers up to a given limit matches a specified sum. The solution function calculates the sum of prime numbers up to a given limit. The puzzle is suitable for teaching Python programming concepts related to prime numbers, loops, conditionals, and function calls.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g(n=17) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime = n\n    while not is_prime(prime):\n        prime += 1\n    return prime\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and finding the next prime number after a given number.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(n=17) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime = n\n    while not is_prime(prime):\n        prime += 1\n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) which checks if a given number is prime, and g(n) which finds the next prime number greater than or equal to a given number. The puzzle requires using the g(n) function to find a prime number and then checking if it is prime using the f(n) function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, loops, and function calls in Python. It requires students to implement a function to find the next prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return all(word[0].lower() in vowels for word in words)\n\ndef g(vowels=['a', 'e', 'i', 'o', 'u'], consonants=['b', 'c', 'd', 'f', 'g']) -> List[str]:\n    return [v + c for v in vowels for c in consonants]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, List Comprehension",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return all(word[0].lower() in vowels for word in words)",
        "solution_func": "def g(vowels=['a', 'e', 'i', 'o', 'u'], consonants=['b', 'c', 'd', 'f', 'g']) -> List[str]:\n    return [v + c for v in vowels for c in consonants]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions in Python. The first function f(words: List[str]) checks if the first letter of each word in a list is a vowel. The second function g(vowels=['a', 'e', 'i', 'o', 'u'], consonants=['b', 'c', 'd', 'f', 'g']) generates a list of strings by combining vowels with consonants. The puzzle asserts that the output of f(g()) should be True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, checking conditions on strings, and function parameter defaults in Python. It can be used to teach Python programming concepts related to lists, loops, and conditionals.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all(len(row) == len(matrix) for row in matrix) and all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n\ndef g(dim=3) -> List[List[int]]:\n    matrix = [[0] * dim for _ in range(dim)]\n    for i in range(dim):\n        for j in range(i, dim):\n            val = i + j + 1\n            matrix[i][j] = val\n            matrix[j][i] = val\n    return matrix\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking symmetry in a matrix and generating a symmetric matrix.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all(len(row) == len(matrix) for row in matrix) and all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g(dim=3) -> List[List[int]]:\n    matrix = [[0] * dim for _ in range(dim)]\n    for i in range(dim):\n        for j in range(i, dim):\n            val = i + j + 1\n            matrix[i][j] = val\n            matrix[j][i] = val\n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given matrix is symmetric along its main diagonal, and another function g that generates a symmetric matrix based on a given dimension. The assertion at the end checks if the generated matrix satisfies the symmetry condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of nested loops, list comprehension, and matrix manipulation in Python. It tests the understanding of matrix symmetry and indexing in Python lists.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], pattern=[1, 2, 4, 8, 16, 32]) -> bool:\n    return all(nums[i] * 2 == nums[i + 1] for i in range(len(nums) - 1)) and len(nums) == len(pattern) and all(nums[i] == pattern[i] for i in range(len(nums)))\n    \ndef g(pattern=[1, 2, 4, 8, 16, 32]):\n    return [pattern[i] for i in range(len(pattern))]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], pattern=[1, 2, 4, 8, 16, 32]) -> bool:\n    return all(nums[i] * 2 == nums[i + 1] for i in range(len(nums) - 1)) and len(nums) == len(pattern) and all(nums[i] == pattern[i] for i in range(len(nums)))",
        "solution_func": "def g(pattern=[1, 2, 4, 8, 16, 32]):\n    return [pattern[i] for i in range(len(pattern))]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers follows a specific pattern, and a function g that generates a list based on a given pattern. The solution g generates a list based on the provided pattern and the function f checks if the generated list follows the pattern."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, iteration, and list comparison in Python. It also tests the ability to define functions with default arguments and use them in conjunction to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(s == s[::-1] for s in strings)\n\ndef g(input_str='racecar'):\n    return [input_str[:i] + input_str[i-1::-1] for i in range(1, len(input_str) + 1)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(s == s[::-1] for s in strings)",
        "solution_func": "def g(input_str='racecar'):\n    return [input_str[:i] + input_str[i-1::-1] for i in range(1, len(input_str) + 1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of strings are palindromes, where the solution generates a list of reversed substrings of a given input string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding list comprehension, string slicing, and the all() function in Python. The solution g() generates a list of reversed substrings of the input string, and the function f() checks if all strings in the list are palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nimport sympy\n\ndef f(nums: List[int]) -> bool:\n    return all(sympy.isprime(num) for num in nums)\n\ndef g(start=1, end=20):\n    return [num for num in range(start, end + 1) if sympy.isprime(num)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers are prime numbers using the sympy library and list comprehension.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\nimport sympy\n\ndef f(nums: List[int]) -> bool:\n    return all(sympy.isprime(num) for num in nums)",
        "solution_func": "def g(start=1, end=20):\n    return [num for num in range(start, end + 1) if sympy.isprime(num)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if all numbers in a given list are prime, and a function g that generates a list of prime numbers within a specified range. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the sympy library to check for prime numbers and generate a list of prime numbers within a range. It tests the understanding of list comprehensions and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], key='age', value=30) -> bool:\n    return key in dictionary and dictionary[key] == value\n\ndef g(key='age', value=30) -> Dict[str, int]:\n    return {'name': 'Alice', 'age': 30, 'score': 95}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation, conditional logic, and function calls.",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Dict\n\ndef f(dictionary: Dict[str, int], key='age', value=30) -> bool:\n    return key in dictionary and dictionary[key] == value",
        "solution_func": "def g(key='age', value=30) -> Dict[str, int]:\n    return {'name': 'Alice', 'age': 30, 'score': 95}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given key-value pair exists in a dictionary and g returns a dictionary with specific key-value pairs. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of dictionaries, function parameters, and boolean expressions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], difference=3) -> bool:\n    return all(numbers[i] - numbers[i - 1] == difference for i in range(1, len(numbers)))\n\ndef g(difference=3) -> List[int]:\n    return [1, 4, 7, 10, 13]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check if a list of numbers satisfies a specific difference pattern.",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], difference=3) -> bool:\n    return all(numbers[i] - numbers[i - 1] == difference for i in range(1, len(numbers)))",
        "solution_func": "def g(difference=3) -> List[int]:\n    return [1, 4, 7, 10, 13]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the difference between consecutive elements in a list is equal to a specified difference. The solution function g returns a list of numbers with a constant difference between consecutive elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also requires knowledge of function definition and calling in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(missing_num: int, a=2, d=5, sequence=[2, 7, 12, 22, 27, 37, 42]) -> bool:\n    return missing_num == (sequence[0] + sequence[-1]) * (len(sequence) + 1) // 2 - sum(sequence)\ndef g(a=2, d=5, sequence=[2, 7, 12, 22, 27, 37, 42]):\n    return (sequence[0] + sequence[-1]) * (len(sequence) + 1) // 2 - sum(sequence)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and sequence manipulation to find a missing number in a sequence.",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(missing_num: int, a=2, d=5, sequence=[2, 7, 12, 22, 27, 37, 42]) -> bool:\n    return missing_num == (sequence[0] + sequence[-1]) * (len(sequence) + 1) // 2 - sum(sequence)",
        "solution_func": "def g(a=2, d=5, sequence=[2, 7, 12, 22, 27, 37, 42]):\n    return (sequence[0] + sequence[-1]) * (len(sequence) + 1) // 2 - sum(sequence)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a missing number and a sequence of numbers as input, and checks if the missing number completes an arithmetic sequence. The solution function g calculates the missing number based on the arithmetic sequence formula."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about arithmetic sequences and requires understanding of arithmetic sequence formula. It can be used to teach students about sequence manipulation and formula application in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return string[0] == 'A' and string[-1] == 'Z' and string.isupper() and len(set(string)) == len(string)\ndef g():\n    import string\n    import random\n    letters = string.ascii_uppercase\n    length = random.randint(3, 10)\n    return 'A' + ''.join(random.choices(letters, k=length-2)) + 'Z'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Set Operations",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string[0] == 'A' and string[-1] == 'Z' and string.isupper() and len(set(string)) == len(string)",
        "solution_func": "def g():\n    import string\n    import random\n    letters = string.ascii_uppercase\n    length = random.randint(3, 10)\n    return 'A' + ''.join(random.choices(letters, k=length-2)) + 'Z'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random string that starts with 'A', ends with 'Z', is in uppercase, and has no duplicate characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a randomly generated string meets specific criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(kv: tuple, d={'a': 1, 'b': 2, 'c': 3}) -> bool:\n    return d.get(kv[0]) == kv[1]\ndef g():\n    return ('b', 2)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic to check if a key-value pair exists in the dictionary.",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(kv: tuple, d={'a': 1, 'b': 2, 'c': 3}) -> bool:\n    return d.get(kv[0]) == kv[1]",
        "solution_func": "def g():\n    return ('b', 2)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a tuple and a dictionary as input, and checks if the value in the dictionary corresponding to the key in the tuple matches the value in the tuple. The solution function g returns a specific tuple, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary access and tuple manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s) that checks if a given string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple one that involves checking for palindromes in strings. It is suitable for teaching basic string manipulation and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (primality testing) and Mathematical Operations (square root calculation).",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(num) checks if a given number is a prime number, and g() always returns the number 17. The puzzle requires checking if the number 17 is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithm to check if a number is prime and a fixed solution that always returns the number 17. The solution to the puzzle is to verify if the number 17 is correctly identified as a prime number by the function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n\ndef g() -> List[int]:\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list is sorted in ascending order using the `all` function and list comprehension. The solution generates a sorted list [1, 3, 5, 7, 9] and asserts that it is sorted correctly.",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(arr: List[int]) -> bool:\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))",
        "solution_func": "def g() -> List[int]:\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of integers is sorted in ascending order, and a function g that returns a specific list of integers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension, range function, and the all() function in Python. It also reinforces the concept of function composition and testing with assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    clean_str = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_str == clean_str[::-1]\ndef g():\n    return \"A man, a plan, a canal, Panama\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    clean_str = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_str == clean_str[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if a given string is a palindrome after removing non-alphanumeric characters and converting all characters to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, palindrome checking, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(num: int) that checks if a given number is a prime number. The function g() returns the number 17, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a prime number using a function f(num: int) and verifying the solution with a function g() that returns a specific number. The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g(s: str = \"radar\") -> str:\n    return s[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s: str = \"radar\") -> str:\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where the first function checks if a given string is a palindrome and the second function returns the reverse of a default string. The assertion statement checks if the second function returns a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    return np.array_equal(matrix, matrix.T)\n\ndef g(size=3):\n    matrix = np.random.randint(0, 10, (size, size))\n    return matrix + matrix.T\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves matrix manipulation and comparison using NumPy library in Python.",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True"
        ],
        "problem_func": "import numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    return np.array_equal(matrix, matrix.T)",
        "solution_func": "def g(size=3):\n    matrix = np.random.randint(0, 10, (size, size))\n    return matrix + matrix.T",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a random square matrix, adding it to its transpose, and checking if the resulting matrix is symmetric."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of numpy arrays, matrix transposition, and symmetry checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    def is_palindrome(seq):\n        return seq == seq[::-1]\n\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if is_palindrome(lst[i:j+1]):\n                return True\n    return False\n\ndef g() -> list:\n    import random\n    return [random.randint(1, 9) for _ in range(10)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic to check for palindromes in a list of numbers.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    def is_palindrome(seq):\n        return seq == seq[::-1]\n\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if is_palindrome(lst[i:j+1]):\n                return True\n    return False",
        "solution_func": "def g() -> list:\n    import random\n    return [random.randint(1, 9) for _ in range(10)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(lst) that checks if there is a palindrome subsequence in a given list. The solution function g() generates a random list of integers and checks if there is a palindrome subsequence in it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for palindrome subsequences in a list and generating random lists of integers. It can be a good exercise for students to practice list manipulation and algorithmic thinking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    clean_s = ''.join(ch.lower() for ch in s if ch.isalnum())\n    return clean_s == clean_s[::-1]\ndef g():\n    return \"A man, a plan, a canal: Panama!\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation and Conditional Logic are used in the problem f and solution g.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    clean_s = ''.join(ch.lower() for ch in s if ch.isalnum())\n    return clean_s == clean_s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal: Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "Given a string, the puzzle checks if the string is a palindrome after removing non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string is a palindrome after removing non-alphanumeric characters and ignoring case.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a brute force search algorithm.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number or not, and a function g() that returns the number 17. The puzzle requires g() to be passed to f() and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef g():\n    return \"()\" * 3 + \"(\" * 2 + \")\" * 2\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True",
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "solution_func": "def g():\n    return \"()\" * 3 + \"(\" * 2 + \")\" * 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string of parentheses is balanced or not. The function f(s) checks if the parentheses in the input string are balanced, and function g() generates a string with balanced parentheses."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of stack data structure and balancing parentheses in Python. The solution g() generates a string with balanced parentheses, and function f(s) checks if the generated string has balanced parentheses.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(s: str) -> bool:\n    clean_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    return clean_s == clean_s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Regular Expressions",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True"
        ],
        "problem_func": "import re\n\ndef f(s: str) -> bool:\n    clean_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    return clean_s == clean_s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "Given a string, the puzzle function f checks if the string is a palindrome after removing non-alphanumeric characters and ignoring case. The solution function g returns a specific string that is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for palindromes after cleaning the input string. The solution function returns a known palindrome string to satisfy the puzzle condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(email: str) -> bool:\n    return re.match(r'^[\\w\\.-]+@[\\w\\.-]+$', email) is not None\n\ndef g():\n    return \"john.doe@example.com\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation using regular expressions for email validation.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True"
        ],
        "problem_func": "import re\n\ndef f(email: str) -> bool:\n    return re.match(r'^[\\w\\.-]+@[\\w\\.-]+$', email) is not None",
        "solution_func": "def g():\n    return \"john.doe@example.com\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given email address is in a valid format using a regular expression pattern. The solution provides an example email address that meets the required format."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using regular expressions to validate email addresses in Python. The solution demonstrates how to use the provided regular expression pattern to check if a given email address is valid.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(lst: list) -> bool:\n    return sum(lst) > max(lst)\n\ndef g(n=5):\n    return [random.randint(1, 100) for _ in range(n)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and random number generation.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True"
        ],
        "problem_func": "import random\n\ndef f(lst: list) -> bool:\n    return sum(lst) > max(lst)",
        "solution_func": "def g(n=5):\n    return [random.randint(1, 100) for _ in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random numbers and check if the sum of the numbers in the list is greater than the maximum number in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension to generate a list of random numbers and then checking if the sum of the numbers in the list is greater than the maximum number in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s='level'):\n    return ''.join([c*2 for c in s])\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='level'):\n    return ''.join([c*2 for c in s])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(s: str) which checks if a given string is a palindrome, and g(s='level') which duplicates each character in the input string. The assert statement checks if the output of g applied to the default input satisfies the condition of being a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation in Python, specifically reversing a string and duplicating characters. The student needs to recognize that g() duplicates each character in the input string and then check if the resulting string is a palindrome using f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(sequence: List[int]) -> bool:\n    if len(sequence) < 3:\n        return False\n    return all(sequence[i] + sequence[i+1] == sequence[i+2] for i in range(len(sequence) - 2))\ndef g(start=0, length=5):\n    fibonacci_sequence = [start, start + 1]\n    while len(fibonacci_sequence) < length:\n        fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2])\n    return fibonacci_sequence\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and sequence manipulation.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(sequence: List[int]) -> bool:\n    if len(sequence) < 3:\n        return False\n    return all(sequence[i] + sequence[i+1] == sequence[i+2] for i in range(len(sequence) - 2))",
        "solution_func": "def g(start=0, length=5):\n    fibonacci_sequence = [start, start + 1]\n    while len(fibonacci_sequence) < length:\n        fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2])\n    return fibonacci_sequence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given sequence of numbers forms a Fibonacci sequence by summing up consecutive numbers in the sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of Fibonacci sequences and list comprehension in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef f(numbers: List[int]) -> bool:\n    return any(is_prime(num) for num in numbers)\ndef g():\n    return [4, 6, 8, 9, 10, 11]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef f(numbers: List[int]) -> bool:\n    return any(is_prime(num) for num in numbers)",
        "solution_func": "def g():\n    return [4, 6, 8, 9, 10, 11]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if any number in a given list is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if any number in a list is a prime number using the provided is_prime function. The solution function g returns a list of numbers and the puzzle function f checks if any of these numbers are prime.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=20) -> bool:\n    return sum(numbers) == target_sum and all(num > 0 for num in numbers)\n\ndef g(target_sum=20):\n    numbers = [2, 4, 6, 8]\n    return [num for num in numbers if num <= target_sum]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and list manipulation.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target_sum=20) -> bool:\n    return sum(numbers) == target_sum and all(num > 0 for num in numbers)",
        "solution_func": "def g(target_sum=20):\n    numbers = [2, 4, 6, 8]\n    return [num for num in numbers if num <= target_sum]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of a list of numbers is equal to a target sum and all numbers in the list are greater than 0. The solution function g generates a list of numbers that are less than or equal to the target sum. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, summing elements in a list, and using the all() function to check a condition for all elements in a list. The solution function g generates a list based on a condition and the assertion checks if the solution function satisfies the conditions of the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return 'a' * 10\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return 'a' * 10",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a string returned by function g is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given string is a palindrome, and function g that returns a string of 10 'a's. The assertion tests if the string returned by g is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_sum: int, arr=[-2, 1, -3, 4, -1, 2, 1, -5, 4]) -> bool:\n    return max_sum == max([sum(arr[i:j]) for i in range(len(arr)) for j in range(i+1, len(arr)+1)])\ndef g(arr=[-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Dynamic Programming, Array Manipulation, and Algorithm Optimization.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True"
        ],
        "problem_func": "def f(max_sum: int, arr=[-2, 1, -3, 4, -1, 2, 1, -5, 4]) -> bool:\n    return max_sum == max([sum(arr[i:j]) for i in range(len(arr)) for j in range(i+1, len(arr)+1)])",
        "solution_func": "def g(arr=[-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding the maximum sum of a subarray within a given array, and the solution uses Kadane's algorithm to efficiently solve this challenge."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle and solution are related to finding the maximum sum of a subarray within a given array using dynamic programming (Kadane's algorithm). The solution correctly implements the algorithm and passes the assertion test in the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(prefix: str, strs=['flower', 'flow', 'flight']) -> bool:\n    if not strs:\n        return prefix == \"\"\n    min_len = min(len(s) for s in strs)\n    for i in range(min_len):\n        if len(set(s[i] for s in strs)) != 1:\n            return prefix == strs[0][:i]\n    return prefix == strs[0][:min_len]\ndef g(strs=['flower', 'flow', 'flight']):\n    if not strs:\n        return \"\"\n    min_len = min(len(s) for s in strs)\n    for i in range(min_len):\n        if len(set(s[i] for s in strs)) != 1:\n            return strs[0][:i]\n    return strs[0][:min_len]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True"
        ],
        "problem_func": "def f(prefix: str, strs=['flower', 'flow', 'flight']) -> bool:\n    if not strs:\n        return prefix == \"\"\n    min_len = min(len(s) for s in strs)\n    for i in range(min_len):\n        if len(set(s[i] for s in strs)) != 1:\n            return prefix == strs[0][:i]\n    return prefix == strs[0][:min_len]",
        "solution_func": "def g(strs=['flower', 'flow', 'flight']):\n    if not strs:\n        return \"\"\n    min_len = min(len(s) for s in strs)\n    for i in range(min_len):\n        if len(set(s[i] for s in strs)) != 1:\n            return strs[0][:i]\n    return strs[0][:min_len]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given prefix is a common prefix of a list of strings, and g finds the common prefix of a list of strings. The assertion at the end checks if the solution g satisfies the condition of the puzzle f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and comparison to find a common prefix among a list of strings.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=3) -> bool:\n    return s[:n] == 'abc'\ndef g(n=3):\n    return 'abcdefg'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=3) -> bool:\n    return s[:n] == 'abc'",
        "solution_func": "def g(n=3):\n    return 'abcdefg'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the first n characters of a given string are 'abc', and a function g that returns a string 'abcdefg'. The puzzle tests whether f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string slicing in Python and function definition. The solution function g returns a string that starts with 'abc', satisfying the condition of function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name', value='Alice') -> bool:\n    return key in d and d[key] == value\ndef g(key='name', value='Alice'):\n    return {'name': 'Alice', 'age': 25}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='name', value='Alice') -> bool:\n    return key in d and d[key] == value",
        "solution_func": "def g(key='name', value='Alice'):\n    return {'name': 'Alice', 'age': 25}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given key-value pair exists in a dictionary, and a function g that returns a dictionary with specific key-value pairs. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and function evaluation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=5) -> bool:\n    return \"python\" in s * n\ndef g(n=5):\n    return \"python\" * n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=5) -> bool:\n    return \"python\" in s * n",
        "solution_func": "def g(n=5):\n    return \"python\" * n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the word 'python' is present in a string repeated n times, and a function g that returns the word 'python' repeated n times. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function calls, string manipulation, and boolean comparisons in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(primes: List[int]) -> bool:\n    return is_prime(sum(primes))\n\ndef g(limit: int = 10) -> List[int]:\n    primes = []\n    for num in range(2, limit):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(primes: List[int]) -> bool:\n    return is_prime(sum(primes))",
        "solution_func": "def g(limit: int = 10) -> List[int]:\n    primes = []\n    for num in range(2, limit):\n        if is_prime(num):\n            primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the sum of a list of prime numbers is also a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement functions to check for prime numbers and to generate a list of prime numbers up to a given limit.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: int) -> bool:\n    return str(palindrome) == str(palindrome)[::-1]\n    \ndef g():\n    for i in range(999, 900, -1):\n        for j in range(999, 900, -1):\n            product = i * j\n            if str(product) == str(product)[::-1]:\n                return product\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check for palindromes and brute force search to find the largest palindrome product of two 3-digit numbers.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: int) -> bool:\n    return str(palindrome) == str(palindrome)[::-1]",
        "solution_func": "def g():\n    for i in range(999, 900, -1):\n        for j in range(999, 900, -1):\n            product = i * j\n            if str(product) == str(product)[::-1]:\n                return product",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding the largest palindrome that is a product of two 3-digit numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to check for palindromes and iterate through a range of numbers to find the solution.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='AB') -> bool:\n    return s.startswith('A') and s.endswith('B') and len(s) % 2 == 0 and s[1:-1].isnumeric()\n\ndef g(pattern='AB'):\n    return 'A' + '1' * 6 + 'B'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='AB') -> bool:\n    return s.startswith('A') and s.endswith('B') and len(s) % 2 == 0 and s[1:-1].isnumeric()",
        "solution_func": "def g(pattern='AB'):\n    return 'A' + '1' * 6 + 'B'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string starts with 'A', ends with 'B', has an even length, and all characters in between are numeric. The solution function g generates a string that satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and condition checking in Python. It tests the understanding of string methods and logical conditions in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='ABBABB', length=12) -> bool:\n    return s[:len(pattern)] == pattern and len(s) == length\ndef g(pattern='ABBABB', length=12):\n    return pattern + '*' * (length - len(pattern))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='ABBABB', length=12) -> bool:\n    return s[:len(pattern)] == pattern and len(s) == length",
        "solution_func": "def g(pattern='ABBABB', length=12):\n    return pattern + '*' * (length - len(pattern))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if the input string matches a specific pattern and has a certain length, and g generates a string based on the pattern and length. The assert statement checks if the output of g satisfies the conditions of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, string manipulation, and assertion testing in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(matrix: List[List[int]], target_sum=15, rows=3, cols=3) -> bool:\n    return all(sum(row) == target_sum for row in matrix) and len(matrix) == rows and all(len(row) == cols for row in matrix)\ndef g(target_sum=15, rows=3, cols=3):\n    return [[1, 5, 9], [3, 5, 7], [2, 6, 7]]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and validation of target sum, rows, and columns. It also includes list comprehension and assertion testing.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(matrix: List[List[int]], target_sum=15, rows=3, cols=3) -> bool:\n    return all(sum(row) == target_sum for row in matrix) and len(matrix) == rows and all(len(row) == cols for row in matrix)",
        "solution_func": "def g(target_sum=15, rows=3, cols=3):\n    return [[1, 5, 9], [3, 5, 7], [2, 6, 7]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given matrix has a target sum in each row, has a specific number of rows and columns. The solution function g returns a specific matrix that satisfies the conditions set by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists and list comprehensions in Python to check conditions on a matrix. It also requires understanding of function parameters and return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, target=42) -> bool:\n    return result == target\ndef g(target=42):\n    return 6 * 7\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, target=42) -> bool:\n    return result == target",
        "solution_func": "def g(target=42):\n    return 6 * 7",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the result is equal to a target value, and a function g that returns the product of 6 and 7. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple comparison task where f checks if the result is equal to the target value, and g returns a specific value. The assertion tests if the result of g satisfies the condition in f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, numbers=[2, 5, 8, 3, 6, 9, 12]) -> bool:\n    return result % 4 == 0\n\ndef g(numbers=[2, 5, 8, 3, 6, 9, 12]):\n    return sum(filter(lambda x: x % 2 == 0, numbers))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, numbers=[2, 5, 8, 3, 6, 9, 12]) -> bool:\n    return result % 4 == 0",
        "solution_func": "def g(numbers=[2, 5, 8, 3, 6, 9, 12]):\n    return sum(filter(lambda x: x % 2 == 0, numbers))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks if the sum of even numbers in a given list is divisible by 4."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use filter and lambda functions to filter even numbers from a list and then checking if the sum of these even numbers is divisible by 4.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: set, prime_set={2, 3, 5, 7, 11, 13, 17, 19}) -> bool:\n    return result == prime_set\n\ndef g():\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    return {num for num in range(2, 20) if is_prime(num)}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves set operations and number theory (primes). The puzzle function f checks if the result set is equal to a predefined set of prime numbers. The solution function g generates a set of prime numbers within a given range using a prime-checking function. The solution is verified by asserting that f(g()) returns True.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: set, prime_set={2, 3, 5, 7, 11, 13, 17, 19}) -> bool:\n    return result == prime_set",
        "solution_func": "def g():\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    return {num for num in range(2, 20) if is_prime(num)}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given set is equal to a predefined set of prime numbers, and a function g that generates a set of prime numbers from 2 to 19. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding sets, prime number checking, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(palindromes: List[int], n=1000) -> bool:\n    return all(str(num) == str(num)[::-1] for num in palindromes) and all(num < n for num in palindromes)\ndef g(n = 1000):\n    return [num for num in range(1, n) if str(num) == str(num)[::-1]]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check for palindromes and filtering numbers based on a condition. It also uses list comprehension and assertion for testing the solution.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(palindromes: List[int], n=1000) -> bool:\n    return all(str(num) == str(num)[::-1] for num in palindromes) and all(num < n for num in palindromes)",
        "solution_func": "def g(n = 1000):\n    return [num for num in range(1, n) if str(num) == str(num)[::-1]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to create a function that checks if a list of numbers are palindromes and less than a given number. The solution function generates a list of palindromic numbers less than the given number and checks if the function f returns True for this list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, string manipulation, and boolean expressions in Python. It tests the students' ability to create functions that meet specific criteria and use them to validate solutions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(missing_letters: List[str], sentence='The quick brown fox jumps over the lazy dog') -> bool:\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(missing_letters) == alphabet.difference(set(sentence.lower()))\ndef g(sentence='The quick brown fox jumps over the lazy dog'):\n    return [chr(letter) for letter in range(97, 123) if chr(letter) not in sentence.lower()]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(missing_letters: List[str], sentence='The quick brown fox jumps over the lazy dog') -> bool:\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(missing_letters) == alphabet.difference(set(sentence.lower()))",
        "solution_func": "def g(sentence='The quick brown fox jumps over the lazy dog'):\n    return [chr(letter) for letter in range(97, 123) if chr(letter) not in sentence.lower()]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that returns a list of missing letters in a given sentence compared to the English alphabet."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using sets and list comprehension in Python to find missing letters in a sentence compared to the English alphabet.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(common_ratios: List[float], nums=[2, 6, 18, 54, 162]) -> bool:\n    return all(nums[i+1] / nums[i] == common_ratios[0] for i in range(len(nums) - 1)) and all(ratio != 1 for ratio in common_ratios)\ndef g(nums=[2, 6, 18, 54, 162]):\n    ratios = [nums[i+1] / nums[i] for i in range(len(nums) - 1)]\n    return [ratio for ratio in set(ratios) if ratios.count(ratio) > 1]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(common_ratios: List[float], nums=[2, 6, 18, 54, 162]) -> bool:\n    return all(nums[i+1] / nums[i] == common_ratios[0] for i in range(len(nums) - 1)) and all(ratio != 1 for ratio in common_ratios)",
        "solution_func": "def g(nums=[2, 6, 18, 54, 162]):\n    ratios = [nums[i+1] / nums[i] for i in range(len(nums) - 1)]\n    return [ratio for ratio in set(ratios) if ratios.count(ratio) > 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of common ratios is valid based on a given list of numbers, and a function g that generates a list of common ratios from a given list of numbers. The solution function g returns a list of common ratios that occur more than once in the generated ratios list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, iteration, and list manipulation in Python. It also requires knowledge of the all() function and set data structure. The solution function g uses list comprehension and set to find common ratios that occur more than once.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return max(nums) - min(nums) == max([abs(nums[i] - nums[i+1]) for i in range(len(nums)-1)])\ndef g(numbers: List[int] = [3, 8, 1, 10, 5]):\n    return [abs(numbers[i] - numbers[i+1]) for i in range(len(numbers)-1)]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return max(nums) - min(nums) == max([abs(nums[i] - nums[i+1]) for i in range(len(nums)-1)])",
        "solution_func": "def g(numbers: List[int] = [3, 8, 1, 10, 5]):\n    return [abs(numbers[i] - numbers[i+1]) for i in range(len(numbers)-1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the absolute difference between consecutive elements in a list is equal to the difference between the maximum and minimum elements in the list. The solution function g generates a list of absolute differences between consecutive elements in a given list, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation and comparison operations in Python, making it suitable for teaching Python programming concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, is_palindrome=True) -> bool:\n    return text == text[::-1]\ndef g(is_palindrome=True):\n    return 'racecar' if is_palindrome else 'python'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, is_palindrome=True) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g(is_palindrome=True):\n    return 'racecar' if is_palindrome else 'python'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns either 'racecar' or 'python' based on a boolean input. The puzzle requires g to return 'racecar' in order for f to return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and boolean parameters in Python functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, is_sorted=True) -> bool:\n    return lst == sorted(lst) if is_sorted else True\ndef g(is_sorted=True):\n    return [1, 2, 3, 4, 5] if is_sorted else [5, 3, 1, 2, 4]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if it is sorted or not.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, is_sorted=True) -> bool:\n    return lst == sorted(lst) if is_sorted else True",
        "solution_func": "def g(is_sorted=True):\n    return [1, 2, 3, 4, 5] if is_sorted else [5, 3, 1, 2, 4]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(lst: list, is_sorted=True) -> bool and g(is_sorted=True), where f checks if a list is sorted and g returns a sorted or unsorted list. The assert statement checks if the output of g satisfies the condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list is sorted using the f function and generating a sorted or unsorted list using the g function. The assert statement ensures that the output of g meets the sorting condition of f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, is_prime=True) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(is_prime=True):\n    num = 13 if is_prime else 10\n    while True:\n        num += 1\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            return num\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) and Mathematical Operations topics.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, is_prime=True) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(is_prime=True):\n    num = 13 if is_prime else 10\n    while True:\n        num += 1\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num: int, is_prime=True) that checks if a given number is prime, and a function g(is_prime=True) that generates the next prime number after a given number. The puzzle requires finding the next prime number after a specific number and verifying if it is indeed a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, loops, and conditionals in Python. It requires students to implement a function to check for prime numbers and another function to generate the next prime number. This puzzle can be used to teach Python programming concepts related to prime numbers and algorithmic thinking.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: str, n=5) -> bool:\n    return len(result) == n and result.isalpha()\ndef g(n=5):\n    import random\n    return ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=n))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and importing modules (random).",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: str, n=5) -> bool:\n    return len(result) == n and result.isalpha()",
        "solution_func": "def g(n=5):\n    import random\n    return ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=n))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a random string of length 5 and check if it consists of alphabetic characters only."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random string of a specified length and checking if it contains only alphabetic characters. The solution function uses the random.choices() method to generate the random string and the isalpha() method to check if it consists of alphabetic characters.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(area: int, length=8, width=4) -> bool:\n    return area == length * width\n\ndef g(length=8, width=4):\n    return length * width\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(area: int, length=8, width=4) -> bool:\n    return area == length * width",
        "solution_func": "def g(length=8, width=4):\n    return length * width",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the area is equal to the product of length and width, and a function g that calculates the product of length and width. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, parameter passing, and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sorted_list: list, nums=[5, 2, 8, 1, 9]) -> bool:\n    return sorted_list == sorted(nums)\n\ndef g(nums=[5, 2, 8, 1, 9]):\n    return sorted(nums)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if it is equal to a predefined sorted list. This involves concepts of sorting and list manipulation.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(sorted_list: list, nums=[5, 2, 8, 1, 9]) -> bool:\n    return sorted_list == sorted(nums)",
        "solution_func": "def g(nums=[5, 2, 8, 1, 9]):\n    return sorted(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that checks if a given list is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves comparing a sorted list with a predefined list to check if they are equal. The solution function sorts the predefined list and returns it for comparison.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: set) -> bool:\n    return s == {1, 2, 3, 4, 5}\ndef g():\n    return {1, 2, 3} | {3, 4, 5}\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations to check if a set is equal to another set.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: set) -> bool:\n    return s == {1, 2, 3, 4, 5}",
        "solution_func": "def g():\n    return {1, 2, 3} | {3, 4, 5}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given set is equal to a specific set, and a function g that returns the union of two sets. The assertion checks if the function f applied to the result of function g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding sets and set operations in Python, as well as how to define functions and use assertions for testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndef g():\n    return [x for sublist in [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for x in sublist]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and comparison.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "solution_func": "def g():\n    return [x for sublist in [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for x in sublist]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a function that generates a list of numbers in a specific pattern and then check if the generated list matches a predefined list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves list comprehension to generate a list of numbers in a specific pattern and then compares this generated list with a predefined list to check for equality.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(max_element: int, value=99, numbers=[12, 45, 99, 23, 76]) -> bool:\n    return max_element == max(numbers) and max_element == value\ndef g(value=99, numbers=[12, 45, 99, 23, 76]):\n    return max(numbers)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
            "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(max_element: int, value=99, numbers=[12, 45, 99, 23, 76]) -> bool:\n    return max_element == max(numbers) and max_element == value",
        "solution_func": "def g(value=99, numbers=[12, 45, 99, 23, 76]):\n    return max(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the maximum element in a list and checking if it matches a given value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to find the maximum element in a list and comparing it to a given value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\nimport random\n\ndef f(s: List[Tuple[int, int]]) -> bool:\n    return any(sum(pair) > 10 for pair in s)\n\ndef g() -> List[Tuple[int, int]]:\n    pairs = [(random.randint(1, 10), random.randint(1, 10)) for _ in range(100)]\n    return pairs\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic and importing modules (random). It generates a list of tuples with random integers and checks if the sum of any pair is greater than 10.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True",
            "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\nimport random\n\ndef f(s: List[Tuple[int, int]]) -> bool:\n    return any(sum(pair) > 10 for pair in s)",
        "solution_func": "def g() -> List[Tuple[int, int]]:\n    pairs = [(random.randint(1, 10), random.randint(1, 10)) for _ in range(100)]\n    return pairs",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of tuples with random integers, and then checking if the sum of any tuple is greater than 10."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of tuples with random integers and checking if the sum of any tuple in the list is greater than 10 using the function f(). The solution function g() generates the list of tuples and the assert statement checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nimport random\n\ndef f(s: List[str]) -> bool:\n    return any(len(word) > 5 for word in s)\n\ndef g() -> List[str]:\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    palindromes = [random.choice(letters) + ''.join(random.choice(letters) for _ in range(random.randint(1, 5))) + random.choice(letters) for _ in range(100)]\n    return palindromes\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Randomization, List Comprehension",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True",
            "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\nimport random\n\ndef f(s: List[str]) -> bool:\n    return any(len(word) > 5 for word in s)",
        "solution_func": "def g() -> List[str]:\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    palindromes = [random.choice(letters) + ''.join(random.choice(letters) for _ in range(random.randint(1, 5))) + random.choice(letters) for _ in range(100)]\n    return palindromes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of random strings and checking if any string in the list has a length greater than 5."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks if any string in a given list has a length greater than 5. The solution function generates a list of random strings and returns it. The assertion checks if the function f applied to the output of function g returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime or not using a simple algorithm. It does not directly relate to any specific topic from the list provided.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function f(num: int) that checks if a given number is a prime number. The student also needs to define a function g() that returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a prime number and returning a specific number. The student needs to understand how to define functions, use loops, and perform basic arithmetic operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in ascending order. This relates to topics such as Sorting and Ordering, List Operations, and Conditional Logic.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is sorted in non-decreasing order. The solution function g returns a sorted list of integers, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of integers is sorted in non-decreasing order, which is a fundamental concept in programming. It provides a good exercise for students to practice list manipulation and boolean expressions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(ch.lower() for ch in s if ch.isalnum())\n    return s == s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(ch.lower() for ch in s if ch.isalnum())\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function to check if a given string is a palindrome after removing non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a string is a palindrome after removing non-alphanumeric characters and ignoring case.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(acronym: str, text='Central Processing Unit') -> bool:\n    words = text.split()\n    return acronym == ''.join(word[0].upper() for word in words)\ndef g(text='Central Processing Unit'):\n    return ''.join(word[0].upper() for word in text.split())\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True"
        ],
        "problem_func": "def f(acronym: str, text='Central Processing Unit') -> bool:\n    words = text.split()\n    return acronym == ''.join(word[0].upper() for word in words)",
        "solution_func": "def g(text='Central Processing Unit'):\n    return ''.join(word[0].upper() for word in text.split())",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given acronym matches the first letters of words in a given text. The solution function g generates an acronym from a given text and returns it. The puzzle tests if the solution function g satisfies the condition of the function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, function definition, and function invocation in Python. It tests the student's ability to define functions, manipulate strings, and understand function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(result: List[int], pattern=[1, 2, 3], length=10) -> bool:\n    return result == pattern * (length // len(pattern)) + pattern[:length % len(pattern)]\ndef g(pattern=[1, 2, 3], length=10):\n    return pattern * (length // len(pattern)) + pattern[:length % len(pattern)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and comparison. It also includes default parameter values in function definition. The solution function g() generates a list based on the given pattern and length parameters. The assert statement checks if the result of g() satisfies the condition in f().",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(result: List[int], pattern=[1, 2, 3], length=10) -> bool:\n    return result == pattern * (length // len(pattern)) + pattern[:length % len(pattern)]",
        "solution_func": "def g(pattern=[1, 2, 3], length=10):\n    return pattern * (length // len(pattern)) + pattern[:length % len(pattern)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list of integers matches a specific pattern repeated a certain number of times. The solution function g generates a list based on the pattern and length provided, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, repetition, and comparison in Python. It tests the student's ability to define functions and use list operations effectively.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(output: int, key='b', value=42) -> bool:\n    return output == {key: value}.get(key, 0)\ndef g(key='b', value=42):\n    return {key: value}.get(key, 0)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and comparison, which falls under the topic of data structures and conditional logic.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True"
        ],
        "problem_func": "def f(output: int, key='b', value=42) -> bool:\n    return output == {key: value}.get(key, 0)",
        "solution_func": "def g(key='b', value=42):\n    return {key: value}.get(key, 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if the output of g matches a specific key-value pair in a dictionary."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary access and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, n=5) -> bool:\n    return result == n * (n + 1) // 2\ndef g(n=5):\n    if n == 0:\n        return 0\n    return n + g(n - 1)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and recursion.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, n=5) -> bool:\n    return result == n * (n + 1) // 2",
        "solution_func": "def g(n=5):\n    if n == 0:\n        return 0\n    return n + g(n - 1)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the result of g is equal to the sum of the first n natural numbers. The recursive function g calculates the sum of the first n natural numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple mathematical concept of summing the first n natural numbers using recursion. It can be used to teach recursion and mathematical calculations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(ch.lower() for ch in s if ch.isalnum())\n    return s == s[::-1]\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(ch.lower() for ch in s if ch.isalnum())\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function to check if a given string is a palindrome after removing non-alphanumeric characters and converting all characters to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string is a palindrome after removing non-alphanumeric characters and converting all characters to lowercase. The solution function g() returns a specific string that is a palindrome after the required modifications.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sentence: str, vowels='aeiou') -> bool:\n    return all(v in sentence.lower() for v in vowels)\ndef g(vowels='aeiou'):\n    return \"The quick brown fox jumps over the lazy dog.\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(sentence: str, vowels='aeiou') -> bool:\n    return all(v in sentence.lower() for v in vowels)",
        "solution_func": "def g(vowels='aeiou'):\n    return \"The quick brown fox jumps over the lazy dog.\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all vowels in a given sentence are present, and a function g that returns a specific sentence. The puzzle tests whether function f correctly identifies the presence of vowels in the sentence returned by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function to check for specific conditions in a given input and ensuring that the function returns the expected result when tested with a predefined input.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(unique_chars: str, s='programmingpuzzles') -> bool:\n    return set(s) == set(unique_chars)\ndef g(s='programmingpuzzles'):\n    return ''.join(sorted(set(s), key=lambda x: s.index(x)))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(unique_chars: str, s='programmingpuzzles') -> bool:\n    return set(s) == set(unique_chars)",
        "solution_func": "def g(s='programmingpuzzles'):\n    return ''.join(sorted(set(s), key=lambda x: s.index(x)))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string contains only unique characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to create a function that returns True if a given string contains only unique characters, and then implement a solution function that generates a string with unique characters from a given string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number or not, and a function g() that returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\ndef g():\n    return [1, 3, 5, 7, 9]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in ascending order. This requires understanding of list manipulation and comparison operations.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is sorted in ascending order, and a function g that returns a specific sorted list of integers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the ability to define functions and use them to check a specific condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(seq: list, n=3, m=6) -> bool:\n    return all(seq[i] == n + i for i in range(m))\ndef g(n = 3, m = 6):\n    return list(range(n, n + m))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking if the elements in the list follow a specific pattern.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(seq: list, n=3, m=6) -> bool:\n    return all(seq[i] == n + i for i in range(m))",
        "solution_func": "def g(n = 3, m = 6):\n    return list(range(n, n + m))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list of numbers is in a specific sequence, and another function g that generates a list of numbers in a specific sequence. The assertion at the end checks if function f returns True when applied to the output of function g with default parameters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the ability to define functions with default parameters and use them together to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 13\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 13",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns the number 13 and assert that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to understand prime number checking and function calling in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g(length=10):\n    base_text = 'racecar' if length % 2 == 0 else 'radar'\n    return base_text[:length]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g(length=10):\n    base_text = 'racecar' if length % 2 == 0 else 'radar'\n    return base_text[:length]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if the text generated by function g is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines two functions, f(text: str) -> bool which checks if a given text is a palindrome, and g(length=10) which generates a text based on the length provided. The assert statement ensures that the text generated by g is indeed a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, is_palindrome=True) -> bool:\n    s = ''.join(char.lower() for char in s if char.isalnum())\n    return s == s[::-1]\ndef g(s='A man, a plan, a canal, Panama!'):\n    return ''.join(char for char in s if char.isalnum())\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation and Conditional Logic are used in the problem f and solution g.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, is_palindrome=True) -> bool:\n    s = ''.join(char.lower() for char in s if char.isalnum())\n    return s == s[::-1]",
        "solution_func": "def g(s='A man, a plan, a canal, Panama!'):\n    return ''.join(char for char in s if char.isalnum())",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome after removing non-alphanumeric characters, and a function g that removes non-alphanumeric characters from a default string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle focuses on string manipulation, checking for palindromes, and using list comprehensions in Python. It is a suitable challenge for students learning Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(pairs: list, has_same_sum=True) -> bool:\n    return any(sum(pair) for pair in pairs) == has_same_sum\ndef g():\n    return [(3, 4), (2, 5), (6, 1), (9, -2)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True"
        ],
        "problem_func": "def f(pairs: list, has_same_sum=True) -> bool:\n    return any(sum(pair) for pair in pairs) == has_same_sum",
        "solution_func": "def g():\n    return [(3, 4), (2, 5), (6, 1), (9, -2)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of pairs of numbers and a boolean flag as input, and checks if the sum of any pair of numbers in the list is equal to the boolean flag. The solution function g returns a specific list of pairs to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, summing pairs of numbers, and boolean comparison in Python. The solution function g provides a list of pairs that meets the condition in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='ABCABC') -> bool:\n    return s == pattern * (len(s) // len(pattern)) + pattern[:len(s) % len(pattern)]\ndef g(pattern='ABCABC'):\n    return pattern * 3\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Pattern Recognition",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='ABCABC') -> bool:\n    return s == pattern * (len(s) // len(pattern)) + pattern[:len(s) % len(pattern)]",
        "solution_func": "def g(pattern='ABCABC'):\n    return pattern * 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string matches a specific pattern repeated a certain number of times, and a function g that returns the pattern repeated three times. The puzzle tests whether f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, repetition, and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(m: int, n=5) -> bool:\n    product = 1\n    for i in range(1, n+1):\n        product *= i\n    return product == m\ndef g(n=5):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
            "def f(z: float, v=9, d=0.0001) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 9, d = 0.0001):\n    return v * d\nassert f(g()) == True"
        ],
        "problem_func": "def f(m: int, n=5) -> bool:\n    product = 1\n    for i in range(1, n+1):\n        product *= i\n    return product == m",
        "solution_func": "def g(n=5):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given integer is equal to the factorial of another integer, and a function g that calculates the factorial of a given integer. The assertion at the end checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate factorials and how to use functions to check if a condition is met.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: int) -> bool:\n    return str(x) == str(x)[::-1]\n\ndef g():\n    return 123454321\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a number is a palindrome.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: int) -> bool:\n    return str(x) == str(x)[::-1]",
        "solution_func": "def g():\n    return 123454321",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given number is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(x) that checks if a given integer x is a palindrome. The solution function g() returns a specific palindrome number. The assertion checks if the solution function g() satisfies the condition of being a palindrome.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, is_palindrome=True) -> bool:\n    s = ''.join(s.lower().split())\n    return s == s[::-1]\ndef g(s=''):\n    return s.lower().replace(\" \", \"\")\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, is_palindrome=True) -> bool:\n    s = ''.join(s.lower().split())\n    return s == s[::-1]",
        "solution_func": "def g(s=''):\n    return s.lower().replace(\" \", \"\")",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome after removing spaces and converting to lowercase, and a function g that removes spaces and converts a given string to lowercase. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, checking for palindromes, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], has_duplicates=False) -> bool:\n    return len(nums) != len(set(nums))\n\ndef g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    nums.append(nums[0])\n    return nums\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for duplicates in a list of numbers and modifying the list by adding the first element to the end. The solution function modifies the list by adding the first element to the end and then checks for duplicates using the provided function. The assertion at the end checks if the function returns True for the modified list.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], has_duplicates=False) -> bool:\n    return len(nums) != len(set(nums))",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    nums.append(nums[0])\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of numbers contains duplicates, and a function g that appends the first element of the list to the end. The assertion checks if f applied to the result of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation and checking for duplicates in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    return all((numbers[i] % 2 == 0 and numbers[i + 1] % 2 == 0) for i in range(len(numbers) - 1))\ndef g():\n    return [i for i in range(2, 10, 2)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all consecutive pairs of numbers in a list are even.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int]) -> bool:\n    return all((numbers[i] % 2 == 0 and numbers[i + 1] % 2 == 0) for i in range(len(numbers) - 1))",
        "solution_func": "def g():\n    return [i for i in range(2, 10, 2)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all consecutive pairs of numbers in a list are even, and a function g that generates a list of even numbers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, modulo operator, and the all function in Python. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\ndef g():\n    return 'radar'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    return 'radar'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns the text 'radar'. The assertion at the end confirms that the function f returns True when applied to the output of function g.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] <= numbers[i + 1] for i in range(len(numbers) - 1))\ndef g():\n    return [1, 3, 5, 7, 9]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in ascending order.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] <= numbers[i + 1] for i in range(len(numbers) - 1))",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers is sorted in ascending order, and then providing a solution function g that returns a sorted list of numbers to pass the check in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. The solution function g() returns a sorted list to satisfy the condition in function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, mod='racecar') -> bool:\n    return s == s[::-1]\ndef g(mod='racecar'):\n    return mod\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, mod='racecar') -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(mod='racecar'):\n    return mod",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it to its reverse. The solution returns a predefined string 'racecar'."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple palindrome checking algorithm where the solution always returns the string 'racecar', satisfying the condition f(g()) == True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str, char='x', count=5) -> bool:\n    return string.count(char) == count and string.startswith('a') and string.endswith('z')\n    \ndef g(char='x', count=5):\n    return 'a' + char * count + 'z'\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(string: str, char='x', count=5) -> bool:\n    return string.count(char) == count and string.startswith('a') and string.endswith('z')",
        "solution_func": "def g(char='x', count=5):\n    return 'a' + char * count + 'z'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string starts with 'a', ends with 'z', and contains a specified number of a specified character. The solution function g generates a string that meets the criteria set by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, function parameters, and boolean expressions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[str], n=3) -> bool:\n    return len(lst) == n and all(s.islower() for s in lst)\n    \ndef g(n=3):\n    return [chr(i) for i in range(97, 97+n)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[str], n=3) -> bool:\n    return len(lst) == n and all(s.islower() for s in lst)",
        "solution_func": "def g(n=3):\n    return [chr(i) for i in range(97, 97+n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and a default value n, and checks if the length of the list is equal to n and all strings are lowercase. The solution function g generates a list of lowercase letters based on the value of n and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, character encoding, and list manipulation in Python. It also tests the understanding of function parameters and return types.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(num: int) -> bool:\n    return is_prime(num)\n\ndef g(seed=7):\n    prime_candidate = seed + 1\n    while True:\n        if is_prime(prime_candidate):\n            return prime_candidate\n        prime_candidate += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]\ndef g():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(num: int) -> bool:\n    return is_prime(num)",
        "solution_func": "def g(seed=7):\n    prime_candidate = seed + 1\n    while True:\n        if is_prime(prime_candidate):\n            return prime_candidate\n        prime_candidate += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given number is a prime number using a function is_prime, and finding the next prime number starting from a seed using a function g. The assertion at the end confirms that the solution function g returns a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to find the next prime number. It tests the student's knowledge of prime number checking and looping until a condition is met.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g(length=5):\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    half_length = length // 2\n    palindrome_half = ''.join(random.choices(letters, k=half_length))\n    palindrome = palindrome_half + (palindrome_half[::-1] if length % 2 == 0 else palindrome_half[-2::-1])\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g(length=5):\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    half_length = length // 2\n    palindrome_half = ''.join(random.choices(letters, k=half_length))\n    palindrome = palindrome_half + (palindrome_half[::-1] if length % 2 == 0 else palindrome_half[-2::-1])\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random string and checking if it is a palindrome by comparing it with its reverse. The solution function generates a palindrome string based on the specified length.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    import sympy\n    return sympy.randprime(1, 100)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) and Importing Modules (Sympy).",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import sympy\n    return sympy.randprime(1, 100)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number or not, and a function g() that generates a random prime number between 1 and 100 using the sympy library. The puzzle requires g() to generate a prime number that satisfies the condition of f(num) returning True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a randomly generated prime number between 1 and 100 is correctly identified as a prime number by the f(num) function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    import random\n    nums = random.choices(range(1, 10), k=5)\n    return nums\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as List Manipulation, Randomization, and Brute Force Search.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], target=10) -> bool:\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    import random\n    nums = random.choices(range(1, 10), k=5)\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function f that takes a list of integers and a target integer, and checks if there exists a subarray in the list that sums up to the target. The solution function g generates a random list of integers and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding nested loops, list slicing, and summing subarrays. It also requires knowledge of generating random numbers in Python. The solution function g should return a list of integers that sum up to the target value.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, word='python') -> bool:\n    from collections import Counter\n    s_counter = Counter(s)\n    word_counter = Counter(word)\n    return all(s_counter[char] >= count for char, count in word_counter.items())\n\ndef g(word='python'):\n    import random\n    word_list = list(word)\n    random.shuffle(word_list)\n    return ''.join(word_list)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and importing modules (collections). It also includes randomization (using random.shuffle) and assertion testing.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, word='python') -> bool:\n    from collections import Counter\n    s_counter = Counter(s)\n    word_counter = Counter(word)\n    return all(s_counter[char] >= count for char, count in word_counter.items())",
        "solution_func": "def g(word='python'):\n    import random\n    word_list = list(word)\n    random.shuffle(word_list)\n    return ''.join(word_list)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement two functions: f(s: str, word='python') -> bool, which checks if a given string contains all the characters of a specified word, and g(word='python'), which shuffles the characters of the word. The puzzle tests the students' understanding of string manipulation and algorithmic logic."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves implementing two functions, one to check if a string contains all characters of a word and another to shuffle the characters of the word. The solution function shuffles the characters of the word and the puzzle is solved if the shuffled word satisfies the condition in the first function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(sentence: str) -> bool:\n    cleaned_sentence = re.sub(r'[^\\w\\s]', '', sentence).replace(' ', '').lower()\n    return cleaned_sentence == cleaned_sentence[::-1]\n\nimport random\ndef g():\n    sentences = [\"A man, a plan, a canal, Panama!\", \"Was it a car or a cat I saw?\", \"No 'x' in Nixon\", \"Racecar\"]\n    return random.choice(sentences)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            1
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic. The solution uses random selection from a list of sentences and assertion for validation.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True"
        ],
        "problem_func": "import re\n\ndef f(sentence: str) -> bool:\n    cleaned_sentence = re.sub(r'[^\\w\\s]', '', sentence).replace(' ', '').lower()\n    return cleaned_sentence == cleaned_sentence[::-1]\n\nimport random",
        "solution_func": "def g():\n    sentences = [\"A man, a plan, a canal, Panama!\", \"Was it a car or a cat I saw?\", \"No 'x' in Nixon\", \"Racecar\"]\n    return random.choice(sentences)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given sentence is a palindrome after removing special characters, spaces, and converting to lowercase. The function g generates random sentences and the assert statement checks if the generated sentence is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, regular expressions, and understanding of palindromes in Python. It is a good exercise to test students' knowledge of string operations and functions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return 'racecar'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return 'racecar'",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s: str) -> bool that checks if a string is a palindrome, provide a string 'racecar' to function g() to return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string is a palindrome using the function f(s: str) -> bool and providing the string 'racecar' to function g() to return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], n=20) -> bool:\n    return all(num % n == 0 for num in nums) and len(set(nums)) == len(nums)\ndef g(n=20):\n    nums = list(range(1, n * 5 + 1))\n    return [num * n for num in nums if num % n == 0]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list operations, and set operations.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], n=20) -> bool:\n    return all(num % n == 0 for num in nums) and len(set(nums)) == len(nums)",
        "solution_func": "def g(n=20):\n    nums = list(range(1, n * 5 + 1))\n    return [num * n for num in nums if num % n == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define a function f that checks if all elements in a list are divisible by a given number n and if the list contains unique elements. The solution function g generates a list of numbers that are multiples of n and satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, set operations, and function composition in Python. It tests the students' ability to write functions that meet specific criteria and generate desired outputs.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_sum: int, nums=[3, 2, 7, 10, 5, 3, 2]) -> bool:\n    incl = 0\n    excl = 0\n    for num in nums:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum\n\ndef g(nums=[3, 2, 7, 10, 5, 3, 2]):\n    incl = 0\n    excl = 0\n    for num in nums:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dynamic programming to solve the challenge of finding the maximum sum of non-adjacent numbers in a list. It also includes mathematical operations and conditional logic.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "def f(max_sum: int, nums=[3, 2, 7, 10, 5, 3, 2]) -> bool:\n    incl = 0\n    excl = 0\n    for num in nums:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum",
        "solution_func": "def g(nums=[3, 2, 7, 10, 5, 3, 2]):\n    incl = 0\n    excl = 0\n    for num in nums:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the maximum sum of a subsequence of a list of numbers matches a given value, and g calculates the maximum sum of a subsequence of a list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves dynamic programming concepts and requires understanding of how to calculate the maximum sum of a subsequence. It is suitable for teaching Python programming to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(missing_num: int, nums=[1, 2, 3, 4, 6, 7, 8, 9, 10]) -> bool:\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum == missing_num\n\ndef g(nums=[1, 2, 3, 4, 6, 7, 8, 9, 10]):\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to find a missing number in a sequence of numbers.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True"
        ],
        "problem_func": "def f(missing_num: int, nums=[1, 2, 3, 4, 6, 7, 8, 9, 10]) -> bool:\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum == missing_num",
        "solution_func": "def g(nums=[1, 2, 3, 4, 6, 7, 8, 9, 10]):\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a missing number in a list of consecutive numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list manipulation, arithmetic operations, and function calls in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(fibonacci: List[int], limit=100) -> bool:\n    return all(fibonacci[i] + fibonacci[i + 1] == fibonacci[i + 2] for i in range(len(fibonacci) - 2)) and max(fibonacci) < limit\ndef g(limit = 100):\n    fibonacci = [0, 1]\n    while fibonacci[-1] + fibonacci[-2] < limit:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Recursion, Mathematical Operations, and List Manipulation.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(fibonacci: List[int], limit=100) -> bool:\n    return all(fibonacci[i] + fibonacci[i + 1] == fibonacci[i + 2] for i in range(len(fibonacci) - 2)) and max(fibonacci) < limit",
        "solution_func": "def g(limit = 100):\n    fibonacci = [0, 1]\n    while fibonacci[-1] + fibonacci[-2] < limit:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers forms a Fibonacci sequence up to a certain limit. The function f checks if the list is a Fibonacci sequence and if the maximum number in the list is below a specified limit. The function g generates a Fibonacci sequence up to the specified limit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding Fibonacci sequences, list manipulation, and conditional statements in Python. It provides a practical application of generating and verifying Fibonacci sequences within a limit.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_product: int, nums=[2, 5, 3, 8, 10, 6]) -> bool:\n    max_num1, max_num2 = sorted(nums)[-2:]\n    return max_num1 * max_num2 == max_product\n\ndef g(nums=[2, 5, 3, 8, 10, 6]):\n    max_num1, max_num2 = sorted(nums)[-2:]\n    return max_num1 * max_num2\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and sorting and ordering.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
            "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True"
        ],
        "problem_func": "def f(max_product: int, nums=[2, 5, 3, 8, 10, 6]) -> bool:\n    max_num1, max_num2 = sorted(nums)[-2:]\n    return max_num1 * max_num2 == max_product",
        "solution_func": "def g(nums=[2, 5, 3, 8, 10, 6]):\n    max_num1, max_num2 = sorted(nums)[-2:]\n    return max_num1 * max_num2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding the two largest numbers in a list and checking if their product is equal to a given value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of sorting a list, extracting the two largest numbers, and performing a multiplication operation.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    return np.allclose(matrix, matrix.T)\n\ndef g(n=5):\n    matrix = np.random.randint(0, 10, size=(n, n))\n    symmetric_matrix = np.triu(matrix) + np.triu(matrix, 1).T\n    return symmetric_matrix\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. The solution generates a random matrix and constructs a symmetric matrix based on it. The numpy library is used for matrix operations.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "import numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    return np.allclose(matrix, matrix.T)",
        "solution_func": "def g(n=5):\n    matrix = np.random.randint(0, 10, size=(n, n))\n    symmetric_matrix = np.triu(matrix) + np.triu(matrix, 1).T\n    return symmetric_matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a randomly generated symmetric matrix is indeed symmetric using NumPy functions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of NumPy functions for matrix manipulation and symmetry checking.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return string == string[::-1]\n\ndef g(word='radar'):\n    return word + word[-2::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g(word='radar'):\n    return word + word[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome by comparing it to its reverse. The solution function constructs a palindrome by appending the reverse of the word to itself."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and checking for palindromes. The solution function demonstrates how to construct a palindrome from a given word.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) == len(set(nums))\n\ndef g(n=6):\n    return list(range(1, n+1))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations and List Manipulation.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) == len(set(nums))",
        "solution_func": "def g(n=6):\n    return list(range(1, n+1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and returns True if all the elements in the list are unique. The solution function g generates a list of integers from 1 to n, and the assertion checks if f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for uniqueness in a list of integers and generating a list of integers. It is a simple algorithmic challenge suitable for teaching Python concepts like list manipulation and function definition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_vowels: str, words=['apple', 'banana', 'orange']) -> bool:\n    vowels = 'aeiou'\n    max_vowel_count = 0\n    max_vowel_word = ''\n    for word in words:\n        vowel_count = sum(1 for char in word if char in vowels)\n        if vowel_count > max_vowel_count:\n            max_vowel_count = vowel_count\n            max_vowel_word = word\n    return max_vowels == max_vowel_word\n\ndef g(words=['apple', 'banana', 'orange']) -> str:\n    vowels = 'aeiou'\n    max_vowel_count = 0\n    max_vowel_word = ''\n    for word in words:\n        vowel_count = sum(1 for char in word if char in vowels)\n        if vowel_count > max_vowel_count:\n            max_vowel_count = vowel_count\n            max_vowel_word = word\n    return max_vowel_word\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(max_vowels: str, words=['apple', 'banana', 'orange']) -> bool:\n    vowels = 'aeiou'\n    max_vowel_count = 0\n    max_vowel_word = ''\n    for word in words:\n        vowel_count = sum(1 for char in word if char in vowels)\n        if vowel_count > max_vowel_count:\n            max_vowel_count = vowel_count\n            max_vowel_word = word\n    return max_vowels == max_vowel_word",
        "solution_func": "def g(words=['apple', 'banana', 'orange']) -> str:\n    vowels = 'aeiou'\n    max_vowel_count = 0\n    max_vowel_word = ''\n    for word in words:\n        vowel_count = sum(1 for char in word if char in vowels)\n        if vowel_count > max_vowel_count:\n            max_vowel_count = vowel_count\n            max_vowel_word = word\n    return max_vowel_word",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if the input string matches the word with the maximum number of vowels in a given list of words, and g finds and returns the word with the maximum number of vowels in a given list of words."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as string manipulation, list iteration, and comparison operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sum_primes: int, limit=100) -> bool:\n    primes = [2]\n    for i in range(3, limit+1):\n        if all(i % p != 0 for p in primes):\n            primes.append(i)\n    return sum(primes) == sum_primes\n\ndef g(limit=100):\n    primes = [2]\n    for i in range(3, limit+1):\n        if all(i % p != 0 for p in primes):\n            primes.append(i)\n    return sum(primes)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves finding prime numbers and checking if the sum of prime numbers up to a certain limit is equal to a given sum. This involves concepts of prime numbers, loops, conditionals, and list operations.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(sum_primes: int, limit=100) -> bool:\n    primes = [2]\n    for i in range(3, limit+1):\n        if all(i % p != 0 for p in primes):\n            primes.append(i)\n    return sum(primes) == sum_primes",
        "solution_func": "def g(limit=100):\n    primes = [2]\n    for i in range(3, limit+1):\n        if all(i % p != 0 for p in primes):\n            primes.append(i)\n    return sum(primes)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of prime numbers up to a given limit is equal to a specified sum. Another function g generates the sum of prime numbers up to a given limit. The puzzle requires implementing f and g functions and ensuring that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with prime numbers, loops, list comprehension, and function implementation in Python. It tests the understanding of prime number generation and sum calculation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(fib_list: list, length=10) -> bool:\n    return all(fib_list[i] + fib_list[i+1] == fib_list[i+2] for i in range(len(fib_list)-2))\n\ndef g(length=10):\n    fib_list = [0, 1]\n    while len(fib_list) < length:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Fibonacci sequence generation and verification of the sequence's correctness.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(fib_list: list, length=10) -> bool:\n    return all(fib_list[i] + fib_list[i+1] == fib_list[i+2] for i in range(len(fib_list)-2))",
        "solution_func": "def g(length=10):\n    fib_list = [0, 1]\n    while len(fib_list) < length:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers forms a Fibonacci sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to generate a list of Fibonacci numbers and then check if the list satisfies the Fibonacci sequence property.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, is_palindrome=True) -> bool:\n    return s == s[::-1]\ndef g(s='radar'):\n    return s[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True",
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, is_palindrome=True) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='radar'):\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s: str, is_palindrome=True) that checks if a string is a palindrome, and a function g(s='radar') that returns the reverse of a string, the puzzle requires finding a string for which the reverse is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically reversing a string and checking for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: int, prime=True) -> bool:\n    if x < 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\ndef g(x=7):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    next_prime = x + 1\n    while True:\n        if is_prime(next_prime):\n            return next_prime\n        next_prime += 1\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True",
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: int, prime=True) -> bool:\n    if x < 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True",
        "solution_func": "def g(x=7):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    next_prime = x + 1\n    while True:\n        if is_prime(next_prime):\n            return next_prime\n        next_prime += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(x) that checks if a given number is prime, and a function g(x) that finds the next prime number after a given number x. The puzzle requires g(x) to return the next prime number after x, and f(g()) to return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to find the next prime number. It tests the student's knowledge of prime number checking and algorithmic thinking.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number or not, and a function g() that returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)\ndef g():\n    return [1, 3, 5, 7, 9]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if it is sorted correctly.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)",
        "solution_func": "def g():\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(nums: List[int]) -> bool that checks if a list of integers is sorted in ascending order. The solution function g() returns a sorted list of integers and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str, s='racecar') -> bool:\n    return palindrome == s[::-1]\ndef g(s='racecar'):\n    return s\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str, s='racecar') -> bool:\n    return palindrome == s[::-1]",
        "solution_func": "def g(s='racecar'):\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given string is a palindrome by comparing it to its reverse. The function g simply returns a predefined string. The assertion at the end checks if the function f applied to the result of function g returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(prime: int, n=17) -> bool:\n    if prime < 2:\n        return False\n    for i in range(2, int(prime ** 0.5) + 1):\n        if prime % i == 0:\n            return False\n    return True\ndef g(n=17):\n    return n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to prime numbers, mathematical operations, and conditional logic.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(prime: int, n=17) -> bool:\n    if prime < 2:\n        return False\n    for i in range(2, int(prime ** 0.5) + 1):\n        if prime % i == 0:\n            return False\n    return True",
        "solution_func": "def g(n=17):\n    return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(prime: int, n=17) that checks if a given number is prime, and a function g(n=17) that simply returns the input number. The puzzle requires g to return a prime number for f to return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(missing: int, seq=[3, 6, 9, 15, 21, 24]) -> bool:\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i-1] != 3:\n            return missing == seq[i-1] + 3\n    return False\ndef g(seq=[3, 6, 9, 15, 21, 24]):\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i-1] != 3:\n            return seq[i-1] + 3\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to find a missing number in a sequence.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(missing: int, seq=[3, 6, 9, 15, 21, 24]) -> bool:\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i-1] != 3:\n            return missing == seq[i-1] + 3\n    return False",
        "solution_func": "def g(seq=[3, 6, 9, 15, 21, 24]):\n    for i in range(1, len(seq)):\n        if seq[i] - seq[i-1] != 3:\n            return seq[i-1] + 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a specific number is missing in a sequence based on a given pattern, and a function g that generates the missing number in the sequence. The solution function g is then used to validate the correctness of the algorithm in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding sequence patterns and checking for missing numbers in the sequence. It requires knowledge of loops, conditionals, and function calls in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=3) -> bool:\n    for i in range(len(s) - n + 1):\n        if s[i:i+n] == s[i:i+n][::-1]:\n            return True\n    return False\n\ndef g(n=3):\n    if n % 2 == 0:\n        return \"a\" * (n // 2) + \"b\" * (n // 2)\n    else:\n        return \"a\" * (n // 2) + \"b\" + \"a\" * (n // 2)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=3) -> bool:\n    for i in range(len(s) - n + 1):\n        if s[i:i+n] == s[i:i+n][::-1]:\n            return True\n    return False",
        "solution_func": "def g(n=3):\n    if n % 2 == 0:\n        return \"a\" * (n // 2) + \"b\" * (n // 2)\n    else:\n        return \"a\" * (n // 2) + \"b\" + \"a\" * (n // 2)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string contains a palindrome of a specified length, and a function g that generates strings based on the specified length. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and checking for palindromes. The solution function g generates strings with alternating characters based on the specified length. The assertion tests if the generated string contains a palindrome of the specified length.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1] and (len(palindrome) % 2 == 0 or palindrome[len(palindrome) // 2] == palindrome[-(len(palindrome) // 2 + 1)])\ndef g():\n    import random\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    length = random.randint(3, 10)\n    word = ''.join(random.choices(alphabet, k=length))\n    if length % 2 != 0:\n        middle_char = word[length // 2]\n    else:\n        middle_char = ''\n    return word + middle_char + word[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1] and (len(palindrome) % 2 == 0 or palindrome[len(palindrome) // 2] == palindrome[-(len(palindrome) // 2 + 1)])",
        "solution_func": "def g():\n    import random\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    length = random.randint(3, 10)\n    word = ''.join(random.choices(alphabet, k=length))\n    if length % 2 != 0:\n        middle_char = word[length // 2]\n    else:\n        middle_char = ''\n    return word + middle_char + word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated word is a palindrome with a specific condition for even-length words."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random word, adding a middle character if the word has an odd length, and then checking if the resulting word is a palindrome with a specific condition for even-length words.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(min_moves: int, disks=3) -> bool:\n    return min_moves == 2 ** disks - 1\n\ndef g(disks=3):\n    return 2 ** disks - 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True"
        ],
        "problem_func": "def f(min_moves: int, disks=3) -> bool:\n    return min_moves == 2 ** disks - 1",
        "solution_func": "def g(disks=3):\n    return 2 ** disks - 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves determining if a given number of minimum moves is equal to 2 raised to the power of the number of disks minus 1."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of exponentiation and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, palindrome='racecar') -> bool:\n    return s == s[::-1]\ndef g(palindrome='racecar'):\n    return palindrome\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, palindrome='racecar') -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(palindrome='racecar'):\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a string is a palindrome and another function to return a predefined palindrome string. The assertion checks if the palindrome string is correctly identified as a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int, prime=17) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g(prime=17):\n    return prime\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) and Mathematical Operations topics.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int, prime=17) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime=17):\n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n: int, prime=17) -> bool and g(prime=17), where f checks if a given number is prime and g returns a specified prime number. The puzzle requires g to return a prime number that satisfies the condition of f to evaluate to True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport string\n\ndef f(s: str) -> bool:\n    return s == s[::-1] and s.isidentifier()\n\ndef g():\n    valid_chars = string.ascii_letters + string.digits + \"_\"\n    for char1 in valid_chars:\n        for char2 in valid_chars:\n            for char3 in valid_chars:\n                identifier = char1 + char2 + char3 + char2 + char1\n                if identifier == identifier[::-1]:\n                    return identifier\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic, Itertools",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int) -> bool:\n    return len(str(i + 1000)) > len(str(i + 1001))\ndef g():\n    return -1001\nassert f(g()) == True",
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True"
        ],
        "problem_func": "import string\n\ndef f(s: str) -> bool:\n    return s == s[::-1] and s.isidentifier()",
        "solution_func": "def g():\n    valid_chars = string.ascii_letters + string.digits + \"_\"\n    for char1 in valid_chars:\n        for char2 in valid_chars:\n            for char3 in valid_chars:\n                identifier = char1 + char2 + char3 + char2 + char1\n                if identifier == identifier[::-1]:\n                    return identifier",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a three-character identifier that is a palindrome and consists of valid identifier characters (letters, digits, and underscore)."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a generated identifier meets specific criteria and is a palindrome. The solution function generates identifiers and checks if they satisfy the conditions set by the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(lst[i] == lst[i-1] + lst[i-2] for i in range(2, len(lst)))\n\ndef g():\n    fibonacci = [0, 1]\n    while len(fibonacci) < 5:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion, Mathematical Operations",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int) -> bool:\n    return len(str(i + 1000)) > len(str(i + 1001))\ndef g():\n    return -1001\nassert f(g()) == True",
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(lst[i] == lst[i-1] + lst[i-2] for i in range(2, len(lst)))",
        "solution_func": "def g():\n    fibonacci = [0, 1]\n    while len(fibonacci) < 5:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given list satisfies the Fibonacci sequence property, and then implement a function that generates the first 5 numbers of the Fibonacci sequence. The assertion checks if the generated Fibonacci sequence satisfies the property."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the Fibonacci sequence and implementing a function to check for the sequence property. It also requires implementing a function to generate the Fibonacci sequence. This puzzle can be used to teach Python programming concepts related to lists, loops, and conditionals.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1]\n\ndef g() -> str:\n    import random\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    length = random.randint(5, 10)\n    half_length = length // 2\n    palindrome = ''.join([random.choice(alphabet) for _ in range(half_length)])\n    if length % 2 == 0:\n        return palindrome + palindrome[::-1]\n    else:\n        return palindrome + random.choice(alphabet) + palindrome[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1]",
        "solution_func": "def g() -> str:\n    import random\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    length = random.randint(5, 10)\n    half_length = length // 2\n    palindrome = ''.join([random.choice(alphabet) for _ in range(half_length)])\n    if length % 2 == 0:\n        return palindrome + palindrome[::-1]\n    else:\n        return palindrome + random.choice(alphabet) + palindrome[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that generates a random string that may or may not be a palindrome. The assert statement checks if the generated string is indeed a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding palindrome checking and string manipulation in Python. It can be used to teach students about string operations and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))\n\ndef g() -> List[int]:\n    import random\n    length = random.randint(5, 10)\n    nums = [random.randint(1, 10) for _ in range(length)]\n    return nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations and random number generation.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))",
        "solution_func": "def g() -> List[int]:\n    import random\n    length = random.randint(5, 10)\n    nums = [random.randint(1, 10) for _ in range(length)]\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of integers contains duplicates, and a function g that generates a random list of integers. The goal is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of list manipulation, set operations, and random number generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int, twin_prime_pair=(11, 13)) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return is_prime(n)\n\ndef g(twin_prime_pair=(11, 13)):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        num += 1\n        while not is_prime(num):\n            num += 1\n        return num\n\n    twin_prime_pair = (11, 13)\n    while True:\n        twin_prime_pair = (next_prime(twin_prime_pair[1]), next_prime(twin_prime_pair[1] + 2))\n        if is_prime(twin_prime_pair[0]) and is_prime(twin_prime_pair[1]):\n            return twin_prime_pair[0]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as prime numbers, loops, functions, and assertions.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int, twin_prime_pair=(11, 13)) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return is_prime(n)",
        "solution_func": "def g(twin_prime_pair=(11, 13)):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        num += 1\n        while not is_prime(num):\n            num += 1\n        return num\n\n    twin_prime_pair = (11, 13)\n    while True:\n        twin_prime_pair = (next_prime(twin_prime_pair[1]), next_prime(twin_prime_pair[1] + 2))\n        if is_prime(twin_prime_pair[0]) and is_prime(twin_prime_pair[1]):\n            return twin_prime_pair[0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given number is prime and g generates a pair of twin prime numbers. The puzzle requires g to find a pair of twin prime numbers and for f to validate that the first number in the pair is prime."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of prime numbers, twin prime pairs, and function composition in Python. It can be used to teach students about prime number generation and validation in Python programming.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, palindrome=\"racecar\") -> bool:\n    return s == s[::-1]\n\ndef g(palindrome=\"racecar\"):\n    def is_palindrome(sub_str):\n        return sub_str == sub_str[::-1]\n\n    def longest_palindrome(s):\n        max_len = 0\n        longest = \"\"\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if is_palindrome(s[i:j + 1]) and j - i + 1 > max_len:\n                    max_len = j - i + 1\n                    longest = s[i:j + 1]\n        return longest\n\n    return longest_palindrome(palindrome)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and palindrome checking.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, palindrome=\"racecar\") -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(palindrome=\"racecar\"):\n    def is_palindrome(sub_str):\n        return sub_str == sub_str[::-1]\n\n    def longest_palindrome(s):\n        max_len = 0\n        longest = \"\"\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if is_palindrome(s[i:j + 1]) and j - i + 1 > max_len:\n                    max_len = j - i + 1\n                    longest = s[i:j + 1]\n        return longest\n\n    return longest_palindrome(palindrome)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where the first function checks if a given string is a palindrome and the second function finds the longest palindrome in a given string. The goal is to ensure that the second function returns a palindrome and passes the check in the first function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, palindrome checking, nested functions, and algorithmic thinking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) as it checks if a given number is a prime number or not.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns the number 17 and assert that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f(num) to check if a number is prime, and then defining a function g() that returns the number 17. The puzzle asserts that f(g()) should return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return len(set(strings)) == len(strings)\n\ndef g():\n    return ['apple', 'banana', 'cherry', 'date']\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations and conditional logic. The function f uses set operations to check for duplicates in a list of strings, and the assert statement uses conditional logic to check if the function g returns the correct output.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return len(set(strings)) == len(strings)",
        "solution_func": "def g():\n    return ['apple', 'banana', 'cherry', 'date']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list of strings contains only unique elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that takes a list of strings and returns True if all elements in the list are unique. The solution function g returns a specific list of strings, and the assertion checks if f applied to the output of g returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\ndef g() -> str:\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a word is a palindrome. The solution function returns the word 'radar' which is a palindrome. The puzzle also involves understanding of string slicing in Python.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that checks if a given word is a palindrome by comparing it with its reverse. The solution function g() returns the word 'radar', and the puzzle asserts that f(g()) should return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\ndef g() -> int:\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num: int) that checks if a given number is a prime number. Another function g() returns the number 17, and the puzzle requires g() to be passed to f() to return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, target=[1, 2, 3]) -> bool:\n    return all(x == y for x, y in zip(arr, target))\ndef g(target=[1, 2, 3]):\n    return [num for num in target]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and comparison using zip function.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
            "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list, target=[1, 2, 3]) -> bool:\n    return all(x == y for x, y in zip(arr, target))",
        "solution_func": "def g(target=[1, 2, 3]):\n    return [num for num in target]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if two lists are equal element-wise, and a function g that returns a list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, zip function, and the all function in Python. It is a simple puzzle that tests the student's understanding of list operations and comparison.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='color', value='blue') -> bool:\n    return d.get(key) == value\ndef g(key='color', value='blue'):\n    return {key: value}\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking for a specific key-value pair in the dictionary.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
            "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='color', value='blue') -> bool:\n    return d.get(key) == value",
        "solution_func": "def g(key='color', value='blue'):\n    return {key: value}",
        "quality": [
            null
        ],
        "description": [
            "Given a dictionary and default key-value pair, the function f checks if the key-value pair exists in the dictionary. The function g creates a dictionary with the specified key-value pair. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding dictionary operations in Python and how to create a dictionary with specific key-value pairs. The student needs to ensure that the function g creates the dictionary correctly to satisfy the condition in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(lst: list) -> bool:\n    return all(sympy.isprime(num) for num in lst)\n\ndef g(size=5):\n    primes_list = list(sympy.primerange(2, 100))\n    return primes_list[:size]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to prime numbers, list comprehension, and the sympy library for prime number generation.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "import sympy\n\ndef f(lst: list) -> bool:\n    return all(sympy.isprime(num) for num in lst)",
        "solution_func": "def g(size=5):\n    primes_list = list(sympy.primerange(2, 100))\n    return primes_list[:size]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the function g to generate a list of prime numbers within a specified range, and the function f to check if all numbers in the list are prime. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of prime numbers and checking if all numbers in the list are prime. It tests the understanding of generating prime numbers and using the sympy library in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g():\n    palindrome = \"radar\"\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given text is a palindrome.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    palindrome = \"radar\"\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given text is a palindrome by comparing it with its reverse. The solution function g returns a predefined palindrome 'radar' and asserts that f(g()) is True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return 'abcdeedcba'\n    \nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return 'abcdeedcba'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle consists of two functions, f(s: str) -> bool which checks if a given string is a palindrome, and g() -> str which returns a specific string. The assert statement verifies if the output of f(g()) is True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    return any(numbers[i] == numbers[i-1] * 2 for i in range(1, len(numbers)))\n\ndef g() -> list:\n    return [2**i for i in range(5)]\n    \nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    return any(numbers[i] == numbers[i-1] * 2 for i in range(1, len(numbers)))",
        "solution_func": "def g() -> list:\n    return [2**i for i in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding if any element in a list is equal to the previous element multiplied by 2."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if any element in a list is equal to the previous element multiplied by 2. The solution generates a list of powers of 2 and the puzzle function checks if the condition is satisfied.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(words: list) -> bool:\n    sentence = ' '.join(words)\n    return sentence[0].isupper() and sentence.endswith('.')\n\ndef g() -> list:\n    return ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog', '.']\n    \nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic. The function f checks if the first letter of the sentence is uppercase and if the sentence ends with a period. The function g returns a list of words to form a sentence.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "def f(words: list) -> bool:\n    sentence = ' '.join(words)\n    return sentence[0].isupper() and sentence.endswith('.')",
        "solution_func": "def g() -> list:\n    return ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog', '.']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f(words: list) that checks if the first word in a list of words is capitalized and if the last word ends with a period. The solution function g() returns a specific list of words that satisfy the conditions of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and list operations in Python to check for specific conditions in a list of words.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='xyz') -> bool:\n    return s.count(pattern) % 2 == 0\n\ndef g(pattern='xyz'):\n    import random\n    options = [''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=5)) for _ in range(10)]\n    return options[random.randint(0, 9)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='xyz') -> bool:\n    return s.count(pattern) % 2 == 0",
        "solution_func": "def g(pattern='xyz'):\n    import random\n    options = [''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=5)) for _ in range(10)]\n    return options[random.randint(0, 9)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string contains a specific pattern 'xyz' an even number of times. The function g generates random strings and returns one of them. The puzzle requires finding a random string that contains the pattern 'xyz' an even number of times."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of the count method in Python. It also requires knowledge of random module and list comprehension. The solution should generate a random string that satisfies the condition of containing 'xyz' an even number of times.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, target=10) -> bool:\n    return sum(lst) > target\n\ndef g(target=10):\n    import random\n    return [random.randint(1, 10) for _ in range(5)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, random number generation, and comparison operations.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, target=10) -> bool:\n    return sum(lst) > target",
        "solution_func": "def g(target=10):\n    import random\n    return [random.randint(1, 10) for _ in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define a function that generates a list of random integers and then checks if the sum of the list is greater than a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to generate a list of random integers and calculate the sum of the list. The solution function should return a list of random integers and the puzzle function should check if the sum of the list is greater than a specified target value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(prime_factor: int, n=9423) -> bool:\n    if prime_factor <= 1:\n        return False\n    for i in range(2, int(prime_factor ** 0.5) + 1):\n        if prime_factor % i == 0:\n            return False\n    return n % prime_factor == 0 and prime_factor < n\ndef g(n=9423):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(n // 2, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return -1\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Number Theory (prime factors, primes) and Brute Force Search (checking all numbers up to the square root of the prime factor). The solution uses a brute force search to find the largest prime factor of a given number.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True"
        ],
        "problem_func": "def f(prime_factor: int, n=9423) -> bool:\n    if prime_factor <= 1:\n        return False\n    for i in range(2, int(prime_factor ** 0.5) + 1):\n        if prime_factor % i == 0:\n            return False\n    return n % prime_factor == 0 and prime_factor < n",
        "solution_func": "def g(n=9423):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(n // 2, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return -1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(prime_factor: int, n=9423) and g(n=9423). Function f checks if a given number is a prime factor of n, while function g finds the largest prime factor of n. The puzzle requires function g to find the largest prime factor of n and function f to verify if the result is a prime factor of n."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of prime numbers, factors, loops, and function composition in Python. It provides a good exercise for students to practice implementing and combining functions to solve a problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(is_palindrome: bool, word='radar') -> bool:\n    return word == word[::-1] == is_palindrome\ndef g(word='radar'):\n    return word[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True"
        ],
        "problem_func": "def f(is_palindrome: bool, word='radar') -> bool:\n    return word == word[::-1] == is_palindrome",
        "solution_func": "def g(word='radar'):\n    return word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given word is a palindrome, and another function g that returns the reverse of a word. The assertion checks if the reverse of a word is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about understanding palindrome checking and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int, n=5) -> bool:\n    def calculate_factorial(num):\n        if num == 0:\n            return 1\n        return num * calculate_factorial(num - 1)\n\n    return factorial == calculate_factorial(n)\ndef g(n=5):\n    def calculate_factorial(num):\n        if num == 0:\n            return 1\n        return num * calculate_factorial(num - 1)\n\n    return calculate_factorial(n)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True"
        ],
        "problem_func": "def f(factorial: int, n=5) -> bool:\n    def calculate_factorial(num):\n        if num == 0:\n            return 1\n        return num * calculate_factorial(num - 1)\n\n    return factorial == calculate_factorial(n)",
        "solution_func": "def g(n=5):\n    def calculate_factorial(num):\n        if num == 0:\n            return 1\n        return num * calculate_factorial(num - 1)\n\n    return calculate_factorial(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the factorial of a given number is equal to a specified value, and g calculates the factorial of a given number. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves recursion and factorial calculation in Python. It can be used to teach students about recursion, function definition, and function calling in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(num: int, lower=1, upper=10) -> bool:\n    return (num ** 2) % 4 == 0\n\ndef g(lower=1, upper=10):\n    return random.randint(lower, upper)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and random number generation, specifically checking if the square of a randomly generated number is divisible by 4.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True"
        ],
        "problem_func": "import random\n\ndef f(num: int, lower=1, upper=10) -> bool:\n    return (num ** 2) % 4 == 0",
        "solution_func": "def g(lower=1, upper=10):\n    return random.randint(lower, upper)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a random number within a specified range and check if the square of the number is divisible by 4."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to generate random numbers in Python and perform a mathematical operation on the generated number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(primes: list, limit=20) -> bool:\n    return sum(primes) > 50\n\ndef g(limit=20):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, limit) if is_prime(num)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and summing them up to compare against a limit. It also includes list comprehension and assertion testing.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(primes: list, limit=20) -> bool:\n    return sum(primes) > 50",
        "solution_func": "def g(limit=20):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, limit) if is_prime(num)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the function g to generate a list of prime numbers up to a given limit, and the function f to check if the sum of these prime numbers is greater than 50. The assertion at the end checks if the solution g satisfies the condition set by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating prime numbers and checking their sum, which is a common programming challenge. It also tests the understanding of list comprehension and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(reversed_str: str, input_str='racecar') -> bool:\n    return reversed_str == input_str[::-1]\n\ndef g(input_str='racecar'):\n    return input_str[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(reversed_str: str, input_str='racecar') -> bool:\n    return reversed_str == input_str[::-1]",
        "solution_func": "def g(input_str='racecar'):\n    return input_str[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that returns the reverse of a specific string. The assertion checks if the reverse of the default string 'racecar' is indeed a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically reversing a string and checking for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, palindrome='level') -> bool:\n    return s == palindrome\ndef g(palindrome='level'):\n    return palindrome[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, palindrome='level') -> bool:\n    return s == palindrome",
        "solution_func": "def g(palindrome='level'):\n    return palindrome[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string is a palindrome and g generates the reverse of a predefined palindrome string. The puzzle tests if the reverse of the predefined palindrome string is indeed a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, function definition, and checking for palindromes in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    sorted_numbers = sorted(numbers)\n    max_num = sorted_numbers[-1]\n    return is_prime(max_num)\n\ndef g(numbers=[17, 29, 5, 11, 23, 7]):\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to Number Theory (checking for prime numbers) and Sorting and Ordering (sorting the numbers).",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    sorted_numbers = sorted(numbers)\n    max_num = sorted_numbers[-1]\n    return is_prime(max_num)",
        "solution_func": "def g(numbers=[17, 29, 5, 11, 23, 7]):\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if the largest number in a list of numbers is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to define a function to check for prime numbers and sort a list of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s='radar'):\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='radar'):\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome and a function g(s) that returns the input string. The assertion checks if the function f(g()) returns True for the default input 'radar'.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(output: int, numbers=[1, 3, 6, 10, 15]) -> bool:\n    return numbers[-1] + (len(numbers)+1) == output\n\ndef g(numbers=[1, 3, 6, 10, 15]) -> int:\n    return numbers[-1] + len(numbers) + 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int) -> bool:\n    return len(str(i + 1000)) > len(str(i + 1001))\ndef g():\n    return -1001\nassert f(g()) == True",
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(output: int, numbers=[1, 3, 6, 10, 15]) -> bool:\n    return numbers[-1] + (len(numbers)+1) == output",
        "solution_func": "def g(numbers=[1, 3, 6, 10, 15]) -> int:\n    return numbers[-1] + len(numbers) + 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given output is equal to the sum of the last element in a list 'numbers' and the length of the list plus 1. The solution function g returns the sum of the last element in the list 'numbers' and the length of the list plus 1. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list indexing, list length, and function return values in Python. It tests the student's ability to define functions and use them in assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(words: List[str]) -> bool:\n    return any(word == word[::-1] and word.islower() for word in words)\ndef g():\n    import random\n    words = ['racecar', 'level', 'python', 'radar', 'madam', 'Palindrome']\n    random.shuffle(words)\n    return words\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(words: List[str]) -> bool:\n    return any(word == word[::-1] and word.islower() for word in words)",
        "solution_func": "def g():\n    import random\n    words = ['racecar', 'level', 'python', 'radar', 'madam', 'Palindrome']\n    random.shuffle(words)\n    return words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if any word in a list is a palindrome and all lowercase. The solution function generates a list of words, shuffles them, and returns the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for palindromes and lowercase words in a list, which is a common programming task. The solution function demonstrates the use of random.shuffle to generate a shuffled list of words.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom random import randint\ndef f(nums: list, input_list=[2, 4, 6, 8, 10, 11, 13, 15]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\ndef g(input_list=[2, 4, 6, 8, 10, 11, 13, 15]):\n    random_list = [randint(1, 100) if i % 2 == 0 else randint(101, 200) for i in range(len(input_list))]\n    return random_list\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic and list manipulation. The function f checks if there are both even and odd numbers in the input list, while function g generates a random list based on the input list. The assert statement checks if the output of g satisfies the condition in f.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "from random import randint\ndef f(nums: list, input_list=[2, 4, 6, 8, 10, 11, 13, 15]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)",
        "solution_func": "def g(input_list=[2, 4, 6, 8, 10, 11, 13, 15]):\n    random_list = [randint(1, 100) if i % 2 == 0 else randint(101, 200) for i in range(len(input_list))]\n    return random_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers contains both even and odd numbers, and a function g that generates a list of random numbers based on a given input list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, checking for even and odd numbers in a list, and generating random numbers within specific ranges. It also tests the ability to write functions that work together to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(strings: list, input_list=['apple', 'avocado', 'banana', 'blueberry']) -> bool:\n    first_char = input_list[0][0].lower()\n    return all(s[0].lower() == first_char for s in strings)\ndef g(input_list=['apple', 'avocado', 'banana', 'blueberry']):\n    first_char = input_list[0][0].lower()\n    return [first_char + s[1:] for s in input_list]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "def f(strings: list, input_list=['apple', 'avocado', 'banana', 'blueberry']) -> bool:\n    first_char = input_list[0][0].lower()\n    return all(s[0].lower() == first_char for s in strings)",
        "solution_func": "def g(input_list=['apple', 'avocado', 'banana', 'blueberry']):\n    first_char = input_list[0][0].lower()\n    return [first_char + s[1:] for s in input_list]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if all strings in a list start with the same character as the first string in a given input list, and g generates a new list by replacing the first character of each string in the input list with the first character of the first string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, string manipulation, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(x: int) -> bool:\n    return sympy.isprime(x)\n\ndef g():\n    return sympy.prime(10)  # Returns the 10th prime number\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime using the sympy library and returning the 10th prime number.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "import sympy\n\ndef f(x: int) -> bool:\n    return sympy.isprime(x)",
        "solution_func": "def g():\n    return sympy.prime(10)  # Returns the 10th prime number",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the 10th prime number is a prime number using the sympy library in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and the sympy library in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: list) -> bool:\n    return x == sorted(x)\n\ndef g():\n    return [i for i in range(1, 11)]  # Generates a sorted list from 1 to 10\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if it is sorted. The solution generates a sorted list from 1 to 10 and checks if it is sorted using the provided function.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: list) -> bool:\n    return x == sorted(x)",
        "solution_func": "def g():\n    return [i for i in range(1, 11)]  # Generates a sorted list from 1 to 10",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that checks if a given list is sorted in ascending order. The solution generates a sorted list from 1 to 10 and checks if the function correctly identifies it as sorted."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and comparison in Python. The solution demonstrates how to generate a sorted list and use the function to check if it is sorted.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: str) -> bool:\n    return x == x[::-1]\n\ndef g():\n    return \"radar\"  # Generates a palindrome string\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: str) -> bool:\n    return x == x[::-1]",
        "solution_func": "def g():\n    return \"radar\"  # Generates a palindrome string",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(x) that returns True if the input string x is a palindrome. The solution function g() generates a palindrome string 'radar' and asserts that f(g()) is True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s='radar') -> str:\n    if len(s) == 0:\n        return s\n    else:\n        return s[-1] + g(s[:-1])\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and recursion.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='radar') -> str:\n    if len(s) == 0:\n        return s\n    else:\n        return s[-1] + g(s[:-1])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s) that checks if a given string is a palindrome, and a function g(s) that recursively reverses a string. The assertion checks if the output of g() satisfies the palindrome condition defined by f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, recursion, and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(num=17) -> int:\n    primes = [2]\n    current = 3\n    while len(primes) < num:\n        if all(current % prime != 0 for prime in primes):\n            primes.append(current)\n        current += 2  # optimize by checking only odd numbers\n    return primes[-1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves prime number generation using a brute force search algorithm and optimization techniques.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(num=17) -> int:\n    primes = [2]\n    current = 3\n    while len(primes) < num:\n        if all(current % prime != 0 for prime in primes):\n            primes.append(current)\n        current += 2  # optimize by checking only odd numbers\n    return primes[-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(num) checks if a given number is a prime number, and g(num) finds the nth prime number. The assertion checks if the nth prime number found by g is indeed a prime number according to f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to find the nth prime number. It tests the student's knowledge of prime number generation and basic algorithmic thinking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i]**2 + numbers[j]**2 == numbers[k]**2:\n                    return True\n    return False\n\ndef g():\n    numbers = [3, 4, 5]  # Pythagorean triplet\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i]**2 + numbers[j]**2 == numbers[k]**2:\n                    return True\n    return False",
        "solution_func": "def g():\n    numbers = [3, 4, 5]  # Pythagorean triplet\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers contains a Pythagorean triplet (three numbers that satisfy the Pythagorean theorem). The function f checks if the list contains such a triplet, and function g provides a specific list of numbers to test for a Pythagorean triplet."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a common mathematical concept (Pythagorean triplet) and requires understanding of nested loops and conditional statements in Python. It can be a good exercise to test students' understanding of loops and conditions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    palindrome = \"racecar\"\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    palindrome = \"racecar\"\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks if a string is a palindrome and providing a solution that returns a specific palindrome string. The solution is then checked against the function to verify if it correctly identifies palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    alphanumeric_s = ''.join(char for char in s if char.isalnum()).lower()\n    return alphanumeric_s == alphanumeric_s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    alphanumeric_s = ''.join(char for char in s if char.isalnum()).lower()\n    return alphanumeric_s == alphanumeric_s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "Given a string, the puzzle checks if the string is a palindrome after removing non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string is a palindrome after removing non-alphanumeric characters and ignoring case.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"level\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a given string is a palindrome. The solution function returns the string 'level', which is a palindrome. The puzzle tests the understanding of string manipulation in Python.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'level'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 7\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 7",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns 7 and assert that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f(num) that checks if a number is prime, and then defining a function g() that returns a specific number (7) and asserting that f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(nums: List[int]) -> bool:\n    return sum(nums) % len(nums) == 0\ndef g():\n    return [2, 4, 6]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and List Operations.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(nums: List[int]) -> bool:\n    return sum(nums) % len(nums) == 0",
        "solution_func": "def g():\n    return [2, 4, 6]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers as input and returns True if the sum of the integers in the list is divisible by the length of the list. The solution function g returns a specific list of integers [2, 4, 6] to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if the sum of a list of integers is divisible by the length of the list. The solution function provides a list that meets this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sentence: str) -> bool:\n    sentence = ''.join(char for char in sentence if char.isalpha()).lower()\n    return sentence == sentence[::-1]\ndef g(sentence='A man, a plan, a canal, Panama!'):\n    clean_sentence = ''.join(char for char in sentence if char.isalnum()).lower()\n    return clean_sentence + clean_sentence[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "def f(sentence: str) -> bool:\n    sentence = ''.join(char for char in sentence if char.isalpha()).lower()\n    return sentence == sentence[::-1]",
        "solution_func": "def g(sentence='A man, a plan, a canal, Panama!'):\n    clean_sentence = ''.join(char for char in sentence if char.isalnum()).lower()\n    return clean_sentence + clean_sentence[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given sentence is a palindrome after removing non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to write a function that checks if a sentence is a palindrome after removing non-alphanumeric characters and ignoring case. The solution function generates a clean version of the sentence and appends its reverse to it.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return any((a**2 + b**2 == c**2) for i, a in enumerate(nums) for j, b in enumerate(nums) for k, c in enumerate(nums) if i != j and i != k and j != k)\ndef g():\n    return [3, 4, 5, 6, 8, 10, 13]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers forms a Pythagorean triplet (a^2 + b^2 = c^2) where a, b, and c are elements of the list. This requires knowledge of mathematical operations and conditional logic.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return any((a**2 + b**2 == c**2) for i, a in enumerate(nums) for j, b in enumerate(nums) for k, c in enumerate(nums) if i != j and i != k and j != k)",
        "solution_func": "def g():\n    return [3, 4, 5, 6, 8, 10, 13]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if there exists a Pythagorean triplet in a given list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires checking if there are three numbers in the list that form a Pythagorean triplet (a^2 + b^2 = c^2).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] <= numbers[i + 1] for i in range(len(numbers) - 1))\ndef g() -> List[int]:\n    return [1, 3, 5, 7, 9, 11, 13]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a list of numbers is sorted in ascending order. It requires knowledge of list manipulation and iteration.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] <= numbers[i + 1] for i in range(len(numbers) - 1))",
        "solution_func": "def g() -> List[int]:\n    return [1, 3, 5, 7, 9, 11, 13]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers is sorted in ascending order, and a function g that returns a specific list of numbers. The assertion checks if the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension, the all() function, and list indexing in Python. It also reinforces the concept of checking if a list is sorted in ascending order.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a string is a palindrome.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns the string 'radar', which is a palindrome, and the assertion confirms that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and another function g() that returns the number 17. The puzzle requires g() to be passed as an argument to f() and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    return 1031  # A prime number\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given number is a prime number or not.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 1031  # A prime number",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(n) that checks if a number is prime, the puzzle requires finding a number that satisfies the prime condition when passed through function g()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime number checking and finding a specific prime number that satisfies the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"  # A palindrome string\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"  # A palindrome string",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome (reads the same forwards and backwards). The solution function g() returns the string 'radar', which is a palindrome. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(char for char in s if char.isalnum()).lower()\n    return s == s[::-1]\n\ndef g(s='A man, a plan, a canal, Panama!'):\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(char for char in s if char.isalnum()).lower()\n    return s == s[::-1]",
        "solution_func": "def g(s='A man, a plan, a canal, Panama!'):\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome after removing non-alphanumeric characters and converting to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, palindrome checking, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(triplet: list) -> bool:\n    a, b, c = sorted(triplet)\n    return a**2 + b**2 == c**2\n\ndef g():\n    for a in range(1, 100):\n        for b in range(a, 100):\n            c = (a**2 + b**2)**0.5\n            if c == int(c):\n                return [a, b, int(c)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and sorting and ordering.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(triplet: list) -> bool:\n    a, b, c = sorted(triplet)\n    return a**2 + b**2 == c**2",
        "solution_func": "def g():\n    for a in range(1, 100):\n        for b in range(a, 100):\n            c = (a**2 + b**2)**0.5\n            if c == int(c):\n                return [a, b, int(c)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a Pythagorean triplet where the sum of the squares of two numbers is equal to the square of the third number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of Pythagorean triplets and basic mathematical operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num <= 10:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    for num in range(11, 100):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            return num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Number Theory (factors, primes, etc.) and Brute Force Search.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num <= 10:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    for num in range(11, 100):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where f(num) checks if a number is a prime number and g() finds the first prime number between 11 and 100. The assertion checks if the solution function g() correctly identifies a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to find the first prime number within a specific range. It tests the student's knowledge of loops, conditionals, and prime number checking in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number, and a function g() that returns the number 17. The puzzle requires g() to return a prime number for the assertion to pass."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and function return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in ascending order.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is sorted in non-decreasing order, and a function g that returns a sorted list of integers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and indexing in Python. It also tests the ability to define functions and use them in assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int]) -> bool:\n    return is_prime(sum(numbers))\n\ndef g() -> List[int]:\n    i = 1\n    numbers = []\n    while not is_prime(sum(numbers)):\n        numbers.append(i)\n        i += 1\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Number Theory (checking for prime numbers) and List Manipulation (summing and iterating over a list).",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int]) -> bool:\n    return is_prime(sum(numbers))",
        "solution_func": "def g() -> List[int]:\n    i = 1\n    numbers = []\n    while not is_prime(sum(numbers)):\n        numbers.append(i)\n        i += 1\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the sum of a list of numbers generated by a function is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to check for prime numbers and generate a list of numbers until the sum of the list is a prime number.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, a=7, b=4) -> bool:\n    return (a + b) * (a - b) == result\ndef g(a=7, b=4):\n    return a * a - b * b\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, a=7, b=4) -> bool:\n    return (a + b) * (a - b) == result",
        "solution_func": "def g(a=7, b=4):\n    return a * a - b * b",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the result of a mathematical operation on input parameters matches a given result, and g calculates the result of a different mathematical operation. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic arithmetic operations and function definition in Python. It can be used to teach students about function composition and testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int) -> bool:\n    return result == 55\ndef g(n=10):\n    if n <= 1:\n        return n\n    else:\n        return g(n - 1) + g(n - 2)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]\ndef g():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int) -> bool:\n    return result == 55",
        "solution_func": "def g(n=10):\n    if n <= 1:\n        return n\n    else:\n        return g(n - 1) + g(n - 2)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the result is equal to 55 and g calculates the nth Fibonacci number recursively. The puzzle tests whether the result of g is equal to 55."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a classic recursive function to calculate the nth Fibonacci number and a simple check to see if the result is equal to 55. It can be used to teach recursion and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=15):\n    num1 = target - 5\n    num2 = 5\n    return [num1, num2]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Brute Force Search, and Conditional Logic.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target=15) -> bool:\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=15):\n    num1 = target - 5\n    num2 = 5\n    return [num1, num2]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the function f checks if there are two numbers in the list that add up to a target value. The function g returns a list of two numbers that add up to the target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to find two numbers in a list that sum up to a target value using a set to store seen numbers. The solution function g returns a list of two numbers that satisfy the condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, word='radar') -> bool:\n    return text == text[::-1]\ndef g(word='radar'):\n    return word\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, word='radar') -> bool:\n    return text == text[::-1]",
        "solution_func": "def g(word='radar'):\n    return word",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given text is a palindrome, and a function g that returns a specific word. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding palindrome checking and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list, result=True) -> bool:\n    return all(num % 2 == 0 for num in numbers)\ndef g(result=True):\n    return [0, 2, 4, 6, 8]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and providing a list of even numbers as the solution.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list, result=True) -> bool:\n    return all(num % 2 == 0 for num in numbers)",
        "solution_func": "def g(result=True):\n    return [0, 2, 4, 6, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are even, and a function g that returns a list of even numbers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, checking for even numbers, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, prime=17) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(prime=17):\n    return prime\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given number is a prime number using a simple algorithm. The solution function returns a predefined prime number. The puzzle mainly focuses on Number Theory (checking for prime numbers) and Mathematical Operations (checking divisibility).",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, prime=17) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime=17):\n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num: int, prime=17) that checks if a given number is prime, and a function g(prime=17) that returns a prime number. The puzzle requires g to return a prime number that satisfies the condition of f to be True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function interactions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))\n\ndef g(start=1, diff=3, length=5):\n    return [start + diff * i for i in range(length)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check if a list of numbers forms an arithmetic sequence.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))",
        "solution_func": "def g(start=1, diff=3, length=5):\n    return [start + diff * i for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers forms an arithmetic sequence with a given difference, and a function g that generates a list of numbers in an arithmetic sequence. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of arithmetic sequences and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(word='racecar'):\n    return word + word[:-1][::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(word='racecar'):\n    return word + word[:-1][::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome by comparing it to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a word is a palindrome and then creating a function that generates a word based on a given word to test the palindrome function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \n\ndef f(words: List[str], n=5) -> bool:\n    return all([len(word) == n and word.isalpha() for word in words])\n\ndef g(n=5):\n    return [chr(ord('a') + i) * n for i in range(5)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \n\ndef f(words: List[str], n=5) -> bool:\n    return all([len(word) == n and word.isalpha() for word in words])",
        "solution_func": "def g(n=5):\n    return [chr(ord('a') + i) * n for i in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and a number n as input, and checks if all strings in the list have a length of n and consist only of alphabetic characters. The solution function g generates a list of strings where each string consists of the same character repeated n times, for a total of 5 strings."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the length and alphabetic nature of strings in a list, and generating a list of strings with repeated characters. The solution function g generates the required list to satisfy the condition of function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(d: Dict[str, int]) -> bool:\n    return all([key[0] == str(val) for key, val in d.items()])\n\ndef g():\n    return {str(i): i for i in range(1, 6)}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and checking conditions on keys and values in the dictionary.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Dict\n\ndef f(d: Dict[str, int]) -> bool:\n    return all([key[0] == str(val) for key, val in d.items()])",
        "solution_func": "def g():\n    return {str(i): i for i in range(1, 6)}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary as input and checks if the first character of each key in the dictionary is equal to the corresponding value converted to a string. The solution function g creates a dictionary where each key is a string representation of a number from 1 to 5, and the values are the numbers themselves. The assertion checks if f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, list comprehension, and checking conditions on keys and values. It tests the understanding of dictionary manipulation and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return all([a + b == 10 for a, b in tuples])\n\ndef g():\n    return [(i, 10 - i) for i in range(6)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if the sum of two numbers in a list of tuples is equal to 10.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return all([a + b == 10 for a, b in tuples])",
        "solution_func": "def g():\n    return [(i, 10 - i) for i in range(6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires creating a list of tuples where the sum of each tuple's elements is equal to 10, and then checking if all tuples satisfy this condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, tuple creation, and the all() function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(nums: List[int], m=4) -> bool:\n    return sum(nums) == m * 10 and all((num % m == 0 for num in nums))\ndef g(m=4):\n    return [m] * 10\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(nums: List[int], m=4) -> bool:\n    return sum(nums) == m * 10 and all((num % m == 0 for num in nums))",
        "solution_func": "def g(m=4):\n    return [m] * 10",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and a parameter m, and checks if the sum of the integers is equal to m multiplied by 10 and if all the integers are divisible by m. The solution function g returns a list of length 10 where each element is equal to the parameter m. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, summing elements in a list, checking divisibility, and function parameter usage in Python. It also tests the understanding of function return values and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='color') -> bool:\n    return key in d\ndef g(key='color'):\n    return {key: 'blue'}\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking for the existence of a key in a dictionary.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='color') -> bool:\n    return key in d",
        "solution_func": "def g(key='color'):\n    return {key: 'blue'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a specified key exists in a dictionary, and a function g that returns a dictionary with the specified key-value pair. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary operations and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=5) -> bool:\n    return s == s[::-1] and len(s) == n\ndef g(n=5):\n    return 'radar'[:n]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=5) -> bool:\n    return s == s[::-1] and len(s) == n",
        "solution_func": "def g(n=5):\n    return 'radar'[:n]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s: str, n=5) that checks if a string is a palindrome and has a specific length, and a function g(n=5) that returns a substring of 'radar', determine if g() satisfies the conditions of f()"
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a substring of 'radar' with a specific length is a palindrome. The solution function g(n=5) returns a substring of 'radar' with the specified length, satisfying the conditions of the palindrome check in function f(s: str, n=5).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    return sum(nums) > target\ndef g(target=10):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], target=10) -> bool:\n    return sum(nums) > target",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and a target value, and returns True if the sum of the integers in the list is greater than the target value. The solution function g returns a specific list of integers, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that compares the sum of a list of integers to a target value, and then providing a specific list of integers to satisfy the condition in the assertion.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, prime=17) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\ndef g(prime=17):\n    return prime\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime using a brute force search algorithm.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, prime=17) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime=17):\n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num: int, prime=17) -> bool and g(prime=17), where f checks if a given number is prime and g returns a prime number. The puzzle requires g to return a prime number that satisfies the condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is prime and returning a prime number. The solution function g should return a prime number that satisfies the condition of f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(seq: list, length=5) -> bool:\n    fib = [0, 1]\n    while fib[-1] + fib[-2] <= max(seq):\n        fib.append(fib[-1] + fib[-2])\n    return seq == fib[:len(seq)]\ndef g(length=5):\n    fib = [0, 1]\n    while len(fib) < length:\n        fib.append(fib[-1] + fib[-2])\n    return fib\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given sequence is a Fibonacci sequence up to a certain length. It uses a while loop and list manipulation to generate the Fibonacci sequence. The solution function generates the Fibonacci sequence up to a specified length and checks if it satisfies the condition of the puzzle function.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(seq: list, length=5) -> bool:\n    fib = [0, 1]\n    while fib[-1] + fib[-2] <= max(seq):\n        fib.append(fib[-1] + fib[-2])\n    return seq == fib[:len(seq)]",
        "solution_func": "def g(length=5):\n    fib = [0, 1]\n    while len(fib) < length:\n        fib.append(fib[-1] + fib[-2])\n    return fib",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of numbers is a Fibonacci sequence up to a certain length, and a function g that generates a Fibonacci sequence of a specified length. The assertion at the end checks if the generated Fibonacci sequence satisfies the condition of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding Fibonacci sequences, list manipulation, and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(seq: list, step=3) -> bool:\n    return all(seq[i] - seq[i-1] == step for i in range(2, len(seq)))\ndef g(step=3):\n    return [i * step for i in range(1, 6)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if a sequence follows a specific pattern.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(seq: list, step=3) -> bool:\n    return all(seq[i] - seq[i-1] == step for i in range(2, len(seq)))",
        "solution_func": "def g(step=3):\n    return [i * step for i in range(1, 6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the elements in a list follow a specific arithmetic sequence with a given step value, and a function g that generates a list of elements in an arithmetic sequence with a specified step value. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and arithmetic sequences in Python. It tests the student's ability to define functions, generate sequences, and apply conditions to check for a specific pattern in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers)\n\ndef g() -> List[int]:\n    return [i for i in range(1, 11)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and checking if it is sorted. The solution generates a list of numbers in ascending order and checks if it is sorted using the puzzle function.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers)",
        "solution_func": "def g() -> List[int]:\n    return [i for i in range(1, 11)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks if a list of numbers is sorted in ascending order. The solution provides a function that generates a list of numbers from 1 to 10, which is already sorted."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if a given list of numbers is sorted. The solution generates a sorted list of numbers from 1 to 10. The student needs to understand list sorting and comparison in Python to solve this puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport numpy as np\n\ndef f(matrix: np.array) -> bool:\n    return (matrix == matrix.T).all()\n\ndef g(size=4):\n    matrix = np.random.randint(0, 10, (size, size))\n    for i in range(size):\n        for j in range(i):\n            matrix[i, j] = matrix[j, i]\n    return matrix\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. It uses numpy for matrix operations and random generation of matrices.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True"
        ],
        "problem_func": "import numpy as np\n\ndef f(matrix: np.array) -> bool:\n    return (matrix == matrix.T).all()",
        "solution_func": "def g(size=4):\n    matrix = np.random.randint(0, 10, (size, size))\n    for i in range(size):\n        for j in range(i):\n            matrix[i, j] = matrix[j, i]\n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a randomly generated square matrix is symmetric along its diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of numpy arrays, matrix transposition, and symmetry properties of matrices.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sentence: str) -> bool:\n    normalized_sentence = ''.join(char.lower() for char in sentence if char.isalpha())\n    return normalized_sentence == normalized_sentence[::-1]\n\ndef g():\n    return \"A man, a plan, a canal: Panama\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True"
        ],
        "problem_func": "def f(sentence: str) -> bool:\n    normalized_sentence = ''.join(char.lower() for char in sentence if char.isalpha())\n    return normalized_sentence == normalized_sentence[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal: Panama\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if a given sentence is a palindrome after removing non-alphabetic characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, palindrome checking, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int, numbers=[]) -> bool:\n    return total == sum(num for num in numbers if is_prime(num))\n\ndef g(numbers=[]):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in numbers if is_prime(num))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and summing them up to compare with a total. It also uses a nested function for prime number checking.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(total: int, numbers=[]) -> bool:\n    return total == sum(num for num in numbers if is_prime(num))",
        "solution_func": "def g(numbers=[]):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(num for num in numbers if is_prime(num))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the total is equal to the sum of prime numbers in a list of numbers. The solution function g generates the sum of prime numbers in a given list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for prime numbers and summing them up, which is a common programming concept. It can be used to teach students about functions, conditionals, loops, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern=\"ABCABC\") -> bool:\n    return s == pattern\n    \ndef g(pattern=\"ABCABC\"):\n    return pattern\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern=\"ABCABC\") -> bool:\n    return s == pattern",
        "solution_func": "def g(pattern=\"ABCABC\"):\n    return pattern",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string matches a specified pattern and g returns the specified pattern. The puzzle tests if calling f with the output of g returns True."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle is not suitable for teaching Python programming as it does not involve any complex problem-solving or algorithmic challenge. It simply checks if a string matches a pattern, which may not be engaging or educational for master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Set\ndef f(numbers: Set[int], property_sum=30) -> bool:\n    return sum(numbers) == property_sum and all(num % 2 == 0 for num in numbers)\n    \ndef g(property_sum=30):\n    numbers = {10, 12, 8}\n    while sum(numbers) != property_sum:\n        numbers = {10, 12, 8}\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and conditional logic.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Set\ndef f(numbers: Set[int], property_sum=30) -> bool:\n    return sum(numbers) == property_sum and all(num % 2 == 0 for num in numbers)",
        "solution_func": "def g(property_sum=30):\n    numbers = {10, 12, 8}\n    while sum(numbers) != property_sum:\n        numbers = {10, 12, 8}\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a set of numbers that satisfy a specific property sum and all numbers in the set are even. The solution iterates to find the correct set of numbers that meet the conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a set of numbers has a specific sum and all numbers are even. The solution iterates to find the correct set of numbers that satisfy the conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number theory is used in this puzzle to check if a number is prime or not.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number, and a function g() that returns the number 17. The puzzle requires g() to return a prime number for the assertion to pass."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, ignore_case=True) -> bool:\n    s = s.lower() if ignore_case else s\n    return s == s[::-1]\n\ndef g(s=\"racecar\"):\n    return s[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, ignore_case=True) -> bool:\n    s = s.lower() if ignore_case else s\n    return s == s[::-1]",
        "solution_func": "def g(s=\"racecar\"):\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that returns the reverse of a default string. The assertion tests if the function f correctly identifies the reversed default string as a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all([lst[i] == lst[i-1] + 1 for i in range(1, len(lst))])\n\ndef g(start=1, length=5):\n    return list(range(start, start+length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking if the elements are consecutive integers.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all([lst[i] == lst[i-1] + 1 for i in range(1, len(lst))])",
        "solution_func": "def g(start=1, length=5):\n    return list(range(start, start+length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list contains consecutive numbers, and a function g that generates a list of consecutive numbers. The assertion tests if function f returns True when applied to the list generated by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension, range function, and the all() function in Python. It also requires understanding of how to generate a list of consecutive numbers using range().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom collections import Counter\ndef f(s: str, char_freq_counts={'a': 3, 'b': 2, 'c': 1}) -> bool:\n    return Counter(s) == char_freq_counts\ndef g(char_freq_counts={'a': 3, 'b': 2, 'c': 1}) -> str:\n    return ''.join([char * freq for char, freq in char_freq_counts.items()])\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and importing modules (collections). It also includes dictionary operations and list comprehension.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True"
        ],
        "problem_func": "from collections import Counter\ndef f(s: str, char_freq_counts={'a': 3, 'b': 2, 'c': 1}) -> bool:\n    return Counter(s) == char_freq_counts",
        "solution_func": "def g(char_freq_counts={'a': 3, 'b': 2, 'c': 1}) -> str:\n    return ''.join([char * freq for char, freq in char_freq_counts.items()])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the character frequency counts of a given string match a predefined dictionary, and a function g that generates a string based on the predefined character frequency counts. The assertion at the end ensures that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with string manipulation and dictionary comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, prime=29) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(prime=29) -> int:\n    return prime\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers and basic mathematical operations.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, prime=29) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime=29) -> int:\n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num: int, prime=29) -> bool and g(prime=29) -> int. Function f checks if a given number is prime, while function g simply returns the value of the prime parameter. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of functions, parameters, and boolean return values in Python. It also requires knowledge of prime numbers and basic mathematical operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return 'racecar'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return 'racecar'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns the string 'racecar', which is a palindrome, and the assertion statement confirms that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(words: List[str]) -> bool:\n    return all(word.islower() for word in words)\ndef g():\n    return ['apple', 'banana', 'orange']\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation by checking if all words in a list are lowercase.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(words: List[str]) -> bool:\n    return all(word.islower() for word in words)",
        "solution_func": "def g():\n    return ['apple', 'banana', 'orange']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a list of strings as input and checks if all the strings are in lowercase. The solution function returns a list of strings and the puzzle function checks if all the strings in the returned list are in lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all words in a list are in lowercase, and the solution function returns a list of lowercase words to satisfy the puzzle condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    if len(numbers) < 3:\n        return True\n    diff = numbers[1] - numbers[0]\n    return all(numbers[i] - numbers[i-1] == diff for i in range(2, len(numbers)))\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for arithmetic progression.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    if len(numbers) < 3:\n        return True\n    diff = numbers[1] - numbers[0]\n    return all(numbers[i] - numbers[i-1] == diff for i in range(2, len(numbers)))",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers forms an arithmetic sequence. The solution function g returns a specific list of numbers that form an arithmetic sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, and arithmetic operations in Python. It is a good exercise for practicing these concepts.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\") -> str:\n    return s[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s: str = \"racecar\") -> str:\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where the first function checks if a given string is a palindrome and the second function returns the reverse of a default string. The assertion statement checks if the second function correctly solves the challenge of the first function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if a given string is a palindrome and returning the reverse of a string. The assertion statement ensures that the second function correctly solves the challenge of the first function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and checking for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return any(word == word[::-1] for word in words)\n\ndef g():\n    return ['python', 'radar', 'algorithm', 'level']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return any(word == word[::-1] for word in words)",
        "solution_func": "def g():\n    return ['python', 'radar', 'algorithm', 'level']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if any word in a list is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if any word in a given list is a palindrome. The function f(words: List[str]) returns True if any word in the list is a palindrome. The solution function g() provides a list of words to be checked for palindromes, and the assert statement verifies that the function f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return all(isinstance(key, str) and isinstance(value, int) for key, value in data.items())\n\ndef g():\n    return {'one': 1, 'two': 2, 'three': 3}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and type checking. The puzzle function f checks if all keys in the dictionary are strings and all values are integers. The solution function g returns a dictionary with string keys and integer values. The assert statement checks if the solution function g satisfies the conditions of the puzzle function f.",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return all(isinstance(key, str) and isinstance(value, int) for key, value in data.items())",
        "solution_func": "def g():\n    return {'one': 1, 'two': 2, 'three': 3}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all keys in a dictionary are strings and all values are integers. The solution function g returns a dictionary with string keys and integer values, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, type checking, and understanding how to define functions in Python. It is a good exercise for students to practice these concepts.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(primes: List[int]) -> bool:\n    is_prime = lambda num: num > 1 and all(num % i != 0 for i in range(2, int(num**0.5) + 1))\n    return len(primes) == 15 and sum(primes) > 200 and all(is_prime(num) for num in primes)\n\ndef g():\n    primes = []\n    num = 2\n    while len(primes) < 15:\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and using list manipulation in Python.",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(primes: List[int]) -> bool:\n    is_prime = lambda num: num > 1 and all(num % i != 0 for i in range(2, int(num**0.5) + 1))\n    return len(primes) == 15 and sum(primes) > 200 and all(is_prime(num) for num in primes)",
        "solution_func": "def g():\n    primes = []\n    num = 2\n    while len(primes) < 15:\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the first 15 prime numbers that have a sum greater than 200."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating prime numbers and checking if the sum of the first 15 primes is greater than 200.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(area: int) -> bool:\n    return area == 100  # 10 x 10 rectangle has the maximum area for a given perimeter of 40\n\ndef g():\n    side_length = 40 // 4  # Perimeter divided by 4 to get the side length of the square for maximum area\n    return side_length ** 2  # Calculate the area of the square\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and Algorithm Optimization.",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(area: int) -> bool:\n    return area == 100  # 10 x 10 rectangle has the maximum area for a given perimeter of 40",
        "solution_func": "def g():\n    side_length = 40 // 4  # Perimeter divided by 4 to get the side length of the square for maximum area\n    return side_length ** 2  # Calculate the area of the square",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves determining if a square with a given perimeter has the maximum area possible."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of calculating the area of a square given its perimeter and checking if it meets a specific condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(fibonacci: List[int]) -> bool:\n    return fibonacci == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]  # Correct Fibonacci sequence up to the 10th term\n\ndef g():\n    fibonacci = [0, 1]\n    while len(fibonacci) < 10:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Mathematical Operations, List Manipulation, and Iteration.",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(fibonacci: List[int]) -> bool:\n    return fibonacci == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]  # Correct Fibonacci sequence up to the 10th term",
        "solution_func": "def g():\n    fibonacci = [0, 1]\n    while len(fibonacci) < 10:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate the Fibonacci sequence up to the 10th term and check if it matches a predefined correct sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to generate the Fibonacci sequence and comparing it with a predefined correct sequence.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return False\n    max_product = max(nums[i] * nums[j] for i in range(len(nums)) for j in range(i+1, len(nums)))\n    return max_product == max(nums) * sorted(nums)[-2]\n\ndef g():\n    import random\n    return random.sample(range(1, 100), 10)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return False\n    max_product = max(nums[i] * nums[j] for i in range(len(nums)) for j in range(i+1, len(nums)))\n    return max_product == max(nums) * sorted(nums)[-2]",
        "solution_func": "def g():\n    import random\n    return random.sample(range(1, 100), 10)",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if the maximum product of any two distinct integers in the list is equal to the product of the two largest integers in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves finding the maximum product of two distinct integers in a list and comparing it to the product of the two largest integers in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return False\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))\n\ndef g():\n    import random\n    start = random.randint(1, 10)\n    diff = random.randint(1, 10)\n    n = random.randint(5, 10)\n    return [start + i * diff for i in range(n)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation to check for a specific pattern in a list of numbers.",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return False\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))",
        "solution_func": "def g():\n    import random\n    start = random.randint(1, 10)\n    diff = random.randint(1, 10)\n    n = random.randint(5, 10)\n    return [start + i * diff for i in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of numbers forms an arithmetic sequence, and a function g that generates a random arithmetic sequence. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for an arithmetic sequence in a list of numbers and generating a random arithmetic sequence. It tests the student's knowledge of list comprehension and arithmetic operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=7) -> bool:\n    return len(s) == n and s.isnumeric()\ndef g(n=7):\n    return str(n) * n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=7) -> bool:\n    return len(s) == n and s.isnumeric()",
        "solution_func": "def g(n=7):\n    return str(n) * n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g that returns a string of a specified length, and then check if the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with string manipulation and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, n=5) -> bool:\n    return all([x % 2 == 0 for x in lst]) and len(lst) == n\ndef g(n=5):\n    return [2*i for i in range(1, n+1)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if all elements in a list are even and the length of the list is equal to a given number.",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, n=5) -> bool:\n    return all([x % 2 == 0 for x in lst]) and len(lst) == n",
        "solution_func": "def g(n=5):\n    return [2*i for i in range(1, n+1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that generates a list of even numbers based on a given parameter n, and then check if all elements in the list are even and the length of the list is equal to n."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, checking for even numbers, and verifying the length of a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    return n > 0 and all((len(row) == n for row in matrix)) and all((sum(row) == sum(matrix[i]) for i, row in enumerate(matrix)))\ndef g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is a magic square, which requires knowledge of matrix operations and list comprehension in Python.",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    return n > 0 and all((len(row) == n for row in matrix)) and all((sum(row) == sum(matrix[i]) for i, row in enumerate(matrix)))",
        "solution_func": "def g():\n    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f(matrix: List[List[int]]) that checks if the input matrix is a valid square matrix with equal row and column sums. The solution function g() returns a specific 3x3 matrix that satisfies the conditions of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the validity of a square matrix with equal row and column sums. The solution function returns a specific matrix that meets the criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], diff=3) -> bool:\n    return all((nums[i] - nums[i-1] == diff for i in range(1, len(nums))))\ndef g(diff=3):\n    return [i * diff for i in range(1, 6)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], diff=3) -> bool:\n    return all((nums[i] - nums[i-1] == diff for i in range(1, len(nums))))",
        "solution_func": "def g(diff=3):\n    return [i * diff for i in range(1, 6)]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if the difference between each element and the previous element is equal to a specified difference. The function g generates a list of integers based on a specified difference, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and assertion testing in Python. It also requires knowledge of function parameters and return types.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\ndef f(pairs: List[Tuple[int, int]]) -> bool:\n    return len(set(pairs)) == len(pairs)\ndef g():\n    import random\n    num_pairs = random.randint(3, 6)\n    return [(random.randint(1, 10), random.randint(1, 10)) for _ in range(num_pairs)]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating a list of random pairs of integers and checking if all pairs are unique.",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\ndef f(pairs: List[Tuple[int, int]]) -> bool:\n    return len(set(pairs)) == len(pairs)",
        "solution_func": "def g():\n    import random\n    num_pairs = random.randint(3, 6)\n    return [(random.randint(1, 10), random.randint(1, 10)) for _ in range(num_pairs)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random list of pairs of integers and checking if all pairs are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random list of pairs of integers and checking if all pairs are unique. The function f checks if all pairs in the list are unique, and the function g generates a random list of pairs. The assertion at the end ensures that the solution g satisfies the condition of the puzzle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    import random\n    return random.randint(2, 50)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (primality testing) and Importing Modules (random).",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import random\n    return random.randint(2, 50)",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(n) that checks if a number is prime, the puzzle requires students to write a function g() that generates a random number between 2 and 50 and returns it. The puzzle is solved if the generated number is prime."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and generating random numbers within a specific range. Students need to ensure that the random number generated by g() is prime according to the function f(n).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport string\n\ndef f(s: str) -> bool:\n    return set(s.lower()) >= set(string.ascii_lowercase)\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog.\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations. The function f checks if the input string contains all the lowercase letters of the alphabet using set operations. The solution g returns a specific string that contains all the lowercase letters of the alphabet. The assertion at the end verifies that the function f returns True for the output of g.",
        "idx_generation": 67,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]\ndef g():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "import string\n\ndef f(s: str) -> bool:\n    return set(s.lower()) >= set(string.ascii_lowercase)",
        "solution_func": "def g():\n    return \"The quick brown fox jumps over the lazy dog.\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function g() to return a specific sentence, and function f(s: str) checks if the sentence contains all the letters of the alphabet at least once."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given sentence contains all the letters of the alphabet at least once. The function f(s: str) checks this condition, and function g() needs to return a specific sentence that satisfies the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return all((sum(pair) for pair in tuples))\n\ndef g():\n    return [(2, 3), (5, 7), (10, 15)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return all((sum(pair) for pair in tuples))",
        "solution_func": "def g():\n    return [(2, 3), (5, 7), (10, 15)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples of integers and returns True if the sum of each tuple is non-zero."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function f checks if the sum of each tuple in the input list is non-zero. The solution function g returns a list of tuples, and the assertion checks if f applied to the output of g returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sorted_list: list, words=['apple', 'banana', 'cherry', 'dates'], key=lambda x: len(x)) -> bool:\n    return sorted_list == sorted(words, key=key)\ndef g(words=['apple', 'banana', 'cherry', 'dates'], key=lambda x: len(x)):\n    return sorted(words, key=key)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of words based on a key function and checking if the sorted list matches a given list. This involves concepts of sorting and lambda functions.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(sorted_list: list, words=['apple', 'banana', 'cherry', 'dates'], key=lambda x: len(x)) -> bool:\n    return sorted_list == sorted(words, key=key)",
        "solution_func": "def g(words=['apple', 'banana', 'cherry', 'dates'], key=lambda x: len(x)):\n    return sorted(words, key=key)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list is sorted according to a specified key function, using a default list of words and a default key function based on word length."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of sorting lists using a key function in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(fib_num: int, n=8) -> bool:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a == fib_num\ndef g(n=8):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and recursion.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(fib_num: int, n=8) -> bool:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a == fib_num",
        "solution_func": "def g(n=8):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating the nth Fibonacci number using two functions, f and g. Function f checks if the output of function g is equal to the nth Fibonacci number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to generate Fibonacci numbers using a loop and checking the correctness of the generated number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Set Operations and Conditional Logic.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the function f checks if there are two numbers in the list that add up to a target value. The function g returns a list of numbers. The puzzle is to determine if the function f returns True when called with the output of function g as input."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for a specific condition in a list of numbers using a set to efficiently store and retrieve values. The solution function g returns a list of numbers that satisfy the condition for function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(second_smallest: int, nums=[5, 2, 9, 1, 5, 6, 3]) -> bool:\n    sorted_nums = sorted(nums)\n    return second_smallest == sorted_nums[1]\ndef g(nums=[5, 2, 9, 1, 5, 6, 3]):\n    sorted_nums = sorted(nums)\n    return sorted_nums[1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and checking if the second smallest number matches a given input. This involves topics such as Sorting and Ordering, List Manipulation, and Conditional Logic.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(second_smallest: int, nums=[5, 2, 9, 1, 5, 6, 3]) -> bool:\n    sorted_nums = sorted(nums)\n    return second_smallest == sorted_nums[1]",
        "solution_func": "def g(nums=[5, 2, 9, 1, 5, 6, 3]):\n    sorted_nums = sorted(nums)\n    return sorted_nums[1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the second smallest number in a list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if the input second smallest number matches the second smallest number in a predefined list. The solution function g sorts the list and returns the second smallest number. The assertion at the end checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, palindrome=\"racecar\") -> bool:\n    return s == s[::-1]\ndef g(palindrome=\"racecar\"):\n    return palindrome\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, palindrome=\"racecar\") -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(palindrome=\"racecar\"):\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a string is a palindrome and then providing a solution function that returns a predefined palindrome string. The assertion checks if the solution function correctly identifies the predefined palindrome as a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, prime=17) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(prime=17):\n    while True:\n        if all(prime % i != 0 for i in range(2, int(prime ** 0.5) + 1)):\n            return prime\n        prime += 1\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) and Mathematical Operations topics.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, prime=17) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime=17):\n    while True:\n        if all(prime % i != 0 for i in range(2, int(prime ** 0.5) + 1)):\n            return prime\n        prime += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num: int, prime=17) and g(prime=17), where f checks if a number is prime and g finds the next prime number after a given number. The puzzle requires g to find the next prime number after a given number and f to check if that number is prime."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to find the next prime number after a given number. It tests the student's knowledge of prime number checking and iteration in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], sorted_list=[-5, 0, 3, 8, 12, 17, 22]) -> bool:\n    return nums == sorted(nums)\ndef g(sorted_list=[-5, 0, 3, 8, 12, 17, 22]):\n    return sorted_list\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if it is sorted correctly.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], sorted_list=[-5, 0, 3, 8, 12, 17, 22]) -> bool:\n    return nums == sorted(nums)",
        "solution_func": "def g(sorted_list=[-5, 0, 3, 8, 12, 17, 22]):\n    return sorted_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given list of numbers is sorted in ascending order. The solution function simply returns a pre-defined sorted list."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle is not suitable for teaching Python as it does not provide a meaningful algorithmic challenge for the students to solve.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\nimport string\n\ndef f(s: str) -> bool:\n    return s.isalnum()\n\ndef g(length=8):\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True"
        ],
        "problem_func": "import random\nimport string\n\ndef f(s: str) -> bool:\n    return s.isalnum()",
        "solution_func": "def g(length=8):\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random string of a specified length and checking if the string contains only alphanumeric characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the isalnum() method to check if a string contains only alphanumeric characters and generating a random string using random.choices() and string.ascii_letters + string.digits.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17  # Return a prime number\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm. It does not directly relate to any specific topic from the list provided.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17  # Return a prime number",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns a prime number and passes the prime number check in f(g())."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to understand prime numbers and how to generate them. They need to write a function g() that returns a prime number and ensure that the function f(num) correctly identifies it as a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, n=5) -> bool:\n    return result == n * (n + 1) // 2\ndef g(n=5):\n    if n == 1:\n        return 1\n    else:\n        return n + g(n - 1)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and recursion.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
            "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, n=5) -> bool:\n    return result == n * (n + 1) // 2",
        "solution_func": "def g(n=5):\n    if n == 1:\n        return 1\n    else:\n        return n + g(n - 1)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given result is equal to the sum of the first n natural numbers, and a recursive function g that calculates the sum of the first n natural numbers. The assertion at the end checks if f(g()) evaluates to True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding recursion and mathematical concepts related to the sum of natural numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: str, text=\"Python is fun!\") -> bool:\n    return result == text[::2]\ndef g(text=\"Python is fun!\"):\n    return text[::2]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation by comparing a result with a sliced version of a given text. The solution function returns a sliced version of the text. The assertion checks if the result of the solution function satisfies the condition in the puzzle function.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
            "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: str, text=\"Python is fun!\") -> bool:\n    return result == text[::2]",
        "solution_func": "def g(text=\"Python is fun!\"):\n    return text[::2]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if the result of g applied to a default text is equal to a modified version of the default text. The assert statement confirms that g is a solution to f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple string manipulation task where g returns every second character of the default text. The solution g satisfies the condition of f, making it a valid solution to the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], target=9) -> bool:\n    prefix_sum = {0}\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum - target in prefix_sum:\n            return True\n        prefix_sum.add(current_sum)\n    return False\n\ndef g(target=9):\n    return [3, 1, 4, 2, 2]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves the topics of Array Manipulation, Prefix Sum, and Searching Algorithms.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], target=9) -> bool:\n    prefix_sum = {0}\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum - target in prefix_sum:\n            return True\n        prefix_sum.add(current_sum)\n    return False",
        "solution_func": "def g(target=9):\n    return [3, 1, 4, 2, 2]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function f checks if there exists a subarray whose sum equals a target value. The solution function g returns a specific list of integers. The puzzle is considered solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prefix sums and subarrays in Python. The solution function g returns a list of integers that satisfies the condition of the puzzle function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(lower_limit=10, upper_limit=20):\n    return 13\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and number theory (primes).",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, s1='t', s2='qu', count1=86, count2=83) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 't', s2 = 'qu', count1 = 86, count2 = 83):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True",
            "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(lower_limit=10, upper_limit=20):\n    return 13",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g(lower_limit, upper_limit) that returns a specific number within a range. The puzzle requires g to return a prime number within a specified range and f to validate this result."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and function implementation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, rev=\"racecar\") -> bool:\n    return s == rev\ndef g(s=\"racecar\"):\n    return s[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, rev=\"racecar\") -> bool:\n    return s == rev",
        "solution_func": "def g(s=\"racecar\"):\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that returns the reverse of a predefined string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and comparison in Python, specifically checking for palindromes. It is a suitable challenge for students learning Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport string\n\ndef f(s: str, length=10) -> bool:\n    return len(s) == length and s.isalnum()\n\ndef g(length=10):\n    chars = string.ascii_letters + string.digits\n    return ''.join(chars[i % len(chars)] for i in range(length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "import string\n\ndef f(s: str, length=10) -> bool:\n    return len(s) == length and s.isalnum()",
        "solution_func": "def g(length=10):\n    chars = string.ascii_letters + string.digits\n    return ''.join(chars[i % len(chars)] for i in range(length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a function that generates a random string of a specified length and checks if the string is alphanumeric and of the specified length."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random string using a given set of characters and checking if the string is alphanumeric and of a specified length. The solution function should generate the random string and the puzzle function should validate it based on the specified conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], n=5) -> bool:\n    return len(nums) == n and all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g(n=5):\n    return list(range(n, 0, -1))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers in descending order and checking if the list is sorted in non-increasing order. This involves concepts of sorting and ordering, as well as conditional logic.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], n=5) -> bool:\n    return len(nums) == n and all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g(n=5):\n    return list(range(n, 0, -1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is in descending order and of a specific length, and a function g that generates a list of integers in descending order of a specified length. The assert statement checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the ability to define functions with default arguments and use them in conjunction to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(numbers: List[int], common_diff=3) -> bool:\n    return all(numbers[i] - numbers[i-1] == common_diff for i in range(1, len(numbers))) and sum(numbers) == len(numbers) * (2 * numbers[0] + (len(numbers) - 1) * common_diff) / 2\ndef g(common_diff=3):\n    import random\n    n = random.randint(3, 10)\n    start = random.randint(1, 10)\n    return [start + i * common_diff for i in range(n)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and random number generation.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(numbers: List[int], common_diff=3) -> bool:\n    return all(numbers[i] - numbers[i-1] == common_diff for i in range(1, len(numbers))) and sum(numbers) == len(numbers) * (2 * numbers[0] + (len(numbers) - 1) * common_diff) / 2",
        "solution_func": "def g(common_diff=3):\n    import random\n    n = random.randint(3, 10)\n    start = random.randint(1, 10)\n    return [start + i * common_diff for i in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers follows an arithmetic sequence with a common difference, and if the sum of the numbers is calculated correctly based on the arithmetic sequence formula."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list comprehension, arithmetic sequences, and the sum formula for arithmetic sequences in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(words: List[str], target_word='listen') -> bool:\n    from collections import Counter\n    target_count = Counter(target_word)\n    return any(Counter(word) == target_count for word in words)\ndef g(target_word='listen'):\n    import itertools\n    return [''.join(p) for p in itertools.permutations(target_word)]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Permutations and Combinations, Importing Modules (Itertools, etc.)",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(words: List[str], target_word='listen') -> bool:\n    from collections import Counter\n    target_count = Counter(target_word)\n    return any(Counter(word) == target_count for word in words)",
        "solution_func": "def g(target_word='listen'):\n    import itertools\n    return [''.join(p) for p in itertools.permutations(target_word)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if any word in a list of words is an anagram of a target word. The solution function g generates all permutations of the target word and returns them as a list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for anagrams using Counter objects in Python and generating permutations using itertools. The solution function g correctly generates all permutations of the target word and passes the test case in the assert statement.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"level\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True",
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'level'. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True",
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g() that returns the number 17. The puzzle tests whether the function f correctly identifies 17 as a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithm to check for prime numbers and a fixed value of 17 as the input to test the algorithm. It is suitable for teaching basic concepts of functions and conditionals in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(number: int, result=1) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(math.sqrt(result)) + 1):\n        if result % i == 0:\n            return False\n    return True\ndef g(number=5):\n    result = 1\n    for i in range(2, number + 1):\n        result *= i\n    return result\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and number theory (primes).",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True",
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(number: int, result=1) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(math.sqrt(result)) + 1):\n        if result % i == 0:\n            return False\n    return True",
        "solution_func": "def g(number=5):\n    result = 1\n    for i in range(2, number + 1):\n        result *= i\n    return result",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given number is a prime number and g calculates the factorial of a given number. The puzzle requires g to calculate the factorial of a number and f to check if the result is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of prime numbers, factorials, loops, and mathematical operations in Python. It can be used to teach students about these concepts and how to combine multiple functions to solve a problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sequence: list, is_arithmetic=False) -> bool:\n    diff = sequence[1] - sequence[0]\n    return all(sequence[i] - sequence[i-1] == diff for i in range(2, len(sequence)))\ndef g(sequence=[2, 4, 6, 8, 10]):\n    return sequence\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given sequence is arithmetic.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True",
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True"
        ],
        "problem_func": "def f(sequence: list, is_arithmetic=False) -> bool:\n    diff = sequence[1] - sequence[0]\n    return all(sequence[i] - sequence[i-1] == diff for i in range(2, len(sequence)))",
        "solution_func": "def g(sequence=[2, 4, 6, 8, 10]):\n    return sequence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given sequence is arithmetic or not based on the difference between consecutive elements. The solution function g returns a predefined arithmetic sequence, and the puzzle is solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the ability to define functions and use default arguments in function definitions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, numbers=[2, 5, 7, 10, 3, 8]) -> bool:\n    max_product = max(numbers) * sorted(numbers)[-2]\n    return result == max_product\ndef g(numbers=[2, 5, 7, 10, 3, 8]):\n    return max(numbers) * sorted(numbers)[-2]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, numbers=[2, 5, 7, 10, 3, 8]) -> bool:\n    max_product = max(numbers) * sorted(numbers)[-2]\n    return result == max_product",
        "solution_func": "def g(numbers=[2, 5, 7, 10, 3, 8]):\n    return max(numbers) * sorted(numbers)[-2]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that calculates the maximum product of the two largest numbers in a list, and then check if a given result matches this maximum product."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to find the maximum product of two numbers in a list and comparing it with a given result.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(rev: str, sentence=\"Python is awesome!\") -> bool:\n    return rev == ' '.join(word[::-1] for word in sentence.split())\ndef g(sentence=\"Python is awesome!\"):\n    return ' '.join(word[::-1] for word in sentence.split())\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(rev: str, sentence=\"Python is awesome!\") -> bool:\n    return rev == ' '.join(word[::-1] for word in sentence.split())",
        "solution_func": "def g(sentence=\"Python is awesome!\"):\n    return ' '.join(word[::-1] for word in sentence.split())",
        "quality": [
            null
        ],
        "description": [
            "Given a sentence, the puzzle requires reversing each word in the sentence and checking if the reversed sentence matches a given string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves reversing each word in a sentence and comparing it to a given string to determine if the reversed sentence matches the string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int, n=5) -> bool:\n    def recursive_factorial(n):\n        if n == 0:\n            return 1\n        return n * recursive_factorial(n - 1)\n    return factorial == recursive_factorial(n)\ndef g(n=5):\n    def recursive_factorial(n):\n        if n == 0:\n            return 1\n        return n * recursive_factorial(n - 1)\n    return recursive_factorial(n)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion and mathematical operations to calculate the factorial of a number. It also includes a function call within another function. The solution function g() calculates the factorial using recursion and then checks if it satisfies the condition in function f().",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(factorial: int, n=5) -> bool:\n    def recursive_factorial(n):\n        if n == 0:\n            return 1\n        return n * recursive_factorial(n - 1)\n    return factorial == recursive_factorial(n)",
        "solution_func": "def g(n=5):\n    def recursive_factorial(n):\n        if n == 0:\n            return 1\n        return n * recursive_factorial(n - 1)\n    return recursive_factorial(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given factorial value is equal to the factorial of a specified number using recursion. Another function g calculates the factorial of a specified number using recursion. The puzzle tests if function g correctly calculates the factorial and if function f correctly verifies the result."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves recursion and factorial calculation, which are common concepts in programming. It can be used to test the understanding of recursion and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(filtered: dict, d={'a': 5, 'b': 10, 'c': 15, 'd': 20}, threshold=10) -> bool:\n    return filtered == {k: v for k, v in d.items() if v > threshold}\ndef g(d={'a': 5, 'b': 10, 'c': 15, 'd': 20}, threshold=10):\n    return {k: v for k, v in d.items() if v > threshold}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic to filter out key-value pairs based on a threshold value.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(filtered: dict, d={'a': 5, 'b': 10, 'c': 15, 'd': 20}, threshold=10) -> bool:\n    return filtered == {k: v for k, v in d.items() if v > threshold}",
        "solution_func": "def g(d={'a': 5, 'b': 10, 'c': 15, 'd': 20}, threshold=10):\n    return {k: v for k, v in d.items() if v > threshold}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a dictionary and checks if the dictionary contains key-value pairs with values greater than a specified threshold. Another function g is defined to filter the dictionary based on the threshold. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding dictionary comprehension and function composition in Python. Students need to grasp how to filter dictionary items based on a condition and how to define functions that work together to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(rev_str: str) -> bool:\n    return rev_str == 'level'\n\ndef g(s='level'):\n    return s[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(rev_str: str) -> bool:\n    return rev_str == 'level'",
        "solution_func": "def g(s='level'):\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks if a given string is equal to 'level', and then define another function that returns the reverse of the string 'level'. The assertion checks if the reverse of 'level' satisfies the condition of being equal to 'level'."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of function definitions in Python. It is a simple and straightforward puzzle that can be used to teach basic concepts in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, seq=[2, 4, 6, 8]) -> bool:\n    for i in range(len(seq)):\n        if lst[i] != seq[i]:\n            return False\n    return True\n\ndef g(seq=[2, 4, 6, 8]):\n    return seq[:2] + seq[2:]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and comparison of elements in the list.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, seq=[2, 4, 6, 8]) -> bool:\n    for i in range(len(seq)):\n        if lst[i] != seq[i]:\n            return False\n    return True",
        "solution_func": "def g(seq=[2, 4, 6, 8]):\n    return seq[:2] + seq[2:]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f(lst: list, seq=[2, 4, 6, 8]) -> bool and g(seq=[2, 4, 6, 8]), where f checks if the input list matches a predefined sequence and g returns a modified version of the input sequence. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list slicing and comparison in Python. It tests the student's ability to manipulate lists and compare elements based on a predefined sequence.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, num=10, op='+', value=5) -> bool:\n    if op == '+':\n        return num + value == result\n    elif op == '-':\n        return num - value == result\n    elif op == '*':\n        return num * value == result\n    elif op == '/':\n        return num / value == result\n\ndef g(op='+', value=5):\n    if op == '+':\n        return 10 + value\n    elif op == '-':\n        return 10 - value\n    elif op == '*':\n        return 10 * value\n    elif op == '/':\n        return 10 / value\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, num=10, op='+', value=5) -> bool:\n    if op == '+':\n        return num + value == result\n    elif op == '-':\n        return num - value == result\n    elif op == '*':\n        return num * value == result\n    elif op == '/':\n        return num / value == result",
        "solution_func": "def g(op='+', value=5):\n    if op == '+':\n        return 10 + value\n    elif op == '-':\n        return 10 - value\n    elif op == '*':\n        return 10 * value\n    elif op == '/':\n        return 10 / value",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a mathematical operation on two numbers results in a given value, and g performs the mathematical operation. The assertion at the end checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic arithmetic operations and function calls in Python. It tests the understanding of function composition and parameter passing in Python functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], target=10) -> bool:\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as List Manipulation, Brute Force Search, and Mathematical Operations.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], target=10) -> bool:\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            if sum(nums[i:j]) == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a subarray in a list of integers that sums up to a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves iterating through all possible subarrays of the input list and checking if the sum of each subarray equals the target value.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, target='A man, a plan, a canal: Panama') -> bool:\n    clean_s = ''.join(filter(str.isalnum, s.lower()))\n    return clean_s == clean_s[::-1]\n\ndef g(target='A man, a plan, a canal: Panama'):\n    clean_target = ''.join(filter(str.isalnum, target.lower()))\n    return clean_target + clean_target[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, target='A man, a plan, a canal: Panama') -> bool:\n    clean_s = ''.join(filter(str.isalnum, s.lower()))\n    return clean_s == clean_s[::-1]",
        "solution_func": "def g(target='A man, a plan, a canal: Panama'):\n    clean_target = ''.join(filter(str.isalnum, target.lower()))\n    return clean_target + clean_target[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a target string, the puzzle requires the student to create a function that removes non-alphanumeric characters, converts the string to lowercase, and checks if it is a palindrome. The solution function creates a clean version of the target string by removing non-alphanumeric characters, converting it to lowercase, and then concatenating it with its reverse. The solution function is considered correct if the puzzle function returns True when given the output of the solution function as input."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, filtering non-alphanumeric characters, converting to lowercase, and checking for palindromes. The solution function correctly creates a clean version of the target string and concatenates it with its reverse to satisfy the puzzle condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], target=15) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=15):\n    return [7, 8]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Brute Force Search, and Conditional Logic.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], target=15) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=15):\n    return [7, 8]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if there are two numbers in the list that add up to a target value. The function g returns a list of integers. The puzzle is to find a list of integers that satisfy the condition of function f when passed to function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how the function f checks for a specific condition in a list of integers and finding a solution in function g that satisfies this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, palindrome='racecar') -> bool:\n    return s == s[::-1]\ndef g(palindrome = 'racecar'):\n    return palindrome\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, palindrome='racecar') -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(palindrome = 'racecar'):\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome, and a function g that returns a predefined palindrome string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically checking for palindromes and function calls. It is a simple and straightforward puzzle that can be used to reinforce basic concepts in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(lst: List[int], sorted_lst=[1, 2, 3, 4, 5]) -> bool:\n    return lst == sorted(lst)\ndef g(sorted_lst = [1, 2, 3, 4, 5]):\n    return sorted_lst\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if it is sorted correctly.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(lst: List[int], sorted_lst=[1, 2, 3, 4, 5]) -> bool:\n    return lst == sorted(lst)",
        "solution_func": "def g(sorted_lst = [1, 2, 3, 4, 5]):\n    return sorted_lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given list is sorted in ascending order, and a function g that returns a predefined sorted list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if a given list is sorted in ascending order. The solution function g simply returns a predefined sorted list, and the puzzle function f checks if a given list is equal to the predefined sorted list. The assertion at the end verifies that the puzzle function f returns True when applied to the solution function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, key='temperature', value=25) -> bool:\n    return key in data and data[key] >= value\n\ndef g(data={'temperature': 25, 'humidity': 60, 'pressure': 1013}):\n    return data\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic and dictionary manipulation in Python.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
            "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: dict, key='temperature', value=25) -> bool:\n    return key in data and data[key] >= value",
        "solution_func": "def g(data={'temperature': 25, 'humidity': 60, 'pressure': 1013}):\n    return data",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given key-value pair exists in a dictionary and if the value associated with the key is greater than or equal to a specified value. The solution function g returns a dictionary with specific key-value pairs. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks dictionary key-value pairs and how to create a dictionary with specific key-value pairs. It also tests the understanding of function invocation and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(lst: List[int]) -> bool:\n    return any(is_prime(num) for num in lst)\n\ndef g():\n    return [1, 4, 7, 10, 11, 15]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers in a list of integers.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(lst: List[int]) -> bool:\n    return any(is_prime(num) for num in lst)",
        "solution_func": "def g():\n    return [1, 4, 7, 10, 11, 15]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if any number in a given list is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function that checks if any number in a list is a prime number. The solution function generates a list of numbers and checks if any of them are prime numbers.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    return np.array_equal(matrix, matrix.T)\n\ndef g(size=3):\n    matrix = np.random.randint(10, size=(size, size))\n    return (matrix + matrix.T) // 2\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation using NumPy library in Python.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True"
        ],
        "problem_func": "import numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    return np.array_equal(matrix, matrix.T)",
        "solution_func": "def g(size=3):\n    matrix = np.random.randint(10, size=(size, size))\n    return (matrix + matrix.T) // 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given matrix is equal to its transpose, and a function g that generates a random matrix, computes its symmetric matrix, and returns the average of the original and symmetric matrices. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves matrix manipulation using NumPy in Python to check for symmetry and generate symmetric matrices.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return s == s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function to check if a given string is a palindrome after removing non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a string is a palindrome after removing non-alphanumeric characters and ignoring case.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return all(nums[i] - nums[i - 1] == nums[1] - nums[0] for i in range(2, len(nums)))\n\ndef g(start=1, diff=2, length=5):\n    return [start + diff * n for n in range(length)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return all(nums[i] - nums[i - 1] == nums[1] - nums[0] for i in range(2, len(nums)))",
        "solution_func": "def g(start=1, diff=2, length=5):\n    return [start + diff * n for n in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of numbers forms an arithmetic sequence, and a function g that generates a list of numbers in an arithmetic sequence based on given parameters. The assertion tests if the generated list satisfies the condition of forming an arithmetic sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding arithmetic sequences and how to generate them using a Python function. It tests the student's ability to write a function that generates a specific sequence and another function that checks if a given list forms that sequence.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palin: str, max_len=7) -> bool:\n    return palin == palin[::-1] and len(palin) == max_len\ndef g(max_len=7):\n    string = \"levelracecarrotor\"\n    palindromes = [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1) if string[i:j] == string[i:j][::-1]]\n    return max(palindromes, key=len)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, List Comprehension",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(palin: str, max_len=7) -> bool:\n    return palin == palin[::-1] and len(palin) == max_len",
        "solution_func": "def g(max_len=7):\n    string = \"levelracecarrotor\"\n    palindromes = [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1) if string[i:j] == string[i:j][::-1]]\n    return max(palindromes, key=len)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome of a specific length and finding the longest palindrome in a given string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, list comprehension, and palindrome checking in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target: int, nums=[3, 7, 11, 15, 5]) -> bool:\n    return any(target - num in nums for num in nums) and len(set(nums)) == len(nums)\ndef g(nums=[3, 7, 11, 15, 5]):\n    return sum(nums[1:3])\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for the presence of a target number in a list of numbers and comparing the uniqueness of the numbers in the list. The solution involves summing a specific subset of the numbers in the list.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True",
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(target: int, nums=[3, 7, 11, 15, 5]) -> bool:\n    return any(target - num in nums for num in nums) and len(set(nums)) == len(nums)",
        "solution_func": "def g(nums=[3, 7, 11, 15, 5]):\n    return sum(nums[1:3])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if there are two numbers in a given list that add up to a target number, and if all numbers in the list are unique. The solution function g returns the sum of the second and third elements in the list. The assertion checks if the solution satisfies the conditions of the puzzle."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension, set operations, and indexing in Python. It also requires understanding of the logical conditions in the function f and the correct implementation of the solution function g.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, original=\"racecar\") -> bool:\n    return s == original[::-1]\ndef g(original=\"racecar\"):\n    return original\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, original=\"racecar\") -> bool:\n    return s == original[::-1]",
        "solution_func": "def g(original=\"racecar\"):\n    return original",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome of the original string 'racecar'. The function g returns the original string 'racecar'. The puzzle is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and checking for palindromes in Python. It is a simple and straightforward puzzle that can be used to teach basic concepts in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, original=[1, 2, 3, 4, 5]) -> bool:\n    return lst == sorted(lst) and all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\ndef g(original=[1, 2, 3, 4, 5]):\n    return original.copy()\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if it is in ascending order. It also uses list manipulation techniques such as copying a list. The solution function returns a sorted copy of the original list.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, original=[1, 2, 3, 4, 5]) -> bool:\n    return lst == sorted(lst) and all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))",
        "solution_func": "def g(original=[1, 2, 3, 4, 5]):\n    return original.copy()",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that returns a sorted list and checks if the list is in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and checking for ascending order.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, original=17) -> bool:\n    return num == original and all(num % i != 0 for i in range(2, int(num ** 0.5) + 1))\ndef g(original=17):\n    return original\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) and Mathematical Operations topics.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, original=17) -> bool:\n    return num == original and all(num % i != 0 for i in range(2, int(num ** 0.5) + 1))",
        "solution_func": "def g(original=17):\n    return original",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given number is a prime number and equal to a specified original number. The function g returns the original number. The puzzle tests if the function f correctly identifies the original number as a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function to check for prime numbers and using the function to verify a specific condition. It tests the student's knowledge of function definitions and condition checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: float, a=3, b=5) -> bool:\n    return result == a * b\n\ndef g(a=3, b=5):\n    return a * b\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: float, a=3, b=5) -> bool:\n    return result == a * b",
        "solution_func": "def g(a=3, b=5):\n    return a * b",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the result is equal to the product of two given numbers, and a function g that returns the product of two given numbers. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, parameter passing, and function invocation in Python. It also tests the understanding of comparison operators and function return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abab') -> bool:\n    return s.count(pattern) > 0\n\ndef g(pattern='abab'):\n    return pattern * 3 + 'c'\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation, Conditional Logic, and Function Calls.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abab') -> bool:\n    return s.count(pattern) > 0",
        "solution_func": "def g(pattern='abab'):\n    return pattern * 3 + 'c'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given pattern appears in a string, and a function g that generates a string based on a specified pattern. The goal is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport numpy as np\n\ndef f(matrix: np.array) -> bool:\n    return (matrix == matrix.T).all()\n\ndef g():\n    return np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal, which falls under the topic of Matrix Operations and Symmetry. The use of numpy library for matrix operations also falls under the topic of Importing Modules.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "import numpy as np\n\ndef f(matrix: np.array) -> bool:\n    return (matrix == matrix.T).all()",
        "solution_func": "def g():\n    return np.array([[1, 2, 3], [2, 4, 5], [3, 5, 6]])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given matrix is symmetric or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function that checks if a given matrix is symmetric by comparing it with its transpose.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return all((nums[i] + nums[i+1] == nums[i+2] for i in range(len(nums) - 2)))\n\ndef g():\n    return [0, 1, 1, 2, 3, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if a certain pattern is satisfied in a list of numbers.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return all((nums[i] + nums[i+1] == nums[i+2] for i in range(len(nums) - 2)))",
        "solution_func": "def g():\n    return [0, 1, 1, 2, 3, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(nums: list) that checks if the sum of consecutive elements in a list equals the next element, and a function g() that returns a specific list. The puzzle is to determine if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the sum of consecutive elements in a list matches the next element, which tests the understanding of list comprehension and indexing in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] - nums[i - 1] == nums[1] - nums[0] for i in range(2, len(nums))) and len(nums) >= 3\ndef g(start=1, diff=4, length=5):\n    return [start + diff * i for i in range(length)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking the arithmetic progression in a list of numbers.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] - nums[i - 1] == nums[1] - nums[0] for i in range(2, len(nums))) and len(nums) >= 3",
        "solution_func": "def g(start=1, diff=4, length=5):\n    return [start + diff * i for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers forms an arithmetic sequence with a common difference, and has a length of at least 3."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand list comprehension, arithmetic sequences, and the 'all' function in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1] and len(s) % 2 != 0\ndef g():\n    return '12321'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1] and len(s) % 2 != 0",
        "solution_func": "def g():\n    return '12321'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome with an odd length."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome with an odd length. The solution function g() returns the string '12321', which is a palindrome with an odd length. The assert statement confirms that the solution function g() satisfies the condition of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)\n\ndef g(length=10):\n    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    return ''.join(random.sample(characters, length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "import random\n\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g(length=10):\n    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    return ''.join(random.sample(characters, length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a random string of a specified length and checking if all characters in the string are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to generate a random string using specific characters and then check if all characters in the string are unique.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    return np.allclose(matrix, matrix.T)\n\ndef g(size=3):\n    matrix = np.random.randint(1, 10, (size, size))\n    return matrix + matrix.T - np.diag(matrix.diagonal())\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a matrix is symmetric along its diagonal by comparing it with its transpose. The solution generates a random matrix, makes it symmetric along its diagonal, and then checks if the puzzle function returns True for this matrix.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "import numpy as np\n\ndef f(matrix: np.ndarray) -> bool:\n    return np.allclose(matrix, matrix.T)",
        "solution_func": "def g(size=3):\n    matrix = np.random.randint(1, 10, (size, size))\n    return matrix + matrix.T - np.diag(matrix.diagonal())",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a randomly generated square matrix is symmetric by comparing it with its transpose."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of numpy arrays, matrix operations, and symmetry properties of matrices.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 2 ** 7 - 1\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.)",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 2 ** 7 - 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number, and a function g() that returns a specific number. The assertion checks if the number returned by g() is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(is_palindrome: bool) -> bool:\n    s = ''.join(c for c in is_palindrome if c.isalpha()).lower()\n    return s == s[::-1]\n\ndef g() -> str:\n    import random\n    words = ['level', 'radar', 'python', 'madam', 'racecar']\n    sentence = random.choice(words)\n    return sentence\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True",
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(is_palindrome: bool) -> bool:\n    s = ''.join(c for c in is_palindrome if c.isalpha()).lower()\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    import random\n    words = ['level', 'radar', 'python', 'madam', 'racecar']\n    sentence = random.choice(words)\n    return sentence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a randomly selected word from a list is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to define a function that checks if a given string is a palindrome by removing non-alphabetic characters and comparing it to its reverse. The solution function randomly selects a word from a list and returns it.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: str, a='@', b='*') -> bool:\n    return a in x and b in x\ndef g(a='@', b='*'):\n    return a + b\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: str, a='@', b='*') -> bool:\n    return a in x and b in x",
        "solution_func": "def g(a='@', b='*'):\n    return a + b",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if two specified characters are present in a given string, and a function g that concatenates the two specified characters. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, parameter passing, string manipulation, and function invocation. It tests the student's ability to define functions and understand function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(grades: dict, threshold=80) -> bool:\n    avg_grade = sum(grades.values()) / len(grades)\n    return avg_grade > threshold\n\ndef g(grade_data={'Alice': 85, 'Bob': 78, 'Charlie': 92, 'David': 79}):\n    return grade_data\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and Dictionary Operations.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True"
        ],
        "problem_func": "def f(grades: dict, threshold=80) -> bool:\n    avg_grade = sum(grades.values()) / len(grades)\n    return avg_grade > threshold",
        "solution_func": "def g(grade_data={'Alice': 85, 'Bob': 78, 'Charlie': 92, 'David': 79}):\n    return grade_data",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that calculates the average grade from a dictionary of grades and checks if it is above a certain threshold. The solution function g returns a dictionary of grade data. The assertion checks if the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic concepts of functions, dictionaries, and comparison operators in Python. It tests the student's understanding of function definitions and function calls.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    return sum(x**2 for x in arr) == total\n\ndef g(arr=[1, 2, 3, 4, 5]):\n    return sum(x**2 for x in arr)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True",
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True"
        ],
        "problem_func": "def f(total: int, arr=[1, 2, 3, 4, 5]) -> bool:\n    return sum(x**2 for x in arr) == total",
        "solution_func": "def g(arr=[1, 2, 3, 4, 5]):\n    return sum(x**2 for x in arr)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that calculates the sum of squares of elements in a given list and then check if the sum is equal to a given total."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The student needs to define a function g that calculates the sum of squares of elements in a list. The puzzle tests the student's understanding of list comprehension and function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, asc=[3, 7, 11, 15]) -> bool:\n    return sorted(lst) == asc\ndef g(asc=[3, 7, 11, 15]):\n    return [x for x in asc if x % 2 != 0] + [x for x in asc if x % 2 == 0]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if it matches a specific order. The solution involves rearranging the elements of the list based on whether they are odd or even. The topics used in this puzzle are: Sorting and Ordering, Conditional Logic, List Operations",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True",
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, asc=[3, 7, 11, 15]) -> bool:\n    return sorted(lst) == asc",
        "solution_func": "def g(asc=[3, 7, 11, 15]):\n    return [x for x in asc if x % 2 != 0] + [x for x in asc if x % 2 == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list is sorted in a specific order, and a function g that rearranges elements in a list to match a predefined order. The assertion checks if g produces a list that satisfies the sorting condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and manipulation in Python. It tests the student's ability to define functions, manipulate lists, and understand list sorting logic.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target: str, s1='apple', s2='banana') -> bool:\n    return s1 + s2 == target or s2 + s1 == target\ndef g(s1='apple', s2='banana'):\n    return s1 + s2\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(target: str, s1='apple', s2='banana') -> bool:\n    return s1 + s2 == target or s2 + s1 == target",
        "solution_func": "def g(s1='apple', s2='banana'):\n    return s1 + s2",
        "quality": [
            null
        ],
        "description": [
            "Given two strings s1='apple' and s2='banana', the puzzle requires defining a function f(target: str, s1='apple', s2='banana') that returns True if the concatenation of s1 and s2 is equal to the target string, or if the concatenation of s2 and s1 is equal to the target string. The solution function g(s1='apple', s2='banana') simply returns the concatenation of s1 and s2. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string concatenation and comparison. The solution function g() returns the concatenation of the provided strings, and the puzzle function f() checks if the concatenation of s1 and s2 matches the target string. The puzzle is simple and focuses on string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int], target=15) -> bool:\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=15):\n    return [5, 10]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Brute Force Search, and Conditional Logic.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int], target=15) -> bool:\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=15):\n    return [5, 10]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the function f checks if there are two numbers in the list that add up to a target value. The function g returns a list of numbers, and the puzzle is to find a list of numbers that satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to find a pair of numbers in a list that add up to a target value. The solution function g returns a list that meets this condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a word is a palindrome.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome (reads the same forwards and backwards) by comparing the word to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f(word) that checks if a given word is a palindrome, and a function g() that returns the word 'radar'. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    def fibonacci(n):\n        fib = [0, 1]\n        while len(fib) < n:\n            fib.append(fib[-1] + fib[-2])\n        return fib\n\n    fib_nums = fibonacci(len(lst))\n    return all(x == y for x, y in zip(lst, fib_nums)) and lst == sorted(lst)\n\ndef g(n=10):\n    def fibonacci(n):\n        fib = [0, 1]\n        while len(fib) < n:\n            fib.append(fib[-1] + fib[-2])\n        return fib\n\n    return fibonacci(n)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion, list manipulation, and sorting.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    def fibonacci(n):\n        fib = [0, 1]\n        while len(fib) < n:\n            fib.append(fib[-1] + fib[-2])\n        return fib\n\n    fib_nums = fibonacci(len(lst))\n    return all(x == y for x, y in zip(lst, fib_nums)) and lst == sorted(lst)",
        "solution_func": "def g(n=10):\n    def fibonacci(n):\n        fib = [0, 1]\n        while len(fib) < n:\n            fib.append(fib[-1] + fib[-2])\n        return fib\n\n    return fibonacci(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list is a Fibonacci sequence up to a certain length and if it is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of Fibonacci sequences, list manipulation, and sorting in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, s='pythonprogramming') -> bool:\n    unique_chars = sorted(set(s))\n    return lst == unique_chars\n\ndef g(s='pythonprogramming'):\n    return sorted(list(set(s)))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting and ordering topics.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, s='pythonprogramming') -> bool:\n    unique_chars = sorted(set(s))\n    return lst == unique_chars",
        "solution_func": "def g(s='pythonprogramming'):\n    return sorted(list(set(s)))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list contains all unique characters from a specified string. The solution function g generates a list of unique characters from a specified string and returns it. The assertion checks if the solution function g satisfies the condition of the puzzle function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding sets, lists, sorting, and comparison in Python. It tests the ability to generate unique characters from a string and compare them with a given list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "def f(z: float, v=9, d=0.0001) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 9, d = 0.0001):\n    return v * d\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list, is_diagonal=False) -> bool:\n    n = len(matrix)\n    is_symmetric = all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\n    if is_diagonal:\n        return is_symmetric and all(matrix[i][j] == 0 for i in range(n) for j in range(n) if i != j)\n    return is_symmetric\n\ndef g(is_diagonal=False):\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    if is_diagonal:\n        matrix[1][0] = matrix[0][1] = matrix[2][0] = matrix[0][2] = matrix[2][1] = matrix[1][2] = 0\n    return matrix\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and symmetry checking, which can be categorized under topics such as Geometry and Coordinate Manipulation, and Pattern Recognition.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(matrix: list, is_diagonal=False) -> bool:\n    n = len(matrix)\n    is_symmetric = all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\n    if is_diagonal:\n        return is_symmetric and all(matrix[i][j] == 0 for i in range(n) for j in range(n) if i != j)\n    return is_symmetric",
        "solution_func": "def g(is_diagonal=False):\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    if is_diagonal:\n        matrix[1][0] = matrix[0][1] = matrix[2][0] = matrix[0][2] = matrix[2][1] = matrix[1][2] = 0\n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given matrix is symmetric, with an option to also check if it is diagonal. The solution generates a specific matrix and checks if it satisfies the conditions for symmetry and diagonal properties."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is focused on matrix properties and requires understanding of list comprehension and boolean conditions in Python. It can be used to teach concepts of matrix symmetry and diagonal matrices in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sorted_list: List[int], reference=8) -> bool:\n    for i in range(1, len(sorted_list)):\n        if abs(sorted_list[i] - reference) < abs(sorted_list[i-1] - reference):\n            return False\n    return True\n\ndef g(reference=8):\n    return sorted([5, 12, 3, 9, 6, 15], key=lambda x: abs(x - reference))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list based on the absolute difference from a reference value. It also includes a comparison based on absolute differences. The use of lambda function for sorting and the concept of absolute difference are key topics in this puzzle.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(sorted_list: List[int], reference=8) -> bool:\n    for i in range(1, len(sorted_list)):\n        if abs(sorted_list[i] - reference) < abs(sorted_list[i-1] - reference):\n            return False\n    return True",
        "solution_func": "def g(reference=8):\n    return sorted([5, 12, 3, 9, 6, 15], key=lambda x: abs(x - reference))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires sorting a list of integers based on their distance from a reference value, and checking if the sorted list meets a specific condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of integers based on their distance from a reference value and checking if the sorted list satisfies a condition. The solution function sorts the list using a lambda function and the puzzle function checks if the sorted list meets the condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(area: float, vertices=[[0, 0], [0, 4], [3, 4], [3, 0]]) -> bool:\n    return abs(area - 12) < 1e-6\n\ndef g(vertices=[[0, 0], [0, 4], [3, 4], [3, 0]]):\n    return 0.5 * abs(sum(x0*y1 - x1*y0 for (x0, y0), (x1, y1) in zip(vertices, vertices[1:] + [vertices[0]])))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves geometry and coordinate manipulation to calculate the area of a polygon defined by its vertices.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(area: float, vertices=[[0, 0], [0, 4], [3, 4], [3, 0]]) -> bool:\n    return abs(area - 12) < 1e-6",
        "solution_func": "def g(vertices=[[0, 0], [0, 4], [3, 4], [3, 0]]):\n    return 0.5 * abs(sum(x0*y1 - x1*y0 for (x0, y0), (x1, y1) in zip(vertices, vertices[1:] + [vertices[0]])))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves calculating the area of a polygon defined by its vertices and checking if the calculated area is approximately equal to 12."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of calculating the area of a polygon using its vertices and comparing it with a given value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g(s='racecar'):\n    return s + s[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='racecar'):\n    return s + s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it with its reverse. The solution function returns the input string concatenated with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for palindromes and string manipulation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, n=8) -> bool:\n    def fibonacci_recursive(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n    return result == fibonacci_recursive(n)\ndef g(n=8) -> int:\n    def fibonacci_recursive(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n    return fibonacci_recursive(n)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, n=8) -> bool:\n    def fibonacci_recursive(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n    return result == fibonacci_recursive(n)",
        "solution_func": "def g(n=8) -> int:\n    def fibonacci_recursive(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n    return fibonacci_recursive(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the result of a given number is equal to the nth Fibonacci number, and a function g that calculates the nth Fibonacci number using recursion. The puzzle requires the student to understand recursion and function calls in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a common programming concept (recursion) and tests the student's understanding of function calls and equality comparisons in Python. It can be used to teach Python programming to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom itertools import permutations\ndef f(valid_permutations: int, lst=[1, 2, 3]) -> bool:\n    return valid_permutations == sum(1 for perm in permutations(lst) if sum(perm) == 6)\ndef g(lst=[1, 2, 3]) -> int:\n    return sum(1 for perm in permutations(lst) if sum(perm) == 6)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Permutations and Combinations",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True"
        ],
        "problem_func": "from itertools import permutations\ndef f(valid_permutations: int, lst=[1, 2, 3]) -> bool:\n    return valid_permutations == sum(1 for perm in permutations(lst) if sum(perm) == 6)",
        "solution_func": "def g(lst=[1, 2, 3]) -> int:\n    return sum(1 for perm in permutations(lst) if sum(perm) == 6)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding valid permutations of a given list such that the sum of the permutation is equal to 6."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand permutations, summing elements in a list, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    return any(lst[i] == lst[i+1] for i in range(len(lst) - 1))\n\ndef g() -> List[int]:\n    return [i // 2 for i in range(10)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation, iteration, and conditional logic.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True",
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int]) -> bool:\n    return any(lst[i] == lst[i+1] for i in range(len(lst) - 1))",
        "solution_func": "def g() -> List[int]:\n    return [i // 2 for i in range(10)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if any two consecutive elements in a list are equal, and a function g that generates a list of integers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the any function in Python. It also tests the ability to write functions that work together to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    fib_seq = lambda n: n if n <= 1 else fib_seq(n-1) + fib_seq(n-2)\n    return all([numbers[i] == fib_seq(i) for i in range(len(numbers))])\ndef g():\n    return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion and mathematical operations to check if a list of numbers follows the Fibonacci sequence.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    fib_seq = lambda n: n if n <= 1 else fib_seq(n-1) + fib_seq(n-2)\n    return all([numbers[i] == fib_seq(i) for i in range(len(numbers))])",
        "solution_func": "def g():\n    return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given list of numbers follows the Fibonacci sequence. The solution function generates the Fibonacci sequence and compares it with the input list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the Fibonacci sequence and implementing a function to check if a list of numbers matches this sequence.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function f(num: int) that checks if a given number is a prime number. The student also needs to define a function g() that returns a specific number, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a prime number and ensuring that the function g() returns a number that satisfies the prime number condition in function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(words: list) -> bool:\n    return any([word == word[::-1] for word in words])\ndef g():\n    return ['racecar', 'python', 'level', 'algorithm']\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation by checking if each word in a list is a palindrome.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True"
        ],
        "problem_func": "def f(words: list) -> bool:\n    return any([word == word[::-1] for word in words])",
        "solution_func": "def g():\n    return ['racecar', 'python', 'level', 'algorithm']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if any word in a given list is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if any word in a list is a palindrome. The solution function g provides a list of words to be checked, and the assertion checks if the function f returns True for the provided list of words.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, check='racecar') -> bool:\n    return s == s[::-1]\ndef g(check='racecar'):\n    return check\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, check='racecar') -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(check='racecar'):\n    return check",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome, and a function g that returns a specific string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and the concept of palindromes. It is a simple exercise to test the understanding of function definitions and string comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], target=15) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=15):\n    return [4, 3, 8, 9, 5, 6, 7, 2, 1]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves the topics of Set Operations and Brute Force Search.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], target=15) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=15):\n    return [4, 3, 8, 9, 5, 6, 7, 2, 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding if there are two numbers in a list that add up to a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there are two numbers in a given list that sum up to a specified target value. The function f() uses a set to keep track of seen numbers and returns True if a pair is found, while function g() returns a list of numbers that satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, target=15) -> bool:\n    return sum(lst) == target and len(lst) == 5\ndef g(target=15):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the sum of a list is equal to a target value and if the length of the list is 5.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, target=15) -> bool:\n    return sum(lst) == target and len(lst) == 5",
        "solution_func": "def g(target=15):\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of a list is equal to a target value and the length of the list is 5. The solution function g returns a list [1, 2, 3, 4, 5] to satisfy the conditions of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks specific conditions on a list and then providing a solution that meets those conditions. It also tests the understanding of function calls and assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='apple') -> bool:\n    return key in d.keys() and d[key] == 'red'\ndef g(key='apple'):\n    return {'apple': 'red', 'banana': 'yellow', 'grape': 'purple'}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='apple') -> bool:\n    return key in d.keys() and d[key] == 'red'",
        "solution_func": "def g(key='apple'):\n    return {'apple': 'red', 'banana': 'yellow', 'grape': 'purple'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given key in a dictionary has a specific value, and a function g that returns a dictionary with key-value pairs. The puzzle tests whether function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, checking key-value pairs, and understanding function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, target='python') -> bool:\n    return s[::-1] == target and len(s) == 6\ndef g(target='python'):\n    return 'nohtyp'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, target='python') -> bool:\n    return s[::-1] == target and len(s) == 6",
        "solution_func": "def g(target='python'):\n    return 'nohtyp'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is the reverse of the target string 'python' and has a length of 6, and a function g that returns the reverse of the target string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of function definitions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    if len(numbers) < 2:\n        return False\n    ratio = numbers[1] / numbers[0]\n    return all(numbers[i] == numbers[i-1] * ratio for i in range(2, len(numbers)))\ndef g():\n    return [1, 2, 4, 8, 16, 32]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check if a list of numbers follows a specific pattern.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int]) -> bool:\n    if len(numbers) < 2:\n        return False\n    ratio = numbers[1] / numbers[0]\n    return all(numbers[i] == numbers[i-1] * ratio for i in range(2, len(numbers)))",
        "solution_func": "def g():\n    return [1, 2, 4, 8, 16, 32]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a list of numbers forms a geometric progression."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list of numbers forms a geometric progression by calculating the common ratio between consecutive elements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(words: List[str]) -> bool:\n    return len(set(\"\".join(sorted(word)) for word in words)) == 1\ndef g():\n    return [\"listen\", \"silent\", \"enlist\"]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, set operations, sorting and ordering.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(words: List[str]) -> bool:\n    return len(set(\"\".join(sorted(word)) for word in words)) == 1",
        "solution_func": "def g():\n    return [\"listen\", \"silent\", \"enlist\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a list of strings and checks if all the strings are anagrams of each other."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(words: List[str]) that checks if all the strings in the input list are anagrams of each other. The solution function g() returns a list of anagrams to test the function f. The assert statement checks if the function f(g()) returns True for the given list of anagrams.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, d={'a': 1, 'b': 2, 'c': 3}) -> bool:\n    return all((k in s and str(v) in s for k, v in d.items()))\ndef g(d={'a': 1, 'b': 2, 'c': 3}):\n    return ''.join([k + str(v) for k, v in d.items()])\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and dictionary operations.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, d={'a': 1, 'b': 2, 'c': 3}) -> bool:\n    return all((k in s and str(v) in s for k, v in d.items()))",
        "solution_func": "def g(d={'a': 1, 'b': 2, 'c': 3}):\n    return ''.join([k + str(v) for k, v in d.items()])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if all key-value pairs in a dictionary are present in a given string, and a function g that constructs a string by concatenating keys and values from a dictionary. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, strings, list comprehension, and the all() function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\ndef f(tuples: List[Tuple[int, int]], target=10) -> bool:\n    return any((a + b == target for i, (a, b) in enumerate(tuples) for (c, d) in tuples[i + 1:]))\ndef g(target=10):\n    return [(i, target - i) for i in range(target // 2)]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\ndef f(tuples: List[Tuple[int, int]], target=10) -> bool:\n    return any((a + b == target for i, (a, b) in enumerate(tuples) for (c, d) in tuples[i + 1:]))",
        "solution_func": "def g(target=10):\n    return [(i, target - i) for i in range(target // 2)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a pair of numbers in a list of tuples that sum up to a target value. The solution generates a list of tuples with numbers that add up to the target value and checks if the puzzle function returns True for this list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, tuple unpacking, and checking for a specific condition in a list of tuples. The solution demonstrates how to generate the required list of tuples and validate the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, p='racecar') -> bool:\n    return s == p\ndef g(p='racecar'):\n    return p\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, p='racecar') -> bool:\n    return s == p",
        "solution_func": "def g(p='racecar'):\n    return p",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string is equal to a default string 'racecar', and g returns the default string 'racecar'. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is straightforward and tests the understanding of function definitions and function calls in Python. It can be used to reinforce the concept of function composition and parameter passing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, find a string that satisfies the palindrome condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for palindromes in strings and providing a string that is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1]\n\ndef g():\n    import random\n    import string\n\n    def generate_palindrome_string(length):\n        half_length = length // 2\n        palindrome_root = ''.join(random.choices(string.ascii_lowercase, k=half_length))\n        palindrome = palindrome_root + (palindrome_root[::-1] if length % 2 == 0 else palindrome_root[-2::-1])\n        return palindrome\n\n    return generate_palindrome_string(random.randint(3, 10))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic to generate and check for palindromes.",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1]",
        "solution_func": "def g():\n    import random\n    import string\n\n    def generate_palindrome_string(length):\n        half_length = length // 2\n        palindrome_root = ''.join(random.choices(string.ascii_lowercase, k=half_length))\n        palindrome = palindrome_root + (palindrome_root[::-1] if length % 2 == 0 else palindrome_root[-2::-1])\n        return palindrome\n\n    return generate_palindrome_string(random.randint(3, 10))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(palindrome: str) that checks if a given string is a palindrome, and a function g() that generates a random palindrome string and checks if it is indeed a palindrome using function f. The assertion at the end ensures that the generated palindrome string is correctly identified as a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for palindromes in Python using string manipulation and random generation. It also tests the student's ability to write functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list, target_sum=100, num_elements=10) -> bool:\n    return sum(numbers) == target_sum and len(numbers) == num_elements\n\ndef g(target_sum=100, num_elements=10):\n    import random\n\n    numbers = [random.randint(1, 10) for _ in range(num_elements)]\n    while sum(numbers) != target_sum:\n        idx = random.randint(0, num_elements - 1)\n        diff = target_sum - sum(numbers)\n        numbers[idx] += diff\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating a list of random numbers and adjusting them to meet a target sum. It also includes a condition to check if the sum of the numbers is equal to the target sum and the length of the list is equal to a specified number of elements.",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list, target_sum=100, num_elements=10) -> bool:\n    return sum(numbers) == target_sum and len(numbers) == num_elements",
        "solution_func": "def g(target_sum=100, num_elements=10):\n    import random\n\n    numbers = [random.randint(1, 10) for _ in range(num_elements)]\n    while sum(numbers) != target_sum:\n        idx = random.randint(0, num_elements - 1)\n        diff = target_sum - sum(numbers)\n        numbers[idx] += diff\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of random numbers and adjusting the numbers to meet a target sum. The solution function generates a list of random numbers and adjusts them until the sum matches the target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random numbers and manipulating them to meet a specific target sum. The solution function adjusts the numbers until the sum matches the target sum.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime or not.",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(n) that checks if a number is prime, write a function g() that returns a specific number such that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to understand how to write a function that returns a specific number to satisfy the condition of being prime.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations to check for uniqueness of elements in a list.",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list contains unique elements, and a function g() that returns a list of unique elements. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, set operations, and function definitions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(primes: List[int], limit=100) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return all(is_prime(num) for num in primes)\n\ndef g(limit=100):\n    primes = []\n    for num in range(2, limit):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search approach and then verifying the solution using a function call. It also includes concepts of list manipulation and iteration.",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(primes: List[int], limit=100) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return all(is_prime(num) for num in primes)",
        "solution_func": "def g(limit=100):\n    primes = []\n    for num in range(2, limit):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers are prime numbers, and a function g that generates a list of prime numbers up to a given limit. The assertion at the end checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sentence: str) -> bool:\n    sentence = ''.join(char for char in sentence.lower() if char.isalnum())\n    return sentence == sentence[::-1]\n\ndef g(input_sentence='A man, a plan, a canal, Panama!'):\n    input_sentence = ''.join(char for char in input_sentence.lower() if char.isalnum())\n    return input_sentence + input_sentence[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True"
        ],
        "problem_func": "def f(sentence: str) -> bool:\n    sentence = ''.join(char for char in sentence.lower() if char.isalnum())\n    return sentence == sentence[::-1]",
        "solution_func": "def g(input_sentence='A man, a plan, a canal, Panama!'):\n    input_sentence = ''.join(char for char in input_sentence.lower() if char.isalnum())\n    return input_sentence + input_sentence[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given sentence is a palindrome after removing non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand string manipulation, palindrome checking, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(prime_list: list, target=17) -> bool:\n    return target in prime_list\n\ndef g(target=17):\n    prime_list = []\n    for num in range(2, target + 1):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            prime_list.append(num)\n    return prime_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves finding prime numbers and checking if a target number is in the list of prime numbers generated by a function.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True"
        ],
        "problem_func": "def f(prime_list: list, target=17) -> bool:\n    return target in prime_list",
        "solution_func": "def g(target=17):\n    prime_list = []\n    for num in range(2, target + 1):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            prime_list.append(num)\n    return prime_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a target number is in a list of prime numbers generated by function g. Function g generates a list of prime numbers up to the target number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, loops, and list operations in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int, m=10) -> bool:\n    return n % sum(range(1, m+1)) == 0\n\ndef g(m=10):\n    return sum(range(1, m+1))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int, m=10) -> bool:\n    return n % sum(range(1, m+1)) == 0",
        "solution_func": "def g(m=10):\n    return sum(range(1, m+1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given number is divisible by the sum of numbers from 1 to a specified value, and g calculates the sum of numbers from 1 to a specified value. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic arithmetic operations and function calls in Python. It tests the understanding of function definitions, parameter passing, and return values in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, n=3) -> bool:\n    return len(lst) == n\n\ndef g(n=3):\n    return [i**2 for i in range(1, n+1)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and mathematical operations.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, n=3) -> bool:\n    return len(lst) == n",
        "solution_func": "def g(n=3):\n    return [i**2 for i in range(1, n+1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the length of a given list is equal to a specified number, and a function g that generates a list of squared numbers up to a specified limit. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, list comprehension, and function invocation. It tests the student's ability to define functions and use them in conjunction to satisfy a given condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name') -> bool:\n    return key in d\n\ndef g(key='name'):\n    return {key: 'Alice'}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking if a key exists in the dictionary.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='name') -> bool:\n    return key in d",
        "solution_func": "def g(key='name'):\n    return {key: 'Alice'}",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(d: dict, key='name') -> bool that checks if a key exists in a dictionary, and a function g(key='name') that returns a dictionary with the specified key, the puzzle requires ensuring that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to pass the output of one function as input to another function and checking if the desired condition is met.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(prime_sum: int, n=100) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n+1) if is_prime(num)]\n    return prime_sum == sum(primes)\n\ndef g(n=100):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n+1) if is_prime(num)]\n    return sum(primes)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, importing modules (math), and algorithm optimization (prime number generation).",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True"
        ],
        "problem_func": "import math\n\ndef f(prime_sum: int, n=100) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n+1) if is_prime(num)]\n    return prime_sum == sum(primes)",
        "solution_func": "def g(n=100):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n+1) if is_prime(num)]\n    return sum(primes)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of prime numbers up to a given limit is equal to a specified value, and a function g that calculates the sum of prime numbers up to a given limit. The puzzle requires implementing the is_prime function and using list comprehension to find prime numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of prime numbers, functions, list comprehension, and assertion testing in Python. It provides a practical exercise in implementing and testing functions related to prime numbers and sums.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int, n=10) -> bool:\n    return sum(range(1, n+1)) == total\ndef g(n=10):\n    return n * (n + 1) // 2\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(total: int, n=10) -> bool:\n    return sum(range(1, n+1)) == total",
        "solution_func": "def g(n=10):\n    return n * (n + 1) // 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if the sum of numbers from 1 to n is equal to a given total, and g calculates the sum of numbers from 1 to n using a formula. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if the sum of numbers from 1 to n calculated by function g is equal to a given total using function f. The solution g calculates the sum using a formula to compare with the total in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int, n=5) -> bool:\n    return factorial == 1*2*3*4*5\ndef g(n=5):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, factorial calculation, and assertion testing.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(factorial: int, n=5) -> bool:\n    return factorial == 1*2*3*4*5",
        "solution_func": "def g(n=5):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function to calculate the factorial of a given number and then check if the calculated factorial matches the factorial of 5."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves implementing a factorial function and then checking if the calculated factorial matches the factorial of 5.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i + 1] - nums[i] == nums[1] - nums[0] for i in range(len(nums) - 1))\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check the arithmetic progression in the list of numbers.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i + 1] - nums[i] == nums[1] - nums[0] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the given list of numbers forms an arithmetic sequence. The solution function g returns a specific list that forms an arithmetic sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, arithmetic sequences, and indexing in Python. The solution function g returns a list that satisfies the condition of function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    return factorial(n) == 120\n\ndef g():\n    return 5\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion, Mathematical Operations",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
            "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    return factorial(n) == 120",
        "solution_func": "def g():\n    return 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the factorial of a given number and checking if it equals 120."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding recursion and factorial calculation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g(input_str='racecar'):\n    return input_str + input_str[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(input_str='racecar'):\n    return input_str + input_str[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome. The function f(s) returns True if the input string is equal to its reverse, and function g(input_str) generates a palindrome by concatenating the input string with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for palindromes and manipulating strings in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport string\ndef f(sentence: str) -> bool:\n    return set(sentence.lower()) >= set(string.ascii_lowercase)\ndef g(alphabet=string.ascii_lowercase):\n    return ''.join(alphabet) + ' extra letters'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "import string\ndef f(sentence: str) -> bool:\n    return set(sentence.lower()) >= set(string.ascii_lowercase)",
        "solution_func": "def g(alphabet=string.ascii_lowercase):\n    return ''.join(alphabet) + ' extra letters'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given sentence contains all the letters of the alphabet. The solution function g generates a string with all the lowercase letters of the alphabet followed by ' extra letters'."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a sentence contains all the letters of the alphabet and then generating a specific string using the alphabet. The solution function satisfies the condition of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. The solution function g() returns the string 'racecar', which is a palindrome. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: int, n=5) -> bool:\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\ndef g(n = 5):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search algorithm.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: int, n=5) -> bool:\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True",
        "solution_func": "def g(n = 5):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(x) which checks if a given number is prime, and g(n) which finds the nth prime number. The puzzle requires students to understand prime numbers and function composition in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a common programming concept of checking for prime numbers and finding the nth prime number. It requires students to understand loops, conditionals, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: str, s='racecar') -> bool:\n    return x == x[::-1]\ndef g(s='racecar'):\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s[:i][::-1] + s\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: str, s='racecar') -> bool:\n    return x == x[::-1]",
        "solution_func": "def g(s='racecar'):\n    for i in range(len(s)):\n        if s[i:] == s[i:][::-1]:\n            return s[:i][::-1] + s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(x) that checks if a given string is a palindrome, and a function g() that finds the longest palindrome substring in a given string. The assertion checks if the solution function g() correctly identifies the longest palindrome substring in the default string 'racecar'."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, slicing, and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(missing_num: int, sequence=[1, 3, 5, 7, 9, 11, 13]) -> bool:\n    expected_sum = (sequence[0] + sequence[-1]) * (len(sequence) + 1) // 2\n    actual_sum = sum(sequence)\n    return missing_num == expected_sum - actual_sum\n\ndef g(sequence=[1, 3, 5, 7, 9, 11, 13]):\n    expected_sum = (sequence[0] + sequence[-1]) * (len(sequence) + 1) // 2\n    actual_sum = sum(sequence)\n    missing_num = expected_sum - actual_sum\n    return missing_num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to find a missing number in a sequence.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "def f(missing_num: int, sequence=[1, 3, 5, 7, 9, 11, 13]) -> bool:\n    expected_sum = (sequence[0] + sequence[-1]) * (len(sequence) + 1) // 2\n    actual_sum = sum(sequence)\n    return missing_num == expected_sum - actual_sum",
        "solution_func": "def g(sequence=[1, 3, 5, 7, 9, 11, 13]):\n    expected_sum = (sequence[0] + sequence[-1]) * (len(sequence) + 1) // 2\n    actual_sum = sum(sequence)\n    missing_num = expected_sum - actual_sum\n    return missing_num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a missing number in a sequence can be found using a specific formula, and a function g that calculates the missing number in the sequence. The assertion at the end confirms that g is a solution to f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about finding a missing number in a sequence using a specific formula. The solution function g calculates the missing number and the assertion confirms its correctness.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sum_multiples: int, n=100) -> bool:\n    multiples_sum = sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0)\n    return sum_multiples == multiples_sum\n\ndef g(n=100):\n    multiples_sum = sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0)\n    return multiples_sum\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and Function Composition.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "def f(sum_multiples: int, n=100) -> bool:\n    multiples_sum = sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0)\n    return sum_multiples == multiples_sum",
        "solution_func": "def g(n=100):\n    multiples_sum = sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0)\n    return multiples_sum",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the sum of multiples of 3 and 5 up to a given number is equal to a specified sum, and g calculates the sum of multiples of 3 and 5 up to a given number. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions, use list comprehensions, and compare results using assertions. It also tests the understanding of function composition and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, reversed_str='gnirts') -> bool:\n    return s[::-1] == reversed_str\ndef g(reversed_str='gnirts'):\n    if len(reversed_str) == 0:\n        return reversed_str\n    else:\n        return g(reversed_str[1:]) + reversed_str[0]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and recursion.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, reversed_str='gnirts') -> bool:\n    return s[::-1] == reversed_str",
        "solution_func": "def g(reversed_str='gnirts'):\n    if len(reversed_str) == 0:\n        return reversed_str\n    else:\n        return g(reversed_str[1:]) + reversed_str[0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is equal to its reverse, and a function g that recursively reverses a string. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and recursion in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return len(set(tuples)) == len(tuples)\n\ndef g() -> List[Tuple[int, int]]:\n    return [(i, j) for i in range(5) for j in range(5)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of tuples contains unique elements.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return len(set(tuples)) == len(tuples)",
        "solution_func": "def g() -> List[Tuple[int, int]]:\n    return [(i, j) for i in range(5) for j in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of tuples contains unique elements, and a function g that generates a list of tuples with all possible combinations of integers from 0 to 4. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension, set operations, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)\n\ndef g() -> str:\n    import string\n    return string.ascii_lowercase\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g() -> str:\n    import string\n    return string.ascii_lowercase",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if a string has all unique characters, and a function g() that returns all lowercase letters. The puzzle tests whether function f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and the use of set to check for unique characters in a string. It also requires knowledge of the string module in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(diff: int, nums=[12, 5, 28, 9, 17]) -> bool:\n    is_prime = True\n    if diff <= 1:\n        return False\n    for i in range(2, int(diff ** 0.5) + 1):\n        if diff % i == 0:\n            is_prime = False\n            break\n    return is_prime\ndef g(nums=[12, 5, 28, 9, 17]):\n    return max(nums) - min(nums)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Number Theory (checking for prime numbers) and Mathematical Operations (finding the difference between maximum and minimum values in a list).",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
            "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True"
        ],
        "problem_func": "def f(diff: int, nums=[12, 5, 28, 9, 17]) -> bool:\n    is_prime = True\n    if diff <= 1:\n        return False\n    for i in range(2, int(diff ** 0.5) + 1):\n        if diff % i == 0:\n            is_prime = False\n            break\n    return is_prime",
        "solution_func": "def g(nums=[12, 5, 28, 9, 17]):\n    return max(nums) - min(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(diff, nums) that checks if a given number is prime, and a function g(nums) that calculates the difference between the maximum and minimum numbers in a list. The puzzle requires using the g function as input to the f function to check if the difference between the maximum and minimum numbers is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle combines concepts of prime number checking and list manipulation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, length=3) -> bool:\n    return any((s[i:i+length] == s[i:i+length][::-1] for i in range(len(s) - length + 1)))\ndef g(length=3):\n    return \"racecar\" + \"a\"*(length-7)  # Generating a palindrome substring of length 'length'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check for palindrome substrings. It also involves conditional logic and indexing in Python.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, length=3) -> bool:\n    return any((s[i:i+length] == s[i:i+length][::-1] for i in range(len(s) - length + 1)))",
        "solution_func": "def g(length=3):\n    return \"racecar\" + \"a\"*(length-7)  # Generating a palindrome substring of length 'length'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string contains a palindrome substring of a specified length. The solution function g generates a palindrome substring of the specified length and checks if f returns True for it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, palindrome detection, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return any(((a**2 + b**2 == c**2) for a in nums for b in nums for c in nums if a < b < c))\ndef g():\n    for a in range(1, 100):\n        for b in range(a, 100):\n            c = (a**2 + b**2) ** 0.5\n            if c == int(c):\n                return [a, b, int(c)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return any(((a**2 + b**2 == c**2) for a in nums for b in nums for c in nums if a < b < c))",
        "solution_func": "def g():\n    for a in range(1, 100):\n        for b in range(a, 100):\n            c = (a**2 + b**2) ** 0.5\n            if c == int(c):\n                return [a, b, int(c)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a Pythagorean triplet in a given range of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires checking if there exists a Pythagorean triplet (a, b, c) where a < b < c and a^2 + b^2 = c^2, within a specified range of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(isbn: str) -> bool:\n    isbn = isbn.replace(\"-\", \"\")\n    if len(isbn) != 10:\n        return False\n    return (sum((int(isbn[i]) * (10 - i) for i in range(9))) + (10 if isbn[-1] == 'X' else int(isbn[-1]))) % 11 == 0\ndef g():\n    return \"123456789X\"  # Generating a valid ISBN-10 number\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, conditional logic, and algorithm optimization.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(isbn: str) -> bool:\n    isbn = isbn.replace(\"-\", \"\")\n    if len(isbn) != 10:\n        return False\n    return (sum((int(isbn[i]) * (10 - i) for i in range(9))) + (10 if isbn[-1] == 'X' else int(isbn[-1]))) % 11 == 0",
        "solution_func": "def g():\n    return \"123456789X\"  # Generating a valid ISBN-10 number",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(isbn: str) that checks if a given string is a valid ISBN-10 number. The function g() generates a valid ISBN-10 number and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, list comprehension, and mathematical operations in Python. It also reinforces the concept of ISBN-10 validation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(n: int) -> bool:\n    return is_prime(sum(int(digit) for digit in str(n)))\n\ndef g():\n    n = 10\n    while True:\n        if is_prime(sum(int(digit) for digit in str(n))):\n            return n\n        n += 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as Number Theory (checking for prime numbers), String Manipulation (summing digits of a number), and Looping/Iteration.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(n: int) -> bool:\n    return is_prime(sum(int(digit) for digit in str(n)))",
        "solution_func": "def g():\n    n = 10\n    while True:\n        if is_prime(sum(int(digit) for digit in str(n))):\n            return n\n        n += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the sum of the digits of a number is a prime number, and finding the smallest number for which this condition is true."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of prime numbers, iterating through numbers, and working with digits in a number.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(strings[i] <= strings[i + 1] for i in range(len(strings) - 1))\n\ndef g(n=4):\n    return [str(i) for i in range(1, n + 1)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(strings[i] <= strings[i + 1] for i in range(len(strings) - 1))",
        "solution_func": "def g(n=4):\n    return [str(i) for i in range(1, n + 1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of strings is sorted in non-decreasing order, and a function g that generates a list of strings from 1 to n. The assert statement checks if the generated list is sorted."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the student's ability to generate a list of strings and check if it is sorted.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom sympy import isprime\nfrom typing import List\n\ndef f(numbers: List[int], all_prime=True) -> bool:\n    return all(isprime(num) for num in numbers) == all_prime\ndef g(all_prime=True):\n    return [2, 3, 5, 7, 11] if all_prime else [4, 6, 8, 9, 10]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are prime numbers and returning a boolean based on the result. The solution generates a list of prime numbers or non-prime numbers based on a boolean input. The puzzle uses the sympy library for prime number checking.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True"
        ],
        "problem_func": "from sympy import isprime\nfrom typing import List\n\ndef f(numbers: List[int], all_prime=True) -> bool:\n    return all(isprime(num) for num in numbers) == all_prime",
        "solution_func": "def g(all_prime=True):\n    return [2, 3, 5, 7, 11] if all_prime else [4, 6, 8, 9, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if all numbers in a list are prime numbers based on a boolean parameter, and a function g that returns a list of prime numbers or non-prime numbers based on a boolean parameter. The puzzle requires the solution function g to return a list of prime numbers when called with the default parameter value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of numbers are prime numbers and returning a specific list of prime numbers based on a boolean parameter. The solution function g correctly returns a list of prime numbers when called with the default parameter value, satisfying the condition f(g()) == True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, key='color', value='blue') -> bool:\n    return key in data and data[key] == value\ndef g(key='color', value='blue'):\n    return {key: value, 'shape': 'circle'}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: dict, key='color', value='blue') -> bool:\n    return key in data and data[key] == value",
        "solution_func": "def g(key='color', value='blue'):\n    return {key: value, 'shape': 'circle'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given key-value pair exists in a dictionary, and another function g that returns a dictionary with the specified key-value pair. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks for a specific key-value pair in a dictionary and how to create a dictionary with the specified key-value pair. The assertion tests if the function f correctly evaluates the output of function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, is_palindrome=False) -> bool:\n    return s == s[::-1]\n\ndef g(input_string=\"racecar\"):\n    palindrome = input_string + input_string[::-1]\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, is_palindrome=False) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(input_string=\"racecar\"):\n    palindrome = input_string + input_string[::-1]\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that creates a palindrome by appending the reverse of a given input string. The assertion checks if the output of g satisfies the condition of being a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(prime_sum: int, limit=10) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(filter(is_prime, range(2, limit + 1))) == prime_sum\ndef g(limit=10):\n    sieve = [True] * (limit + 1)\n    sieve[0], sieve[1] = False, False\n\n    for i in range(2, int(limit ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i * i, limit + 1, i):\n                sieve[j] = False\n\n    return sum(i for i in range(2, limit + 1) if sieve[i])\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to prime numbers, loops, functions, and list comprehension.",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(prime_sum: int, limit=10) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(filter(is_prime, range(2, limit + 1))) == prime_sum",
        "solution_func": "def g(limit=10):\n    sieve = [True] * (limit + 1)\n    sieve[0], sieve[1] = False, False\n\n    for i in range(2, int(limit ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i * i, limit + 1, i):\n                sieve[j] = False\n\n    return sum(i for i in range(2, limit + 1) if sieve[i])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(prime_sum, limit) and g(limit), where f checks if the sum of prime numbers up to a certain limit is equal to a given prime_sum, and g generates a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. The puzzle requires g to generate the correct list of prime numbers such that f returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the sum of prime numbers and generating prime numbers using the Sieve of Eratosthenes algorithm, which are fundamental concepts in programming. It provides a good exercise for understanding prime numbers and algorithmic efficiency.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, vowels_check='aeiou') -> bool:\n    return all(char in s for char in vowels_check)\n\ndef g(vowels_check='aeiou'):\n    return ''.join([vowel for vowel in vowels_check])\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
            "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, vowels_check='aeiou') -> bool:\n    return all(char in s for char in vowels_check)",
        "solution_func": "def g(vowels_check='aeiou'):\n    return ''.join([vowel for vowel in vowels_check])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all vowels in a given string are present in a specified set of vowels. The solution function g generates a string of vowels based on a given set of vowels, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for the presence of specific characters in a string and generating a string based on a given set of characters. It also tests the understanding of function composition and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1] and len(s) % 2 != 0\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1] and len(s) % 2 != 0",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome with an odd length."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome with an odd length. The solution function g() returns the string 'radar', which is a palindrome with an odd length, satisfying the condition of f(g()).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    word = word.lower().replace(\" \", \"\")\n    return word == word[::-1]\ndef g(word: str = \"Able was I saw Elba\"):\n    return \"\".join(char for char in word.lower() if char.isalpha())[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    word = word.lower().replace(\" \", \"\")\n    return word == word[::-1]",
        "solution_func": "def g(word: str = \"Able was I saw Elba\"):\n    return \"\".join(char for char in word.lower() if char.isalpha())[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a word, the puzzle checks if the word is a palindrome after removing spaces and ignoring non-alphabetic characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a word is a palindrome after removing spaces and ignoring non-alphabetic characters. The solution function g() removes non-alphabetic characters, reverses the string, and then checks if it is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word[::-1] == \"racecar\"\ndef g():\n    return \"racecar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a word is a palindrome.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word[::-1] == \"racecar\"",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks if a given word is a palindrome (reads the same forwards and backwards) and then call the function with the word 'racecar' to verify the function's correctness."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and checking for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(s: str) -> bool:\n    email_pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return re.match(email_pattern, s) is not None\n\ndef g() -> str:\n    import random\n    import string\n\n    username = ''.join(random.choices(string.ascii_letters + string.digits, k=8))\n    domain = ''.join(random.choices(string.ascii_lowercase, k=5))\n    extension = random.choice(['com', 'net', 'org'])\n    \n    return f\"{username}@{domain}.{extension}\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and regular expressions for email pattern matching.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "import re\n\ndef f(s: str) -> bool:\n    email_pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return re.match(email_pattern, s) is not None",
        "solution_func": "def g() -> str:\n    import random\n    import string\n\n    username = ''.join(random.choices(string.ascii_letters + string.digits, k=8))\n    domain = ''.join(random.choices(string.ascii_lowercase, k=5))\n    extension = random.choice(['com', 'net', 'org'])\n    \n    return f\"{username}@{domain}.{extension}\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(s) that checks if a given string follows the format of an email address, and a function g() that generates a random email address. The assertion checks if the generated email address satisfies the email format check."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves validating email address format using regular expressions and generating random email addresses. It can be a good exercise to practice string manipulation and regular expressions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(nums: List[int]) -> bool:\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if is_prime(nums[i] + nums[j]):\n                return True\n    return False\n\ndef g() -> List[int]:\n    import random\n    return [random.randint(1, 100) for _ in range(100)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(nums: List[int]) -> bool:\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if is_prime(nums[i] + nums[j]):\n                return True\n    return False",
        "solution_func": "def g() -> List[int]:\n    import random\n    return [random.randint(1, 100) for _ in range(100)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if there exists a pair of numbers in a given list such that their sum is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function to check if there exists a pair of numbers in a list whose sum is a prime number. The solution generates a list of random numbers and checks if the condition is satisfied.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\n\ndef g() -> List[List[int]]:\n    import random\n    n = random.randint(2, 5)\n    matrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i):\n            matrix[i][j] = matrix[j][i]\n    \n    return matrix\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. The solution generates a random symmetric matrix and checks if the function f correctly identifies it as symmetric.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))",
        "solution_func": "def g() -> List[List[int]]:\n    import random\n    n = random.randint(2, 5)\n    matrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i):\n            matrix[i][j] = matrix[j][i]\n    \n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given square matrix is symmetric along its main diagonal, and a function g that generates a random square matrix and ensures it is symmetric along its main diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of matrix symmetry and generation of random matrices in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g(s='racecar'):\n    return s[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='racecar'):\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a string is a palindrome and then providing a solution function that returns the reverse of a specific string to test the palindrome function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(nums: List[float], lower=2.0, upper=5.0) -> bool:\n    avg = sum(nums) / len(nums)\n    return lower <= avg <= upper\ndef g(nums=[1.5, 3.0, 4.5, 6.0]):\n    return nums\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
            "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(nums: List[float], lower=2.0, upper=5.0) -> bool:\n    avg = sum(nums) / len(nums)\n    return lower <= avg <= upper",
        "solution_func": "def g(nums=[1.5, 3.0, 4.5, 6.0]):\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that calculates the average of a list of numbers and checks if the average falls within a specified range. The solution function g returns a list of numbers, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about calculating the average of a list of numbers and checking if it falls within a specified range. The solution function returns a list of numbers that satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list, pattern='101') -> bool:\n    binary_str = ''.join('1' if num > 0 else '0' for num in numbers)\n    return pattern in binary_str\n\ndef g(size=5, pattern='101'):\n    from random import randint\n    return [randint(-10, 10) for _ in range(size)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list, pattern='101') -> bool:\n    binary_str = ''.join('1' if num > 0 else '0' for num in numbers)\n    return pattern in binary_str",
        "solution_func": "def g(size=5, pattern='101'):\n    from random import randint\n    return [randint(-10, 10) for _ in range(size)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random numbers and convert them into a binary string. The function f checks if a specific pattern exists in the binary string representation of the list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random numbers and converting them to a binary string to check for a specific pattern. It provides practice in list comprehension, string manipulation, and pattern matching in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(words: list) -> bool:\n    concat = ''.join(words)\n    return concat == concat[::-1]\n\ndef g():\n    return ['abc', 'def', 'ed', 'cba']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(words: list) -> bool:\n    concat = ''.join(words)\n    return concat == concat[::-1]",
        "solution_func": "def g():\n    return ['abc', 'def', 'ed', 'cba']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a list of words can be concatenated to form a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the concatenation of a list of words forms a palindrome. The solution function returns a list of words that can be concatenated to form a palindrome.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, key='color', value='red') -> bool:\n    return key in data and data[key] == value\n\ndef g():\n    return {'color': 'red', 'shape': 'circle'}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic to check if a specific key-value pair exists in the dictionary.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: dict, key='color', value='red') -> bool:\n    return key in data and data[key] == value",
        "solution_func": "def g():\n    return {'color': 'red', 'shape': 'circle'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary as input and checks if a specific key-value pair exists in the dictionary. The function g returns a dictionary with a specific key-value pair. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks for a specific key-value pair in a dictionary and how to create a dictionary with the required key-value pair. The assert statement ensures that the function f behaves as expected.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], common_diff=5) -> bool:\n    return all(nums[i] - nums[i-1] == common_diff for i in range(2, len(nums)))\n\ndef g(length=5, common_diff=5):\n    return [i * common_diff for i in range(1, length + 1)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], common_diff=5) -> bool:\n    return all(nums[i] - nums[i-1] == common_diff for i in range(2, len(nums)))",
        "solution_func": "def g(length=5, common_diff=5):\n    return [i * common_diff for i in range(1, length + 1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers has a common difference between consecutive elements, and defining a function g that generates a list of numbers with a specified length and common difference. The puzzle requires g to be a solution to f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also requires understanding how to define functions with default arguments and how to use assert statements for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Set Operations and Conditional Logic.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and returns True if there are duplicate elements in the list, and a function g that returns a list with duplicate elements. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation and the use of set to identify duplicate elements in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s.islower() and s.isalpha()\ndef g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(random.sample(letters, k=5))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s.islower() and s.isalpha()",
        "solution_func": "def g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(random.sample(letters, k=5))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a random string of 5 lowercase letters and check if the string is all lowercase alphabetic characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the islower() and isalpha() string methods in Python to check if a randomly generated string consists of all lowercase alphabetic characters.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(lst[i] == i for i in range(len(lst)))\ndef g():\n    return list(range(5))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and conditional logic.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(lst[i] == i for i in range(len(lst)))",
        "solution_func": "def g():\n    return list(range(5))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if each element in the input list is equal to its index, and a function g() that returns a list of integers from 0 to 4. The puzzle tests whether f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the ability to define functions and use them to check conditions on lists.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return d.get('name') == 'Alice' and d.get('age') == 30\ndef g():\n    return {'name': 'Alice', 'age': 30, 'city': 'New York'}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic to check if certain key-value pairs exist in the dictionary.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return d.get('name') == 'Alice' and d.get('age') == 30",
        "solution_func": "def g():\n    return {'name': 'Alice', 'age': 30, 'city': 'New York'}",
        "quality": [
            null
        ],
        "description": [
            "Given a dictionary with keys 'name', 'age', and 'city', the puzzle requires a function f(d) that returns True if the 'name' is 'Alice' and the 'age' is 30. The solution function g() returns a dictionary with 'name' as 'Alice', 'age' as 30, and 'city' as 'New York', and asserts that f(g()) is True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking specific key-value pairs in a dictionary and understanding how to use the get() method. It also requires understanding how to define functions and use assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    alphanumeric_str = ''.join(c.lower() for c in s if c.isalnum())\n    return alphanumeric_str == alphanumeric_str[::-1]\ndef g(s = \"A man, a plan, a canal: Panama!\"):\n    return s\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation is used to remove non-alphanumeric characters and check for palindrome, Conditional Logic is used in the return statement,",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    alphanumeric_str = ''.join(c.lower() for c in s if c.isalnum())\n    return alphanumeric_str == alphanumeric_str[::-1]",
        "solution_func": "def g(s = \"A man, a plan, a canal: Panama!\"):\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome after removing non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, palindrome checking, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_sum: int) -> bool:\n    return max_sum == 6\ndef g():\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    max_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Mathematical Operations, Dynamic Programming, and Conditional Logic.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(max_sum: int) -> bool:\n    return max_sum == 6",
        "solution_func": "def g():\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    max_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the maximum sum of a subarray in a given list of integers and checking if it equals 6."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to find the maximum sum of a subarray in a list of integers using dynamic programming and comparing it to a specific value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g() -> List[int]:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for even and odd numbers in a list.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)",
        "solution_func": "def g() -> List[int]:\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers contains both even and odd numbers, and a function g that returns a specific list of integers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the any() function, and modulo operations in Python. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i))\n\ndef g() -> List[List[int]]:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a given matrix is symmetric along its diagonal. The function f() checks if the matrix is symmetric, and the function g() returns a sample matrix to test this symmetry. The assert statement validates the solution by checking if f(g()) returns True.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i))",
        "solution_func": "def g() -> List[List[int]]:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given matrix is symmetric along its diagonal, and a function g that returns a specific matrix. The assertion checks if the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension, matrix indexing, and the all() function in Python. It also reinforces the concept of symmetry in matrices.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    return str(num) == str(num)[::-1]\ndef g():\n    return 1221\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True",
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    return str(num) == str(num)[::-1]",
        "solution_func": "def g():\n    return 1221",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given number is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(num) that checks if a given number is a palindrome by comparing it with its reverse. The function g() returns the number 1221, and the assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\ndef g():\n    return [2, 3, 5, 8]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Conditional Logic and List Operations.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True",
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)",
        "solution_func": "def g():\n    return [2, 3, 5, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers contains both even and odd numbers. The solution function g returns a specific list of integers to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions and the any() function in Python. The solution function g returns a list with both even and odd numbers to pass the condition in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    clean_s = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_s == clean_s[::-1]\ndef g():\n    return \"A Santa at NASA\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True",
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    clean_s = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_s == clean_s[::-1]",
        "solution_func": "def g():\n    return \"A Santa at NASA\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if a given string is a palindrome after removing non-alphanumeric characters, and a solution function that returns a specific string. The solution function is expected to return a palindrome string after removing non-alphanumeric characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    num = 2\n    while True:\n        if is_prime(num):\n            return num\n        num += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) and Mathematical Operations topics.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    num = 2\n    while True:\n        if is_prime(num):\n            return num\n        num += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is prime, and another function g() that finds and returns the first prime number starting from 2. The puzzle requires the student to understand prime numbers and implement a function to find them."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a common programming challenge of checking for prime numbers and finding the first prime number. It requires the student to implement a prime number checking function and a function to find the first prime number. This puzzle can be used to teach Python programming concepts related to functions, loops, and prime numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] ** 2 + nums[j] ** 2 == nums[k] ** 2:\n                    return True\n    return False\n\ndef g():\n    a = 3\n    b = 4\n    c = 5\n    return [a, b, c]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check for Pythagorean triplets in a list of numbers.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] ** 2 + nums[j] ** 2 == nums[k] ** 2:\n                    return True\n    return False",
        "solution_func": "def g():\n    a = 3\n    b = 4\n    c = 5\n    return [a, b, c]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if there exists a Pythagorean triplet in a given list of integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires finding three numbers in the list such that they form a Pythagorean triplet (a^2 + b^2 = c^2). The solution function g() returns a specific Pythagorean triplet [3, 4, 5].",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    base = \"racecar\"\n    palindrome = base + base[::-1]\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check for palindrome, which falls under the String Manipulation topic.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
            "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    base = \"racecar\"\n    palindrome = base + base[::-1]\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. The solution function g() creates a palindrome string and passes it to f() to check if it is a palindrome.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(integers: List[int], diff=3) -> bool:\n    return all(integers[i] - integers[i-1] == diff for i in range(2, len(integers)))\n    \ndef g(diff=3):\n    return [i * diff for i in range(1, 6)]\n    \nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(integers: List[int], diff=3) -> bool:\n    return all(integers[i] - integers[i-1] == diff for i in range(2, len(integers)))",
        "solution_func": "def g(diff=3):\n    return [i * diff for i in range(1, 6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions: f checks if the difference between consecutive elements in a list is equal to a given value, while g generates a list of elements with a specific difference between them. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and function composition in Python. It also tests the ability to define functions and use them together to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return string == string[::-1]\n    \ndef g(string='radar'):\n    return string[::-1]\n    \nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g(string='radar'):\n    return string[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not by comparing the string with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle consists of two functions, f(string: str) -> bool which checks if a string is a palindrome, and g(string='radar') which returns the reverse of the input string. The assert statement confirms that the solution function g() correctly identifies palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(num**0.5 == int(num**0.5) for num in numbers)\n    \ndef g():\n    return [i*i for i in range(1, 6)]\n    \nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if any number in a list is a perfect square.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(num**0.5 == int(num**0.5) for num in numbers)",
        "solution_func": "def g():\n    return [i*i for i in range(1, 6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if any number in a list has a square root that is an integer. The solution function g generates a list of squares of numbers from 1 to 5, and the assertion checks if f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, checking for integer square roots, and generating a specific list of numbers. It is suitable for teaching Python concepts related to list operations and mathematical operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(email: str) -> bool:\n    pattern = r'^[\\w\\.-]+@[a-zA-Z\\d]+\\.[a-zA-Z]{2,3}$'\n    return bool(re.match(pattern, email))\n\ndef g():\n    return \"example@email.com\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and regular expressions for pattern matching.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "import re\n\ndef f(email: str) -> bool:\n    pattern = r'^[\\w\\.-]+@[a-zA-Z\\d]+\\.[a-zA-Z]{2,3}$'\n    return bool(re.match(pattern, email))",
        "solution_func": "def g():\n    return \"example@email.com\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to write a function that validates if an input string is a valid email address using regular expressions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using regular expressions to validate email addresses in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    nums.sort()\n    return any((nums[i]**2 + nums[i+1]**2 == nums[i+2]**2) for i in range(len(nums)-2))\n\ndef g():\n    return [3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and sorting and ordering.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    nums.sort()\n    return any((nums[i]**2 + nums[i+1]**2 == nums[i+2]**2) for i in range(len(nums)-2))",
        "solution_func": "def g():\n    return [3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of three numbers that satisfy the Pythagorean theorem (a^2 + b^2 = c^2)."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of numbers and checking if there exists a triplet of numbers that satisfy the Pythagorean theorem. The solution function returns [3, 4, 5] as the numbers that satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abcabc') -> bool:\n    return s == pattern\n\ndef g(pattern='abcabc'):\n    return pattern\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abcabc') -> bool:\n    return s == pattern",
        "solution_func": "def g(pattern='abcabc'):\n    return pattern",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string is equal to a specified pattern and g returns the specified pattern. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is straightforward and focuses on understanding function definitions and function calls in Python. It can be used to reinforce the concept of function return values and function composition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, property_sum=100) -> bool:\n    return sum(lst) == property_sum\n\ndef g(property_sum=100):\n    return [10, 20, 30, 40]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, property_sum=100) -> bool:\n    return sum(lst) == property_sum",
        "solution_func": "def g(property_sum=100):\n    return [10, 20, 30, 40]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of elements in a list is equal to a given property_sum value. The function g returns a list [10, 20, 30, 40], and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks the sum of elements in a list and how to return a specific list to satisfy the condition. It tests the student's understanding of function definitions and list manipulation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s='python'):\n    return s + s[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='python'):\n    return s + s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(s: str) which checks if a given string is a palindrome, and g(s='python') which returns the original string concatenated with its reverse. The assertion checks if the result of g() satisfies the condition of being a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically reversing a string and checking for palindromes. It is a good exercise for practicing string operations and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a string is a palindrome.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(index: int, element=42, lst=[10, 20, 30, 42, 50, 42, 60]) -> bool:\n    return index == lst.index(element) if element in lst else index == -1\ndef g(element=42, lst=[10, 20, 30, 42, 50, 42, 60]):\n    return lst.index(element) if element in lst else -1\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True",
            "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(index: int, element=42, lst=[10, 20, 30, 42, 50, 42, 60]) -> bool:\n    return index == lst.index(element) if element in lst else index == -1",
        "solution_func": "def g(element=42, lst=[10, 20, 30, 42, 50, 42, 60]):\n    return lst.index(element) if element in lst else -1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if the index of a given element in a list matches a specified index, and g returns the index of a given element in a list. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use the index method in Python lists and how to pass default arguments to functions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, prime_range=range(2, 100)) -> bool:\n    if num < 2:\n        return False\n    for i in prime_range:\n        if num != i and num % i == 0:\n            return False\n    return True\ndef g(prime_range=range(2, 100)):\n    return prime_range[17]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime using a given range of prime numbers. It also includes a function to generate a prime number from the prime range. The solution then checks if the generated prime number satisfies the prime condition in the puzzle.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, prime_range=range(2, 100)) -> bool:\n    if num < 2:\n        return False\n    for i in prime_range:\n        if num != i and num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime_range=range(2, 100)):\n    return prime_range[17]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number within a specified range. Another function g() is defined to return a specific element from the prime number range. The puzzle tests whether the output of g() satisfies the condition of being a prime number according to function f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and how to check for primality within a given range. It also requires knowledge of function definitions and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == ['abc'] * 5\ndef g():\n    return ['abc'] * 5\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list contains the same element repeated multiple times.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == ['abc'] * 5",
        "solution_func": "def g():\n    return ['abc'] * 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: list) that checks if a list contains the element 'abc' repeated 5 times, and a function g() that returns a list with 'abc' repeated 5 times. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking equality of lists and understanding function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return len(d) == 3 and d.get('key1') == 10 and d.get('key2') == 20 and d.get('key3') == 30\ndef g():\n    return {'key1': 10, 'key2': 20, 'key3': 30}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and comparison, which falls under the topic of Data Structures and Algorithms.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return len(d) == 3 and d.get('key1') == 10 and d.get('key2') == 20 and d.get('key3') == 30",
        "solution_func": "def g():\n    return {'key1': 10, 'key2': 20, 'key3': 30}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary as input and checks if the dictionary has a length of 3 and specific key-value pairs. The solution function g returns a dictionary with the required key-value pairs. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, checking their length and specific key-value pairs. It also demonstrates how to define functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: set) -> bool:\n    return len(s) == 3 and 'apple' in s and 'banana' in s and 'cherry' in s\ndef g():\n    return {'apple', 'banana', 'cherry'}\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and conditional logic.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: set) -> bool:\n    return len(s) == 3 and 'apple' in s and 'banana' in s and 'cherry' in s",
        "solution_func": "def g():\n    return {'apple', 'banana', 'cherry'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a set as input and returns True if the set contains exactly three specific elements: 'apple', 'banana', and 'cherry'. The solution function g returns a set containing these three elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the length of the set and the presence of specific elements to determine if the input set meets the criteria. The solution function simply returns a set with the required elements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, target='z') -> bool:\n    return s.count(target) == 2\n\ndef g(target='z'):\n    return \"abc\" + target + \"def\" + target\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, target='z') -> bool:\n    return s.count(target) == 2",
        "solution_func": "def g(target='z'):\n    return \"abc\" + target + \"def\" + target",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if the target character appears twice in a given string, and g constructs a string with the target character appearing twice. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, string manipulation, and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [3, 7]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations and Brute Force Search.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [3, 7]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a pair of numbers in a list that sum up to a target value. The function f checks if there exists a pair of numbers in the input list that add up to the target value, and function g returns a specific pair of numbers. The assert statement checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to find a pair of numbers that sum up to a target value in a list. It tests the student's knowledge of sets, loops, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, target='abc') -> bool:\n    return target in s\ndef g(target='abc'):\n    return ''.join(sorted(target))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting and ordering topics.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, target='abc') -> bool:\n    return target in s",
        "solution_func": "def g(target='abc'):\n    return ''.join(sorted(target))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a target string is present in a given string, and a function g that sorts the characters of the target string and returns it. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as string manipulation, function composition, and assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return all(nums[i] - nums[i-1] == nums[1] - nums[0] for i in range(2, len(nums)))\ndef g():\n    return [1, 4, 7, 10, 13]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check the arithmetic progression in the list of numbers.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return all(nums[i] - nums[i-1] == nums[1] - nums[0] for i in range(2, len(nums)))",
        "solution_func": "def g():\n    return [1, 4, 7, 10, 13]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the given list of numbers forms an arithmetic sequence. The solution function g returns a specific list that forms an arithmetic sequence, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and arithmetic sequences in Python. It is a good exercise for practicing list manipulation and comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a given matrix is symmetric along its diagonal. It requires understanding of nested loops, list comprehension, and comparison operations.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "def f(matrix: list) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f(matrix) that checks if a given matrix is symmetric along its main diagonal. The solution function g() returns a specific matrix, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding matrix symmetry along the main diagonal and implementing a function to check for this property. It also requires knowledge of list comprehension and indexing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    vowels = 'aeiou'\n    s = s.lower()\n    vowel_count = sum(1 for char in s if char in vowels)\n    consonant_count = sum(1 for char in s if char.isalpha() and char not in vowels)\n    return vowel_count == consonant_count\n\ndef g():\n    import random\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    length = random.randint(1, 10)\n    s = ''.join(random.choice(vowels) + random.choice(consonants) for _ in range(length))\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    vowels = 'aeiou'\n    s = s.lower()\n    vowel_count = sum(1 for char in s if char in vowels)\n    consonant_count = sum(1 for char in s if char.isalpha() and char not in vowels)\n    return vowel_count == consonant_count",
        "solution_func": "def g():\n    import random\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    length = random.randint(1, 10)\n    s = ''.join(random.choice(vowels) + random.choice(consonants) for _ in range(length))\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s: str) that checks if the number of vowels and consonants in a given string are equal. Another function g() generates a random string with a mix of vowels and consonants. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, counting characters, and random generation. It can be used to teach students about string operations, conditionals, and function definitions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))\n\ndef g():\n    import random\n    n = random.randint(2, 5)\n    matrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            matrix[i][j] = matrix[j][i]\n    return matrix\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a given matrix is symmetric along its diagonal. The solution generates a random symmetric matrix and checks if the function f correctly identifies it as symmetric.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    return all(matrix[i][j] == matrix[j][i] for i in range(n) for j in range(n))",
        "solution_func": "def g():\n    import random\n    n = random.randint(2, 5)\n    matrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            matrix[i][j] = matrix[j][i]\n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given square matrix is symmetric along its main diagonal, and a function g that generates a random square matrix and ensures it is symmetric along its main diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of matrix symmetry and random matrix generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str, strings=['abc', 'def']) -> bool:\n    assert len(string) == len(strings[0]) + len(strings[1])\n    i, j = 0, 0\n    for char in string:\n        if i < len(strings[0]) and char == strings[0][i]:\n            i += 1\n        elif j < len(strings[1]) and char == strings[1][j]:\n            j += 1\n        else:\n            return False\n    return True\n\ndef g(strings=['abc', 'def']):\n    return strings[0] + strings[1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True",
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(string: str, strings=['abc', 'def']) -> bool:\n    assert len(string) == len(strings[0]) + len(strings[1])\n    i, j = 0, 0\n    for char in string:\n        if i < len(strings[0]) and char == strings[0][i]:\n            i += 1\n        elif j < len(strings[1]) and char == strings[1][j]:\n            j += 1\n        else:\n            return False\n    return True",
        "solution_func": "def g(strings=['abc', 'def']):\n    return strings[0] + strings[1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a string and a list of strings as input. The function checks if the input string can be formed by concatenating the strings in the list in order. Another function g is provided which returns the concatenation of the strings in the input list. The puzzle is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, indexing, and comparison in Python. It tests the ability to concatenate strings and check if a given string can be formed by concatenating specific substrings in order.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(binary_str: str) -> bool:\n    return '101' in binary_str\n\ndef g(length=20):\n    import random\n    return ''.join(random.choice(['0', '1']) for _ in range(length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and random generation of binary strings.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(binary_str: str) -> bool:\n    return '101' in binary_str",
        "solution_func": "def g(length=20):\n    import random\n    return ''.join(random.choice(['0', '1']) for _ in range(length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the string '101' is present in a given binary string, and a function g that generates a random binary string of a specified length. The assertion checks if f returns True when applied to the output of g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge of checking for a specific pattern in a randomly generated binary string. It can be used to teach students about string manipulation and random generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str, original=\"racecar\") -> bool:\n    clean_palindrome = ''.join(char for char in palindrome if char.isalpha()).lower()\n    return clean_palindrome == clean_palindrome[::-1]\ndef g(original=\"racecar\"):\n    return ''.join(char for char in original if char.isalpha()).lower()\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "def f(palindrome: str, original=\"racecar\") -> bool:\n    clean_palindrome = ''.join(char for char in palindrome if char.isalpha()).lower()\n    return clean_palindrome == clean_palindrome[::-1]",
        "solution_func": "def g(original=\"racecar\"):\n    return ''.join(char for char in original if char.isalpha()).lower()",
        "quality": [
            null
        ],
        "description": [
            "Given a function f that checks if a given string is a palindrome after removing non-alphabetic characters and converting to lowercase, and a function g that cleans a string by removing non-alphabetic characters and converting to lowercase, the puzzle requires finding a string that is a palindrome after cleaning using function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, filtering non-alphabetic characters, converting to lowercase, and checking for palindromes. It tests the student's ability to apply these concepts in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, divisor=4) -> bool:\n    return len(text) % divisor == 0\n\ndef g(divisor=4):\n    return 'a' * divisor\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Mathematical Operations.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, divisor=4) -> bool:\n    return len(text) % divisor == 0",
        "solution_func": "def g(divisor=4):\n    return 'a' * divisor",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if the length of a given text is divisible by a specified divisor, and g returns a string of 'a's with a length equal to the divisor. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming as it involves understanding function calls, string manipulation, and boolean comparisons.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to list manipulation, set operations, and brute force search.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [2, 4, 6, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding if there are two numbers in a list that add up to a target value. The function f takes a list of integers and a target value as input, and returns True if there are two numbers in the list that add up to the target value. The function g returns a list of integers that should satisfy the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for a specific condition in a list of integers and returning a boolean value based on that condition. The solution function g provides a list of integers that meets the condition specified in function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], char='p') -> bool:\n    return all(s.startswith(char) for s in strings)\n\ndef g(char='p'):\n    return [char + 'ython', char + 'rogramming', char + 'uzzle']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], char='p') -> bool:\n    return all(s.startswith(char) for s in strings)",
        "solution_func": "def g(char='p'):\n    return [char + 'ython', char + 'rogramming', char + 'uzzle']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and a character as input, and checks if all strings in the list start with the given character. The solution function g generates a list of strings starting with the specified character and asserts that f returns True for this list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, string manipulation, and function calls in Python. It also tests the understanding of the all() function and the assert statement.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, key='PythonProgramming', multiplier=3) -> bool:\n    target = key * multiplier\n    return s == target\ndef g(key='PythonProgramming', multiplier=3):\n    return key * multiplier\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, key='PythonProgramming', multiplier=3) -> bool:\n    target = key * multiplier\n    return s == target",
        "solution_func": "def g(key='PythonProgramming', multiplier=3):\n    return key * multiplier",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is equal to a target string generated using a key and a multiplier. Another function g generates the target string using the same key and multiplier. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function definitions, string manipulation, and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, target_sum=30, max_value=10) -> bool:\n    return sum(arr) == target_sum and all(i <= max_value for i in arr)\ndef g(target_sum=30, max_value=10):\n    return [target_sum // 3] * 3\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list, target_sum=30, max_value=10) -> bool:\n    return sum(arr) == target_sum and all(i <= max_value for i in arr)",
        "solution_func": "def g(target_sum=30, max_value=10):\n    return [target_sum // 3] * 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of elements in a list is equal to a target sum and all elements are less than or equal to a max value. The solution function g returns a list of three elements where each element is the target sum divided by 3. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, summing elements in a list, and using list comprehension to check if all elements meet a condition. The solution function g demonstrates how to create a list with a specific pattern based on the target sum provided.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='programming', value=10) -> bool:\n    return key in d and d[key] == value\ndef g(key='programming', value=10):\n    return {key: value, 'language': 'Python'}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
            "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='programming', value=10) -> bool:\n    return key in d and d[key] == value",
        "solution_func": "def g(key='programming', value=10):\n    return {key: value, 'language': 'Python'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specific key-value pair exists in a dictionary, and a function g that returns a dictionary with the specified key-value pair. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(string='radar'):\n    return string + string[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(string='radar'):\n    return string + string[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, and a function g(string) that returns the string concatenated with its reverse, the puzzle requires verifying if the result of g() is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)\n\ndef g(numbers=[5, 2, 8, 1, 3]):\n    return sorted(numbers)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and checking if it is sorted correctly. This falls under the topic of Sorting and Ordering.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)",
        "solution_func": "def g(numbers=[5, 2, 8, 1, 3]):\n    return sorted(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that checks if a list of numbers is sorted in ascending order. The solution function generates a sorted list of numbers and the puzzle function checks if the input list is equal to the sorted list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and comparison in Python. It tests the student's knowledge of list manipulation and comparison operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list) -> bool:\n    if len(arr) < 2:\n        return False\n    diff = arr[1] - arr[0]\n    return all(arr[i] - arr[i-1] == diff for i in range(2, len(arr)))\n\ndef g(start=3, diff=2, n=5):\n    return [start + i*diff for i in range(n)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and list manipulation.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True",
            "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list) -> bool:\n    if len(arr) < 2:\n        return False\n    diff = arr[1] - arr[0]\n    return all(arr[i] - arr[i-1] == diff for i in range(2, len(arr)))",
        "solution_func": "def g(start=3, diff=2, n=5):\n    return [start + i*diff for i in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(arr) checks if the elements in the input list form an arithmetic sequence, and g(start, diff, n) generates a list of numbers in an arithmetic sequence. The assert statement checks if the generated list satisfies the condition of forming an arithmetic sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding arithmetic sequences and how to check if a list of numbers forms an arithmetic sequence. It also requires knowledge of list comprehension and range function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s.lower() == s[::-1].lower()\ndef g(string='racecar'):\n    return string\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
            "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s.lower() == s[::-1].lower()",
        "solution_func": "def g(string='racecar'):\n    return string",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if a given string is a palindrome (ignoring case), and a function g(string='racecar') that returns a string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string is a palindrome (ignoring case) using the provided functions f and g. The assertion ensures that the solution g returns a palindrome string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\ndef f(s: str) -> bool:\n    return any(char.isupper() for char in s) and any(char.isdigit() for char in s)\n\ndef g(length=8):\n    uppercase_letter = random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    digit = random.choice('0123456789')\n    remaining_chars = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length-2))\n    return ''.join(random.sample(uppercase_letter + digit + remaining_chars, length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Randomization, Importing Modules (Itertools, etc.)",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True"
        ],
        "problem_func": "import random\ndef f(s: str) -> bool:\n    return any(char.isupper() for char in s) and any(char.isdigit() for char in s)",
        "solution_func": "def g(length=8):\n    uppercase_letter = random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    digit = random.choice('0123456789')\n    remaining_chars = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length-2))\n    return ''.join(random.sample(uppercase_letter + digit + remaining_chars, length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random string of a specified length with at least one uppercase letter and one digit, and then checking if the generated string meets these criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, random generation, and boolean conditions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\ndef g():\n    return [2, 3]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True",
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)",
        "solution_func": "def g():\n    return [2, 3]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and returns True if the list contains both even and odd numbers. The solution function g returns a list [2, 3] and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for the presence of both even and odd numbers in a list of integers using list comprehensions. The solution function returns a list with both even and odd numbers to satisfy the condition in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return string == string[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True",
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given string is a palindrome by comparing it with its reverse. The solution function g returns the string 'radar', which is a palindrome, and the assertion confirms that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. This requires understanding of matrix operations and nested loops.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True",
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given matrix is symmetric along its main diagonal. The solution function g returns a specific matrix, and the puzzle is considered solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, nested lists, and the all() function in Python. It also tests the understanding of matrix symmetry along the main diagonal.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, char='a') -> bool:\n    return s == s[::-1] and char in s\ndef g(char='a'):\n    palindrome = char + 'a' + char\n    return palindrome\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, char='a') -> bool:\n    return s == s[::-1] and char in s",
        "solution_func": "def g(char='a'):\n    palindrome = char + 'a' + char\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g that creates a palindrome string with a specified character, and then check if the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, creating palindromes, and checking conditions using the defined functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    powers_of_2 = {2**i for i in range(10)}\n    return any(all(num in powers_of_2 for num in subseq) for subseq in subsets(nums))\ndef g():\n    return [1, 2, 4, 8, 16, 32]\ndef subsets(nums):\n    n = len(nums)\n    for i in range(1, 2**n):\n        yield [nums[j] for j in range(n) if (i >> j) & 1]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as set operations, bitwise operations, and iteration over subsets of a list.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    powers_of_2 = {2**i for i in range(10)}\n    return any(all(num in powers_of_2 for num in subseq) for subseq in subsets(nums))",
        "solution_func": "def g():\n    return [1, 2, 4, 8, 16, 32]\ndef subsets(nums):\n    n = len(nums)\n    for i in range(1, 2**n):\n        yield [nums[j] for j in range(n) if (i >> j) & 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers contains a subsequence where all numbers are powers of 2."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(nums) that checks if there exists a subsequence in the input list 'nums' where all numbers are powers of 2. The solution function g() returns a list of powers of 2, and the puzzle asserts that f(g()) should return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g(s = \"racecar\"):\n    return s + s[::-1][1:]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s = \"racecar\"):\n    return s + s[::-1][1:]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome by comparing it with its reverse. The solution function appends the second half of the reversed string to the original string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target = 10):\n    return [2, 8, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and conditional logic to check if a pair of numbers in a list sum up to a target value.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target = 10):\n    return [2, 8, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires implementing a function f that takes a list of numbers and a target number, and checks if there are two numbers in the list that add up to the target. The solution function g returns a specific list of numbers that satisfy the condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding sets, iteration over a list, and checking for a specific condition. The solution function g returns a list of numbers that sum up to the target value.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n)\n\ndef g():\n    return sympy.prime(5)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime using the sympy library in Python.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
            "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "import sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n)",
        "solution_func": "def g():\n    return sympy.prime(5)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a specific prime number is prime using the sympy library in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and the usage of the sympy library in Python to determine primality.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    rows, cols = len(matrix), len(matrix[0])\n    \n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == min(matrix[i]) and matrix[i][j] == max(matrix[k][j] for k in range(rows)):\n                return True\n    return False\n\ndef g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and comparison operations.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    rows, cols = len(matrix), len(matrix[0])\n    \n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == min(matrix[i]) and matrix[i][j] == max(matrix[k][j] for k in range(rows)):\n                return True\n    return False",
        "solution_func": "def g():\n    return [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f that takes a matrix as input and checks if there exists an element in each row that is both the minimum element in its row and the maximum element in its column."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function f iterates through each element in the matrix and checks if the element is the minimum in its row and the maximum in its column. If such an element is found, the function returns True. Otherwise, it returns False.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) == 3 and all((nums[i] ** 2 + nums[j] ** 2 == nums[k] ** 2) for i in range(3) for j in range(i+1, 3) for k in range(j+1, 3))\n\ndef g():\n    \"\"\"\n    This solution generates Pythagorean triplets by iterating through possible combinations of integers until a valid triplet is found.\n    \"\"\"\n    for a in range(1, 100):\n        for b in range(a + 1, 100):\n            for c in range(b + 1, 100):\n                if a ** 2 + b ** 2 == c ** 2:\n                    return [a, b, c]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for Pythagorean triplets, which requires knowledge of mathematical operations and conditional logic. It also involves iterating through combinations of integers, which can be related to permutations and combinations. Additionally, the solution uses brute force search to find the Pythagorean triplets.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]\ndef g():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) == 3 and all((nums[i] ** 2 + nums[j] ** 2 == nums[k] ** 2) for i in range(3) for j in range(i+1, 3) for k in range(j+1, 3))",
        "solution_func": "def g():\n    \"\"\"\n    This solution generates Pythagorean triplets by iterating through possible combinations of integers until a valid triplet is found.\n    \"\"\"\n    for a in range(1, 100):\n        for b in range(a + 1, 100):\n            for c in range(b + 1, 100):\n                if a ** 2 + b ** 2 == c ** 2:\n                    return [a, b, c]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of integers forms a Pythagorean triplet."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of Pythagorean triplets and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport string\n\ndef f(s: str) -> bool:\n    return set(s.lower()) >= set(string.ascii_lowercase)\n\ndef g():\n    \"\"\"\n    This solution generates pangram strings by combining all letters of the alphabet with random shuffling.\n    \"\"\"\n    import random\n    alphabet = list(string.ascii_lowercase)\n    random.shuffle(alphabet)\n    return ''.join(alphabet)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]\ndef g():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])\nassert f(g()) == True"
        ],
        "problem_func": "import string\n\ndef f(s: str) -> bool:\n    return set(s.lower()) >= set(string.ascii_lowercase)",
        "solution_func": "def g():\n    \"\"\"\n    This solution generates pangram strings by combining all letters of the alphabet with random shuffling.\n    \"\"\"\n    import random\n    alphabet = list(string.ascii_lowercase)\n    random.shuffle(alphabet)\n    return ''.join(alphabet)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random string of alphabets and checking if it is a pangram (contains all letters of the alphabet). The solution function generates random pangram strings."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string is a pangram. The solution function generates random pangram strings and checks if they satisfy the pangram condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='ABC') -> bool:\n    return pattern in s\ndef g(pattern='ABC'):\n    import random\n    random.seed(1)\n    options = ['A', 'B', 'C', 'D']\n    return ''.join(random.choices(options, k=5)) + pattern + ''.join(random.choices(options, k=5))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='ABC') -> bool:\n    return pattern in s",
        "solution_func": "def g(pattern='ABC'):\n    import random\n    random.seed(1)\n    options = ['A', 'B', 'C', 'D']\n    return ''.join(random.choices(options, k=5)) + pattern + ''.join(random.choices(options, k=5))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given pattern is present in a string, and a function g that generates a random string with the pattern embedded in it. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how the functions f and g interact, and how the random string generation in g can include the specified pattern for f to return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    import sympy\n    return sympy.prime(5)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime using a simple algorithm and importing a module to generate prime numbers. The topics used in this puzzle are Number Theory (checking for prime numbers) and Importing Modules (using the sympy module to generate prime numbers).",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import sympy\n    return sympy.prime(5)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number, and a function g() that returns the 5th prime number using the sympy library. The puzzle requires g() to return the 5th prime number correctly for f(g()) to evaluate to True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a prime number and using a library function to find the 5th prime number. The student needs to understand prime numbers and how to use external libraries in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list) -> bool:\n    return arr == sorted(arr)\ndef g():\n    import random\n    random.seed(2)\n    return sorted(random.sample(range(1, 10), 5))\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers using the `sorted()` function and generating a random sample using `random.sample()`. The solution checks if the generated list is sorted.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list) -> bool:\n    return arr == sorted(arr)",
        "solution_func": "def g():\n    import random\n    random.seed(2)\n    return sorted(random.sample(range(1, 10), 5))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that checks if a given list is sorted in ascending order. The solution generates a random list of numbers, sorts it, and returns the sorted list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and comparison in Python. The solution demonstrates the use of random sampling and sorting functions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=5) -> bool:\n    return len(s) == n and s == s[::-1]\ndef g(n=5):\n    return 'a' + 'b' * (n - 2) + 'a'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, n=5) -> bool:\n    return len(s) == n and s == s[::-1]",
        "solution_func": "def g(n=5):\n    return 'a' + 'b' * (n - 2) + 'a'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is of a specific length and a palindrome, and a function g that generates a string meeting the criteria. The assertion checks if g produces a valid input for f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, function definition, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(li: List[int], target=10) -> bool:\n    seen = set()\n    for num in li:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\ndef g(target=10):\n    return [1, target - 1]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Brute Force Search, and Conditional Logic.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(li: List[int], target=10) -> bool:\n    seen = set()\n    for num in li:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, target - 1]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if there are two numbers in the list that add up to a target value. The function g returns a list containing two numbers that add up to the target value. The puzzle is to determine if function f correctly identifies the presence of two such numbers in the list returned by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how the function f checks for the presence of two numbers that add up to a target value in a given list. The solution function g returns a list that satisfies this condition, and the puzzle tests if function f correctly identifies this condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, char='a') -> bool:\n    return s.count(char) >= 2\ndef g(char='a'):\n    return char * 2 + 'b'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves String Manipulation, Conditional Logic, and Function Calls.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, char='a') -> bool:\n    return s.count(char) >= 2",
        "solution_func": "def g(char='a'):\n    return char * 2 + 'b'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(s: str, char='a') -> bool and g(char='a'), where f checks if a given string contains at least two occurrences of a specified character, and g generates a string with two occurrences of a specified character followed by 'b'. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and function composition, which are fundamental concepts in Python programming. It also tests the understanding of function arguments and return types.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return 'abccba'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return 'abccba'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'abccba'. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom sympy import isprime\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(isprime(num) for num in nums)\n\ndef g(start=1, end=10):\n    return [num for num in range(start, end) if isprime(num)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers contains only prime numbers using the sympy library. The solution generates a list of prime numbers within a given range using list comprehension and the isprime function from sympy library.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
            "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True"
        ],
        "problem_func": "from sympy import isprime\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(isprime(num) for num in nums)",
        "solution_func": "def g(start=1, end=10):\n    return [num for num in range(start, end) if isprime(num)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if all numbers in a given list are prime numbers using the sympy library in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to use the sympy library to check for prime numbers and how to generate a list of prime numbers within a given range.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], target='python') -> bool:\n    return any(word.startswith('py') and len(word) > 4 for word in words) and target in words\n\ndef g():\n    return ['python', 'algorithm', 'programming', 'pythagoras']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
            "def f(s: str) -> bool:\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]\ndef g():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], target='python') -> bool:\n    return any(word.startswith('py') and len(word) > 4 for word in words) and target in words",
        "solution_func": "def g():\n    return ['python', 'algorithm', 'programming', 'pythagoras']",
        "quality": [
            null
        ],
        "description": [
            "Given a list of words, the puzzle checks if any word starts with 'py' and has a length greater than 4, and if the word 'python' is in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the solution function to return a list of words where at least one word starts with 'py' and has a length greater than 4, and 'python' is present in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sum_even_fib: int) -> bool:\n    return sum_even_fib == 10\ndef g(limit=10):\n    a, b = 1, 1\n    total = 0\n    while a <= limit:\n        if a % 2 == 0:\n            total += a\n        a, b = b, a + b\n    return total\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to calculate the sum of even Fibonacci numbers up to a certain limit and check if it equals 10.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(sum_even_fib: int) -> bool:\n    return sum_even_fib == 10",
        "solution_func": "def g(limit=10):\n    a, b = 1, 1\n    total = 0\n    while a <= limit:\n        if a % 2 == 0:\n            total += a\n        a, b = b, a + b\n    return total",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that calculates the sum of even Fibonacci numbers up to a given limit and then check if the sum is equal to 10."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves calculating the sum of even Fibonacci numbers using a given function and checking if the sum is equal to a specific value. It tests the student's understanding of Fibonacci sequences and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], start=2, diff=3, length=5) -> bool:\n    return all((nums[i] - nums[i-1] == diff for i in range(1, len(nums)))) and len(nums) == length\ndef g(start=2, diff=3, length=5):\n    return [start + diff*i for i in range(length)]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], start=2, diff=3, length=5) -> bool:\n    return all((nums[i] - nums[i-1] == diff for i in range(1, len(nums)))) and len(nums) == length",
        "solution_func": "def g(start=2, diff=3, length=5):\n    return [start + diff*i for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that checks if a given list of numbers follows a specific arithmetic sequence, and a function g that generates a list based on a given start, difference, and length, such that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the student's ability to create a function that generates a specific arithmetic sequence.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, lower=100, upper=500) -> bool:\n    return num >= lower and num <= upper and num**0.5 == int(num**0.5)\ndef g(lower=100, upper=500):\n    for i in range(int(lower**0.5), int(upper**0.5) + 1):\n        if i*i >= lower and i*i <= upper:\n            return i*i\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and algorithm optimization.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
            "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, lower=100, upper=500) -> bool:\n    return num >= lower and num <= upper and num**0.5 == int(num**0.5)",
        "solution_func": "def g(lower=100, upper=500):\n    for i in range(int(lower**0.5), int(upper**0.5) + 1):\n        if i*i >= lower and i*i <= upper:\n            return i*i",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is within a specified range and is a perfect square. The solution function g() iterates through the square roots of the range and returns the first perfect square it finds within the range."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge related to checking for perfect squares within a range. It can be used to teach students about range checking and mathematical operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str, pattern='ABACADAE') -> bool:\n    return all(string[i] == pattern[i % len(pattern)] for i in range(len(string)))\n\ndef g(pattern='ABACADAE'):\n    return ''.join(pattern[i % len(pattern)] for i in range(20))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Pattern Recognition",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(string: str, pattern='ABACADAE') -> bool:\n    return all(string[i] == pattern[i % len(pattern)] for i in range(len(string)))",
        "solution_func": "def g(pattern='ABACADAE'):\n    return ''.join(pattern[i % len(pattern)] for i in range(20))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string follows a specific pattern, and a function g that generates a string based on a predefined pattern. The assertion checks if the generated string by g satisfies the pattern defined in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how the pattern matching works in the f function and how the g function generates a string based on a pattern. The assertion tests if the generated string by g satisfies the pattern defined in f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return all(abs(x - y) == 3 for x, y in tuples)\n\ndef g():\n    return [(i, i + 3) for i in range(1, 8)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return all(abs(x - y) == 3 for x, y in tuples)",
        "solution_func": "def g():\n    return [(i, i + 3) for i in range(1, 8)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples of integers and returns True if the absolute difference between the elements in each tuple is 3. The solution function g generates a list of tuples where the second element is 3 greater than the first element in each tuple, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, tuple manipulation, and the all() function in Python. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(nums: list) -> bool:\n    return any(num > 0 for num in nums) and any(num < 0 for num in nums)\n\ndef g(length=5):\n    return random.sample(range(-10, 10), length)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "import random\n\ndef f(nums: list) -> bool:\n    return any(num > 0 for num in nums) and any(num < 0 for num in nums)",
        "solution_func": "def g(length=5):\n    return random.sample(range(-10, 10), length)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of random numbers within a specified range and length, and checking if the list contains both positive and negative numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension and the 'any' function to check for the presence of both positive and negative numbers in a randomly generated list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(input_str='racecar'):\n    return input_str + input_str[::-1][1:]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True",
            "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(input_str='racecar'):\n    return input_str + input_str[::-1][1:]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(s: str) -> bool which checks if a given string is a palindrome, and g(input_str='racecar') which creates a modified string by concatenating the input string with its reverse excluding the first character. The assertion checks if the modified string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically slicing and concatenation, as well as checking for palindromes. It provides a practical application of these concepts.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return any(s == s[::-1] for s in strings)\n\ndef g():\n    import random\n    strings = ['hello', 'world', 'madam', 'racecar', 'python']\n    random.shuffle(strings)\n    return strings\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return any(s == s[::-1] for s in strings)",
        "solution_func": "def g():\n    import random\n    strings = ['hello', 'world', 'madam', 'racecar', 'python']\n    random.shuffle(strings)\n    return strings",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if any string in a list is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if any string in a list is a palindrome using the provided functions f and g. Function f checks if a string is a palindrome, and function g generates a list of strings and shuffles them.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, rev='racecar') -> bool:\n    return s == rev\ndef g(rev='racecar'):\n    return rev[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, rev='racecar') -> bool:\n    return s == rev",
        "solution_func": "def g(rev='racecar'):\n    return rev[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string is a palindrome and g returns the reverse of a predefined string. The puzzle tests if the reverse of the predefined string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, function definition, and checking for palindromes in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, prime=29) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(prime=29):\n    return prime\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given number is a prime number using a simple algorithm. The solution function returns a predefined prime number. The puzzle mainly focuses on Number Theory (checking for prime numbers).",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, prime=29) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime=29):\n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(num: int, prime=29) that checks if a given number is prime, and a function g(prime=29) that returns a prime number. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(arr: List[int], sorted_arr=[-19, -12, 0, 3, 7, 12, 97]) -> bool:\n    return arr == sorted(arr)\ndef g(sorted_arr=[-19, -12, 0, 3, 7, 12, 97]):\n    return sorted_arr\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if it is sorted correctly.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
            "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(arr: List[int], sorted_arr=[-19, -12, 0, 3, 7, 12, 97]) -> bool:\n    return arr == sorted(arr)",
        "solution_func": "def g(sorted_arr=[-19, -12, 0, 3, 7, 12, 97]):\n    return sorted_arr",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks if a given list is sorted in ascending order. The solution function simply returns a pre-defined sorted list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is to check if a given list is sorted in ascending order. The solution function returns a pre-defined sorted list, which will always pass the check in the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    import string\n    import random\n    letters = string.ascii_lowercase\n    half_length = random.randint(1, 5)\n    palindrome_half = ''.join(random.choice(letters) for _ in range(half_length))\n    return palindrome_half + (palindrome_half[::-1] if half_length % 2 == 0 else palindrome_half[:-1][::-1])\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    import string\n    import random\n    letters = string.ascii_lowercase\n    half_length = random.randint(1, 5)\n    palindrome_half = ''.join(random.choice(letters) for _ in range(half_length))\n    return palindrome_half + (palindrome_half[::-1] if half_length % 2 == 0 else palindrome_half[:-1][::-1])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random string and checking if it is a palindrome by comparing it with its reverse. The solution function generates a random string that is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(lst: List[int]) -> bool:\n    return all(lst[i] - lst[i-1] == lst[1] - lst[0] for i in range(2, len(lst)))\ndef g(start=1, diff=3, length=5):\n    return [start + i * diff for i in range(length)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to generate a list of numbers with a specific arithmetic progression pattern. It also requires understanding of list manipulation and iteration.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
            "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(lst: List[int]) -> bool:\n    return all(lst[i] - lst[i-1] == lst[1] - lst[0] for i in range(2, len(lst)))",
        "solution_func": "def g(start=1, diff=3, length=5):\n    return [start + i * diff for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of integers follows an arithmetic sequence, and a function g that generates a list of integers in an arithmetic sequence based on given parameters. The assertion checks if the generated list satisfies the arithmetic sequence condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding arithmetic sequences and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_key: str, scores={'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 95}) -> bool:\n    return max_key == max(scores, key=scores.get)\n\ndef g(scores={'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 95}):\n    return max(scores, key=scores.get)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, comparison, and function calls.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True"
        ],
        "problem_func": "def f(max_key: str, scores={'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 95}) -> bool:\n    return max_key == max(scores, key=scores.get)",
        "solution_func": "def g(scores={'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 95}):\n    return max(scores, key=scores.get)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the key with the highest value in a dictionary and checking if it matches a given input key."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use the max function with a dictionary and passing the result to another function for comparison.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int, n=5) -> bool:\n    def factorial_recursive(n):\n        if n == 0:\n            return 1\n        return n * factorial_recursive(n - 1)\n    \n    return factorial == factorial_recursive(n)\n\ndef g(n=5):\n    def factorial_recursive(n):\n        if n == 0:\n            return 1\n        return n * factorial_recursive(n - 1)\n    \n    return factorial_recursive(n)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion and mathematical operations (factorial calculation).",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
            "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True"
        ],
        "problem_func": "def f(factorial: int, n=5) -> bool:\n    def factorial_recursive(n):\n        if n == 0:\n            return 1\n        return n * factorial_recursive(n - 1)\n    \n    return factorial == factorial_recursive(n)",
        "solution_func": "def g(n=5):\n    def factorial_recursive(n):\n        if n == 0:\n            return 1\n        return n * factorial_recursive(n - 1)\n    \n    return factorial_recursive(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the factorial of a given number matches a recursive factorial function, and a function g that calculates the factorial of a given number. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding recursive functions and how to compare the output of two functions. It can be used to teach Python programming concepts such as recursion and function composition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, unique_elements=[1, 2, 3, 4, 5]) -> bool:\n    return nums == sorted(nums) and set(nums) == set(unique_elements)\ndef g(unique_elements=[1, 2, 3, 4, 5]):\n    return list(set(unique_elements))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list, checking for unique elements using sets, and list manipulation.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True",
            "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, unique_elements=[1, 2, 3, 4, 5]) -> bool:\n    return nums == sorted(nums) and set(nums) == set(unique_elements)",
        "solution_func": "def g(unique_elements=[1, 2, 3, 4, 5]):\n    return list(set(unique_elements))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers is sorted and contains only unique elements, and a function g that returns a list of unique elements. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting, set operations, and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(num: int) -> bool:\n    return sympy.isprime(num)\n\ndef g():\n    return sympy.prime(5)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to Number Theory (checking for prime numbers) and Importing Modules (using the sympy library).",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True",
            "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True"
        ],
        "problem_func": "import sympy\n\ndef f(num: int) -> bool:\n    return sympy.isprime(num)",
        "solution_func": "def g():\n    return sympy.prime(5)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a specific prime number is prime using the sympy library in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and the sympy library in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, divisor=7, target_length=3) -> bool:\n    return num % divisor == 0 and len(str(num)) >= target_length\ndef g(divisor=7, target_length=3):\n    num = divisor\n    while len(str(num)) < target_length:\n        num *= 2\n    return num\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and string manipulation.",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, divisor=7, target_length=3) -> bool:\n    return num % divisor == 0 and len(str(num)) >= target_length",
        "solution_func": "def g(divisor=7, target_length=3):\n    num = divisor\n    while len(str(num)) < target_length:\n        num *= 2\n    return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a number that is divisible by a given divisor and has a length greater than or equal to a target length."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a number is divisible by a given divisor and has a length greater than or equal to a target length. The function g generates a number by doubling the divisor until the number's length meets the target length. The assertion at the end checks if the generated number satisfies the conditions of function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(lst: List[int], pattern=[1, 2, 3, 1, 2, 3]) -> bool:\n    return pattern * (len(lst) // len(pattern)) + pattern[:len(lst) % len(pattern)] == lst\ndef g(pattern=[1, 2, 3]):\n    lst = []\n    for i in range(1, 10):\n        lst.extend(pattern)\n    return lst\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, pattern matching, and iteration. It does not directly relate to any of the provided topics.",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(lst: List[int], pattern=[1, 2, 3, 1, 2, 3]) -> bool:\n    return pattern * (len(lst) // len(pattern)) + pattern[:len(lst) % len(pattern)] == lst",
        "solution_func": "def g(pattern=[1, 2, 3]):\n    lst = []\n    for i in range(1, 10):\n        lst.extend(pattern)\n    return lst",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if the list follows a specific pattern of repeating elements. The function g generates a list by repeating a given pattern of integers. The puzzle is to determine if the generated list satisfies the pattern check function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, pattern matching, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, rule='aabbcc') -> bool:\n    return all(s[i:i+2] == rule[i:i+2] for i in range(0, len(s), 2))\ndef g(rule='aabbcc'):\n    return ''.join([rule[i:i+2] for i in range(0, len(rule), 2)])\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
            "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, rule='aabbcc') -> bool:\n    return all(s[i:i+2] == rule[i:i+2] for i in range(0, len(s), 2))",
        "solution_func": "def g(rule='aabbcc'):\n    return ''.join([rule[i:i+2] for i in range(0, len(rule), 2)])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string follows a specific rule pattern and g generates a string based on a given rule pattern. The puzzle tests whether the output of g satisfies the condition defined in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and pattern matching in Python, which can be a good exercise for students to practice their understanding of string slicing and list comprehension.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list) -> bool:\n    return len(set(arr)) == len(arr)\n\ndef g() -> list:\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations to check for uniqueness of elements in a list.",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list) -> bool:\n    return len(set(arr)) == len(arr)",
        "solution_func": "def g() -> list:\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(arr) that checks if all elements in a list are unique, and a function g() that returns a list of unique elements. The puzzle is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list uniqueness and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return all(k == v for k, v in d.items())\n\ndef g() -> dict:\n    return {'a': 'a', 'b': 'b', 'c': 'c'}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking if all keys are equal to their corresponding values.",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return all(k == v for k, v in d.items())",
        "solution_func": "def g() -> dict:\n    return {'a': 'a', 'b': 'b', 'c': 'c'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all keys in a dictionary are equal to their corresponding values, and a function g that returns a dictionary with keys equal to their values. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding dictionary items and equality comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return nums == sorted(nums)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and checking if it is sorted correctly.",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "def f(z: float, v=9, d=0.0001) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 9, d = 0.0001):\n    return v * d\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return nums == sorted(nums)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(nums: list) -> bool that checks if a list of numbers is sorted in ascending order. The solution function g() returns a specific list of numbers that is already sorted, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python to master's students in CS as it involves understanding list sorting and function definition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime or not.",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "def f(z: float, v=9, d=0.0001) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 9, d = 0.0001):\n    return v * d\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(num: int) that checks if a given number is a prime number. The function g() returns the number 17, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a prime number and ensuring that the function g() returns a specific number to pass the assertion test.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sentence: str) -> bool:\n    clean_sentence = ''.join(char for char in sentence if char.isalnum()).lower()\n    return clean_sentence == clean_sentence[::-1]\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation is used to clean the sentence and check for palindrome, Conditional Logic is used in the return statement,",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
            "def f(z: float, v=9, d=0.0001) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 9, d = 0.0001):\n    return v * d\nassert f(g()) == True"
        ],
        "problem_func": "def f(sentence: str) -> bool:\n    clean_sentence = ''.join(char for char in sentence if char.isalnum()).lower()\n    return clean_sentence == clean_sentence[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if a given sentence is a palindrome after removing non-alphanumeric characters and converting all characters to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, conditionals, and functions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a list of numbers is sorted in ascending order. It requires knowledge of list manipulation and comparison operations.",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is sorted in non-decreasing order, and a function g that returns a sorted list of integers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and indexing in Python. It is a suitable puzzle for teaching Python programming concepts related to list manipulation and boolean expressions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm. It does not directly relate to any of the listed topics.",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
            "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number or not. The function g() returns the number 17, and the puzzle requires verifying if 17 is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], common_diff=5) -> bool:\n    if len(numbers) < 2:\n        return True\n    diff = numbers[1] - numbers[0]\n    return all(numbers[i] - numbers[i-1] == diff for i in range(2, len(numbers)))\n\ndef g(size=4, common_diff=5):\n    return [i * common_diff for i in range(size)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and list manipulation to generate a sequence with a common difference. It also includes conditional logic to check if the generated sequence satisfies a certain condition.",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], common_diff=5) -> bool:\n    if len(numbers) < 2:\n        return True\n    diff = numbers[1] - numbers[0]\n    return all(numbers[i] - numbers[i-1] == diff for i in range(2, len(numbers)))",
        "solution_func": "def g(size=4, common_diff=5):\n    return [i * common_diff for i in range(size)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers generated with a common difference satisfies an arithmetic progression."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of arithmetic progressions and list comprehension in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, palindrome='Racecar') -> bool:\n    s = s.lower()\n    return s == s[::-1]\n\ndef g(palindrome='Racecar'):\n    return palindrome.lower()\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, palindrome='Racecar') -> bool:\n    s = s.lower()\n    return s == s[::-1]",
        "solution_func": "def g(palindrome='Racecar'):\n    return palindrome.lower()",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome, and a function g that returns a predefined palindrome string in lowercase. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, function definition, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int]) -> bool:\n    return all(is_prime(num) for num in numbers)\n\ndef g(size=5):\n    primes = []\n    num = 2\n    while len(primes) < size:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and generating a list of prime numbers using a brute force approach.",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
            "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int]) -> bool:\n    return all(is_prime(num) for num in numbers)",
        "solution_func": "def g(size=5):\n    primes = []\n    num = 2\n    while len(primes) < size:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if all numbers in a list are prime numbers using a given function. The solution generates a list of prime numbers of a specified size."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and list comprehension in Python. The solution function generates a list of prime numbers based on a specified size and the puzzle function checks if all numbers in a given list are prime.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(grid: List[List[int]]) -> bool:\n    def is_valid(row):\n        return len(set(row)) == 9 and all(1 <= num <= 9 for num in row)\n\n    def is_valid_sudoku(grid):\n        rows = grid\n        cols = [[grid[i][j] for i in range(9)] for j in range(9)]\n        squares = [[grid[i + k][j + l] for k in range(3) for l in range(3)] for i in range(0, 9, 3) for j in range(0, 9, 3)]\n\n        for row in rows + cols + squares:\n            if not is_valid(row):\n                return False\n        return True\n\n    return is_valid_sudoku(grid)\n\ndef g():\n    valid_sudoku = [\n        [5, 3, 4, 6, 7, 8, 9, 1, 2],\n        [6, 7, 2, 1, 9, 5, 3, 4, 8],\n        [1, 9, 8, 3, 4, 2, 5, 6, 7],\n        [8, 5, 9, 7, 6, 1, 4, 2, 3],\n        [4, 2, 6, 8, 5, 3, 7, 9, 1],\n        [7, 1, 3, 9, 2, 4, 8, 5, 6],\n        [9, 6, 1, 5, 3, 7, 2, 8, 4],\n        [2, 8, 7, 4, 1, 9, 6, 3, 5],\n        [3, 4, 5, 2, 8, 6, 1, 7, 9]\n    ]\n\n    return valid_sudoku\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking the validity of a Sudoku grid, which requires knowledge of set operations and conditional logic.",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(grid: List[List[int]]) -> bool:\n    def is_valid(row):\n        return len(set(row)) == 9 and all(1 <= num <= 9 for num in row)\n\n    def is_valid_sudoku(grid):\n        rows = grid\n        cols = [[grid[i][j] for i in range(9)] for j in range(9)]\n        squares = [[grid[i + k][j + l] for k in range(3) for l in range(3)] for i in range(0, 9, 3) for j in range(0, 9, 3)]\n\n        for row in rows + cols + squares:\n            if not is_valid(row):\n                return False\n        return True\n\n    return is_valid_sudoku(grid)",
        "solution_func": "def g():\n    valid_sudoku = [\n        [5, 3, 4, 6, 7, 8, 9, 1, 2],\n        [6, 7, 2, 1, 9, 5, 3, 4, 8],\n        [1, 9, 8, 3, 4, 2, 5, 6, 7],\n        [8, 5, 9, 7, 6, 1, 4, 2, 3],\n        [4, 2, 6, 8, 5, 3, 7, 9, 1],\n        [7, 1, 3, 9, 2, 4, 8, 5, 6],\n        [9, 6, 1, 5, 3, 7, 2, 8, 4],\n        [2, 8, 7, 4, 1, 9, 6, 3, 5],\n        [3, 4, 5, 2, 8, 6, 1, 7, 9]\n    ]\n\n    return valid_sudoku",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given 9x9 grid represents a valid Sudoku solution."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of nested lists, set operations, list comprehensions, and conditional statements in Python to validate a Sudoku grid.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i]**2 + nums[j]**2 == nums[k]**2 or nums[j]**2 + nums[k]**2 == nums[i]**2 or nums[k]**2 + nums[i]**2 == nums[j]**2:\n                    return True\n    return False\n\ndef g():\n    return [3, 4, 5, 6, 8, 10]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check for Pythagorean triplets in a list of numbers.",
        "idx_generation": 90,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i]**2 + nums[j]**2 == nums[k]**2 or nums[j]**2 + nums[k]**2 == nums[i]**2 or nums[k]**2 + nums[i]**2 == nums[j]**2:\n                    return True\n    return False",
        "solution_func": "def g():\n    return [3, 4, 5, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if there exists a Pythagorean triplet in a given list of integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires checking if there are three numbers in the list that form a Pythagorean triplet (i.e., a^2 + b^2 = c^2).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    }
]