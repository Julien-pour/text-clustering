[
    {
        "fitness": 1.0,
        "program_str": "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and string manipulation.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')",
        "solution_func": "def g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding a number that, when squared, starts with the digits '123456789'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, mathematical operations, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0",
        "solution_func": "def g():\n    return ('h' + 'o') * 1000",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a function that checks if a given string meets certain conditions related to the count of specific substrings."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and counting substrings in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking for a specific condition on the elements of the list. It also uses list comprehension and modulo operation. The solution generates a list based on a specific pattern to satisfy the conditions of the puzzle.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))",
        "solution_func": "def g():\n    return [((i + 1) % 999) for i in range(999)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a function that takes a list of integers and checks if the list is sorted in ascending order and contains all integers from 0 to 998. The solution function generates a list where each element is the remainder of (i+1) divided by 999."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and comparison, as well as list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for a specific condition using list comprehension.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])",
        "solution_func": "def g():\n    return [i for i in range(10) for j in range(i)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that checks if a given list of integers satisfies a specific condition. The solution involves generating a list based on a nested loop and passing it to the function to check."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and the count() method in Python. It also requires knowledge of nested loops and range() function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3",
        "solution_func": "def g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to define a function f(s: str) that checks if a certain condition is met, and a function g() that generates a string based on a mathematical operation and finds a substring with the highest count in the generated string. The assertion checks if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, mathematical operations, and set comprehension in Python. It tests the students' understanding of string slicing, counting substrings, and defining functions with specific conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and list operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')",
        "solution_func": "def g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to write a function that takes a list of integers and returns a boolean value based on a comparison with a given string. The solution function generates a list of integers based on the index of characters in another string."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves list comprehension, string manipulation, and comparison operations in Python. It tests the student's understanding of list indexing and comparison techniques in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and list operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))",
        "solution_func": "def g():\n    return ['1']",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that takes a list of strings as input and returns True if the minimum and maximum values in the list are equal to the string representation of the length of the list."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, comparison of strings and integers, and the use of the min, max, and len functions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Mathematical Operations",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')",
        "solution_func": "def g():\n    return 123.456 + 3.1415",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to determine if the result of a mathematical operation satisfies a specific condition using string manipulation."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if the result of adding two numbers satisfies a condition based on string manipulation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))",
        "solution_func": "def g():\n    return [(2 ** i) for i in range(20)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that checks if the sum of the first i elements in a list matches a specific formula for all i from 0 to 19. The solution generates a list of powers of 2 from 0 to 19 and checks if the function returns True for this list."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, summing elements in a list, and comparing the sum to a specific formula. The solution involves generating a list of powers of 2 using list comprehension and passing it to the function to check if it returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(i: int) -> bool:\n    return len(str(i + 1000)) > len(str(i + 1001))\ndef g():\n    return -1001\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and string manipulation to compare the lengths of two strings.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(i: int) -> bool:\n    return len(str(i + 1000)) > len(str(i + 1001))",
        "solution_func": "def g():\n    return -1001",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding a number that, when added to 1001, results in a number with a shorter length than when added to 1000."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how adding different numbers affects the length of the resulting number when converted to a string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and list comprehension to check if the sum of all pairs of elements in the list is equal to a specific set.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}",
        "solution_func": "def g():\n    return [0, 1, 2, 3, 17]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function that takes a list of integers and checks if the sum of all possible pairs of integers in the list matches a specific set of values."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves set comprehension and comparison to a predefined set of values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for unique elements in the list.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3",
        "solution_func": "def g():\n    return list(range(3)) * 10",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a function that takes a list of integers as input and returns True if all elements are different from their adjacent elements and the list contains exactly 3 unique elements."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking for uniqueness of elements in a list and the presence of exactly 3 unique elements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and iteration over a list of strings.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')",
        "solution_func": "def g():\n    return list(next(zip('dee', 'doo', 'dah!')))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that checks if a given list of strings matches a specific pattern defined by the zip function."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how the zip function works in Python and how to compare tuples to check for a specific pattern.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]\ndef g():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, sorting and ordering, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]",
        "solution_func": "def g():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a string that is a palindrome and is an anagram of the phrase 'Permute me true'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, sorting, and checking for palindromes and anagrams.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]",
        "solution_func": "def g():\n    return [1, 2, 3, 3]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that takes a list of integers and returns a boolean value based on specific conditions. The solution function g returns a list of integers that satisfies the conditions of function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list indexing and comparison operations in Python. It also requires the student to correctly implement the conditions specified in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, list operations, and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995",
        "solution_func": "def g():\n    return [0, 4] + list(range(6, 1000))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that takes a list of integers as input and returns True if the conditions specified in the function are met. The student also needs to implement a function g that generates a list of integers to be passed to function f, such that the assertion statement at the end of the code passes."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking conditions related to the elements in the input list and their properties. The solution function g generates a list that satisfies the conditions specified in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]",
        "solution_func": "def g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves calculating the angles of the hour and minute hands of a clock and checking if the absolute difference between them matches a target angle or its complement."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of angles, loops, and conditional statements in Python to calculate the angles of the clock hands and check for the target angle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Backtracking, Number Theory",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1",
        "solution_func": "def g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining two functions, f(n) and g(), where f checks a specific condition on an input integer n and g iterates through integers to find the first one that satisfies the condition in f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves a loop that checks a condition on an integer n and a loop in the solution function g() that iterates through integers to find the first one that satisfies the condition in f(). The solution function g() returns the first integer that satisfies the condition in f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves geometry and coordinate manipulation to solve a combinatorial problem.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points",
        "solution_func": "def g(side = 10, num_points = 20):\n    from itertools import combinations",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves generating a set of unique coordinates within a grid, ensuring that no three points are collinear, and checking if a specific condition is met based on the generated coordinates."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of nested loops, assertions, itertools combinations, and mathematical concepts related to collinearity of points in a plane.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, iteration, and combination generation using itertools. It also includes conditional logic and assertion checks.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
        "solution_func": "def g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to find a combination of stamps from a given set of options that sum up to a target value, while also considering a maximum number of stamps allowed."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given combination of stamps satisfies certain conditions, such as the total sum being equal to the target value and the number of stamps not exceeding a maximum limit.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves geometric calculations and constraints to ensure that a set of rectangles form a perfect square. It also includes assertions to validate the input data. The solution generates a list of coordinates and side lengths for rectangles that form a perfect square when summed up.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2",
        "solution_func": "def g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of lists as input and performs certain checks on the input list to determine if it satisfies certain conditions. The solution function g generates a specific list of lists that satisfies the conditions of function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, and conditional checks in Python. It also requires knowledge of list comprehension and mathematical calculations. The solution function g provides a specific list that satisfies the conditions of function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))",
        "solution_func": "def g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that checks a specific condition on a given input string, and a function g that finds a specific value in the input string to satisfy the condition in function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of string manipulation, counting characters in a string, and using list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, conditional logic, and sorting and ordering.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True",
        "solution_func": "def g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding a number 'n' such that the square of 'n' contains all digits from 0 to 9 exactly once."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if the square of a number 'n' contains all digits from 0 to 9 exactly once. The function f(n) checks this condition, and the function g() iterates through numbers to find the required 'n'.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and Exception Handling.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)",
        "solution_func": "def g():\n    return \"8*8-1\"",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a string expression using only the characters '1', '8', '-', '+', '*', and '/' that evaluates to 63 and contains two '8's and one '1'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves using the given characters to form a valid mathematical expression that evaluates to 63 with specific constraints on the number of '8's and '1's in the expression.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, conditional logic, and evaluating expressions using the `eval()` function.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)",
        "solution_func": "def g():\n    return \"8*8-1**8\"",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a string expression using only the characters '1', '8', '-', '+', '*', and '/' that evaluates to 63 and contains three occurrences of the digit '8' and one occurrence of the digit '1'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves creating a mathematical expression using specific characters that evaluates to a specific value and satisfies certain conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Backtracking, List Manipulation, and Algorithm Optimization.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal",
        "solution_func": "def g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a problem of pouring water between jugs with different capacities to reach a specific goal state."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of list manipulation, loops, and conditionals in Python to solve the pouring water problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])",
        "solution_func": "def g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the functions f and g, and use them to determine if the assertion statement is True or False."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and comparison, as well as understanding the logic within the functions f and g. The student needs to analyze the code to determine if the assertion statement is correct based on the functions provided.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves geometry and coordinate manipulation to cover a target area with given corners and dimensions.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
        "solution_func": "def g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of corners and some parameters, and checks if the corners cover a specific target area. The solution function g generates the corners based on the parameters and checks if f returns True for those corners."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, sets, and assertions in Python. It also requires knowledge of function definitions and function calls with default parameters. The solution function g generates the corners based on the parameters and checks if the function f returns True for those corners.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation to check if the input list satisfies a certain condition based on a predefined list of trips. The solution function uses list comprehension to calculate the sum of elements in each sublist of trips and return a list of boolean values based on the condition 'sum(s) >= 2'. The assert statement checks if the puzzle function f returns True when applied to the solution function g.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))",
        "solution_func": "def g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that takes a list of boolean values and checks if the length of the list matches a predefined list of trips, and if the sum of each trip is greater than or equal to 2. The solution function g generates a list of boolean values based on the sum of each trip in a given list of trips."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves working with lists, boolean values, list comprehension, and conditional statements in Python. It tests the student's understanding of list operations and boolean logic. The solution function g demonstrates list comprehension and boolean comparisons in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))",
        "solution_func": "def g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining two functions, f and g, where f checks if certain conditions are met based on a list of scores and a threshold value, and g calculates the number of scores that are greater than or equal to the threshold value. The puzzle requires understanding of list comprehension, conditionals, and function composition in Python."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given solution function g meets the conditions specified in function f. Function f checks if all scores before a certain index are greater than or equal to a threshold value, and all scores after that index are less than the threshold value. Function g calculates the number of scores that are greater than or equal to the threshold value. The assert statement at the end ensures that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)",
        "solution_func": "def g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that generates a string with a dot between each consonant in a given string, excluding vowels. The solution function then checks if the generated string satisfies certain conditions based on the input string."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and assertion checks. It tests the student's understanding of string operations and control flow in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, Conditional Logic, and Set Operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
        "solution_func": "def g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of squares and checks if they cover a specific target area in a grid. The solution function g generates a list of squares based on the dimensions of the grid and ensures that the target area is covered by these squares."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how the function f checks if a list of squares covers a target area in a grid, and how the function g generates squares to satisfy this condition. It requires knowledge of list comprehension, loops, and conditional statements in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
        "solution_func": "def g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves comparing two strings with different conditions based on the value of n. The solution function g() compares the strings and returns a value based on the comparison. The puzzle function f() checks if the comparison result from g() satisfies certain conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string comparison and conditional checks based on the value of n. The solution function g() returns a value based on the comparison of two strings, and the puzzle function f() checks if the result from g() meets the specified conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True",
        "solution_func": "def g(word = 'silon'):\n    return word[0].upper() + word[1:]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires defining a function f(s: str, word='silon') that checks if the input string s matches a specific pattern defined by the word 'silon'. The solution function g(word = 'silon') generates a modified version of the word 'silon' by capitalizing the first letter. The puzzle tests whether the solution function g satisfies the condition of the function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and conditional checks in Python. It tests the understanding of string indexing, comparison, and function composition. This puzzle can be used to teach Python programming concepts related to strings and functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))",
        "solution_func": "def g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand and analyze a function f that compares characters in a string and a function g that manipulates the input string to remove consecutive duplicate characters. The goal is to ensure that the output of function g satisfies the conditions set by function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and comprehension in Python. Students need to understand how the functions f and g interact and how to manipulate strings to meet the conditions of f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation to solve a linear algebra problem.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))",
        "solution_func": "def g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of integers and a default list of lists of integers as input. The function checks if the sum of each column in the default list plus the corresponding element in the input list equals zero. The solution function g calculates the negation of the sum of each column in the default list."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, summing elements in lists, and checking conditions using all(). The solution function g uses list comprehensions and negation to calculate the required sums.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list comprehension. It does not explicitly involve any of the other topics listed.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])",
        "solution_func": "def g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand how to define functions with default parameters and use list comprehension to calculate a sum. The student needs to ensure that the function g() returns the correct value to satisfy the condition in function f()."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, default parameters, list comprehension, and function invocation. It tests the student's ability to correctly implement a function that satisfies a given condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and iterative algorithms.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
        "solution_func": "def g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the given functions f and g, and determine if g is a solution to f by checking if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding loops, assertions, and comparison operators in Python. The student needs to analyze the functions f and g to determine if g is a solution to f based on the given conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, Conditional Logic, and Function Calls.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m",
        "solution_func": "def g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that checks if the result of another function g satisfies a certain condition after some operations on a given number."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle tests the understanding of Python functions, loops, conditional statements, and arithmetic operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
        "solution_func": "def g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves two functions, f and g, where f checks if a certain condition is met based on a list of pairs, and g calculates a value based on the same list of pairs. The goal is to find a pair of values that satisfies the condition in f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding the logic of the f function which checks if a certain condition is met based on the pairs provided. The g function calculates a value based on the pairs, and the goal is to find a pair of values that satisfies the condition in f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
        "solution_func": "def g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand and implement a function that checks if the input string has more uppercase letters than lowercase letters, and returns True if the condition is met."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves counting the number of uppercase letters in a given string and comparing it to the length of the string to determine if the string should be converted to all uppercase or all lowercase. The solution function g() correctly implements this logic and returns the modified string based on the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'",
        "solution_func": "def g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function g that finds the indices of characters in a given string that spell out the word 'intelligent'. The function f checks if the indices are in sorted order and if the characters at those indices form the word 'intelligent'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and list operations in Python. It tests the student's understanding of loops, string indexing, and list comprehension.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, conditional logic, and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))",
        "solution_func": "def g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand the functions f and g, and use them to solve a challenge involving counting the occurrences of '4' and '7' in a number."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number meets certain conditions based on the count of '4' and '7' in the number. The solution function g generates a number based on the input number, and the puzzle is solved when f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse",
        "solution_func": "def g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand string manipulation in Python and boolean logic. The student needs to create a function g that reverses the target string if reverse is True, and appends 'x' to the target string if reverse is False. The function f then checks if the result of g is equal to the target string in reverse order based on the value of reverse parameter."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, understanding of slicing in Python, boolean logic, and function composition. It tests the student's ability to create a function that meets specific criteria and to understand how the functions interact to produce the desired result.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)",
        "solution_func": "def g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function g(a, d) that returns a string with 'a' repeated 'a' times and 'd' repeated 'd' times. The function f(s, a, d) checks if the input string 's' contains 'a' repeated 'a' times, 'd' repeated 'd' times, and has a length equal to the sum of 'a' and 'd'. The assert statement checks if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "This puzzle is a good exercise to test the student's understanding of string manipulation, function definition, and function invocation in Python. It also reinforces the concept of function composition and parameter passing in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check for unique digits in a number, as well as mathematical operations to generate a list of numbers within a range. It also includes conditional logic to filter the numbers based on a condition. Finally, it uses set operations to check for uniqueness in the generated list of numbers.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count",
        "solution_func": "def g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function f that takes a list of integers and checks if each integer in the list has unique digits and falls within a specified range. The function g generates a list of integers within the specified range that have unique digits. The puzzle is to ensure that function f returns True when applied to the output of function g."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, set operations, and range generation in Python. It also tests the student's ability to define functions with default arguments and use assertions for validation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and list comprehension.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))",
        "solution_func": "def g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the use of list comprehension and the sum function in Python to calculate a sum based on a condition."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if the sum of a list of numbers based on a condition is equal to a given total, and defining a function g that calculates this sum. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation to achieve a specific target value. It does not directly relate to other topics such as recursion, dynamic programming, or graph theory.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
        "solution_func": "def g(target = 17):\n    return [[0, 2]] * target",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that takes a list of pairs of integers and a target value, and checks if the difference between the second and first element in each pair is at least 2. The function g generates a list of pairs of integers based on the target value. The puzzle is to ensure that f(g()) returns True for a specific target value."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, and conditional statements in Python. It also requires the student to correctly implement the logic to check the difference between elements in pairs. The solution function g generates the input list based on the target value, and the challenge is to ensure that f correctly evaluates this list to return True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
        "solution_func": "def g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand string manipulation and mathematical operations in Python to determine if a given string satisfies a specific condition based on a mathematical calculation."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves converting numbers to strings, manipulating strings, and performing mathematical calculations to check if a condition is met.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len",
        "solution_func": "def g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that takes a list of strings representing states, a start state, a combo state, and a target length. The function checks if the list of states can reach the combo state from the start state by changing one digit at a time. The solution function g generates a sequence of states to reach the combo state from the start state."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, string operations, and conditional logic in Python. It also requires understanding of loops and mathematical operations to generate the sequence of states.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations to solve the algorithmic challenge.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))",
        "solution_func": "def g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that checks if a certain condition is met based on a list of states, a start value, a combo value, and a target length. The solution function g generates a list of values based on the start and combo values until a certain condition is met."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves manipulating lists of integers and checking conditions based on the differences between elements. It requires understanding of list comprehension, zip function, and modulo operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and permutations and combinations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target",
        "solution_func": "def g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that takes a string and checks if the string can be transformed into a target string using a specific permutation. The solution function g generates a string that can be transformed into the target string using the inverse permutation. The assertion at the end checks if applying g to f results in True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of permutations in Python. It requires the student to implement the inverse permutation function to solve the challenge.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking conditions based on the elements in the lists.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
        "solution_func": "def g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves checking if a given list of lists meets certain conditions based on the input parameters and constraints provided in the functions f and g."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding list manipulation, set operations, list comprehensions, and assertions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)",
        "solution_func": "def g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to create a function g that generates a list of integers based on the input parameters n and length, such that the function f returns True when applied to the generated list."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list meets certain conditions based on the input parameters and the elements in the list. The solution function g generates a list that satisfies the conditions specified in the puzzle function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding a subsequence in a list that satisfies certain conditions.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
        "solution_func": "def g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand the f and g functions, and how to use them to find the correct start index in a sequence to satisfy the given conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given start index in a sequence satisfies certain conditions based on the sum of elements in a subsequence. The solution function g uses a lambda function to find the start index that minimizes the sum of elements in the subsequence.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
        "solution_func": "def g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the starting index of a subsequence in a given sequence such that the sum of the subsequence is greater than or equal to a specified lower bound."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list slicing, summing elements of a subsequence, and using the max function with a lambda function to find the starting index of the subsequence.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
        "solution_func": "def g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining two functions, f and g, where f checks if the product of a subsequence of a given sequence is greater than a specified lower bound, and g finds the starting index of the subsequence that maximizes the product."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions, use loops, calculate products of subsequences, and find the index that maximizes a function. It also requires understanding how to use default arguments and assert statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list operations, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))",
        "solution_func": "def g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that takes a list of integers and checks if the list meets certain conditions. The student also needs to implement a function g that generates a list of integers based on the given total and number of elements. The solution function g should return a list that satisfies the conditions of function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, conditions, and arithmetic calculations in Python. It tests the student's ability to generate a list based on a given total and number of elements, and then check if the generated list meets specific conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper",
        "solution_func": "def g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that takes a list of rotations and a target string as input, and checks if applying the rotations to the alphabet string results in the target string. The function g generates a list of rotations to transform the alphabet string into the target string."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves manipulating strings and lists in Python to achieve a specific transformation. It tests the student's understanding of string manipulation and list operations in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dynamic programming and list manipulation.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)",
        "solution_func": "def g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves checking if a list of bills satisfies certain conditions and then finding a solution using dynamic programming to meet those conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of list manipulation, condition checking, and dynamic programming in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, set operations, list manipulation, and algorithm optimization.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)",
        "solution_func": "def g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that checks if a list of numbers satisfies certain conditions, and a function g that generates a list of numbers based on given options. The solution g generates a list of numbers that meets the conditions specified in function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, set operations, and algorithmic thinking to generate a list of numbers that satisfies the conditions specified in function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and functions.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06",
        "solution_func": "def g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f(x) that checks if a quadratic equation with given coefficients has a root within a small tolerance. The solution function g() calculates the root of the quadratic equation using the quadratic formula and returns it."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding quadratic equations, roots, and the quadratic formula in Python. It tests the student's ability to define functions, work with coefficients, and solve equations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to solve a quadratic equation and check the roots satisfy a condition.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06",
        "solution_func": "def g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of roots and coefficients as input and checks if a certain condition is met. The solution function g calculates the roots of a quadratic equation using the coefficients provided and returns them in a list. The assertion checks if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding quadratic equations, roots, and coefficients. It tests the student's ability to implement a function to check a condition based on the roots and coefficients, as well as calculate the roots of a quadratic equation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])",
        "solution_func": "def g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that checks if the sum of the digits in a given number is equal to a specific value. The solution function then calculates a specific number based on the given value."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves working with string manipulation, integer conversion, and arithmetic operations in Python. It tests the student's understanding of list comprehension, summing elements in a list, and string concatenation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(z: float, v=9, d=0.0001) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 9, d = 0.0001):\n    return v * d\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(z: float, v=9, d=0.0001) -> bool:\n    return int(z * 1 / d % 10) == v",
        "solution_func": "def g(v = 9, d = 0.0001):\n    return v * d",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that checks if a certain condition is met based on the input parameters, and a function g that returns a value based on the input parameters. The goal is to ensure that f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function composition and parameter passing in Python. Students need to understand how the functions f and g interact to satisfy the condition in the assert statement.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
        "solution_func": "def g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function that generates a list of numbers based on given parameters, and then check if the generated list satisfies certain conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list generation using range() function in Python and checking conditions on the generated list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)",
        "solution_func": "def g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand a given function f that takes a list of integers as input and returns a boolean value based on a mathematical condition. The solution function g takes no input and returns a list of integers. The challenge is to find the correct values for a, b, c, and d in function g such that f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding mathematical operations, list indexing, and function calls in Python. Students need to manipulate the values of a, b, c, and d in function g to satisfy the condition in function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
        "solution_func": "def g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the given functions f and g, and determine if the assertion f(g()) == True holds true based on the conditions specified in the functions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding the conditions in the functions f and g, and applying them to check if the assertion is true.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and function definition.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
        "solution_func": "def g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves two functions, f(x) and g(a, b), where f checks if a given integer x satisfies a specific condition based on the values of a and b, and g calculates a value for x based on the values of a and b. The puzzle requires finding the correct value of x that satisfies the condition in f when passed through g."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge where the solution function g calculates a value for x based on the input parameters a and b, and the function f checks if the calculated value of x satisfies a specific condition. The puzzle is suitable for teaching Python programming concepts such as function definition, parameter passing, and conditional statements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list operations, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
        "solution_func": "def g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to write a function f(x) that takes a list of integers and checks if the length of the list is equal to a given value, the sum of the list is equal to a given value, and all elements in the list are greater than 0. The solution function g() generates a list of integers based on the given values of n and s that satisfy the conditions for function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, condition checking, and function implementation in Python. It also requires the student to understand how to generate a list based on given conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as List Manipulation, Conditional Logic, Set Operations, and Brute Force Search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function g that generates a list of integers based on certain conditions, and the function f checks if the generated list meets specific criteria."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves generating a list of integers with specific properties and then checking if the generated list satisfies certain conditions. The student needs to understand list manipulation, arithmetic operations, and conditional statements to solve this puzzle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, List operations",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
        "solution_func": "def g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f(x) that checks if a given string x is equal to a predefined list of characters s up to a certain length n. The solution function g() generates a string by joining characters from the predefined list s up to length n and returns it."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle is focused on string manipulation and list comprehension in Python. It tests the student's understanding of string comparison and list iteration.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, conditional logic, and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])",
        "solution_func": "def g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that checks certain conditions on a list of integers, and a function g that generates a list of integers based on certain calculations. The goal is to ensure that function f returns True when applied to the output of function g."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves list manipulation, condition checking, and arithmetic calculations in Python. It tests the student's understanding of list comprehension, set operations, and loop logic.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking a condition based on the sorted sum. The solution generates a list of integers and a target value to satisfy the condition in the puzzle.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
        "solution_func": "def g(t = 364928431, n = 1088):\n    return [1] * n + [t]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f(x: List[int], t=364928431, n=1088) that checks if the sum of the elements in the input list x exceeds a threshold t before reaching a certain index n. The solution function g(t, n) generates a list of n+1 elements with all values as 1 except the last element which is set to t. The puzzle is to ensure that f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and conditional statements in Python. It also tests the student's ability to write functions with default arguments and use of assert statements for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, s1='t', s2='qu', count1=86, count2=83) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 't', s2 = 'qu', count1 = 86, count2 = 83):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, s1='t', s2='qu', count1=86, count2=83) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])",
        "solution_func": "def g(s1 = 't', s2 = 'qu', count1 = 86, count2 = 83):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that checks if a given string meets certain conditions, and a function g that generates a string based on input parameters. The goal is to ensure that f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle tests the students' understanding of string manipulation, function parameters, and condition checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, List Comprehension",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))",
        "solution_func": "def g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand how to check if a list of substrings can be found in a given string in a specific order, and then generate a new string based on the substrings provided."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, string manipulation, and understanding of how to check for substrings in a given string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))",
        "solution_func": "def g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires defining a function f(s: str, substrings=['foo', 'bar', 'baz']) that checks if all substrings and their reverse are present in the input string s. The solution function g(substrings=['foo', 'bar', 'baz']) constructs a string by concatenating the substrings and their reverse. The assertion checks if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, list comprehension, and checking conditions. It can be used to teach students about string operations, list manipulation, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and list operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1",
        "solution_func": "def g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the second largest string in a list of strings and checking if it exists in the list."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting and ordering topics.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1",
        "solution_func": "def g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding a string in a list of strings that is the second smallest when sorted in ascending order, and then checking if the reverse of that string is present in the list."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, list sorting, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
        "solution_func": "def g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand string slicing in Python and how to compare two strings."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given string matches a specific substring of a target string. The solution function g returns a substring of the target string based on the provided length. The assertion at the end checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Brute Force Search",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count",
        "solution_func": "def g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that checks if a given substring appears a certain number of times in a given string, and a function g that iterates through all possible substrings of the string to find one that meets the count criteria."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and understanding of function interactions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t",
        "solution_func": "def g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that checks if a given string has balanced parentheses and contains a specific substring. The solution function g generates a string with balanced parentheses based on the input string."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, counting characters, and checking for balanced parentheses. The solution function g demonstrates how to generate a string with balanced parentheses based on the input string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Brute Force Search, Set Operations, Permutations and Combinations, and Importing Modules (Itertools).",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
        "solution_func": "def g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of squares and dimensions m and n, and checks if certain conditions are met. The solution function g generates permutations of indices and checks if the conditions are satisfied."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, set operations, assertions, and permutations in Python. It also requires knowledge of indexing and tuple unpacking.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves backtracking and algorithm optimization to solve the Knight's Tour problem using Warnsdorff's heuristic. It also includes sorting and ordering to check if the tour is valid.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]",
        "solution_func": "def g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that checks if a given tour is valid based on certain conditions, and a function g that generates a tour using Warnsdorff's heuristic algorithm. The puzzle requires students to understand the tour validation criteria and implement the tour generation algorithm."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves a combination of algorithmic understanding and Python programming skills. It can be used to teach students about tour validation and heuristic algorithms in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Backtracking, Recursion, Brute Force Search, and Algorithm Optimization.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()",
        "solution_func": "def g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a game where the player and a bot take turns removing objects from heaps. The goal is for the player to make a move that leads to a winning state, while the bot tries to prevent this by making optimal moves. The player wins if all heaps are empty at the end of their turn."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves implementing a game strategy where the player needs to make moves to reach a winning state while the bot tries to prevent this. The solution function g() implements the player's strategy to win the game by making optimal moves.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if a list of probabilities sums up to 1 and if the maximum difference between any two probabilities is less than a threshold.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06",
        "solution_func": "def g():\n    return [1 / 3] * 3",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f(probs: List[float]) that checks if the sum of probabilities in a list is approximately equal to 1 and if the maximum difference between any two probabilities in the list is less than a small threshold. The solution function g() returns a list of three equal probabilities that sum up to 1."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, mathematical calculations, and assertions in Python. It also tests the student's ability to implement a function that checks conditions on a list of probabilities.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "Graph Theory (paths, edges, vertices)",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)",
        "solution_func": "def g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves checking if a given list of edges forms a triangle in a graph based on certain conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of graph theory concepts and list manipulation in Python to check if a given set of edges forms a triangle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves graph theory (paths, edges, vertices) and backtracking.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True",
        "solution_func": "def g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves checking if a given path is valid based on a list of edges, and finding a path that covers all nodes in the graph represented by the edges."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of graph traversal and path validation in Python. It also involves using dictionaries to store paths in a graph.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "Graph Theory (paths, edges, vertices)",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0",
        "solution_func": "def g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves checking if a given path in a graph is valid based on a set of edges. The goal is to determine if the path is of even length."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given path in a graph is valid based on a set of edges, and the function g generates paths in the graph. The solution g generates paths in the graph and ensures that the path is of even length. The assert statement at the end checks if the solution g is correct for the puzzle f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves graph theory, backtracking, and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])",
        "solution_func": "def g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves checking if a given path in a graph is valid based on a set of edges. The function f checks if the path is valid, and the function g generates the path based on the edges provided."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves graph traversal and checking if a path is valid in the graph. It requires understanding of lists, dictionaries, loops, and conditional statements in Python. This puzzle can be used to teach Python programming concepts related to graph traversal and validation of paths in a graph.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic to solve a challenge related to matching characters in a ring structure.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower",
        "solution_func": "def g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves two functions, f and g, where f defines an algorithmic challenge related to manipulating a given ring string, and g provides a solution to the challenge by finding a specific position in the ring string. The solution is validated by asserting that f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of string manipulation, dictionaries, loops, and conditional statements in Python. It challenges students to analyze and manipulate the given ring string to find the correct position based on certain conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as recursion, number theory (gcd), set operations, and backtracking.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True",
        "solution_func": "def g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining two functions in Python, f and g, where f defines an algorithmic challenge related to number theory and list manipulation, and g provides a solution to the challenge. The goal is to ensure that the solution g satisfies the conditions specified in the challenge function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves concepts of number theory, list comprehension, recursion, and algorithmic thinking. It requires understanding of functions, loops, sets, and assertions in Python. The challenge function f checks for certain conditions in a list of numbers, while the solution function g generates a list of numbers that satisfy those conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, recursion, and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)",
        "solution_func": "def g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of indices and a starting value a0, and checks if certain conditions are met. The solution function g generates a list of indices based on a starting value, ensuring that the conditions in f are satisfied."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding the algorithmic challenge of generating a list of indices based on a starting value and checking if specific conditions are met. It requires knowledge of loops, conditionals, and set operations in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))",
        "solution_func": "def g(n = 9):\n    return [-1, -1, 2] * (n // 3)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that takes a list of integers and a number n as input. The function checks if the length of the list is equal to n and if a specific condition is met for each element in the list. The student also needs to implement a function g that generates a list based on the input n. The puzzle is to ensure that the function f returns True when applied to the output of function g."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, indexing, and list comprehension in Python. It also requires the student to grasp the concept of function composition and assertion testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Binary Operations (bitwise shifting, AND, OR) and Algorithm Optimization.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))",
        "solution_func": "def g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves implementing a function f that checks if a specific condition is met for a list of integers, and then implementing a solution function g that uses Gaussian elimination to decode vectors and solve the condition."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations, Gaussian elimination, and checking if a condition is met for a list of integers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise operations, brute force search, randomization, and probability and statistics.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4",
        "solution_func": "def g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f that checks if a certain condition is met based on a list of integers and a set of vectors. The solution function g uses a brute force approach to find a solution that satisfies the condition set by f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations, list comprehension, random number generation, and a brute force approach to find a solution. It requires understanding of bitwise manipulation and algorithmic thinking.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and number theory (finding the greatest common divisor).",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)",
        "solution_func": "def g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the greatest common divisor (GCD) of two numbers and checking if it satisfies certain conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the GCD of two numbers using the Euclidean algorithm and checking if the result meets specific criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and recursion.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound",
        "solution_func": "def g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the greatest common divisor (GCD) of a list of numbers and checking if the GCD is greater than or equal to a specified lower bound."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the greatest common divisor (GCD) of a list of numbers using a specific algorithm and checking if the result meets a certain condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and number theory.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)",
        "solution_func": "def g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the greatest common divisor (GCD) of two numbers and checking if a given number satisfies certain conditions based on the GCD."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the greatest common divisor (GCD) of two numbers and using it to check if a given number meets specific criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, recursion, and number theory.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound",
        "solution_func": "def g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f(n) that checks if a given number n satisfies certain conditions based on a list of numbers and an upper bound. The solution function g() calculates a value based on the list of numbers and an upper bound, and the puzzle is solved if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number satisfies certain conditions based on a list of numbers and an upper bound. The solution function calculates a value based on the list of numbers and an upper bound, and the puzzle is solved if the conditions are met.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, set operations, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n",
        "solution_func": "def g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining two functions, f and g, where f checks if the sum of squares of numbers in a list is equal to a given number, and g generates a list of numbers whose sum of squares equals the given number."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves concepts of list comprehension, dictionary comprehension, and iteration. It also requires understanding of mathematical operations like squaring numbers and checking for sums of squares.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))",
        "solution_func": "def g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to implement a function f that takes a list of integers and a parameter k, and checks if certain conditions are met based on the elements of the list. The solution function g generates a list of integers that satisfies the conditions of function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves working with lists, loops, and conditions in Python. It also requires understanding of list manipulation and mathematical operations. The solution function g generates a list that satisfies the conditions of function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and number theory, specifically the use of the pow function and checking if a certain condition holds true. It also involves understanding modular arithmetic and the Fermat's little theorem. The solution involves finding a specific number that satisfies the condition in the puzzle.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int) -> bool:\n    return pow(2, n, n) == 3",
        "solution_func": "def g():\n    return 4700063497",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves a function f(n) that checks if 2^n modulo n is equal to 3. The solution function g() returns a specific number, and the assertion checks if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding the pow() function in Python, modulo operation, and how to write a solution function that satisfies the condition of f(g()) == True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Probability and Statistics, Importing Modules (Itertools, etc.)",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len",
        "solution_func": "def g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves generating random numbers and calculating probabilities to determine if a certain condition is met. The solution iterates through different values to find the best one that satisfies the condition."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding probability calculations and iterating through values to find the best solution. It requires knowledge of random number generation and probability concepts in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves probability and statistics concepts along with mathematical operations. It also includes iterative calculations and comparison operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06",
        "solution_func": "def g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves calculating probabilities and checking if the calculated probability matches a target probability within a certain threshold."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle requires understanding of probability calculations and loops in Python. It involves calculating probabilities based on given conditions and checking for a specific target probability.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b",
        "solution_func": "def g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand string manipulation in Python. They need to determine if adding a specific string to another string results in a given target string."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if adding a specific string to another string results in a target string. The solution function g extracts a substring from the target string based on the lengths of the input strings provided. The assert statement checks if the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, n=1000) -> bool:\n    return len(s) == n",
        "solution_func": "def g(n = 1000):\n    return 'a' * n",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function that generates a string of 'a' characters of a specified length, and another function that checks if the length of the generated string is equal to a given number."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of function definitions, string manipulation, and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and exception handling.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target",
        "solution_func": "def g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of integers and two strings as input, and checks if a specific slicing operation on one of the strings matches the target string. The solution function g uses itertools.product to generate all possible combinations of indices for slicing the string and returns the indices that satisfy the condition in function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding slicing operations in Python strings and using itertools.product to generate combinations of indices. It also requires handling exceptions for invalid index values. This puzzle can be used to teach Python to master's students in CS as it covers string manipulation, list operations, and exception handling.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and indexing operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index",
        "solution_func": "def g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand how to use the index method on strings in Python and how to compare the result to a given index value."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves using the index method to find the position of a substring within a larger string and comparing it to a specified index value. The solution function g returns a substring starting from a given index in the big_str. The assert statement checks if the puzzle function f returns True when applied to the solution function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index",
        "solution_func": "def g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand how the index method works in Python and how to manipulate strings using ord and chr functions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves finding the index of a substring in a given string and then generating a new string based on certain conditions. The solution uses a while loop to find a character not present in the substring and then creates a new string using that character and the given substring.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)",
        "solution_func": "def g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function g that iterates over a string 'a' and checks if a substring of length 'length' is present in string 'b'. The function f checks if the output of function g satisfies certain conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and conditional checks, which are fundamental concepts in Python programming. It also requires understanding of function parameters and return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations, Permutations and Combinations",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))",
        "solution_func": "def g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function that generates all possible substrings of a given string and checks if a list of substrings satisfies certain conditions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves working with string manipulation, sets, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length",
        "solution_func": "def g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the functions f and g, and use them to check if the assertion f(g()) == True holds true."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string meets certain conditions based on the count of a substring and the length of the string. The solution function g generates a string based on the provided parameters, and the puzzle function f checks if the conditions are satisfied.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, List Operations",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string",
        "solution_func": "def g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to implement a function that splits a string into parts and then joins them back together to form the original string."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, slicing, and joining operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))",
        "solution_func": "def g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to implement a function f that checks if a list of strings can be joined using a separator to form a specific string, and that none of the strings in the list contain the separator. The solution function g splits a given string using a specified separator and returns a list of strings."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, list operations, and understanding of the join and split methods in Python. It also tests the student's ability to write functions that meet specific criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to List Operations, Set Operations, and Mathematical Operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups",
        "solution_func": "def g(dups = 23476):\n    return [1] * (dups + 1)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function that checks for duplicates in a list of integers. The solution function creates a list with a specified number of duplicates and returns it."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, set operations, and function arguments in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and searching for a specific element in a list. It also includes the concept of indexing and comparison.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target",
        "solution_func": "def g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to implement a function that finds the index of a target element in a list and then checks if the element at that index is equal to the target."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list indexing and the index method in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, indexing, and comparison operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0",
        "solution_func": "def g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the index of a target value in a list and checking if the value at that index is equal to the target value and the index is less than 0."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding list indexing, comparison, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, iteration, exception handling, and assertion testing.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target",
        "solution_func": "def g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f that takes a list of integers and checks if a specific sublist matches a target sublist. The solution function g iterates through all possible combinations of indices to find the sublist that matches the target sublist."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves list slicing and iteration through all possible combinations of indices. It tests the student's understanding of list operations and iteration in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=93252338) -> bool:\n    return -x == a",
        "solution_func": "def g(a = 93252338):\n    return - a",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand function calls and parameter passing in Python. The student needs to determine the value of 'x' that makes the assertion true."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves a function f that checks if the negative of the input parameter is equal to a given value. The function g returns the negative of a given value. The student needs to understand how to pass parameters and call functions to make the assertion true.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b",
        "solution_func": "def g(a = 1073258, b = 72352549):\n    return b - a",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the concept of function parameters and return values in Python. The student needs to determine the correct value to return from function g in order to satisfy the condition in function f."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves defining two functions, f and g, where f checks if the sum of a parameter and a default value equals another default value. The student needs to find the correct value to return from function g to make the assertion in the puzzle pass.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b",
        "solution_func": "def g(a = 9688203125538303, b = -293093369321912):\n    return a + b",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand function parameters and return values in Python. The student needs to determine if the function g() correctly solves the challenge defined in function f()."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding function parameters, return values, and how to check if a solution function correctly solves a challenge function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b",
        "solution_func": "def g(a = -8783800228130606, b = -508993556991975):\n    return a - b",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires students to understand default function arguments and function composition in Python."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves defining a function f with default arguments and checking if the function g, which returns the difference between the default arguments, satisfies the condition in f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a",
        "solution_func": "def g(a = -141336, b = 72):\n    return a // b",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to determine if a given mathematical expression is true based on the values of a and b provided in the functions."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how the mathematical expression in function f is evaluated based on the values of a and b. The solution function g should return the result of a divided by b.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a",
        "solution_func": "def g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle involves defining a function f(n) that checks if a specific mathematical condition is met, and a function g() that iterates through a range of values to find a solution that satisfies the condition in f(n). The assert statement at the end verifies if the solution returned by g() satisfies the condition in f(n)."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves basic arithmetic operations and iteration to find a solution that satisfies a given condition. It can be used to teach students about function definitions, mathematical operations, and iteration in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a",
        "solution_func": "def g(a = -3411193412414137, b = -9070455318026063):\n    return a * b",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to understand the concept of function composition and parameter passing in Python. The student needs to determine the correct values of 'a' and 'b' such that the function 'g' returns the correct result for function 'f'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how function composition works in Python and how default parameter values are used. The student needs to find the correct values of 'a' and 'b' such that the function 'g' returns the correct result for function 'f'.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a",
        "solution_func": "def g(a = 2617350631613713636):\n    return int(a ** 0.5)",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding the square root of a given number and checking if the square of the result is equal to the given number."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate square roots in Python and using them to verify a condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)",
        "solution_func": "def g(a = 2732656229):\n    return a ** 0.5",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "Given a function f(x) that checks if the absolute difference between x squared and a is less than 10^(-3), and a function g() that returns the square root of a, the puzzle requires finding the value of a such that f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding function composition and mathematical operations in Python, specifically squaring and square rooting. It also tests the understanding of function parameters and return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0",
        "solution_func": "def g(a = 1363713245):\n    return -a ** 0.5",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires finding a value of x that satisfies a specific condition involving a given constant 'a'. The solution function g returns the negative square root of the constant 'a'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves understanding mathematical operations in Python, specifically exponentiation and comparison. It also requires knowledge of function definitions and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'",
        "solution_func": "def g():\n    return \"world\"",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires defining a function f(s: str) that checks if the input string concatenated with 'Hello ' is equal to 'Hello world'. The solution function g() returns the string 'world' and the assertion checks if f(g()) returns True."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle is a simple string manipulation and comparison task that tests the student's understanding of string concatenation and equality comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'",
        "solution_func": "def g():\n    return \"world\"[::-1]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to reverse the string 'world' and concatenate it with 'Hello' to check if it equals 'Hello world'."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of string slicing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3",
        "solution_func": "def g():\n    return [1, 2]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to define a function g() that returns a list of two integers, and the function f(x) checks if the list has exactly two elements and their sum is equal to 3."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle is a simple one that tests the student's understanding of list manipulation and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": -1,
        "target_skills": [],
        "puzzle_history": [],
        "problem_func": "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))",
        "solution_func": "def g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]",
        "quality": [
            [
                null
            ]
        ],
        "description": [
            [
                "The puzzle requires the student to generate a list of 1000 strings where each string contains 'a' repeated (i+2) times followed by a single 'b'. The puzzle function f checks if the list meets two conditions: all strings are unique and each string has more 'a's than 'b's."
            ]
        ],
        "is_valid": [
            [
                true
            ]
        ],
        "is_valid_explanation": "The puzzle involves list comprehension, string manipulation, and understanding of set operations and all() function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=20) -> bool:\n    return sum(numbers) == target_sum\n\ndef g(target_sum=20):\n    import random\n    numbers = [random.randint(1, 10) for _ in range(5)]\n    numbers[-1] = target_sum - sum(numbers[:-1])\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and random number generation.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target_sum=20) -> bool:\n    return sum(numbers) == target_sum",
        "solution_func": "def g(target_sum=20):\n    import random\n    numbers = [random.randint(1, 10) for _ in range(5)]\n    numbers[-1] = target_sum - sum(numbers[:-1])\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that checks if the sum of a list of numbers is equal to a target sum. The solution function g generates a list of random numbers and adjusts the last number to make the sum equal to the target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation and comparison operations in Python. It can be used to teach students about list operations and conditional statements in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(strings: List[str], rule=\"python\") -> bool:\n    return all(s == rule for s in strings) and len(strings) > 1\ndef g(rule=\"python\"):\n    return [rule] * 2\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(strings: List[str], rule=\"python\") -> bool:\n    return all(s == rule for s in strings) and len(strings) > 1",
        "solution_func": "def g(rule=\"python\"):\n    return [rule] * 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and a rule as input, and returns True if all strings in the list are equal to the rule and the list has more than one element. The solution function g returns a list containing the rule repeated twice. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, function parameters, and boolean conditions in Python. It also tests the understanding of function return values and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and comparison of rows with columns. It also uses list comprehension and zip function in Python.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given matrix is symmetric along its main diagonal, and a function g that returns a specific matrix. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation, zip function, and comparison in Python. It requires students to implement a function that checks for symmetry in a matrix.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=100, min_len=5, max_len=10) -> bool:\n    return sum(numbers) == target_sum and min_len <= len(numbers) <= max_len and all((n % 2 == 0 for n in numbers))\n\ndef g(target_sum=100, min_len=5, max_len=10):\n    \"\"\"\n    This solution uses recursion to generate a list of even numbers that sum up to the target_sum.\n    \"\"\"\n    def generate_numbers(target, length, current=[]):\n        if length == 0:\n            return current if target == 0 else None\n        for num in range(2, target + 1, 2):\n            result = generate_numbers(target - num, length - 1, current + [num])\n            if result:\n                return result\n        return None\n\n    return generate_numbers(target_sum, max_len)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion, conditional logic, and mathematical operations.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target_sum=100, min_len=5, max_len=10) -> bool:\n    return sum(numbers) == target_sum and min_len <= len(numbers) <= max_len and all((n % 2 == 0 for n in numbers))",
        "solution_func": "def g(target_sum=100, min_len=5, max_len=10):\n    \"\"\"\n    This solution uses recursion to generate a list of even numbers that sum up to the target_sum.\n    \"\"\"\n    def generate_numbers(target, length, current=[]):\n        if length == 0:\n            return current if target == 0 else None\n        for num in range(2, target + 1, 2):\n            result = generate_numbers(target - num, length - 1, current + [num])\n            if result:\n                return result\n        return None\n\n    return generate_numbers(target_sum, max_len)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that generates a list of even numbers that sum up to a target sum within a specified length range. The solution uses recursion to achieve this."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of even numbers generated by the solution function meets certain criteria specified in the puzzle function. The solution function uses recursion to find the list of even numbers that satisfy the conditions set by the puzzle function.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Greedy Algorithms",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count",
        "solution_func": "def g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of strings meets certain criteria, and a function g that generates a list of strings to satisfy the criteria set by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation, string operations, and boolean conditions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target_product=210, min_len=4, max_len=6) -> bool:\n    return all((n > 1 for n in numbers)) and min_len <= len(numbers) <= max_len and target_product == 210\n\ndef g(target_product=210, min_len=4, max_len=6):\n    \"\"\"\n    This solution uses prime factorization to generate a list of numbers that multiply to the target_product.\n    \"\"\"\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(target_product)\n    numbers = []\n    for factor in factors:\n        numbers.extend([factor]*2)\n\n    return numbers[:max_len]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, factors, and primes.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target_product=210, min_len=4, max_len=6) -> bool:\n    return all((n > 1 for n in numbers)) and min_len <= len(numbers) <= max_len and target_product == 210",
        "solution_func": "def g(target_product=210, min_len=4, max_len=6):\n    \"\"\"\n    This solution uses prime factorization to generate a list of numbers that multiply to the target_product.\n    \"\"\"\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(target_product)\n    numbers = []\n    for factor in factors:\n        numbers.extend([factor]*2)\n\n    return numbers[:max_len]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that checks if a list of numbers meets certain conditions, and a function g that generates a list of numbers based on prime factorization to satisfy the conditions of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking conditions on a list of numbers and generating a list based on prime factorization to meet those conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) >= 3 and all(isinstance(x, int) for x in lst)\ndef g():\n    import random\n    while True:\n        lst = random.choices(range(1, 10), k=random.randint(3, 6))\n        if len(lst) >= 3 and all(isinstance(x, int) for x in lst):\n            return lst\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, random number generation, and type checking.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) >= 3 and all(isinstance(x, int) for x in lst)",
        "solution_func": "def g():\n    import random\n    while True:\n        lst = random.choices(range(1, 10), k=random.randint(3, 6))\n        if len(lst) >= 3 and all(isinstance(x, int) for x in lst):\n            return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random list of integers with a length between 3 and 6, and then checking if the list contains at least 3 integers and all elements are of type int."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random list of integers and checking if the list meets certain conditions defined by the function f. The solution function g generates such a list and returns it if it satisfies the conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return all(isinstance(value, str) for value in d.values())\ndef g():\n    import random\n    while True:\n        d = {key: random.choice(['a', 'b', 'c']) for key in range(3)}\n        if all(isinstance(value, str) for value in d.values()):\n            return d\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and type checking using isinstance. It also includes the use of random module for generating values. The solution uses a while loop to generate dictionaries until a valid one is found. The solution then returns the generated dictionary.",
        "idx_generation": 0,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return all(isinstance(value, str) for value in d.values())",
        "solution_func": "def g():\n    import random\n    while True:\n        d = {key: random.choice(['a', 'b', 'c']) for key in range(3)}\n        if all(isinstance(value, str) for value in d.values()):\n            return d",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(d: dict) -> bool that checks if all values in a dictionary are strings. The solution function g() generates a dictionary with random values and returns it only if all values are strings."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the type of values in a dictionary and generating random dictionaries until one with all string values is found. The solution function g() ensures that the generated dictionary meets the criteria set by function f(d: dict).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, word=\"racecar\") -> bool:\n    return s == word\ndef g(word = \"racecar\"):\n    return word\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, word=\"racecar\") -> bool:\n    return s == word",
        "solution_func": "def g(word = \"racecar\"):\n    return word",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string is equal to a specified word and g returns the specified word. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, parameter passing, and function invocation in Python. It tests the student's ability to define functions and use them to satisfy a given condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    word_set = set(words)\n    assert len(word_set) == len(words) > 1\n    for word in words:\n        assert word.isalpha()\n    return all(word.endswith('y') for word in words)\n\ndef g():\n    return ['happy', 'lucky', 'sunny', 'angry', 'funny', 'windy']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    word_set = set(words)\n    assert len(word_set) == len(words) > 1\n    for word in words:\n        assert word.isalpha()\n    return all(word.endswith('y') for word in words)",
        "solution_func": "def g():\n    return ['happy', 'lucky', 'sunny', 'angry', 'funny', 'windy']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a list of words, checks if all words end with the letter 'y', and returns True if they do. The function also checks that the list contains unique words and that each word consists only of alphabetic characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking conditions on a list of words and returning True if all conditions are met. It tests the use of sets, assertions, string methods, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(decoded_message: str, encrypted_message='hushush') -> bool:\n\n    mapping = {'h': 's', 'u': 'e'}\n    decoded = ''.join([mapping.get(ch, ch) for ch in encrypted_message])\n    return decoded == decoded_message\n\ndef g(encrypted_message='hushush') -> str:\n    mapping = {'h': 's', 'u': 'e'}\n    decoded_message = ''.join([mapping.get(ch, ch) for ch in encrypted_message])\n    return decoded_message\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "def f(decoded_message: str, encrypted_message='hushush') -> bool:\n\n    mapping = {'h': 's', 'u': 'e'}\n    decoded = ''.join([mapping.get(ch, ch) for ch in encrypted_message])\n    return decoded == decoded_message",
        "solution_func": "def g(encrypted_message='hushush') -> str:\n    mapping = {'h': 's', 'u': 'e'}\n    decoded_message = ''.join([mapping.get(ch, ch) for ch in encrypted_message])\n    return decoded_message",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves decoding an encrypted message using a specific mapping and checking if the decoded message matches a given decoded message."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of dictionaries, list comprehension, and string comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], min_length=5) -> bool:\n    return len(numbers) >= min_length and any(num > 0 for num in numbers) and any(num < 0 for num in numbers)\n\ndef g(min_length=5):\n    \"\"\"\n    This solution generates a list of numbers with a mix of positive and negative numbers to meet the criteria.\n    \"\"\"\n    numbers = [-2, -4, 6, 8, 10]\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic to check for the presence of positive and negative numbers in a list of integers.",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], min_length=5) -> bool:\n    return len(numbers) >= min_length and any(num > 0 for num in numbers) and any(num < 0 for num in numbers)",
        "solution_func": "def g(min_length=5):\n    \"\"\"\n    This solution generates a list of numbers with a mix of positive and negative numbers to meet the criteria.\n    \"\"\"\n    numbers = [-2, -4, 6, 8, 10]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of numbers with a mix of positive and negative numbers, with a minimum length of 5, and checking if the list meets certain criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a list of numbers meets specific conditions, and a function g that generates a list of numbers to satisfy those conditions. The solution g generates a list with a mix of positive and negative numbers and a minimum length of 5.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], min_length=3) -> bool:\n    return len(strings) >= min_length and any(any(c.islower() for c in s) for s in strings) and any(any(c.isupper() for c in s) for s in strings)\n\ndef g(min_length=3):\n    \"\"\"\n    This solution generates a list of strings containing both uppercase and lowercase characters.\n    \"\"\"\n    strings = [\"AbC\", \"dEf\", \"GhI\"]\n    return strings\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], min_length=3) -> bool:\n    return len(strings) >= min_length and any(any(c.islower() for c in s) for s in strings) and any(any(c.isupper() for c in s) for s in strings)",
        "solution_func": "def g(min_length=3):\n    \"\"\"\n    This solution generates a list of strings containing both uppercase and lowercase characters.\n    \"\"\"\n    strings = [\"AbC\", \"dEf\", \"GhI\"]\n    return strings",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f that takes a list of strings and checks if the list contains at least 'min_length' strings with both uppercase and lowercase characters. The solution function g generates a list of strings with both uppercase and lowercase characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for the presence of uppercase and lowercase characters in a list of strings, which is a common task in Python programming. The solution function g provides a list of strings that meets the criteria specified in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(inds: List[int], s='kibozekiboze') -> bool:\n    substring = s[inds[0]:inds[1]+1]\n    return substring == substring[::-1]\ndef g(s='kibozekiboze'):\n    from itertools import product\n    for i, j in product(range(len(s)), repeat=2):\n        if s[i:j+1] == s[i:j+1][::-1]:\n            return [i, j]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.), Permutations and Combinations",
        "idx_generation": 1,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(inds: List[int], s='kibozekiboze') -> bool:\n    substring = s[inds[0]:inds[1]+1]\n    return substring == substring[::-1]",
        "solution_func": "def g(s='kibozekiboze'):\n    from itertools import product\n    for i, j in product(range(len(s)), repeat=2):\n        if s[i:j+1] == s[i:j+1][::-1]:\n            return [i, j]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a substring of a given string is a palindrome, and a function g that finds the indices of the longest palindrome substring in the given string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, palindrome checking, and iteration using itertools product. The solution function g iterates through all possible substrings of the input string and returns the indices of the longest palindrome substring found.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] > nums[i + 1] for i in range(len(nums) - 1)) and len(nums) == len(set(nums))\ndef g():\n    return [2*i for i in range(999, 0, -1)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers is sorted in descending order and contains unique elements. The solution generates a list of numbers in descending order by multiplying each number by 2.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] > nums[i + 1] for i in range(len(nums) - 1)) and len(nums) == len(set(nums))",
        "solution_func": "def g():\n    return [2*i for i in range(999, 0, -1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function f that takes a list of integers and returns True if all elements in the list are in strictly decreasing order and are unique. The student needs to provide a solution function g that generates a list of integers in strictly decreasing order and unique elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, set data structure, and the all function in Python. It also tests the student's ability to generate a list of integers in a specific pattern.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return all(isinstance(key, int) for key in d.keys()) and all(isinstance(val, str) for val in d.values()) and all(key in range(1, 11) for key in d.keys())\ndef g() -> dict:\n    return {i: ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'][i-1] for i in range(1, 11)}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, type checking, and iteration over keys and values. It also includes list comprehension and assertion testing.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return all(isinstance(key, int) for key in d.keys()) and all(isinstance(val, str) for val in d.values()) and all(key in range(1, 11) for key in d.keys())",
        "solution_func": "def g() -> dict:\n    return {i: ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'][i-1] for i in range(1, 11)}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires creating a function f(d: dict) that checks if a dictionary contains integer keys in the range of 1 to 10 and string values corresponding to the numbers one to ten. The solution function g() generates a dictionary with keys from 1 to 10 and values as the corresponding number words."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the type of keys and values in a dictionary and ensuring the keys are in a specific range. The solution function creates a dictionary with the required properties.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: str, s='abcdefghijklmnopqrstuvwxyz') -> bool:\n    return len(set(x)) == len(x)\ndef g(s='abcdefghijklmnopqrstuvwxyz'):\n    return ''.join(set(s))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: str, s='abcdefghijklmnopqrstuvwxyz') -> bool:\n    return len(set(x)) == len(x)",
        "solution_func": "def g(s='abcdefghijklmnopqrstuvwxyz'):\n    return ''.join(set(s))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string has all unique characters, and a function g that returns a string with unique characters from a given string. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, sets, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(x: List[int], lst=[1, 2, 3, 4, 5]) -> bool:\n    return x == sorted(x)\ndef g(lst=[1, 2, 3, 4, 5]):\n    return sorted(lst)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if the list is sorted. This falls under the topic of Sorting and Ordering.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(x: List[int], lst=[1, 2, 3, 4, 5]) -> bool:\n    return x == sorted(x)",
        "solution_func": "def g(lst=[1, 2, 3, 4, 5]):\n    return sorted(lst)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks if a list is sorted, and then define another function that returns a sorted list. The assertion checks if the second function returns a sorted list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: int, prime=9973) -> bool:\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\ndef g(prime=9973):\n    return prime\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm and testing the solution with a prime number.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: int, prime=9973) -> bool:\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime=9973):\n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(x) that checks if a given number x is a prime number, and a function g() that returns a prime number. The puzzle is solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for prime numbers and understanding function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int, numbers=[2, 5, 8, 12, 6, 10], threshold=20) -> bool:\n    return total > threshold\ndef g(numbers=[2, 5, 8, 12, 6, 10], threshold=20):\n    return sum(num for num in numbers if num % 2 == 0)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(total: int, numbers=[2, 5, 8, 12, 6, 10], threshold=20) -> bool:\n    return total > threshold",
        "solution_func": "def g(numbers=[2, 5, 8, 12, 6, 10], threshold=20):\n    return sum(num for num in numbers if num % 2 == 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that calculates the sum of even numbers in a list and then check if the sum is greater than a given threshold."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, conditional statements, and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, x='abc', y='def') -> bool:\n    return x + y == s\ndef g(x='abc', y='def'):\n    return x + y\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, x='abc', y='def') -> bool:\n    return x + y == s",
        "solution_func": "def g(x='abc', y='def'):\n    return x + y",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s: str, x='abc', y='def') -> bool that checks if the concatenation of x and y is equal to s, and a function g(x='abc', y='def') that returns the concatenation of x and y, the puzzle requires finding the correct values of x and y such that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function parameters, default values, function calls, and boolean comparisons in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, threshold=100) -> bool:\n    return max(arr) > threshold\ndef g(threshold=100):\n    return [50, 75, 110, 90]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list, threshold=100) -> bool:\n    return max(arr) > threshold",
        "solution_func": "def g(threshold=100):\n    return [50, 75, 110, 90]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the maximum value in a list is greater than a given threshold. Another function g generates a list of numbers, and the puzzle requires ensuring that f returns True when applied to the output of g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function definitions, list manipulation, and comparison operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, ascending=True) -> bool:\n    if ascending:\n        return arr == sorted(arr)\n    else:\n        return arr == sorted(arr, reverse=True)\ndef g(ascending=True):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in ascending or descending order based on a given parameter. This requires knowledge of sorting algorithms and conditional logic.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list, ascending=True) -> bool:\n    if ascending:\n        return arr == sorted(arr)\n    else:\n        return arr == sorted(arr, reverse=True)",
        "solution_func": "def g(ascending=True):\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list is sorted in either ascending or descending order, and a function g that returns a predefined sorted list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function to check if a list is sorted in a specific order and implementing a function that returns a sorted list. The assertion tests if the defined functions work correctly together.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, prefix='Hello, ', suffix='!') -> bool:\n    return prefix + s + suffix == 'Hello, World!'\ndef g(prefix='Hello, ', suffix='!'):\n    return 'World'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, prefix='Hello, ', suffix='!') -> bool:\n    return prefix + s + suffix == 'Hello, World!'",
        "solution_func": "def g(prefix='Hello, ', suffix='!'):\n    return 'World'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a string and checks if it equals 'Hello, World!' when combined with a prefix and suffix. The solution function g returns the string 'World'. The puzzle is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function parameters, string concatenation, and function return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, add=[4, 5, 6]) -> bool:\n    return lst + add == [1, 2, 3, 4, 5, 6]\ndef g(add=[4, 5, 6]):\n    return [1, 2, 3]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and comparison, as well as default parameter usage in function definitions.",
        "idx_generation": 2,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, add=[4, 5, 6]) -> bool:\n    return lst + add == [1, 2, 3, 4, 5, 6]",
        "solution_func": "def g(add=[4, 5, 6]):\n    return [1, 2, 3]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f(lst: list, add=[4, 5, 6]) -> bool and g(add=[4, 5, 6]), where f checks if the input list concatenated with a default list is equal to [1, 2, 3, 4, 5, 6], and g returns [1, 2, 3]. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, default arguments, list concatenation, and function invocation. It tests the student's ability to define functions and use them to solve a specific challenge.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, length=10) -> bool:\n    return s == s[::-1] and len(s) <= length\n\ndef g(length=10):\n    \"\"\"\n    This solution reverses the input string to check if it is a palindrome.\n    \"\"\"\n    return 'racecar'[:length]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, length=10) -> bool:\n    return s == s[::-1] and len(s) <= length",
        "solution_func": "def g(length=10):\n    \"\"\"\n    This solution reverses the input string to check if it is a palindrome.\n    \"\"\"\n    return 'racecar'[:length]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome and has a length less than or equal to a specified value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and condition checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, max_value=100) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, min(num, max_value)):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(max_value=100):\n    \"\"\"\n    This solution uses trial division to check if a number is prime.\n    \"\"\"\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime using trial division, which falls under Number Theory (factors, primes, etc.).",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, max_value=100) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, min(num, max_value)):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(max_value=100):\n    \"\"\"\n    This solution uses trial division to check if a number is prime.\n    \"\"\"\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given number is prime using trial division."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(num, max_value) that checks if a number is prime, and a function g(max_value) that returns a fixed number. The assertion at the end checks if the output of g satisfies the condition of f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return any(lst)\n    \ndef g():\n    import random\n    while True:\n        lst = random.choices([False, True], k=random.randint(2, 5))\n        if any(lst):\n            return lst\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves random selection of True and False values in a list and checking if any of the values is True. The solution function generates a random list and returns it only if it contains at least one True value.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return len(lst) >= 3 and all(isinstance(x, int) for x in lst)\ndef g():\n    import random\n    while True:\n        lst = random.choices(range(1, 10), k=random.randint(3, 6))\n        if len(lst) >= 3 and all(isinstance(x, int) for x in lst):\n            return lst\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return any(lst)",
        "solution_func": "def g():\n    import random\n    while True:\n        lst = random.choices([False, True], k=random.randint(2, 5))\n        if any(lst):\n            return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if any element in a list is True. The solution generates a random list of booleans and returns it if at least one element is True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the any() function in Python and generating random lists of booleans. The solution should return a list with at least one True value to satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(dct: dict) -> bool:\n    return all(val % 2 == 0 for val in dct.values())\n    \ndef g():\n    import random\n    while True:\n        dct = {num: num ** 2 for num in range(2, 11, 2)}\n        if all(val % 2 == 0 for val in dct.values()):\n            return dct\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking if all values in the dictionary are even numbers.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return len(lst) >= 3 and all(isinstance(x, int) for x in lst)\ndef g():\n    import random\n    while True:\n        lst = random.choices(range(1, 10), k=random.randint(3, 6))\n        if len(lst) >= 3 and all(isinstance(x, int) for x in lst):\n            return lst\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(dct: dict) -> bool:\n    return all(val % 2 == 0 for val in dct.values())",
        "solution_func": "def g():\n    import random\n    while True:\n        dct = {num: num ** 2 for num in range(2, 11, 2)}\n        if all(val % 2 == 0 for val in dct.values()):\n            return dct",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if all values in a dictionary are even numbers, and a function g that generates a dictionary of squared even numbers. The solution g returns the dictionary only if all values are even numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding dictionary comprehension, checking for even numbers using modulo operator, and using the all() function to check all values in a dictionary. The solution g generates a dictionary of squared even numbers and returns it only if all values are even numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\ndef f(data: List[Tuple[int]], min_len=2, max_len=4) -> bool:\n    assert all((len(set(t)) == len(t) and min_len <= len(t) <= max_len for t in data))\n    return len(set(data)) == len(data)\ndef g(min_len=2, max_len=4):\n    import random\n    return [tuple(random.sample(range(1, 10), random.randint(min_len, max_len))) for _ in range(10)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, tuple manipulation, random sampling, and assertion checking.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\ndef f(data: List[Tuple[int]], min_len=2, max_len=4) -> bool:\n    assert all((len(set(t)) == len(t) and min_len <= len(t) <= max_len for t in data))\n    return len(set(data)) == len(data)",
        "solution_func": "def g(min_len=2, max_len=4):\n    import random\n    return [tuple(random.sample(range(1, 10), random.randint(min_len, max_len))) for _ in range(10)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of tuples of integers and checks if each tuple has unique elements and falls within a specified length range. The function g generates a list of random tuples within the specified length range and unique elements. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking uniqueness and length constraints of tuples in a list, along with generating random tuples. It tests the understanding of list comprehension, tuple manipulation, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(digit) for digit in str(n))\n    digit_product = 1\n    for digit in str(n):\n        digit_product *= int(digit)\n    return digit_sum == digit_product\n\ndef g():\n    for n in range(1, 1000):\n        if sum(int(digit) for digit in str(n)) == 1:\n            return n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to extract digits from an integer, mathematical operations to calculate the sum and product of digits, and conditional logic to check if the sum of digits is equal to the product of digits.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    digit_sum = sum(int(digit) for digit in str(n))\n    digit_product = 1\n    for digit in str(n):\n        digit_product *= int(digit)\n    return digit_sum == digit_product",
        "solution_func": "def g():\n    for n in range(1, 1000):\n        if sum(int(digit) for digit in str(n)) == 1:\n            return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a number between 1 and 999 where the sum of its digits is equal to the product of its digits."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a number between 1 and 999 satisfies a specific condition related to the sum and product of its digits.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    digit_sum_squared = sum(int(digit)**2 for digit in str(n))\n    return is_prime(digit_sum_squared)\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    for n in range(100, 1000):\n        if is_prime(sum(int(digit)**2 for digit in str(n))):\n            return n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Mathematical Operations, Conditional Logic, Number Theory (primes), and Function Definitions.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    digit_sum_squared = sum(int(digit)**2 for digit in str(n))\n    return is_prime(digit_sum_squared)\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    for n in range(100, 1000):\n        if is_prime(sum(int(digit)**2 for digit in str(n))):\n            return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a three-digit number where the sum of the squares of its digits is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the sum of the squares of the digits of a three-digit number is a prime number. The solution function iterates through three-digit numbers to find the first number that satisfies this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return str(n) == str(n)[::-1] and n % int(str(n)[::-1]) == 0\n\ndef g():\n    for n in range(1000, 2000):\n        if str(n) == str(n)[::-1] and n % int(str(n)[::-1]) == 0:\n            return n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, and conditional logic.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return str(n) == str(n)[::-1] and n % int(str(n)[::-1]) == 0",
        "solution_func": "def g():\n    for n in range(1000, 2000):\n        if str(n) == str(n)[::-1] and n % int(str(n)[::-1]) == 0:\n            return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a number between 1000 and 2000 that satisfies a specific condition related to its reversal and divisibility."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of string manipulation, number reversal, and modulo operation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Dynamic Programming, Sorting and Ordering",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True",
        "solution_func": "def g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement two functions: f(subsequence: List[int], nums=[0]) -> bool and g(nums=[0]) -> List[int]. Function f checks if a given subsequence is strictly increasing, while function g finds the longest increasing subsequence in a list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for a strictly increasing subsequence and finding the longest increasing subsequence using dynamic programming. It tests the student's knowledge of list manipulation and algorithmic thinking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(word: str, palindrome='', substrings=['']) -> bool:\n    if word != word[::-1]:\n        return False\n    return palindrome == max(substrings, key=len)\n\ndef g(substrings=['']):\n    palindrome = ''\n    for substr in substrings:\n        if substr == substr[::-1] and len(substr) > len(palindrome):\n            palindrome = substr\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(word: str, palindrome='', substrings=['']) -> bool:\n    if word != word[::-1]:\n        return False\n    return palindrome == max(substrings, key=len)",
        "solution_func": "def g(substrings=['']):\n    palindrome = ''\n    for substr in substrings:\n        if substr == substr[::-1] and len(substr) > len(palindrome):\n            palindrome = substr\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the longest palindrome substring in a list of substrings."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given word is a palindrome and if the longest palindrome substring matches a specific value. The solution function g iterates through a list of substrings to find the longest palindrome substring.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(anagrams: List[List[str]], strings=['']) -> bool:\n    for group in anagrams:\n        sorted_group = [''.join(sorted(s)) for s in group]\n        if len(set(sorted_group)) != len(group):\n            return False\n    return True\n\ndef g(strings=['']):\n    anagrams = []\n    seen = set()\n    for string in strings:\n        sorted_str = ''.join(sorted(string))\n        if sorted_str not in seen:\n            seen.add(sorted_str)\n            anagrams.append([string])\n        else:\n            for group in anagrams:\n                if ''.join(sorted(group[0])) == sorted_str:\n                    group.append(string)\n    return anagrams\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations to check for anagrams.",
        "idx_generation": 3,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(anagrams: List[List[str]], strings=['']) -> bool:\n    for group in anagrams:\n        sorted_group = [''.join(sorted(s)) for s in group]\n        if len(set(sorted_group)) != len(group):\n            return False\n    return True",
        "solution_func": "def g(strings=['']):\n    anagrams = []\n    seen = set()\n    for string in strings:\n        sorted_str = ''.join(sorted(string))\n        if sorted_str not in seen:\n            seen.add(sorted_str)\n            anagrams.append([string])\n        else:\n            for group in anagrams:\n                if ''.join(sorted(group[0])) == sorted_str:\n                    group.append(string)\n    return anagrams",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of strings contains anagrams or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement functions to check if a list of strings contains anagrams and return True if it does.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num == int(num ** 0.5) ** 2 for num in nums)\n\ndef g(start=1, end=10):\n    return [x ** 2 for x in range(start, end)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and list manipulation. The function f checks if all numbers in a list are perfect squares, while the function g generates a list of squares of numbers within a given range. The assert statement checks if the solution g satisfies the condition in function f.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num == int(num ** 0.5) ** 2 for num in nums)",
        "solution_func": "def g(start=1, end=10):\n    return [x ** 2 for x in range(start, end)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if all numbers in a list are perfect squares, and a function g that generates a list of squares within a given range. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, checking for perfect squares, and generating a list of squares within a range.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g(base=\"racecar\"):\n    return base + base[:-1][::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g(base=\"racecar\"):\n    return base + base[:-1][::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(word) that checks if a word is a palindrome, and a function g(base) that generates a palindrome by concatenating a base word with its reverse, the puzzle requires finding a base word that results in a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically slicing and concatenation, to generate a palindrome. The solution requires identifying the base word 'racecar' that, when concatenated with its reverse, results in a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(seq: List[int]) -> bool:\n    return all(seq[i] == seq[i-1] + 1 for i in range(1, len(seq)))\n\ndef g(start=1, length=5):\n    return list(range(start, start + length))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given sequence is consecutive integers starting from a given number. The solution generates a list of consecutive integers starting from a given number and checks if the condition is satisfied.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(seq: List[int]) -> bool:\n    return all(seq[i] == seq[i-1] + 1 for i in range(1, len(seq)))",
        "solution_func": "def g(start=1, length=5):\n    return list(range(start, start + length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of integers is consecutive, and a function g that generates a list of consecutive integers based on a start value and length. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and the all() function in Python. It also tests the ability to define functions and use them together to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], step=3) -> bool:\n    if len(numbers) < 2:\n        return False\n    diff = numbers[1] - numbers[0]\n    for i in range(2, len(numbers)):\n        if numbers[i] - numbers[i-1] != diff:\n            return False\n    return True\n\ndef g(step=3):\n    numbers = [i for i in range(1, 10, step)]\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if a list of numbers follows an arithmetic progression pattern.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], step=3) -> bool:\n    if len(numbers) < 2:\n        return False\n    diff = numbers[1] - numbers[0]\n    for i in range(2, len(numbers)):\n        if numbers[i] - numbers[i-1] != diff:\n            return False\n    return True",
        "solution_func": "def g(step=3):\n    numbers = [i for i in range(1, 10, step)]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list of numbers generated with a specific step size forms an arithmetic sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a list of numbers forms an arithmetic sequence with a given step size. The solution function g generates a list of numbers with the specified step size. The assertion at the end verifies that the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, target_sum=200) -> bool:\n    return sum(arr) == target_sum\n\ndef g(target_sum=200):\n    return [50, 75, 65, 10]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and List Operations.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(arr: list, threshold=100) -> bool:\n    return max(arr) > threshold\ndef g(threshold=100):\n    return [50, 75, 110, 90]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(arr: list, target_sum=200) -> bool:\n    return sum(arr) == target_sum",
        "solution_func": "def g(target_sum=200):\n    return [50, 75, 65, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of elements in a list is equal to a target sum, and a function g that returns a specific list of numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if the sum of elements in a list matches a target sum. The solution function g returns a list of numbers that sum up to the target sum. The assertion tests if the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, threshold=20) -> bool:\n    return min(arr) < threshold\n\ndef g(threshold=20):\n    return [5, 10, 15, 25]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and comparison operations.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(arr: list, threshold=100) -> bool:\n    return max(arr) > threshold\ndef g(threshold=100):\n    return [50, 75, 110, 90]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(arr: list, threshold=20) -> bool:\n    return min(arr) < threshold",
        "solution_func": "def g(threshold=20):\n    return [5, 10, 15, 25]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list and a threshold value as input, and checks if the minimum value in the list is less than the threshold. The solution function g returns a list of numbers and asserts that f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as functions, list manipulation, and conditional statements. It also demonstrates the use of default function arguments and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, lower_bound=15, upper_bound=25) -> bool:\n    avg = sum(arr) / len(arr)\n    return lower_bound <= avg <= upper_bound\n\ndef g(lower_bound=15, upper_bound=25):\n    return [10, 20, 30, 40]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to calculate the average of a list and check if it falls within a specified range.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(arr: list, threshold=100) -> bool:\n    return max(arr) > threshold\ndef g(threshold=100):\n    return [50, 75, 110, 90]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(arr: list, lower_bound=15, upper_bound=25) -> bool:\n    avg = sum(arr) / len(arr)\n    return lower_bound <= avg <= upper_bound",
        "solution_func": "def g(lower_bound=15, upper_bound=25):\n    return [10, 20, 30, 40]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define a function that returns a list of numbers and ensure that the average of the numbers falls within a specified range."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves calculating the average of a list of numbers and checking if it falls within a given range. The solution function should return a list of numbers that meets this condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    vowels = 'aeiou'\n    assert len(set(word).intersection(set(vowels))) > 2\n    return word.isalpha() and word == word.lower()\ndef g():\n    return 'programming'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    vowels = 'aeiou'\n    assert len(set(word).intersection(set(vowels))) > 2\n    return word.isalpha() and word == word.lower()",
        "solution_func": "def g():\n    return 'programming'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a word with at least 3 vowels that is entirely lowercase and consists only of alphabetic characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given word meets specific criteria related to vowels, lowercase letters, and alphabetic characters.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\ndef f(data: List[Tuple[int, int]]) -> bool:\n    assert all(x + y > 0 for x, y in data)\n    return sum(x * y for x, y in data) > 100\ndef g():\n    return [(10, 20), (30, 40), (5, 50), (15, 25)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic. It also includes list manipulation and assertion. The solution involves generating a list of tuples and checking if the sum of products of elements in the tuples is greater than 100.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\ndef f(data: List[Tuple[int, int]]) -> bool:\n    assert all(x + y > 0 for x, y in data)\n    return sum(x * y for x, y in data) > 100",
        "solution_func": "def g():\n    return [(10, 20), (30, 40), (5, 50), (15, 25)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples as input and checks if the sum of each tuple's elements is greater than 0, and if the sum of the products of each tuple's elements is greater than 100. The solution function g returns a specific list of tuples that satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, tuple unpacking, and assertion testing in Python. It also requires knowledge of basic arithmetic operations and logical comparisons.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, target_sum=15) -> bool:\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target_sum=15):\n    return [i for i in range(1, target_sum) if target_sum - i in range(1, target_sum)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and list operations.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, target_sum=15) -> bool:\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))",
        "solution_func": "def g(target_sum=15):\n    return [i for i in range(1, target_sum) if target_sum - i in range(1, target_sum)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding two numbers in a list that add up to a specific target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there exist two numbers in a list that sum up to a given target sum. The solution function g generates a list of numbers that satisfy this condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\nimport random\ndef g():\n    n = random.randint(1, 10)\n    return ''.join(['(' * n + ')' * n])\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 5,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\nimport random",
        "solution_func": "def g():\n    n = random.randint(1, 10)\n    return ''.join(['(' * n + ')' * n])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(s) that checks if a string of parentheses is balanced, and a function g() that generates a random string of balanced parentheses. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of balanced parentheses using a stack data structure and random string generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(inds: List[int], vecs=[19, 25, 30, 12, 22, 14, 28, 30, 6, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs=[19, 25, 30, 12, 22, 14, 28, 30, 6, 12]):\n    # Linear algebra\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Binary Operations, Linear Algebra",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(inds: List[int], vecs=[19, 25, 30, 12, 22, 14, 28, 30, 6, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))",
        "solution_func": "def g(vecs=[19, 25, 30, 12, 22, 14, 28, 30, 6, 12]):\n    # Linear algebra\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a specific condition holds true for a given list of integers based on bitwise operations and linear algebra transformations."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of bitwise operations, linear algebra concepts, and list comprehensions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g(size: int = 5):\n    import random\n    while True:\n        lst = random.sample(range(size*2), size)\n        if len(lst) == len(set(lst)):\n            return lst\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Set Operations and Randomization.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(dct: dict) -> bool:\n    return all(val % 2 == 0 for val in dct.values())\n    \ndef g():\n    import random\n    while True:\n        dct = {num: num ** 2 for num in range(2, 11, 2)}\n        if all(val % 2 == 0 for val in dct.values()):\n            return dct\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g(size: int = 5):\n    import random\n    while True:\n        lst = random.sample(range(size*2), size)\n        if len(lst) == len(set(lst)):\n            return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of unique elements of a specified size using random sampling, and then check if the list contains only unique elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of unique elements using random sampling and checking if the list contains only unique elements. The solution function g() generates a list of unique elements of a specified size, and the puzzle function f() checks if the list contains only unique elements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(length: int = 5):\n    import random\n    while True:\n        letters = 'abcdefghijklmnopqrstuvwxyz'\n        palindrome = ''.join(random.choice(letters) for _ in range(length))\n        if palindrome == palindrome[::-1]:\n            return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(dct: dict) -> bool:\n    return all(val % 2 == 0 for val in dct.values())\n    \ndef g():\n    import random\n    while True:\n        dct = {num: num ** 2 for num in range(2, 11, 2)}\n        if all(val % 2 == 0 for val in dct.values()):\n            return dct\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(length: int = 5):\n    import random\n    while True:\n        letters = 'abcdefghijklmnopqrstuvwxyz'\n        palindrome = ''.join(random.choice(letters) for _ in range(length))\n        if palindrome == palindrome[::-1]:\n            return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s) that checks if a given string is a palindrome, and a function g(length) that generates a random string of a specified length and returns it if it is a palindrome. The assert statement checks if the generated palindrome string is indeed a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, palindrome checking, and random string generation in Python. It provides a practical application of these concepts.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abracadabra') -> bool:\n    return any(s[i:i+len(pattern)] == pattern for i in range(len(s) - len(pattern) + 1))\ndef g(pattern='abracadabra'):\n    return 'abracadabraabracadabra'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and pattern recognition.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abracadabra') -> bool:\n    return any(s[i:i+len(pattern)] == pattern for i in range(len(s) - len(pattern) + 1))",
        "solution_func": "def g(pattern='abracadabra'):\n    return 'abracadabraabracadabra'",
        "quality": [
            null
        ],
        "description": [
            "Given a string s, the function f checks if the pattern 'abracadabra' exists in s. The function g returns the pattern 'abracadabraabracadabra'. The puzzle tests whether f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and pattern matching in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(dictionary: dict, keys=['name', 'age', 'city']) -> bool:\n    assert all(key in dictionary for key in keys)\n    assert len(dictionary.keys()) >= len(keys)\n    return True\n\ndef g(keys=['name', 'age', 'city']):\n    import random\n    return {key: random.randint(1, 100) if key == 'age' else random.choice(['John', 'Alice', 'Bob', 'Emma']) for key in keys}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to dictionary manipulation, assertion, and random module in Python.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(dictionary: dict, keys=['name', 'age', 'city']) -> bool:\n    assert all(key in dictionary for key in keys)\n    assert len(dictionary.keys()) >= len(keys)\n    return True",
        "solution_func": "def g(keys=['name', 'age', 'city']):\n    import random\n    return {key: random.randint(1, 100) if key == 'age' else random.choice(['John', 'Alice', 'Bob', 'Emma']) for key in keys}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given dictionary contains all the specified keys and has at least the specified keys. Another function g generates a random dictionary with the specified keys. The puzzle is to ensure that function f returns True when applied to the dictionary generated by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks for specific keys in a dictionary and comparing it with a randomly generated dictionary to ensure the function returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, a={'key1': 10, 'key2': 20}) -> bool:\n    return d == {key: value * 2 for key, value in a.items()}\ndef g(a={'key1': 10, 'key2': 20}):\n    return {k: v * 2 for k, v in a.items()}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and comprehension. It also includes testing for equality and assertion. The topics used in this puzzle are String Manipulation and Conditional Logic.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, a={'key1': 10, 'key2': 20}) -> bool:\n    return d == {key: value * 2 for key, value in a.items()}",
        "solution_func": "def g(a={'key1': 10, 'key2': 20}):\n    return {k: v * 2 for k, v in a.items()}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given dictionary is equal to a modified version of a predefined dictionary, and a function g that returns a dictionary with values doubled. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, dictionary comprehension, and function definition in Python. It tests the understanding of dictionary manipulation and function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: set, a={1, 2, 3, 4, 5}) -> bool:\n    return s == a.intersection({2, 4, 6})\ndef g(a={1, 2, 3, 4, 5}):\n    return a.intersection({2, 4, 6})\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and conditional logic.",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: set, a={1, 2, 3, 4, 5}) -> bool:\n    return s == a.intersection({2, 4, 6})",
        "solution_func": "def g(a={1, 2, 3, 4, 5}):\n    return a.intersection({2, 4, 6})",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given set is equal to the intersection of a predefined set and another set. The solution function g returns the intersection of a predefined set and a specific set."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about understanding sets and set operations in Python. The function f checks if a set is equal to the intersection of two sets, while the function g returns the intersection of two sets. The assertion at the end confirms that the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return sum(nums) > 100\n\ndef g():\n    import random\n    return [random.randint(1, 50) for _ in range(5)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and importing modules (random).",
        "idx_generation": 6,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return sum(nums) > 100",
        "solution_func": "def g():\n    import random\n    return [random.randint(1, 50) for _ in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of 5 random integers between 1 and 50, and then check if the sum of these integers is greater than 100."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random integers and checking a condition based on the sum of these integers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, numbers=[9, 4, 7, 2, 5, 3, 6]) -> bool:\n    return result % 5 == 0\ndef g(numbers=[9, 4, 7, 2, 5, 3, 6]):\n    smallest_nums = sorted(numbers)[:2]\n    return sum(smallest_nums)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and sorting and ordering topics.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int, numbers=[9, 4, 7, 2, 5, 3, 6]) -> bool:\n    return result % 5 == 0",
        "solution_func": "def g(numbers=[9, 4, 7, 2, 5, 3, 6]):\n    smallest_nums = sorted(numbers)[:2]\n    return sum(smallest_nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the sum of the two smallest numbers in a list and checking if the sum is divisible by 5."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if the sum of the two smallest numbers in a list is divisible by 5, and then implementing a function to find the sum of the two smallest numbers in a given list. The assertion checks if the solution function satisfies the condition defined in the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, is_prime=True) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return is_prime\n\ndef g(num=17):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    num += 1\n    while not is_prime(num):\n        num += 1\n    return num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) and Mathematical Operations topics.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, is_prime=True) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return is_prime",
        "solution_func": "def g(num=17):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    num += 1\n    while not is_prime(num):\n        num += 1\n    return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num: int, is_prime=True) that checks if a given number is prime, and a function g(num=17) that finds the next prime number after the input number. The puzzle requires the student to understand prime numbers and function composition in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for prime numbers and finding the next prime number after a given input. It tests the student's understanding of prime number algorithms and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str, pattern=\"abc\", length=36) -> bool:\n    return pattern in word and len(word) == length\n\ndef g(pattern=\"abc\", length=36):\n    return pattern * (length // len(pattern)) + pattern[:length % len(pattern)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str, pattern=\"abc\", length=36) -> bool:\n    return pattern in word and len(word) == length",
        "solution_func": "def g(pattern=\"abc\", length=36):\n    return pattern * (length // len(pattern)) + pattern[:length % len(pattern)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given word contains a specific pattern and has a certain length, and another function g that generates a word based on the pattern and length. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function parameters, string manipulation, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list, checking the difference between consecutive elements, and verifying a specific starting value. It does not explicitly involve any of the listed topics.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start",
        "solution_func": "def g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list is in arithmetic progression with a specified difference and starting value. The solution function g generates a list in arithmetic progression with the specified difference and starting value, and the puzzle checks if f returns True for this generated list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting, list comprehension, and arithmetic progression. It tests the student's ability to define functions, generate lists, and validate conditions based on the input list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, substr='key') -> bool:\n    return any(substr in key for key in d.keys())\ndef g(substr='key'):\n    return {f'{substr}_{i}': i for i in range(3)}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and string manipulation.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, substr='key') -> bool:\n    return any(substr in key for key in d.keys())",
        "solution_func": "def g(substr='key'):\n    return {f'{substr}_{i}': i for i in range(3)}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given substring is present in any of the keys in a dictionary. The solution function g creates a dictionary with keys that contain the specified substring and values as integers. The assertion checks if the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, string manipulation, and understanding how the functions f and g interact to satisfy the condition f(g()) == True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) <= 1:\n        return False\n    for num in nums:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n    return True\n\ndef g(start=2, end=20):\n    primes = []\n    for num in range(start, end):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search approach.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num == int(num ** 0.5) ** 2 for num in nums)\n\ndef g(start=1, end=10):\n    return [x ** 2 for x in range(start, end)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) <= 1:\n        return False\n    for num in nums:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n    return True",
        "solution_func": "def g(start=2, end=20):\n    primes = []\n    for num in range(start, end):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of numbers contains only prime numbers, and a function g that generates a list of prime numbers within a specified range. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums)\n\ndef g(start=1, end=10):\n    return [x for x in range(start, end) if x % 2 == 0]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and generating a list of even numbers within a given range.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num == int(num ** 0.5) ** 2 for num in nums)\n\ndef g(start=1, end=10):\n    return [x ** 2 for x in range(start, end)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums)",
        "solution_func": "def g(start=1, end=10):\n    return [x for x in range(start, end) if x % 2 == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are even, and a function g that generates a list of even numbers within a given range. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, checking for even numbers, and using the all() function to validate the condition. It is a good exercise for practicing list operations and boolean expressions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) <= 2:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=20):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Fibonacci sequence generation and checking if the generated Fibonacci numbers are present in the input list.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num == int(num ** 0.5) ** 2 for num in nums)\n\ndef g(start=1, end=10):\n    return [x ** 2 for x in range(start, end)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) <= 2:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])",
        "solution_func": "def g(limit=20):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of numbers contains two specific Fibonacci numbers. The solution function g generates a list of Fibonacci numbers up to a given limit and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding Fibonacci numbers and list comprehension in Python. It also requires knowledge of how to generate Fibonacci numbers up to a certain limit.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 9, 3, 7]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Set Operations and Conditional Logic.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pattern='abracadabra') -> bool:\n    return any(s[i:i+len(pattern)] == pattern for i in range(len(s) - len(pattern) + 1))\ndef g(pattern='abracadabra'):\n    return 'abracadabraabracadabra'\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list, target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 9, 3, 7]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the function f checks if there are two numbers in the list that add up to a target value. The function g returns a list of numbers. The puzzle is to determine if function f returns True when called with the output of function g as input."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use a set to efficiently check for the presence of a specific number in a list. The solution function g returns a list of numbers that add up to the target value.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(bools: list) -> bool:\n    return bools.count(True) > len(bools) / 2\n\ndef g():\n    return [True, True, False, True]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and comparison operations.",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pattern='abracadabra') -> bool:\n    return any(s[i:i+len(pattern)] == pattern for i in range(len(s) - len(pattern) + 1))\ndef g(pattern='abracadabra'):\n    return 'abracadabraabracadabra'\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(bools: list) -> bool:\n    return bools.count(True) > len(bools) / 2",
        "solution_func": "def g():\n    return [True, True, False, True]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of boolean values, the function f checks if the number of True values in the list is greater than half of the total number of values."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves implementing a function f that checks a condition on a list of boolean values, and then providing a solution g that returns a specific list of boolean values to satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    \"\"\"\n    This solution reverses a string to check if it is a palindrome.\n    \"\"\"\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, max_value=100) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, min(num, max_value)):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(max_value=100):\n    \"\"\"\n    This solution uses trial division to check if a number is prime.\n    \"\"\"\n    return 17\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    \"\"\"\n    This solution reverses a string to check if it is a palindrome.\n    \"\"\"\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome by comparing it with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, result=120) -> bool:\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n    return factorial == result\n\ndef g(result=120):\n    \"\"\"\n    This solution calculates the factorial of a given number.\n    \"\"\"\n    return 5\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Factorial calculation using loops",
        "idx_generation": 7,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, max_value=100) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, min(num, max_value)):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(max_value=100):\n    \"\"\"\n    This solution uses trial division to check if a number is prime.\n    \"\"\"\n    return 17\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int, result=120) -> bool:\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n    return factorial == result",
        "solution_func": "def g(result=120):\n    \"\"\"\n    This solution calculates the factorial of a given number.\n    \"\"\"\n    return 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the factorial of a given number is equal to a specified result, and a function g that returns a hardcoded value. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle is about calculating the factorial of a number and checking if it matches a given result. The solution function g returns a hardcoded value (5) which does not satisfy the condition in function f, making the puzzle unsuitable for teaching purposes as it does not demonstrate the correct solution.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g() -> list:\n    return [num for num in range(11) if num % 2 == 0]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list comprehension, iteration, and checking for even numbers in a list.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return all(isinstance(key, int) for key in d.keys()) and all(isinstance(val, str) for val in d.values()) and all(key in range(1, 11) for key in d.keys())\ndef g() -> dict:\n    return {i: ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'][i-1] for i in range(1, 11)}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g() -> list:\n    return [num for num in range(11) if num % 2 == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all numbers in a list are even, and a function g() that generates a list of even numbers from 0 to 10. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and modulo operations in Python. It tests the student's ability to define functions and use them in conjunction to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 != 0 for num in lst)\n\ndef g() -> list:\n    return [num for num in range(1, 12) if num % 2 != 0]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list comprehension, iteration, and checking for odd numbers in a list.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return all(isinstance(key, int) for key in d.keys()) and all(isinstance(val, str) for val in d.values()) and all(key in range(1, 11) for key in d.keys())\ndef g() -> dict:\n    return {i: ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'][i-1] for i in range(1, 11)}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 != 0 for num in lst)",
        "solution_func": "def g() -> list:\n    return [num for num in range(1, 12) if num % 2 != 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all numbers in a list are odd, and a function g() that generates a list of odd numbers from 1 to 11. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and checking for odd numbers in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return all(char.islower() for char in s)\n\ndef g() -> str:\n    return ''.join(chr(ord('a') + i) for i in range(10))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return all(isinstance(key, int) for key in d.keys()) and all(isinstance(val, str) for val in d.values()) and all(key in range(1, 11) for key in d.keys())\ndef g() -> dict:\n    return {i: ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'][i-1] for i in range(1, 11)}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return all(char.islower() for char in s)",
        "solution_func": "def g() -> str:\n    return ''.join(chr(ord('a') + i) for i in range(10))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if all characters in a given string are lowercase, and a function g() that generates a string of lowercase letters from 'a' to 'j'. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, character comparison, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num < 0 for num in lst)\n\ndef g() -> list:\n    return [num for num in range(-10, 0)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list comprehension, iteration, and checking conditions using the `all` function. It also deals with the concept of generating a list of numbers within a specific range and checking if all elements in the list satisfy a certain condition.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return all(isinstance(key, int) for key in d.keys()) and all(isinstance(val, str) for val in d.values()) and all(key in range(1, 11) for key in d.keys())\ndef g() -> dict:\n    return {i: ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'][i-1] for i in range(1, 11)}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num < 0 for num in lst)",
        "solution_func": "def g() -> list:\n    return [num for num in range(-10, 0)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all numbers in a list are negative, and a function g() that generates a list of negative numbers. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and how to generate a list of numbers within a specific range. It also tests the understanding of boolean expressions and function return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sum_of_squares: int, start=1, end=10) -> bool:\n    return sum_of_squares == sum(i**2 for i in range(start, end+1) if i % 2 == 0)\n\ndef g(start=1, end=10):\n    even_numbers = [i for i in range(start, end+1) if i % 2 == 0]\n    return sum(i**2 for i in even_numbers)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, list comprehension, and function composition.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(sum_of_squares: int, start=1, end=10) -> bool:\n    return sum_of_squares == sum(i**2 for i in range(start, end+1) if i % 2 == 0)",
        "solution_func": "def g(start=1, end=10):\n    even_numbers = [i for i in range(start, end+1) if i % 2 == 0]\n    return sum(i**2 for i in even_numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of squares of even numbers in a given range matches a given value, and defining a function g that calculates the sum of squares of even numbers in a given range. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, conditional statements, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(fibonacci_numbers: List[int], num=20) -> bool:\n    fib_sequence = [0, 1]\n    while fib_sequence[-1] + fib_sequence[-2] <= num:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fibonacci_numbers == fib_sequence\ndef g(num=20):\n    fib_sequence = [0, 1]\n    while fib_sequence[-1] + fib_sequence[-2] <= num:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating Fibonacci numbers and checking if a given list of Fibonacci numbers matches the generated sequence.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(fibonacci_numbers: List[int], num=20) -> bool:\n    fib_sequence = [0, 1]\n    while fib_sequence[-1] + fib_sequence[-2] <= num:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fibonacci_numbers == fib_sequence",
        "solution_func": "def g(num=20):\n    fib_sequence = [0, 1]\n    while fib_sequence[-1] + fib_sequence[-2] <= num:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of Fibonacci numbers matches the Fibonacci sequence up to a specified number. The solution function g generates the Fibonacci sequence up to the specified number and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to generate Fibonacci numbers and compare them to a given list. It tests the student's knowledge of lists, loops, and algorithmic thinking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a word is a palindrome.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(arr: list, ascending=True) -> bool:\n    if ascending:\n        return arr == sorted(arr)\n    else:\n        return arr == sorted(arr, reverse=True)\ndef g(ascending=True):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that returns True if the word is a palindrome, and a function g() that returns the word 'racecar'. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 7\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) as it checks for prime numbers.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(arr: list, ascending=True) -> bool:\n    if ascending:\n        return arr == sorted(arr)\n    else:\n        return arr == sorted(arr, reverse=True)\ndef g(ascending=True):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 7",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num: int) -> bool and g(), where f checks if a given number is a prime number and g returns the number 7. The puzzle tests whether the function f correctly identifies 7 as a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithm to check for prime numbers and a straightforward solution. It can be used to teach the concept of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list) -> bool:\n    return len(arr) == len(set(arr))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations to check for uniqueness of elements in a list.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(arr: list, ascending=True) -> bool:\n    if ascending:\n        return arr == sorted(arr)\n    else:\n        return arr == sorted(arr, reverse=True)\ndef g(ascending=True):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(arr: list) -> bool:\n    return len(arr) == len(set(arr))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(arr) that checks if a list contains only unique elements, and then defining a function g() that returns a list with unique elements. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, set operations, and function definitions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], n=5) -> bool:\n    return all([len(word) > n for word in words])\n\ndef g(n=5):\n    words = [word for word in [\"python\", \"programming\", \"puzzle\", \"solution\", \"challenge\"] if len(word) > n]\n    return words\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], n=5) -> bool:\n    return all([len(word) > n for word in words])",
        "solution_func": "def g(n=5):\n    words = [word for word in [\"python\", \"programming\", \"puzzle\", \"solution\", \"challenge\"] if len(word) > n]\n    return words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all words in a list have a length greater than a given number, and a function g that generates a list of words with a length greater than the given number. The assert statement checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, function definitions with default arguments, and the all() function in Python. It also tests the ability to write functions that work together to solve a specific problem.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    return all([matrix[i][i] == matrix[j][j] for i in range(n) for j in range(n)])\n\ndef g(n=3):\n    matrix = [[1 if i >= j else 0 for j in range(n)] for i in range(n)]\n    return matrix\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and comparison of diagonal elements. It also includes list comprehension and assertion testing.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    return all([matrix[i][i] == matrix[j][j] for i in range(n) for j in range(n)])",
        "solution_func": "def g(n=3):\n    matrix = [[1 if i >= j else 0 for j in range(n)] for i in range(n)]\n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if all diagonal elements of a given matrix are equal, and a function g that generates a matrix with 1s on and above the diagonal and 0s below the diagonal. The assertion at the end confirms that the solution function g satisfies the condition of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, matrix indexing, and the concept of diagonal elements in a matrix. It also tests the ability to write functions that generate matrices based on certain conditions and to verify the correctness of the solution using assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return digit_sum == digit_product\n\ndef g():\n    n = 10\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        digit_product = 1\n        for d in str(n):\n            digit_product *= int(d)\n        if digit_sum == digit_product:\n            return n\n        n += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and Brute Force Search.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return digit_sum == digit_product",
        "solution_func": "def g():\n    n = 10\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        digit_product = 1\n        for d in str(n):\n            digit_product *= int(d)\n        if digit_sum == digit_product:\n            return n\n        n += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if the sum of the digits of a number is equal to the product of its digits. Another function g() iterates through numbers starting from 10 until it finds a number that satisfies the condition in function f(n). The assertion at the end checks if the solution returned by g() is correct."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic operations like summing and multiplying digits of a number, as well as iterating through numbers to find a solution. It can be used to teach students about loops, conditionals, and basic arithmetic operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return int(digit_product ** 0.5) ** 2 == digit_product\n\ndef g():\n    n = 9876\n    while True:\n        digit_product = 1\n        for d in str(n):\n            digit_product *= int(d)\n        if int(digit_product ** 0.5) ** 2 == digit_product:\n            return n\n        n -= 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, and conditional logic.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return int(digit_product ** 0.5) ** 2 == digit_product",
        "solution_func": "def g():\n    n = 9876\n    while True:\n        digit_product = 1\n        for d in str(n):\n            digit_product *= int(d)\n        if int(digit_product ** 0.5) ** 2 == digit_product:\n            return n\n        n -= 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(n) that checks if the product of the digits of a number is a perfect square, and a function g() that iterates through numbers to find the first number where the product of its digits is a perfect square."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic operations like iterating through digits of a number, calculating the product of digits, and checking if a number is a perfect square. It can be used to teach concepts like loops, conditionals, and mathematical operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d)**2 for d in str(n))\n    if digit_sum < 2:\n        return False\n    for i in range(2, int(digit_sum ** 0.5) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 100\n    while True:\n        digit_sum = sum(int(d)**2 for d in str(n))\n        if digit_sum < 2:\n            n += 1\n            continue\n        is_prime = True\n        for i in range(2, int(digit_sum ** 0.5) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, Conditional Logic, Brute Force Search, and Number Theory.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    digit_sum = sum(int(d)**2 for d in str(n))\n    if digit_sum < 2:\n        return False\n    for i in range(2, int(digit_sum ** 0.5) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    n = 100\n    while True:\n        digit_sum = sum(int(d)**2 for d in str(n))\n        if digit_sum < 2:\n            n += 1\n            continue\n        is_prime = True\n        for i in range(2, int(digit_sum ** 0.5) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given number satisfies a specific condition related to its digit sum and primality, and finding the first number that satisfies this condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of digit manipulation, sum calculation, prime number checking, and looping constructs in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int, a=3, b=4) -> bool:\n    return n * b == a\ndef g(a = 3, b = 4):\n    return a / b\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int, a=3, b=4) -> bool:\n    return n * b == a",
        "solution_func": "def g(a = 3, b = 4):\n    return a / b",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(n: int, a=3, b=4) -> bool and g(a=3, b=4), where f checks if n multiplied by b is equal to a, and g returns the result of dividing a by b. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic arithmetic operations and function composition in Python. It can be used to teach students about function definitions, function composition, and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], letters=\"a\") -> bool:\n    letters_set = set(letters)\n    for word in words:\n        if not set(word).issubset(letters_set):\n            return False\n    return True\n\ndef g(letters=\"a\"):\n    words = [\"a\", \"aa\", \"aaa\"]  # Mutated word list\n    return max([word for word in words if set(word).issubset(set(letters))], key=len)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations",
        "idx_generation": 8,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], letters=\"a\") -> bool:\n    letters_set = set(letters)\n    for word in words:\n        if not set(word).issubset(letters_set):\n            return False\n    return True",
        "solution_func": "def g(letters=\"a\"):\n    words = [\"a\", \"aa\", \"aaa\"]  # Mutated word list\n    return max([word for word in words if set(word).issubset(set(letters))], key=len)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of words and a string of letters as input. The function checks if all the characters in each word are present in the letters string. The solution function g generates a list of words, filters out words that have characters not present in the letters string, and returns the longest word from the filtered list. The assertion checks if the solution function g satisfies the condition of the puzzle function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with sets, list comprehension, and filtering based on set operations. It also requires understanding of the subset relationship between sets. This puzzle can be used to teach Python programming concepts related to sets, lists, and functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str, sentence='Python programming is fun and challenging') -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(word))\n\ndef g(sentence='Python programming is fun and challenging'):\n    return max(sentence.split(), key=len)\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and number theory (checking for prime numbers). The solution involves string manipulation and mathematical operations (finding the word with the maximum length in a sentence).",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str, sentence='Python programming is fun and challenging') -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(word))",
        "solution_func": "def g(sentence='Python programming is fun and challenging'):\n    return max(sentence.split(), key=len)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the length of the longest word in a sentence is a prime number. The solution function g finds the longest word in a given sentence and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as functions, conditionals, loops, and string manipulation. It also involves understanding prime numbers and basic algorithmic thinking.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str, is_palindrome=True) -> bool:\n    return word == word[::-1]\ndef g(word='radar'):\n    return word[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str, is_palindrome=True) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g(word='radar'):\n    return word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f that checks if a word is a palindrome and a function g that returns the reverse of a word, the puzzle requires finding a word that is a palindrome when its reverse is taken."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use functions to check for palindromes and reverse words in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int], is_sorted=True) -> bool:\n    return numbers == sorted(numbers)\ndef g(numbers=[3, 9, 2, 6, 8]):\n    return sorted(numbers)\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves sorting a list of numbers and checking if the list is sorted. It demonstrates the use of the `sorted()` function in Python. The solution `g()` sorts a list of numbers using the `sorted()` function and the puzzle `f()` checks if the list is sorted by comparing it with the sorted version of the list.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int], is_sorted=True) -> bool:\n    return numbers == sorted(numbers)",
        "solution_func": "def g(numbers=[3, 9, 2, 6, 8]):\n    return sorted(numbers)",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the puzzle checks if the list is sorted in ascending order. The solution function sorts the list and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of list sorting in Python. The solution function sorts the input list and returns it, which is then checked against the original list to see if it is sorted.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, str]], target_sum=10, min_count=2, max_count=4) -> bool:\n    return sum([num for num, _ in tuples]) == target_sum and min_count <= len(tuples) <= max_count\n\ndef g(target_sum=10, min_count=2, max_count=4):\n    \"\"\"\n    This solution creates a list of tuples with integers and strings that sum up to the target_sum.\n    \"\"\"\n    items = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]\n    return items[:max_count]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target_product=210, min_len=4, max_len=6) -> bool:\n    return all((n > 1 for n in numbers)) and min_len <= len(numbers) <= max_len and target_product == 210\n\ndef g(target_product=210, min_len=4, max_len=6):\n    \"\"\"\n    This solution uses prime factorization to generate a list of numbers that multiply to the target_product.\n    \"\"\"\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(target_product)\n    numbers = []\n    for factor in factors:\n        numbers.extend([factor]*2)\n\n    return numbers[:max_len]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, str]], target_sum=10, min_count=2, max_count=4) -> bool:\n    return sum([num for num, _ in tuples]) == target_sum and min_count <= len(tuples) <= max_count",
        "solution_func": "def g(target_sum=10, min_count=2, max_count=4):\n    \"\"\"\n    This solution creates a list of tuples with integers and strings that sum up to the target_sum.\n    \"\"\"\n    items = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]\n    return items[:max_count]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires creating a list of tuples with integers and strings that sum up to a target sum, within a specified range of tuple counts."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the sum of integers in the list of tuples equals a target sum and if the count of tuples falls within a specified range.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int], target_sum=15, required_keys=['a', 'b', 'c']) -> bool:\n    return sum(dictionary.values()) == target_sum and all(key in dictionary for key in required_keys)\n\ndef g(target_sum=15, required_keys=['a', 'b', 'c']):\n    \"\"\"\n    This solution generates a dictionary with integer values that sum up to the target_sum.\n    \"\"\"\n    keys = ['a', 'b', 'c', 'd', 'e']\n    values = [3, 4, 5, 2, 1]\n    return dict(zip(keys, values))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target_product=210, min_len=4, max_len=6) -> bool:\n    return all((n > 1 for n in numbers)) and min_len <= len(numbers) <= max_len and target_product == 210\n\ndef g(target_product=210, min_len=4, max_len=6):\n    \"\"\"\n    This solution uses prime factorization to generate a list of numbers that multiply to the target_product.\n    \"\"\"\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(target_product)\n    numbers = []\n    for factor in factors:\n        numbers.extend([factor]*2)\n\n    return numbers[:max_len]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Dict\n\ndef f(dictionary: Dict[str, int], target_sum=15, required_keys=['a', 'b', 'c']) -> bool:\n    return sum(dictionary.values()) == target_sum and all(key in dictionary for key in required_keys)",
        "solution_func": "def g(target_sum=15, required_keys=['a', 'b', 'c']):\n    \"\"\"\n    This solution generates a dictionary with integer values that sum up to the target_sum.\n    \"\"\"\n    keys = ['a', 'b', 'c', 'd', 'e']\n    values = [3, 4, 5, 2, 1]\n    return dict(zip(keys, values))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires creating a dictionary with specific keys and values that sum up to a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a generated dictionary meets certain criteria in terms of keys, values, and their sum.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering, Exception Handling",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True",
        "solution_func": "def g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers, sorts the list in descending order, and checks if the sum of the sorted numbers is greater than 100. The solution function g returns a specific list of integers. The puzzle is solved if f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of integers and checking the sum of the sorted numbers, which tests the student's understanding of list manipulation and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(numbers: List[Tuple[int, int]]) -> bool:\n    for (num1, num2) in numbers:\n        assert num2 % num1 == 0\n    return True\n\ndef g():\n    return [(2, 4), (3, 9), (4, 8), (5, 15), (6, 18), (7, 28), (8, 32)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if the second number in each tuple is divisible by the first number. This requires knowledge of mathematical operations and conditional logic.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(numbers: List[Tuple[int, int]]) -> bool:\n    for (num1, num2) in numbers:\n        assert num2 % num1 == 0\n    return True",
        "solution_func": "def g():\n    return [(2, 4), (3, 9), (4, 8), (5, 15), (6, 18), (7, 28), (8, 32)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f that takes a list of tuples of integers and checks if the second number in each tuple is divisible by the first number. The solution function g returns a list of tuples that satisfy this condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking divisibility of numbers in tuples and returning True if all conditions are met. It can be used to teach students about list manipulation and assertion in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return sum(int(digit) for digit in str(n)) == n\n\ndef g():\n    for n in range(1, 1000):\n        if sum(int(digit) for digit in str(n)) == n:\n            return n\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and mathematical operations.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return sum(int(digit) for digit in str(n)) == n",
        "solution_func": "def g():\n    for n in range(1, 1000):\n        if sum(int(digit) for digit in str(n)) == n:\n            return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if the sum of the digits of a number is equal to the number itself. The solution function g() iterates through numbers from 1 to 999 and returns the first number that satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic understanding of iterating through numbers, converting numbers to strings, and summing digits. It can be used to teach concepts of loops, conditionals, and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion, Conditional Logic, Brute Force Search",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2",
        "solution_func": "def g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(n) and g(), where f checks a specific condition on an input integer n and g iterates over integers to find a value that satisfies the condition checked by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of loops, conditions, and arithmetic operations in Python to solve the algorithmic challenge.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(4):\n        assert n % 4 == 3\n        n -= 3 + (n - 3) // 4\n    return n > 0 and n % 4 == 3\ndef g():\n    m = 3\n    while True:\n        n = m\n        for i in range(4):\n            if n % 4 != 3:\n                break\n            n -= 3 + (n - 3) // 4\n        if n > 0 and n % 4 == 3:\n            return m\n        m += 4\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic, loops, and mathematical operations.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(4):\n        assert n % 4 == 3\n        n -= 3 + (n - 3) // 4\n    return n > 0 and n % 4 == 3",
        "solution_func": "def g():\n    m = 3\n    while True:\n        n = m\n        for i in range(4):\n            if n % 4 != 3:\n                break\n            n -= 3 + (n - 3) // 4\n        if n > 0 and n % 4 == 3:\n            return m\n        m += 4",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) and g(), where f(n) checks a specific condition on an input integer n and g() iterates through integers to find the first one that satisfies the condition checked by f(n)."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop that checks a condition on an integer n and a loop in the solution function g() that iterates through integers to find the first one that satisfies the condition. The solution function g() returns the integer that satisfies the condition checked by f(n).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 5\n        n -= 5 + (n - 5) // 6\n    return n > 0 and n % 6 == 5\ndef g():\n    m = 5\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 5:\n                break\n            n -= 5 + (n - 5) // 6\n        if n > 0 and n % 6 == 5:\n            return m\n        m += 6\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic, loops, and mathematical operations.",
        "idx_generation": 9,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 5\n        n -= 5 + (n - 5) // 6\n    return n > 0 and n % 6 == 5",
        "solution_func": "def g():\n    m = 5\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 5:\n                break\n            n -= 5 + (n - 5) // 6\n        if n > 0 and n % 6 == 5:\n            return m\n        m += 6",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(n) and g(), where f(n) checks a specific condition on an input integer n and g() iterates through integers to find one that satisfies the condition defined in f(n)."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of loops, conditions, and arithmetic operations in Python to solve. It also demonstrates the concept of defining functions and using them to solve a specific problem.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    if not nums:\n        return False\n    return all(n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1)) for n in nums)\ndef g(start=2, end=20):\n    return [num for num in range(start, end) if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1))]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers within a given range using a brute force approach.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    if not nums:\n        return False\n    return all(n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1)) for n in nums)",
        "solution_func": "def g(start=2, end=20):\n    return [num for num in range(start, end) if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1))]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if all numbers in a given list are prime numbers, and a function g that generates a list of prime numbers within a specified range. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and nested loops in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return len(set(word)) == len(word)\ndef g(word=\"python\"):\n    return ''.join(sorted(set(word), key=word.index))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return len(set(word)) == len(word)",
        "solution_func": "def g(word=\"python\"):\n    return ''.join(sorted(set(word), key=word.index))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that checks if a word has all unique characters, and then write a function that returns the word with its characters sorted in the order of their first occurrence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding sets, sorting, and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return False\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))\ndef g(start=1, diff=3, length=5):\n    return [start + diff * i for i in range(length)]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if a list of numbers forms an arithmetic progression.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return False\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))",
        "solution_func": "def g(start=1, diff=3, length=5):\n    return [start + diff * i for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers forms an arithmetic sequence with a common difference."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to check for an arithmetic sequence in a list of numbers and generate a list based on a given start, difference, and length.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, word=\"radar\") -> bool:\n    return s == s[::-1]\n\ndef g(word=\"radar\") -> str:\n    return word[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(x: List[int], lst=[1, 2, 3, 4, 5]) -> bool:\n    return x == sorted(x)\ndef g(lst=[1, 2, 3, 4, 5]):\n    return sorted(lst)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, word=\"radar\") -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(word=\"radar\") -> str:\n    return word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that returns the reverse of a given word. The assertion tests if applying function g to the default word 'radar' satisfies the palindrome condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, prime=7) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(prime=7) -> int:\n    prime += 1\n    while True:\n        for i in range(2, int(prime**0.5) + 1):\n            if prime % i == 0:\n                break\n        else:\n            return prime\n        prime += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to prime numbers, mathematical operations, loops, and conditionals.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(x: List[int], lst=[1, 2, 3, 4, 5]) -> bool:\n    return x == sorted(x)\ndef g(lst=[1, 2, 3, 4, 5]):\n    return sorted(lst)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int, prime=7) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime=7) -> int:\n    prime += 1\n    while True:\n        for i in range(2, int(prime**0.5) + 1):\n            if prime % i == 0:\n                break\n        else:\n            return prime\n        prime += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(num: int, prime=7) -> bool and g(prime=7) -> int. Function f checks if a given number is prime, while function g finds the next prime number after a given prime number. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves prime number checking and finding the next prime number. It tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(year: int, leap_year=2024) -> bool:\n    return (year % 4 == 0 and year % 100 != 0) or year % 400 == 0\n\ndef g(leap_year=2024) -> int:\n    leap_year += 4\n    while True:\n        if (leap_year % 4 == 0 and leap_year % 100 != 0) or leap_year % 400 == 0:\n            return leap_year\n        leap_year += 4\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Conditional Logic, Mathematical Operations, and Recursion.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(x: List[int], lst=[1, 2, 3, 4, 5]) -> bool:\n    return x == sorted(x)\ndef g(lst=[1, 2, 3, 4, 5]):\n    return sorted(lst)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(year: int, leap_year=2024) -> bool:\n    return (year % 4 == 0 and year % 100 != 0) or year % 400 == 0",
        "solution_func": "def g(leap_year=2024) -> int:\n    leap_year += 4\n    while True:\n        if (leap_year % 4 == 0 and leap_year % 100 != 0) or leap_year % 400 == 0:\n            return leap_year\n        leap_year += 4",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(year) that checks if a given year is a leap year, and a function g() that iterates through years starting from a given leap year to find the next leap year. The puzzle tests the correctness of the leap year logic implemented in the functions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding leap year conditions and implementing logic to find the next leap year. It can be used to teach students about leap year calculations and iterative logic in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, target=10) -> bool:\n    return sum(nums) == target\n\ndef g(target=10):\n    \"\"\"\n    This solution returns a list of numbers to calculate the sum.\n    \"\"\"\n    return [2, 3, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic. The puzzle function f checks if the sum of the numbers in the input list is equal to a target value. The solution function g returns a list of numbers that sum up to the target value. The assertion at the end verifies that the solution function g satisfies the condition of the puzzle function f.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, result=120) -> bool:\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n    return factorial == result\n\ndef g(result=120):\n    \"\"\"\n    This solution calculates the factorial of a given number.\n    \"\"\"\n    return 5\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list, target=10) -> bool:\n    return sum(nums) == target",
        "solution_func": "def g(target=10):\n    \"\"\"\n    This solution returns a list of numbers to calculate the sum.\n    \"\"\"\n    return [2, 3, 5]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the puzzle function f checks if the sum of the numbers is equal to a target value. The solution function g returns a list of numbers that when summed up equals the target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the sum of a list of numbers and compare it to a target value. The solution function provides a list of numbers that satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str, result=\"gnirts\"):\n    return word[::-1] == result\n\ndef g(result=\"gnirts\"):\n    \"\"\"\n    This solution returns a string reversed.\n    \"\"\"\n    return \"string\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, result=120) -> bool:\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n    return factorial == result\n\ndef g(result=120):\n    \"\"\"\n    This solution calculates the factorial of a given number.\n    \"\"\"\n    return 5\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str, result=\"gnirts\"):\n    return word[::-1] == result",
        "solution_func": "def g(result=\"gnirts\"):\n    \"\"\"\n    This solution returns a string reversed.\n    \"\"\"\n    return \"string\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that checks if a given word is the reverse of a specified result string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and writing a function that reverses a given string to match a specified result.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(s: str, palindrome=\"radar\") -> bool:\n    return s == s[::-1]\n\ndef g(palindrome=\"radar\"):\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    return all([matrix[i][i] == matrix[j][j] for i in range(n) for j in range(n)])\n\ndef g(n=3):\n    matrix = [[1 if i >= j else 0 for j in range(n)] for i in range(n)]\n    return matrix\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, palindrome=\"radar\") -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(palindrome=\"radar\"):\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome, and a function g that returns a predefined palindrome string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically checking for palindromes. It also tests the concept of function composition and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(lst: list, duplicates=[1, 2, 3, 4, 5, 1]) -> bool:\n    return len(lst) != len(set(lst))\n\ndef g(duplicates=[1, 2, 3, 4, 5, 1]):\n    return duplicates\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Set Operations and Conditional Logic.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(matrix: List[List[int]], n=3) -> bool:\n    return all([matrix[i][i] == matrix[j][j] for i in range(n) for j in range(n)])\n\ndef g(n=3):\n    matrix = [[1 if i >= j else 0 for j in range(n)] for i in range(n)]\n    return matrix\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, duplicates=[1, 2, 3, 4, 5, 1]) -> bool:\n    return len(lst) != len(set(lst))",
        "solution_func": "def g(duplicates=[1, 2, 3, 4, 5, 1]):\n    return duplicates",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list contains duplicates, and a function g that returns a predefined list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation and set operations in Python, as well as the concept of function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves creating a list of integers that satisfies certain conditions based on the input parameters. It also includes checking the length of the list, sum of elements in the list, and all elements being greater than 0.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)",
        "solution_func": "def g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function f that checks if a given list of integers meets certain conditions, and a function g that generates a list of integers based on specified parameters. The assert statement at the end checks if the solution function g satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, list comprehension, and basic arithmetic operations in Python. It also tests the student's ability to define functions with default parameters and use the 'assert' statement for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(x: List[int], start=1, end=100) -> bool:\n    return all([num == i ** 2 for i, num in enumerate(x, start)])\ndef g(start = 1, end = 100):\n    return [num ** 2 for num in range(start, end + 1)]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation to check if the elements in the list are squares of consecutive numbers.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(x: List[int], start=1, end=100) -> bool:\n    return all([num == i ** 2 for i, num in enumerate(x, start)])",
        "solution_func": "def g(start = 1, end = 100):\n    return [num ** 2 for num in range(start, end + 1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a list of integers contains the squares of consecutive numbers starting from a given range, and g generates a list of squares of numbers within a specified range. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, enumerate function, and the concept of checking for consecutive squares in a list. It also requires knowledge of function parameters and how to generate a list of squares using a range.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_sum: int, numbers=[1, 2, 3, 1]) -> bool:\n    assert max_sum == max(numbers[0] + numbers[2], numbers[1])\n    return True\n\ndef g(numbers=[1, 2, 3, 1]):\n    if len(numbers) <= 2:\n        return sum(numbers)\n    inclusive = numbers[0]\n    exclusive = 0\n    for num in numbers[1:]:\n        temp = inclusive\n        inclusive = max(inclusive, exclusive + num)\n        exclusive = temp\n    return max(inclusive, exclusive)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dynamic programming to find the maximum sum of non-adjacent numbers in a list. It also includes conditional logic and mathematical operations to compare values and calculate the maximum sum.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(max_sum: int, numbers=[1, 2, 3, 1]) -> bool:\n    assert max_sum == max(numbers[0] + numbers[2], numbers[1])\n    return True",
        "solution_func": "def g(numbers=[1, 2, 3, 1]):\n    if len(numbers) <= 2:\n        return sum(numbers)\n    inclusive = numbers[0]\n    exclusive = 0\n    for num in numbers[1:]:\n        temp = inclusive\n        inclusive = max(inclusive, exclusive + num)\n        exclusive = temp\n    return max(inclusive, exclusive)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a certain condition is met based on the input numbers and max_sum, and g calculates the maximum sum of a subsequence of the input numbers. The assertion at the end checks if the solution g satisfies the condition of the puzzle f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the maximum sum of a subsequence of numbers using dynamic programming and checking if the solution satisfies a specific condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(is_palindrome: bool, text=\"radar\") -> bool:\n    assert is_palindrome == text == text[::-1]\n    return True\n\ndef g(text=\"radar\"):\n    return text\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 10,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(is_palindrome: bool, text=\"radar\") -> bool:\n    assert is_palindrome == text == text[::-1]\n    return True",
        "solution_func": "def g(text=\"radar\"):\n    return text",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g that returns a text string, and the function f checks if the text string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for palindromes in Python using string manipulation and function definitions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(max_product: int, numbers=[2, 3, 5, 7, 10]) -> bool:\n    return max_product == max(numbers) * min(numbers)\ndef g(numbers=[2, 3, 5, 7, 10]):\n    return max(numbers) * min(numbers)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(max_product: int, numbers=[2, 3, 5, 7, 10]) -> bool:\n    return max_product == max(numbers) * min(numbers)",
        "solution_func": "def g(numbers=[2, 3, 5, 7, 10]):\n    return max(numbers) * min(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the maximum product of a list of numbers is equal to the product of the maximum and minimum numbers in the list. The solution function g calculates the maximum product of a list of numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation and comparison operations in Python. It can be used to teach students about functions, list operations, and comparison operators in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(contributions: List[int], target_sum=100) -> bool:\n    return sum(contributions) == target_sum\n\ndef g(target_sum=100):\n    return [10, 20, 30, 40]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(contributions: List[int], target_sum=100) -> bool:\n    return sum(contributions) == target_sum",
        "solution_func": "def g(target_sum=100):\n    return [10, 20, 30, 40]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and a target sum, and checks if the sum of the integers in the list is equal to the target sum. The solution function g returns a specific list of integers that sum up to the target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks for a specific condition on a list of integers, and then providing a solution that satisfies that condition. It also requires understanding how to call functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int, x=5, y=10) -> bool:\n    for i in range(n):\n        x += 2\n        y -= 1\n    return x > y\ndef g(x=5, y=10):\n    i = 0\n    while x < y:\n        x += 2\n        y -= 1\n        i += 1\n    return i\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and iterative loops.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int, x=5, y=10) -> bool:\n    for i in range(n):\n        x += 2\n        y -= 1\n    return x > y",
        "solution_func": "def g(x=5, y=10):\n    i = 0\n    while x < y:\n        x += 2\n        y -= 1\n        i += 1\n    return i",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a certain condition is met after a series of operations on x and y, and g performs those operations on x and y until the condition is met. The assert statement checks if the solution g satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic arithmetic operations and looping in Python. It tests the understanding of loops, conditions, and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, words=['racecar', 'level', 'python', 'radar']) -> bool:\n    return s == s[::-1]\n\ndef g(words=['racecar', 'level', 'python', 'radar']):\n    palindromes = [word for word in words if word == word[::-1]]\n    if palindromes:\n        return palindromes[0]\n    return \"\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, words=['racecar', 'level', 'python', 'radar']) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(words=['racecar', 'level', 'python', 'radar']):\n    palindromes = [word for word in words if word == word[::-1]]\n    if palindromes:\n        return palindromes[0]\n    return \"\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the first palindrome word in a list of words and checking if it is a palindrome itself."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a given string is a palindrome and another function to find the first palindrome word in a list of words. The solution function returns the first palindrome word found in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, data=[[1, 2, 3, 4, 5], [7, 8, 9, 10, 11], [2, 4, 6, 8, 10]]) -> bool:\n    return len(nums) == len(set(nums))\n\ndef g(data=[[1, 2, 3, 4, 5], [7, 8, 9, 10, 11], [2, 4, 6, 8, 10]]):\n    unique_nums = list(set(num for sublist in data for num in sublist))\n    return unique_nums\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations to check for uniqueness of elements in a list.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, data=[[1, 2, 3, 4, 5], [7, 8, 9, 10, 11], [2, 4, 6, 8, 10]]) -> bool:\n    return len(nums) == len(set(nums))",
        "solution_func": "def g(data=[[1, 2, 3, 4, 5], [7, 8, 9, 10, 11], [2, 4, 6, 8, 10]]):\n    unique_nums = list(set(num for sublist in data for num in sublist))\n    return unique_nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list of numbers contains only unique elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function f(nums) checks if a list of numbers contains only unique elements by comparing the length of the list with the length of a set created from the list. The function g(data) generates a list of unique numbers from a nested list of numbers. The assertion at the end verifies that the solution g() satisfies the condition of the puzzle f().",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, a='hello') -> bool:\n    return sorted(s) == sorted(a)\ndef g(a='hello'):\n    return ''.join(sorted(a))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting and ordering topics.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: set, a={1, 2, 3, 4, 5}) -> bool:\n    return s == a.intersection({2, 4, 6})\ndef g(a={1, 2, 3, 4, 5}):\n    return a.intersection({2, 4, 6})\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, a='hello') -> bool:\n    return sorted(s) == sorted(a)",
        "solution_func": "def g(a='hello'):\n    return ''.join(sorted(a))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the input string is equal to the sorted string 'hello', and a function g that returns the sorted string 'hello'. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in string manipulation and sorting in Python. It can be used to teach students about string comparison and sorting algorithms in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, a=[1, 2, 3, 2, 1]) -> bool:\n    return lst == a[::-1]\ndef g(a=[1, 2, 3, 2, 1]):\n    return a[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and comparison.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: set, a={1, 2, 3, 4, 5}) -> bool:\n    return s == a.intersection({2, 4, 6})\ndef g(a={1, 2, 3, 4, 5}):\n    return a.intersection({2, 4, 6})\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, a=[1, 2, 3, 2, 1]) -> bool:\n    return lst == a[::-1]",
        "solution_func": "def g(a=[1, 2, 3, 2, 1]):\n    return a[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list is equal to a predefined list in reverse order, and a function g that returns the predefined list in reverse order. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves list manipulation, function definition, and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    \"\"\"\n    This solution checks if a number is prime by iterating up to the square root of the number.\n    \"\"\"\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime using a simple algorithm that iterates up to the square root of the number and checks for divisibility. It also includes a test case assertion to verify the solution.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    \"\"\"\n    This solution reverses a string to check if it is a palindrome.\n    \"\"\"\n    return \"radar\"\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    \"\"\"\n    This solution checks if a number is prime by iterating up to the square root of the number.\n    \"\"\"\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given number is prime using a specific algorithm."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand the concept of prime numbers and how to check for primality using a loop that iterates up to the square root of the number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)\n\ndef g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and generating a list of prime numbers up to a given limit.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) <= 2:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=20):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return any(is_prime(num) for num in nums)",
        "solution_func": "def g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(nums) checks if any number in a list is a prime number, while g(limit) generates a list of prime numbers up to a specified limit. The puzzle requires checking if the list of prime numbers generated by g(limit) satisfies the condition in f(nums)."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and function composition in Python. It provides a practical application of checking for prime numbers in a list and generating prime numbers up to a limit.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, limit=10) -> bool:\n    return len(set(s)) == len(s) and len(s) <= limit\ndef g(limit=10):\n    import string\n    import random\n    unique_chars = random.sample(string.ascii_lowercase, limit)\n    return ''.join(unique_chars)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations, Importing Modules (Itertools, etc.)",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, limit=10) -> bool:\n    return len(set(s)) == len(s) and len(s) <= limit",
        "solution_func": "def g(limit=10):\n    import string\n    import random\n    unique_chars = random.sample(string.ascii_lowercase, limit)\n    return ''.join(unique_chars)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to create a function that generates a random string of unique characters and checks if the string has no duplicate characters and is within a specified length limit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, random generation, and set operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(strings: List[str], length=5) -> bool:\n    return all(len(s) > length for s in strings)\ndef g(length=5):\n    import random\n    return [random.choice(['puzzle', 'python', 'programming']) * (length + i) for i in range(3)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and random selection of strings based on a given length parameter.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(strings: List[str], length=5) -> bool:\n    return all(len(s) > length for s in strings)",
        "solution_func": "def g(length=5):\n    import random\n    return [random.choice(['puzzle', 'python', 'programming']) * (length + i) for i in range(3)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function f that checks if all strings in a list have a length greater than a specified value. The solution function g generates a list of strings with varying lengths based on a random choice from a set of words."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, string lengths, and random selection. Students need to understand how to define functions, use list comprehensions, and apply the all() function to check a condition for all elements in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return len(d) == len(set(d.keys()))\ndef g():\n    import string\n    import random\n    keys = random.sample(string.ascii_lowercase, 5)\n    return {k: k.upper() for k in keys}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, random sampling, and assertion testing.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return len(d) == len(set(d.keys()))",
        "solution_func": "def g():\n    import string\n    import random\n    keys = random.sample(string.ascii_lowercase, 5)\n    return {k: k.upper() for k in keys}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires creating a dictionary with 5 random keys from lowercase letters and their corresponding uppercase values. The challenge is to check if the dictionary has unique keys."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a dictionary with unique keys and their uppercase values. The solution function creates such a dictionary and the puzzle function checks if the keys are unique. The puzzle is suitable for teaching Python concepts like dictionaries, sets, and random module usage.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target_sum=15) -> bool:\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target_sum=15):\n    return [i for i in range(1, target_sum) if target_sum - i in range(1, target_sum)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that returns True if the word is a palindrome (reads the same forwards and backwards). The solution function g() returns the word 'racecar' and asserts that f(g()) is True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 7\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm. It does not directly relate to any specific topic from the list provided.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target_sum=15) -> bool:\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target_sum=15):\n    return [i for i in range(1, target_sum) if target_sum - i in range(1, target_sum)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 7",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number or not, and a function g() that returns the number 7. The puzzle requires checking if the output of function g() satisfies the condition of function f() being True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list, target=3) -> bool:\n    return arr.count(target) > 0\n\ndef g(target=3):\n    return [1, 2, 3, 3, 4, 5, 3]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for the presence of a target element in the list.",
        "idx_generation": 11,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target_sum=15) -> bool:\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target_sum=15):\n    return [i for i in range(1, target_sum) if target_sum - i in range(1, target_sum)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(arr: list, target=3) -> bool:\n    return arr.count(target) > 0",
        "solution_func": "def g(target=3):\n    return [1, 2, 3, 3, 4, 5, 3]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a target element is present in a list, and a function g that returns a list with multiple occurrences of the target element. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves understanding list operations and function calls.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return \"Python\" in text\n\ndef g():\n    return \"I love coding in Python!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return \"Python\" in text",
        "solution_func": "def g():\n    return \"I love coding in Python!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if the string 'Python' is present in the output of a function g that returns 'I love coding in Python!'"
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a specific string is present in the output of a function. It tests the understanding of string manipulation and function return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return avg > 50\n\ndef g():\n    return [70, 80, 90, 60, 40, 30]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic as it calculates the average of a list of numbers and checks if it is greater than 50.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return avg > 50",
        "solution_func": "def g():\n    return [70, 80, 90, 60, 40, 30]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that calculates the average of a list of numbers and returns True if the average is greater than 50. The solution function g returns a list of numbers and the assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves calculating the average of a list of numbers and comparing it to a threshold value. It tests the understanding of list manipulation and comparison operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict) -> bool:\n    return \"name\" in data and isinstance(data[\"name\"], str)\n\ndef g():\n    return {\"id\": 123, \"name\": \"Alice\", \"age\": 25}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to dictionary manipulation, data validation, and type checking.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(data: dict) -> bool:\n    return \"name\" in data and isinstance(data[\"name\"], str)",
        "solution_func": "def g():\n    return {\"id\": 123, \"name\": \"Alice\", \"age\": 25}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(data: dict) -> bool that checks if a dictionary contains a key 'name' with a string value. The function g() returns a dictionary with 'name' key and a string value. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks for a specific key and value type in a dictionary, and then verifying the function with a provided dictionary.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], unique_values={1, 2, 3, 4, 5}) -> bool:\n    return len(nums) == len(unique_values) and len(set(nums)) == len(nums)\n    \ndef g(input_list=[1, 2, 3, 4, 5]):\n    return list(set(input_list))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for unique values in a list and using set operations in Python.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], unique_values={1, 2, 3, 4, 5}) -> bool:\n    return len(nums) == len(unique_values) and len(set(nums)) == len(nums)",
        "solution_func": "def g(input_list=[1, 2, 3, 4, 5]):\n    return list(set(input_list))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that takes a list of integers and returns True if the list contains exactly the unique values {1, 2, 3, 4, 5}. The solution function should return a list of unique values from the input list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for uniqueness in a list of integers and comparing it to a predefined set of unique values. The solution function uses set operations to return unique values from the input list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='ABCDEF') -> bool:\n    return len(s) == len(pattern) and all(c in pattern for c in s)\n\ndef g(pattern='ABCDEF'):\n    return pattern\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='ABCDEF') -> bool:\n    return len(s) == len(pattern) and all(c in pattern for c in s)",
        "solution_func": "def g(pattern='ABCDEF'):\n    return pattern",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string has the same length as a specified pattern and contains only characters from the pattern. The function g returns the specified pattern. The puzzle tests whether f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, string manipulation, and boolean comparisons in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(values: List[int], target_sum=15, max_value=10) -> bool:\n    assert sum(values) <= target_sum\n    assert all((v <= max_value for v in values))\n    return sum(values) == target_sum\n\ndef g(target_sum=15, max_value=10):\n    values = []\n    while sum(values) < target_sum:\n        values.append(min(target_sum - sum(values), max_value))\n    return values\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, Conditional Logic, and List Operations.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(values: List[int], target_sum=15, max_value=10) -> bool:\n    assert sum(values) <= target_sum\n    assert all((v <= max_value for v in values))\n    return sum(values) == target_sum",
        "solution_func": "def g(target_sum=15, max_value=10):\n    values = []\n    while sum(values) < target_sum:\n        values.append(min(target_sum - sum(values), max_value))\n    return values",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if the sum of a list of integers is equal to a target sum, and g generates a list of integers that sum up to the target sum with each integer not exceeding a maximum value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, conditional statements, and function definitions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(lst: List[int]) -> bool:\n    return len(lst) != len(set(lst))\ndef g(n=5):\n    return [1] * n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Operations, Set Operations, and Function Definition.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(lst: List[int]) -> bool:\n    return len(lst) != len(set(lst))",
        "solution_func": "def g(n=5):\n    return [1] * n",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function f checks if there are any duplicate elements in the list. The solution function g generates a list of 1s with a specified length. The assertion checks if the puzzle function returns True when applied to the solution function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for duplicate elements in a list, which is a common programming concept. The solution function generates a list with a specified length, which is a good exercise in list manipulation. The assertion tests the correctness of the solution function.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\ndef f(d: Dict, key='name') -> bool:\n    return key in d\ndef g(key='name', value='Alice'):\n    return {key: value}\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking for the existence of a key in a dictionary.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Dict\ndef f(d: Dict, key='name') -> bool:\n    return key in d",
        "solution_func": "def g(key='name', value='Alice'):\n    return {key: value}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a specified key exists in a dictionary, and a function g that creates a dictionary with a specified key-value pair. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary operations and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_sum: int, arr=[4, 9, 1, 3, 8, 7]) -> bool:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum\n\ndef g(arr=[4, 9, 1, 3, 8, 7]):\n    if len(arr) <= 2:\n        return sum(arr)\n    incl = arr[0]\n    excl = 0\n    for num in arr[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dynamic programming to find the maximum sum of non-adjacent elements in an array.",
        "idx_generation": 12,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(max_sum: int, arr=[4, 9, 1, 3, 8, 7]) -> bool:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum",
        "solution_func": "def g(arr=[4, 9, 1, 3, 8, 7]):\n    if len(arr) <= 2:\n        return sum(arr)\n    incl = arr[0]\n    excl = 0\n    for num in arr[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if the maximum sum of a subsequence in an array matches a given value, and g calculates the maximum sum of a subsequence in the array."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves dynamic programming concepts and requires understanding of subsequence sums. It is suitable for teaching Python programming to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(inds: List[int], s='puzzlesarefun', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='puzzlesarefun', target=''):\n    indices = []\n    for i in range(-len(s), len(s)):\n        for j in range(i, len(s)):\n            for k in range(1, len(s)):\n                try:\n                    if s[i:j:k] == target:\n                        indices = [i, j, k]\n                        break\n                except (IndexError, ValueError):\n                    pass\n    return indices\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(inds: List[int], s='puzzlesarefun', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target",
        "solution_func": "def g(s='puzzlesarefun', target=''):\n    indices = []\n    for i in range(-len(s), len(s)):\n        for j in range(i, len(s)):\n            for k in range(1, len(s)):\n                try:\n                    if s[i:j:k] == target:\n                        indices = [i, j, k]\n                        break\n                except (IndexError, ValueError):\n                    pass\n    return indices",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of integers and two strings as input, and checks if a specific slicing operation on one of the strings matches the target string. The solution function g iterates through possible indices to find the correct slicing operation that matches the target string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding slicing in Python strings and using nested loops to iterate through possible indices. The solution function g iterates through all possible indices to find the correct slicing operation that matches the target string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(inds: List[int], s='pythonpuzzle', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='pythonpuzzle', target=''):\n    def find_indices(s, target, i, j, k):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n        if k < len(s):\n            return find_indices(s, target, i, j, k+1)\n        if j < len(s):\n            return find_indices(s, target, i, j+1, 1)\n        if i < len(s):\n            return find_indices(s, target, i+1, 0, 1)\n        return []\n    return find_indices(s, target, 0, 0, 1)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Recursion, Exception Handling",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(inds: List[int], s='pythonpuzzle', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target",
        "solution_func": "def g(s='pythonpuzzle', target=''):\n    def find_indices(s, target, i, j, k):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n        if k < len(s):\n            return find_indices(s, target, i, j, k+1)\n        if j < len(s):\n            return find_indices(s, target, i, j+1, 1)\n        if i < len(s):\n            return find_indices(s, target, i+1, 0, 1)\n        return []\n    return find_indices(s, target, 0, 0, 1)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a specific substring can be extracted from a given string using indices, and g finds the indices of the substring in the string using a recursive approach."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list slicing in Python, recursion, and handling exceptions. It also tests the ability to define functions and use them to solve a specific problem.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(inds: List[int], s='programmingisfun', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='programmingisfun', target=''):\n    i, j, k = 0, 0, 1\n    while i < len(s):\n        while j < len(s):\n            while k < len(s):\n                try:\n                    if s[i:j:k] == target:\n                        return [i, j, k]\n                except (IndexError, ValueError):\n                    pass\n                k += 1\n            j += 1\n        i += 1\n    return []\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Exception Handling, Brute Force Search",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(inds: List[int], s='programmingisfun', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target",
        "solution_func": "def g(s='programmingisfun', target=''):\n    i, j, k = 0, 0, 1\n    while i < len(s):\n        while j < len(s):\n            while k < len(s):\n                try:\n                    if s[i:j:k] == target:\n                        return [i, j, k]\n                except (IndexError, ValueError):\n                    pass\n                k += 1\n            j += 1\n        i += 1\n    return []",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a specific substring of a given string matches a target string using indices provided as input, and g iterates through all possible combinations of indices to find the correct substring that matches the target string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and nested loops to iterate through indices to find the correct substring. It tests the student's understanding of string slicing and nested loops in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations, Probability and Statistics, Importing Modules (Itertools, etc.)",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 5\n        n -= 5 + (n - 5) // 6\n    return n > 0 and n % 6 == 5\ndef g():\n    m = 5\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 5:\n                break\n            n -= 5 + (n - 5) // 6\n        if n > 0 and n % 6 == 5:\n            return m\n        m += 6\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)",
        "solution_func": "def g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if a given string contains only vowels, and a function g() that generates a random string and returns it only if it contains only vowels. The assert statement checks if function f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with strings, sets, random module, list comprehension, and assert statement in Python. It tests the understanding of string manipulation, set operations, and random generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(isinstance(elem, int) for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(isinstance(elem, int) for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all elements in a list are integers and generating a random list of integers to test the function.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 5\n        n -= 5 + (n - 5) // 6\n    return n > 0 and n % 6 == 5\ndef g():\n    m = 5\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 5:\n                break\n            n -= 5 + (n - 5) // 6\n        if n > 0 and n % 6 == 5:\n            return m\n        m += 6\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(isinstance(elem, int) for elem in lst)",
        "solution_func": "def g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(isinstance(elem, int) for elem in new_list):\n            return new_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated list contains only integer elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires generating a random list of integers and checking if all elements in the list are integers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list) -> bool:\n    return all(len(row) == len(matrix) for row in matrix)\n\ndef g():\n    import random\n    while True:\n        size = random.randint(2, 5)\n        new_matrix = [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n        if all(len(row) == len(new_matrix) for row in new_matrix):\n            return new_matrix\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 5\n        n -= 5 + (n - 5) // 6\n    return n > 0 and n % 6 == 5\ndef g():\n    m = 5\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 5:\n                break\n            n -= 5 + (n - 5) // 6\n        if n > 0 and n % 6 == 5:\n            return m\n        m += 6\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(matrix: list) -> bool:\n    return all(len(row) == len(matrix) for row in matrix)",
        "solution_func": "def g():\n    import random\n    while True:\n        size = random.randint(2, 5)\n        new_matrix = [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n        if all(len(row) == len(new_matrix) for row in new_matrix):\n            return new_matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated square matrix has equal number of rows and columns."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random square matrix and checking if it has an equal number of rows and columns.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return digit_sum == digit_product\n\ndef g():\n    n = 10\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        digit_product = 1\n        for d in str(n):\n            digit_product *= int(d)\n        if digit_sum == digit_product:\n            return n\n        n += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and Brute Force Search.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return digit_sum == digit_product",
        "solution_func": "def g():\n    n = 10\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        digit_product = 1\n        for d in str(n):\n            digit_product *= int(d)\n        if digit_sum == digit_product:\n            return n\n        n += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if the sum of the digits of a number is equal to the product of its digits. Another function g() iterates through numbers starting from 10 until it finds a number where the sum of digits is equal to the product of digits. The assertion checks if the solution function g() satisfies the condition of function f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge related to digit manipulation in Python. It can be used to teach students about working with digits in numbers and writing functions to solve such challenges.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    digit_sum_cubed = sum(int(d)**3 for d in str(n))\n    return digit_sum_cubed == n\n\ndef g():\n    n = 1\n    while True:\n        digit_sum_cubed = sum(int(d)**3 for d in str(n))\n        if digit_sum_cubed == n:\n            return n\n        n += 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, string manipulation, and conditional logic.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    digit_sum_cubed = sum(int(d)**3 for d in str(n))\n    return digit_sum_cubed == n",
        "solution_func": "def g():\n    n = 1\n    while True:\n        digit_sum_cubed = sum(int(d)**3 for d in str(n))\n        if digit_sum_cubed == n:\n            return n\n        n += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if the sum of the cubes of the digits of a number is equal to the number itself. The solution function g() iterates through numbers to find the first number that satisfies this condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge related to digit manipulation and comparison. It can be used to teach students about loops, conditionals, and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return str(n) == str(n)[::-1] and str(n + 1) == str(n + 1)[::-1]\n\ndef g():\n    n = 1\n    while True:\n        if str(n) == str(n)[::-1] and str(n + 1) == str(n + 1)[::-1]:\n            return n\n        n += 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return str(n) == str(n)[::-1] and str(n + 1) == str(n + 1)[::-1]",
        "solution_func": "def g():\n    n = 1\n    while True:\n        if str(n) == str(n)[::-1] and str(n + 1) == str(n + 1)[::-1]:\n            return n\n        n += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the smallest number where both the number and the number plus one are palindromes."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a number and the number plus one are palindromes, and finding the smallest number that satisfies this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst, n=5) -> bool:\n    return lst == lst[::-1]\ndef g(n=5):\n    return list(range(1, n+1)) + list(range(n-1, 0, -1))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and list operations.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst, n=5) -> bool:\n    return lst == lst[::-1]",
        "solution_func": "def g(n=5):\n    return list(range(1, n+1)) + list(range(n-1, 0, -1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst, n=5) that checks if a list is equal to its reverse, and a function g(n=5) that generates a list of numbers in a specific pattern. The puzzle tests whether the list generated by g() satisfies the condition of f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, range function, and list comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    n = 0\n    while True:\n        s = str(n)\n        if s == s[::-1]:\n            return s\n        n += 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d)**2 for d in str(n))\n    if digit_sum < 2:\n        return False\n    for i in range(2, int(digit_sum ** 0.5) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 100\n    while True:\n        digit_sum = sum(int(d)**2 for d in str(n))\n        if digit_sum < 2:\n            n += 1\n            continue\n        is_prime = True\n        for i in range(2, int(digit_sum ** 0.5) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n += 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    n = 0\n    while True:\n        s = str(n)\n        if s == s[::-1]:\n            return s\n        n += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s) that checks if a given string is a palindrome, and a function g() that finds the smallest palindrome number by iterating through numbers until a palindrome is found."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and iteration in Python to find and check for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    n = 1\n    while True:\n        if str(n) == str(n)[::-1]:\n            return str(n)\n        n += 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d)**2 for d in str(n))\n    if digit_sum < 2:\n        return False\n    for i in range(2, int(digit_sum ** 0.5) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 100\n    while True:\n        digit_sum = sum(int(d)**2 for d in str(n))\n        if digit_sum < 2:\n            n += 1\n            continue\n        is_prime = True\n        for i in range(2, int(digit_sum ** 0.5) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n += 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    n = 1\n    while True:\n        if str(n) == str(n)[::-1]:\n            return str(n)\n        n += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given number is a palindrome by comparing it with its reverse string representation."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome. The solution function g() iterates through numbers to find the smallest palindrome number and returns it. The assertion at the end verifies that the solution function g() returns a palindrome number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    n = 1\n    while True:\n        lst = list(range(1, n+1))\n        if len(lst) == len(set(lst)):\n            return lst\n        n += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list contains unique elements and generating a list with unique elements.",
        "idx_generation": 13,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d)**2 for d in str(n))\n    if digit_sum < 2:\n        return False\n    for i in range(2, int(digit_sum ** 0.5) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 100\n    while True:\n        digit_sum = sum(int(d)**2 for d in str(n))\n        if digit_sum < 2:\n            n += 1\n            continue\n        is_prime = True\n        for i in range(2, int(digit_sum ** 0.5) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n += 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g():\n    n = 1\n    while True:\n        lst = list(range(1, n+1))\n        if len(lst) == len(set(lst)):\n            return lst\n        n += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of consecutive integers where each integer appears only once in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of consecutive integers contains unique elements. The solution generates lists of consecutive integers until it finds one where each integer appears only once.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, half=\"aba\") -> bool:\n    return s == half * 2 and len(s) % 2 == 0\n\ndef g(half=\"aba\"):\n    return half + half\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 14,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, half=\"aba\") -> bool:\n    return s == half * 2 and len(s) % 2 == 0",
        "solution_func": "def g(half=\"aba\"):\n    return half + half",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is equal to a specific string repeated twice and has an even length. The solution function g returns the specific string repeated twice. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, function parameters, and boolean comparisons in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(s.isupper() for s in lst)\n\ndef g():\n    import random\n    while True:\n        lst = [\"\".join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ', k=3)) for _ in range(5)]\n        if all(s.isupper() for s in lst):\n            return lst\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 14,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(dct: dict) -> bool:\n    return all(val % 2 == 0 for val in dct.values())\n    \ndef g():\n    import random\n    while True:\n        dct = {num: num ** 2 for num in range(2, 11, 2)}\n        if all(val % 2 == 0 for val in dct.values()):\n            return dct\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(s.isupper() for s in lst)",
        "solution_func": "def g():\n    import random\n    while True:\n        lst = [\"\".join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ', k=3)) for _ in range(5)]\n        if all(s.isupper() for s in lst):\n            return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 5 random strings of length 3, checking if all strings are uppercase, and returning the list if they are. The puzzle is to write a function that checks if all strings in a given list are uppercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random strings and checking if they are all uppercase. It can be used to teach students about list comprehension, string manipulation, and boolean expressions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 14,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return avg > 50\n\ndef g():\n    return [70, 80, 90, 60, 40, 30]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns the text 'radar'. The assert statement confirms that the function f returns True when applied to the output of function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime or not.",
        "idx_generation": 14,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return avg > 50\n\ndef g():\n    return [70, 80, 90, 60, 40, 30]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num: int) -> bool and g(), where f checks if a given number is a prime number and g returns the number 17. The puzzle tests whether the function f correctly identifies 17 as a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a prime number using the function f, and then testing this function with the number 17 using function g. The assertion checks if f(g()) returns True for the number 17, which is a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom collections import Counter\n\ndef f(elements: list) -> bool:\n    count = Counter(elements)\n    for val in count.values():\n        if val > 1:\n            return True\n    return False\n\ndef g():\n    return [5, 3, 7, 5, 2, 9]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, and importing modules (collections).",
        "idx_generation": 14,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return avg > 50\n\ndef g():\n    return [70, 80, 90, 60, 40, 30]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from collections import Counter\n\ndef f(elements: list) -> bool:\n    count = Counter(elements)\n    for val in count.values():\n        if val > 1:\n            return True\n    return False",
        "solution_func": "def g():\n    return [5, 3, 7, 5, 2, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that checks if there are any duplicate elements in a given list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the Counter class from the collections module to count the occurrences of elements in a list and then checking if any element occurs more than once.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    reversed_text = text[::-1]\n    return text.lower() == reversed_text.lower()\n\ndef g():\n    \"\"\"\n    This solution generates a palindrome string.\n    \"\"\"\n    return \"Madam\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 14,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, result=120) -> bool:\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n    return factorial == result\n\ndef g(result=120):\n    \"\"\"\n    This solution calculates the factorial of a given number.\n    \"\"\"\n    return 5\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    reversed_text = text[::-1]\n    return text.lower() == reversed_text.lower()",
        "solution_func": "def g():\n    \"\"\"\n    This solution generates a palindrome string.\n    \"\"\"\n    return \"Madam\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome, ignoring case sensitivity."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to write a function that checks if a given string is a palindrome, regardless of case sensitivity. The provided solution generates a palindrome string and passes the test case.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    \"\"\"\n    This solution provides a prime number.\n    \"\"\"\n    return 7\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking whether a given number is a prime number or not.",
        "idx_generation": 14,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, result=120) -> bool:\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n    return factorial == result\n\ndef g(result=120):\n    \"\"\"\n    This solution calculates the factorial of a given number.\n    \"\"\"\n    return 5\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    \"\"\"\n    This solution provides a prime number.\n    \"\"\"\n    return 7",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g() that returns the number 7. The assertion checks if the output of g() satisfies the condition of being a prime number according to f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and how to check for primality in Python. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a word is a palindrome.",
        "idx_generation": 14,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that returns True if the word is a palindrome (reads the same forwards and backwards), and a function g() that returns the word 'radar'. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    \"\"\"\n    This solution checks if a string is a palindrome.\n    \"\"\"\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a string is a palindrome.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, max_value=100) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, min(num, max_value)):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(max_value=100):\n    \"\"\"\n    This solution uses trial division to check if a number is prime.\n    \"\"\"\n    return 17\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    \"\"\"\n    This solution checks if a string is a palindrome.\n    \"\"\"\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a solution function g() that returns the string 'radar'. The assertion statement checks if the solution function g() correctly identifies 'radar' as a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string, pattern='abc') -> bool:\n    return pattern in string\n\ndef g(length=10, pattern='abc'):\n    return pattern * length\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(string, pattern='abc') -> bool:\n    return pattern in string",
        "solution_func": "def g(length=10, pattern='abc'):\n    return pattern * length",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given pattern is present in a string, with a default pattern of 'abc'. The solution function g generates a string by repeating a pattern a specified number of times, with default length 10, and asserts that f applied to g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, default arguments, string manipulation, and function invocation. It tests the student's ability to define functions, use default arguments, and apply functions to achieve a specific outcome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(pairs, target_pair=('x', 3)) -> bool:\n    return target_pair in pairs\n\ndef g(size=5, element='x', value=3, target_pair=('x', 3)):\n    return [(element, value)] * size\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a target pair exists in a list of pairs generated by a function.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(pairs, target_pair=('x', 3)) -> bool:\n    return target_pair in pairs",
        "solution_func": "def g(size=5, element='x', value=3, target_pair=('x', 3)):\n    return [(element, value)] * size",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a target pair is in a list of pairs, and a function g that generates a list of pairs based on input parameters. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves understanding function parameters, list generation, and boolean comparison.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(elem % 2 == 0 for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(elem % 2 == 0 for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking if all elements in the list are even numbers.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(isinstance(elem, int) for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(isinstance(elem, int) for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(elem % 2 == 0 for elem in lst)",
        "solution_func": "def g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(elem % 2 == 0 for elem in new_list):\n            return new_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all elements in a list are even numbers, and a function g() that generates a random list of numbers and returns it only if all elements are even. The puzzle tests the implementation of the function f by asserting that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, random number generation, and the assert statement in Python. It also tests the ability to define functions and use them in conjunction to solve a problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if len(new_list) == len(set(new_list)):\n            return new_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list contains only unique elements by comparing its length with the length of a set created from the list. The solution generates a random list of integers within a specified range and checks if it contains only unique elements. The assertion validates that the solution satisfies the condition of the puzzle.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(isinstance(elem, int) for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(isinstance(elem, int) for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if len(new_list) == len(set(new_list)):\n            return new_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random list of numbers within a range and checking if the list contains unique elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves creating a random list of numbers and checking if all elements in the list are unique. The solution function generates a random list and returns it only if all elements are unique.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == sorted(lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if new_list == sorted(new_list):\n            return new_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and generating a random list that is already sorted. This requires knowledge of sorting algorithms and random number generation in Python.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(isinstance(elem, int) for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(isinstance(elem, int) for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == sorted(lst)",
        "solution_func": "def g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if new_list == sorted(new_list):\n            return new_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated list is sorted or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand list sorting and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(lst: list) -> bool:\n    return all(is_prime(elem) for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(is_prime(elem) for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers in a list using a function and generating random lists to test the function.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(isinstance(elem, int) for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(isinstance(elem, int) for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(lst: list) -> bool:\n    return all(is_prime(elem) for elem in lst)",
        "solution_func": "def g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(is_prime(elem) for elem in new_list):\n            return new_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if all elements in a randomly generated list are prime numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand prime numbers and how to check if a number is prime. They also need to generate random lists and apply the prime number check to each element in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(idx: int, lst=[1, 1, 2, 3, 5, 8, 13]) -> bool:\n    if idx < 2:\n        return False\n    return lst[idx] == lst[idx - 1] + lst[idx - 2]\n\ndef g(lst=[1, 1, 2, 3, 5, 8, 13]):\n    for i in range(2, len(lst)):\n        if lst[i] == lst[i - 1] + lst[i - 2]:\n            return i\n    return -1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as Recursion, Conditional Logic, and Mathematical Operations.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], s='programmingisfun', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='programmingisfun', target=''):\n    i, j, k = 0, 0, 1\n    while i < len(s):\n        while j < len(s):\n            while k < len(s):\n                try:\n                    if s[i:j:k] == target:\n                        return [i, j, k]\n                except (IndexError, ValueError):\n                    pass\n                k += 1\n            j += 1\n        i += 1\n    return []\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(idx: int, lst=[1, 1, 2, 3, 5, 8, 13]) -> bool:\n    if idx < 2:\n        return False\n    return lst[idx] == lst[idx - 1] + lst[idx - 2]",
        "solution_func": "def g(lst=[1, 1, 2, 3, 5, 8, 13]):\n    for i in range(2, len(lst)):\n        if lst[i] == lst[i - 1] + lst[i - 2]:\n            return i\n    return -1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a specific index in a list follows the Fibonacci sequence pattern, and a function g that finds the index in the list where the Fibonacci sequence pattern starts. The assertion at the end checks if function f applied to the result of function g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the Fibonacci sequence and implementing functions to check and find the pattern in a given list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    return all(lst[i] == lst[i-1] + 1 for i in range(1, len(lst)))\n\ndef g():\n    num_list = [1, 2, 4, 5, 7, 8]\n    for i in range(1, len(num_list)):\n        if num_list[i] != num_list[i-1] + 1:\n            num_list[i] = num_list[i-1] + 1\n    return num_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of integers is consecutive, and the solution modifies the list to make it consecutive if it's not. This involves concepts of list manipulation, iteration, and conditional logic.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], s='programmingisfun', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='programmingisfun', target=''):\n    i, j, k = 0, 0, 1\n    while i < len(s):\n        while j < len(s):\n            while k < len(s):\n                try:\n                    if s[i:j:k] == target:\n                        return [i, j, k]\n                except (IndexError, ValueError):\n                    pass\n                k += 1\n            j += 1\n        i += 1\n    return []\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int]) -> bool:\n    return all(lst[i] == lst[i-1] + 1 for i in range(1, len(lst)))",
        "solution_func": "def g():\n    num_list = [1, 2, 4, 5, 7, 8]\n    for i in range(1, len(num_list)):\n        if num_list[i] != num_list[i-1] + 1:\n            num_list[i] = num_list[i-1] + 1\n    return num_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a list of integers is consecutive, and then write a solution function that modifies the list to make it consecutive if it is not already."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, iteration, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pal=\"racecar\") -> bool:\n    return s == s[::-1]\n\ndef g(pal=\"racecar\") -> str:\n    def reverse(s):\n        if len(s) == 0:\n            return s\n        else:\n            return reverse(s[1:]) + s[0]\n    return reverse(pal)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and recursion.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pal=\"racecar\") -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(pal=\"racecar\") -> str:\n    def reverse(s):\n        if len(s) == 0:\n            return s\n        else:\n            return reverse(s[1:]) + s[0]\n    return reverse(pal)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f(s: str, pal=\"racecar\") -> bool and g(pal=\"racecar\") -> str. Function f checks if a given string is a palindrome, while function g returns the reverse of a given string. The assert statement checks if the output of g passed to f results in True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, recursion, and function composition in Python. It tests the student's ability to define functions, handle string operations, and ensure correct function composition for the desired output.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(costs: List[int], budget=100, max_items=5, options=[25, 30, 15, 40, 20]) -> bool:\n    for c in costs:\n        assert c in options\n    return len(costs) <= max_items and sum(costs) <= budget\ndef g(budget=100, max_items=5, options=[25, 30, 15, 40, 20]):\n    from itertools import combinations_with_replacement\n    for n in range(max_items + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) <= budget:\n                return list(c)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, iteration, and itertools module for combinations_with_replacement. It also includes conditional logic and assertion for input validation.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(costs: List[int], budget=100, max_items=5, options=[25, 30, 15, 40, 20]) -> bool:\n    for c in costs:\n        assert c in options\n    return len(costs) <= max_items and sum(costs) <= budget",
        "solution_func": "def g(budget=100, max_items=5, options=[25, 30, 15, 40, 20]):\n    from itertools import combinations_with_replacement\n    for n in range(max_items + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) <= budget:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of costs, a budget, a maximum number of items, and a list of options. The function checks if the total cost of the items in the list is within the budget and the number of items is within the maximum limit. The solution function g generates combinations of items from the options list that meet the budget constraint and returns a list of selected items."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given solution function g correctly selects items within the budget and maximum item limit. The puzzle tests the understanding of list manipulation, combinations, and budget constraints in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(sequence: List[int], common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] - sequence[i-1] == common_diff\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\ndef g(common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] - c[i] == common_diff for i in range(len(c)-1)):\n                return list(c)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, iteration, assertion, and itertools combinations. It also includes topics such as conditional logic, importing modules (Itertools), and algorithm optimization.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(sequence: List[int], common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] - sequence[i-1] == common_diff\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit",
        "solution_func": "def g(common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] - c[i] == common_diff for i in range(len(c)-1)):\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers satisfies a specific condition based on a common difference, range limit, and options list. The solution function g generates combinations of numbers from the options list that meet the common difference condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation, conditions, and itertools in Python. The solution function uses combinations to find a list that satisfies the conditions set by the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int], options=[2, 4, 5, 8, 10, 12]) -> bool:\n    product = 1\n    for num in numbers:\n        assert num in options\n        product *= num\n    return product ** 0.5 % 1 == 0\ndef g(options=[2, 4, 5, 8, 10, 12]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            product = 1\n            for num in c:\n                product *= num\n            if product ** 0.5 % 1 == 0:\n                return list(c)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, importing modules (Itertools), and permutations and combinations.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int], options=[2, 4, 5, 8, 10, 12]) -> bool:\n    product = 1\n    for num in numbers:\n        assert num in options\n        product *= num\n    return product ** 0.5 % 1 == 0",
        "solution_func": "def g(options=[2, 4, 5, 8, 10, 12]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            product = 1\n            for num in c:\n                product *= num\n            if product ** 0.5 % 1 == 0:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and checks if the product of the integers in the list is a perfect square. The function g generates combinations of numbers from a given set of options and returns the combination that satisfies the condition of f. The assertion at the end checks if the solution g satisfies the condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the product of numbers in a list and check if it is a perfect square. It also requires knowledge of generating combinations of numbers using itertools in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: list, lst=[-2, 5, 0, -3, 8, 1]) -> bool:\n    return all(num > 0 for num in result)\ndef g(lst=[-2, 5, 0, -3, 8, 1]):\n    return [num for num in lst if num > 0]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: list, lst=[-2, 5, 0, -3, 8, 1]) -> bool:\n    return all(num > 0 for num in result)",
        "solution_func": "def g(lst=[-2, 5, 0, -3, 8, 1]):\n    return [num for num in lst if num > 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define a function that filters out positive numbers from a given list and returns a new list containing only the positive numbers. The function should then check if all numbers in the resulting list are greater than 0."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, filtering elements based on a condition, and using the 'all' function to check a condition for all elements in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return all(is_prime(n) for n in nums)\n\ndef g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers are prime numbers using a function and then asserting the result with a predefined list of prime numbers.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return all(is_prime(n) for n in nums)",
        "solution_func": "def g():\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if all numbers in a list are prime numbers, and a function g that returns a list of prime numbers. The puzzle requires verifying that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(words: List[str]) -> bool:\n    return all(word.isalpha() for word in words)\n\ndef g():\n    import random\n    import string\n    return [''.join(random.choice(string.ascii_letters) for _ in range(random.randint(3, 8))) for _ in range(5)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and random generation of strings using the `random` and `string` modules in Python.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(words: List[str]) -> bool:\n    return all(word.isalpha() for word in words)",
        "solution_func": "def g():\n    import random\n    import string\n    return [''.join(random.choice(string.ascii_letters) for _ in range(random.randint(3, 8))) for _ in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of random strings and checking if all the strings consist of alphabetic characters only."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, random module, and string module in Python to generate random strings and then checking if all the strings are alphabetic.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    vowels = \"AEIOUaeiou\"\n    return len(s) >= 5 and all(c.isalpha() for c in s) and sum(c in vowels for c in s) >= 2\n\ndef g():\n    import random\n    import string\n    vowels = \"AEIOUaeiou\"\n    while True:\n        s = ''.join(random.choices(string.ascii_letters, k=random.randint(5, 8)))\n        if len(s) >= 5 and all(c.isalpha() for c in s) and sum(c in vowels for c in s) >= 2:\n            return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic, Importing Modules",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return len(lst) >= 3 and all(isinstance(x, int) for x in lst)\ndef g():\n    import random\n    while True:\n        lst = random.choices(range(1, 10), k=random.randint(3, 6))\n        if len(lst) >= 3 and all(isinstance(x, int) for x in lst):\n            return lst\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    vowels = \"AEIOUaeiou\"\n    return len(s) >= 5 and all(c.isalpha() for c in s) and sum(c in vowels for c in s) >= 2",
        "solution_func": "def g():\n    import random\n    import string\n    vowels = \"AEIOUaeiou\"\n    while True:\n        s = ''.join(random.choices(string.ascii_letters, k=random.randint(5, 8)))\n        if len(s) >= 5 and all(c.isalpha() for c in s) and sum(c in vowels for c in s) >= 2:\n            return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random string of letters and checking if the string has a length of at least 5, consists only of alphabetic characters, and contains at least 2 vowels. The solution function generates random strings until a valid string meeting the criteria is found."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, random generation, and condition checking in Python. It tests the understanding of string operations, random module usage, and logical conditions in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) >= 2 and sum(lst) > 5\n\ndef g():\n    import random\n    while True:\n        lst = [random.uniform(1, 5) for _ in range(random.randint(2, 4))]\n        if len(lst) >= 2 and sum(lst) > 5:\n            return lst\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, Importing Modules (Itertools, etc.), and Probability and Statistics.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return len(lst) >= 3 and all(isinstance(x, int) for x in lst)\ndef g():\n    import random\n    while True:\n        lst = random.choices(range(1, 10), k=random.randint(3, 6))\n        if len(lst) >= 3 and all(isinstance(x, int) for x in lst):\n            return lst\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) >= 2 and sum(lst) > 5",
        "solution_func": "def g():\n    import random\n    while True:\n        lst = [random.uniform(1, 5) for _ in range(random.randint(2, 4))]\n        if len(lst) >= 2 and sum(lst) > 5:\n            return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random list of numbers and checking if the list has at least 2 elements and the sum of the elements is greater than 5."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random list of numbers and checking if it meets certain conditions. The solution function generates such a list and returns it if it satisfies the conditions. The puzzle function checks if the generated list meets the specified criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], target='hello', target_count=3) -> bool:\n    assert strings.count(target) == target_count\n    return all((len(s) <= 10 for s in strings))\n\ndef g(target='hello', target_count=3):\n    return [target] * target_count\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 15,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], target='hello', target_count=3) -> bool:\n    assert strings.count(target) == target_count\n    return all((len(s) <= 10 for s in strings))",
        "solution_func": "def g(target='hello', target_count=3):\n    return [target] * target_count",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings, checks if a specific target string appears a certain number of times in the list, and then checks if all strings in the list have a length less than or equal to 10. The solution function g generates a list containing the target string repeated a specified number of times."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, string comparisons, and list comprehensions in Python. It also requires implementing a function that satisfies specific conditions based on the input list and target string.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n)\n\ndef g():\n    import random\n    while True:\n        number = random.randint(10, 100)\n        if sympy.isprime(number):\n            return number\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime using the sympy library and generating random numbers until a prime number is found. The topics involved in this puzzle are prime numbers, random number generation, and importing modules.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n)",
        "solution_func": "def g():\n    import random\n    while True:\n        number = random.randint(10, 100)\n        if sympy.isprime(number):\n            return number",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a random number between 10 and 100, checking if it is a prime number using sympy library, and returning the prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and the usage of the sympy library in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport string\n\ndef f(sentence: str) -> bool:\n    return set(string.ascii_lowercase) <= set(sentence.lower())\n\ndef g() -> str:\n    return ''.join(set(string.ascii_lowercase))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    if not nums:\n        return False\n    return all(n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1)) for n in nums)\ndef g(start=2, end=20):\n    return [num for num in range(start, end) if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1))]\nassert f(g()) == True\n"
        ],
        "problem_func": "import string\n\ndef f(sentence: str) -> bool:\n    return set(string.ascii_lowercase) <= set(sentence.lower())",
        "solution_func": "def g() -> str:\n    return ''.join(set(string.ascii_lowercase))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the function g() to return all lowercase letters of the alphabet as a string, and function f(sentence) to check if all lowercase letters are present in the input sentence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding sets, string manipulation, and function return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    return sum(numbers) == target\n\ndef g(target=20) -> List[int]:\n    return [5] * (target // 5)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target=20) -> bool:\n    return sum(numbers) == target",
        "solution_func": "def g(target=20) -> List[int]:\n    return [5] * (target // 5)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where the first function checks if the sum of a list of numbers is equal to a target value, and the second function generates a list of numbers based on the target value. The assertion checks if the first function returns True when called with the output of the second function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation and comparison operations in Python, making it suitable for teaching Python concepts to master's students in CS.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(bool_values: List[bool], target=3) -> bool:\n    return bool_values.count(True) == target\n\ndef g(target=3) -> List[bool]:\n    return [True] * target\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, comparison, and assertion testing.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(bool_values: List[bool], target=3) -> bool:\n    return bool_values.count(True) == target",
        "solution_func": "def g(target=3) -> List[bool]:\n    return [True] * target",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if the number of True values in a list is equal to a target value, and g generates a list of True values based on the target value. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use list comprehension to generate a list of True values and how to count the number of True values in a list. It also tests the understanding of function calls and assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    return len(set(li)) == len(li) and all((x <= 10 for x in li))\n\ndef g():\n    return list(range(11))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for uniqueness of elements in a list and ensuring all elements are less than or equal to 10. It also uses list manipulation and comprehension.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(li: List[int]) -> bool:\n    return len(set(li)) == len(li) and all((x <= 10 for x in li))",
        "solution_func": "def g():\n    return list(range(11))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers as input and returns True if the list contains unique elements and all elements are less than or equal to 10. The solution function g returns a list of integers from 0 to 10."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for uniqueness and range constraints in a list of integers. The solution function generates a list of integers from 0 to 10 to satisfy the conditions of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    return all((x % 2 == 0 for x in li))\n\ndef g():\n    return [2 * i for i in range(11)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(li: List[int]) -> bool:\n    return all((x % 2 == 0 for x in li))",
        "solution_func": "def g():\n    return [2 * i for i in range(11)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all elements in a list are even numbers, and a function g that generates a list of even numbers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and generating a list of even numbers using list comprehension.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    return all((x % 3 == 0 for x in li))\n\ndef g():\n    return [3 * i for i in range(10)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if all elements in a list are divisible by 3.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(li: List[int]) -> bool:\n    return all((x % 3 == 0 for x in li))",
        "solution_func": "def g():\n    return [3 * i for i in range(10)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if all elements in a list are multiples of 3, and a function g that generates a list of multiples of 3. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and how to generate a list of multiples of 3 using a range and multiplication.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], rule='even') -> bool:\n    if rule == 'even':\n        return all(num % 2 == 0 for num in numbers)\n    elif rule == 'odd':\n        return all(num % 2 != 0 for num in numbers)\n    else:\n        return False\n\ndef g(rule='even'):\n    return [2, 4, 6, 8]  # Generate sequence based on the rule\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Conditional Logic, List Operations, and Function Definition.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], rule='even') -> bool:\n    if rule == 'even':\n        return all(num % 2 == 0 for num in numbers)\n    elif rule == 'odd':\n        return all(num % 2 != 0 for num in numbers)\n    else:\n        return False",
        "solution_func": "def g(rule='even'):\n    return [2, 4, 6, 8]  # Generate sequence based on the rule",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are either even or odd based on a given rule, and a function g that generates a list of even numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, conditional statements, and function definition in Python. It can be used to teach students about list operations and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str, pattern='ab') -> bool:\n    pattern_indices = {char: i for i, char in enumerate(pattern)}\n    current_index = 0\n\n    for char in string:\n        if char not in pattern_indices or pattern_indices[char] != current_index:\n            return False\n        current_index = (current_index + 1) % len(pattern)\n\n    return current_index == 0\n\ndef g(pattern='ab'):\n    return 'abab'  # Generate a string following the given pattern\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Pattern Recognition, String Manipulation",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(string: str, pattern='ab') -> bool:\n    pattern_indices = {char: i for i, char in enumerate(pattern)}\n    current_index = 0\n\n    for char in string:\n        if char not in pattern_indices or pattern_indices[char] != current_index:\n            return False\n        current_index = (current_index + 1) % len(pattern)\n\n    return current_index == 0",
        "solution_func": "def g(pattern='ab'):\n    return 'abab'  # Generate a string following the given pattern",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string follows a specific pattern. The function g generates a string based on the specified pattern, and the puzzle tests if f correctly identifies if the generated string follows the pattern."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, pattern matching, and function definition in Python. It provides a practical application of these concepts in a programming challenge.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"level\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(arr: list, ascending=True) -> bool:\n    if ascending:\n        return arr == sorted(arr)\n    else:\n        return arr == sorted(arr, reverse=True)\ndef g(ascending=True):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. The solution function g() returns the string 'level', which is a palindrome, and the assertion confirms that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) as it checks if a given number is a prime number or not.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(arr: list, ascending=True) -> bool:\n    if ascending:\n        return arr == sorted(arr)\n    else:\n        return arr == sorted(arr, reverse=True)\ndef g(ascending=True):\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g() that returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, key='b', value=10) -> bool:\n    assert key in data\n    assert data[key] == value\n    return True\n\ndef g(key='b', value=10):\n    return {key: value}\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and assertion checks.",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: dict, key='b', value=10) -> bool:\n    assert key in data\n    assert data[key] == value\n    return True",
        "solution_func": "def g(key='b', value=10):\n    return {key: value}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that creates a dictionary with a specified key and value, and then checks if the key exists in the dictionary with the specified value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to create a dictionary in Python and pass it as an argument to a function. The function f() checks if a specific key-value pair exists in the dictionary.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, target='python', min_length=3) -> bool:\n    assert len(text) >= min_length\n    assert text.lower().startswith(target)\n    return True\n\ndef g(target='python', min_length=3):\n    return target.upper() + ' is a programming language.'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 16,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, target='python', min_length=3) -> bool:\n    assert len(text) >= min_length\n    assert text.lower().startswith(target)\n    return True",
        "solution_func": "def g(target='python', min_length=3):\n    return target.upper() + ' is a programming language.'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given text starts with a specific target string and meets a minimum length requirement. The solution function g returns a formatted string based on the target input. The puzzle tests whether the solution function g satisfies the conditions of the function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function parameters, string manipulation, and function invocation. It also tests the ability to define functions that meet specific requirements and ensure they work together correctly.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, Conditional Logic, Importing Modules (numpy), and Exception Handling.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False",
        "solution_func": "def g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list, a target value, and an operation as input. The function checks if the list satisfies a certain condition based on the operation and target value. Another function g generates a list based on the target value and operation. The puzzle requires finding the correct implementation of g such that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how the functions f and g interact to satisfy the condition specified in f. Students need to implement g in a way that the output list meets the criteria set by f for the given target value and operation.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key_values={'name': 'Alice', 'age': 30, 'city': 'New York'}, target_value='Alice') -> bool:\n    return all((d.get(k) == v for k, v in key_values.items())) and target_value in d.values()\ndef g(key_values={'name': 'Alice', 'age': 30, 'city': 'New York'}, target_value='Alice'):\n    import random\n    d = key_values.copy()\n    d['random_key'] = random.choice([target_value, 'Bob'])\n    return d\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, conditional logic, and importing modules (random).",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key_values={'name': 'Alice', 'age': 30, 'city': 'New York'}, target_value='Alice') -> bool:\n    return all((d.get(k) == v for k, v in key_values.items())) and target_value in d.values()",
        "solution_func": "def g(key_values={'name': 'Alice', 'age': 30, 'city': 'New York'}, target_value='Alice'):\n    import random\n    d = key_values.copy()\n    d['random_key'] = random.choice([target_value, 'Bob'])\n    return d",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given dictionary contains specific key-value pairs and a target value. The solution function g generates a dictionary with some predefined key-value pairs and a random key-value pair. The puzzle tests whether the solution function g satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves dictionary manipulation, checking key-value pairs, and random selection. It tests the understanding of dictionary operations and logical conditions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(set(nums)) == len(nums)\n\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations to check for uniqueness of elements in a list.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(set(nums)) == len(nums)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and checks if all elements in the list are unique. The solution function g returns a list of integers from 1 to 10, and the assertion checks if f applied to g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking uniqueness of elements in a list and testing it with a predefined list. It is a simple algorithmic challenge suitable for teaching Python concepts like list manipulation and set operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to understand how to check if a string is a palindrome using Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target: int, numbers=[14, 23, 19, 7, 31, 5, 11]) -> bool:\n    assert sum(numbers) % 2 == 0, 'Sum of numbers must be even'\n    total = 0\n    success = False\n    for num in numbers:\n        total += num\n        if total == target:\n            success = True\n    return success\n\ndef g(numbers=[14, 23, 19, 7, 31, 5, 11]):\n    total = 0\n    target = 0\n    for num in numbers:\n        total += num\n        if total > target:\n            target = total\n    return target\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as Brute Force Search, Conditional Logic, and Mathematical Operations.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(target: int, numbers=[14, 23, 19, 7, 31, 5, 11]) -> bool:\n    assert sum(numbers) % 2 == 0, 'Sum of numbers must be even'\n    total = 0\n    success = False\n    for num in numbers:\n        total += num\n        if total == target:\n            success = True\n    return success",
        "solution_func": "def g(numbers=[14, 23, 19, 7, 31, 5, 11]):\n    total = 0\n    target = 0\n    for num in numbers:\n        total += num\n        if total > target:\n            target = total\n    return target",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a target sum can be achieved by adding numbers from a list, and g finds the maximum sum that can be obtained by adding numbers from the same list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to iterate through a list of numbers to find a specific target sum and to find the maximum sum that can be obtained from the list. It also requires understanding of function composition and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target: str, strings=['apple', 'banana', 'cherry', 'date', 'fig', 'grape']) -> bool:\n    assert len(strings) >= 5, 'At least 5 strings required'\n    success = False\n    for s in strings:\n        if s.startswith(target):\n            success = True\n    return success\n\ndef g(strings=['apple', 'banana', 'cherry', 'date', 'fig', 'grape']):\n    target = ''\n    for s in strings:\n        if len(s) > len(target):\n            target = s\n    return target\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(target: str, strings=['apple', 'banana', 'cherry', 'date', 'fig', 'grape']) -> bool:\n    assert len(strings) >= 5, 'At least 5 strings required'\n    success = False\n    for s in strings:\n        if s.startswith(target):\n            success = True\n    return success",
        "solution_func": "def g(strings=['apple', 'banana', 'cherry', 'date', 'fig', 'grape']):\n    target = ''\n    for s in strings:\n        if len(s) > len(target):\n            target = s\n    return target",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the longest string in a list of strings and checking if any string in the list starts with the longest string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically finding the longest string and checking for a specific condition in a list of strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target: int, numbers=[8, 5, 12, 20, 17, 3, 10, 15]) -> bool:\n    assert len(numbers) % 2 == 0, 'Number of elements must be even'\n    total = 0\n    success = False\n    for num in numbers:\n        total += num\n        if total == target:\n            success = True\n    return success\n\ndef g(numbers=[8, 5, 12, 20, 17, 3, 10, 15]):\n    total = 0\n    target = 0\n    for num in numbers:\n        total += num\n        if total > target:\n            target = total\n    return target\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as Conditional Logic, Mathematical Operations, and Brute Force Search.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(target: int, numbers=[8, 5, 12, 20, 17, 3, 10, 15]) -> bool:\n    assert len(numbers) % 2 == 0, 'Number of elements must be even'\n    total = 0\n    success = False\n    for num in numbers:\n        total += num\n        if total == target:\n            success = True\n    return success",
        "solution_func": "def g(numbers=[8, 5, 12, 20, 17, 3, 10, 15]):\n    total = 0\n    target = 0\n    for num in numbers:\n        total += num\n        if total > target:\n            target = total\n    return target",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a target sum can be achieved by adding numbers in a list, and g finds the maximum sum that can be obtained by adding consecutive numbers in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to iterate through a list of numbers to find a specific target sum and the maximum sum that can be obtained by adding consecutive numbers. It also requires understanding of function composition and assertion testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(lst: list) -> bool:\n    return all(elem % 2 == 0 for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(elem % 2 == 0 for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for even numbers.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(elem % 2 == 0 for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(elem % 2 == 0 for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(elem % 2 == 0 for elem in lst)",
        "solution_func": "def g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(elem % 2 == 0 for elem in new_list):\n            return new_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a random list of numbers and check if all elements in the list are even numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension and the all() function to check if all elements in a randomly generated list are even numbers.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = 'aeiou'\n    length = random.randint(5, 10)\n    return ''.join(random.choice(vowels) for _ in range(length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic. The puzzle function `f` checks if all characters in a string are vowels, and the solution function `g` generates a random string of vowels. The `assert` statement checks if the puzzle is solved correctly by verifying if `f(g())` returns True.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(elem % 2 == 0 for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(elem % 2 == 0 for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)",
        "solution_func": "def g():\n    import random\n    vowels = 'aeiou'\n    length = random.randint(5, 10)\n    return ''.join(random.choice(vowels) for _ in range(length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if all characters in a given string are vowels. Another function g() generates a random string of vowels, and the puzzle is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a randomly generated string of vowels contains only vowels. The solution function g() generates a random string of vowels, and the function f(s: str) checks if all characters in the string are vowels. The puzzle is solved if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\n\ndef g():\n    import random\n    n = random.randint(2, 5)\n    matrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            matrix[j][i] = matrix[i][j]\n    return matrix\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and checking if a matrix is symmetric along its diagonal. It also includes random number generation and list comprehension.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(elem % 2 == 0 for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(elem % 2 == 0 for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))",
        "solution_func": "def g():\n    import random\n    n = random.randint(2, 5)\n    matrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            matrix[j][i] = matrix[i][j]\n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a random square matrix, transposing it, and checking if the original matrix is symmetric. The solution function generates a random square matrix and ensures it is symmetric by setting the values symmetric across the diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of matrix transposition and symmetry in Python. The solution function generates a random square matrix and ensures it is symmetric by setting the values symmetric across the diagonal.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(nums: list) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    import random\n    size = random.randint(5, 10)\n    return sorted(random.sample(range(1, 100), size))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(elem % 2 == 0 for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(elem % 2 == 0 for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    import random\n    size = random.randint(5, 10)\n    return sorted(random.sample(range(1, 100), size))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random list of numbers, sorting it, and then checking if the list is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random list of numbers, sorting it, and then checking if the list is sorted in ascending order using the provided functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, palindrome=\"radar\") -> bool:\n    return s == s[::-1]\n\ndef g(palindrome=\"radar\"):\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "\n\ndef f(lst: list, duplicates=[1, 2, 3, 4, 5, 1]) -> bool:\n    return len(lst) != len(set(lst))\n\ndef g(duplicates=[1, 2, 3, 4, 5, 1]):\n    return duplicates\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, palindrome=\"radar\") -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(palindrome=\"radar\"):\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given string is a palindrome, and a function g that returns a predefined palindrome string. The assertion tests if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, values=[1, 2, 3, 4, 5]) -> bool:\n    return sum(lst) == sum(values)\n\ndef g(values=[1, 2, 3, 4, 5]):\n    return values\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "\n\ndef f(lst: list, duplicates=[1, 2, 3, 4, 5, 1]) -> bool:\n    return len(lst) != len(set(lst))\n\ndef g(duplicates=[1, 2, 3, 4, 5, 1]):\n    return duplicates\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, values=[1, 2, 3, 4, 5]) -> bool:\n    return sum(lst) == sum(values)",
        "solution_func": "def g(values=[1, 2, 3, 4, 5]):\n    return values",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list as input and checks if the sum of the list is equal to the sum of a predefined list of values. The solution function g returns the predefined list of values."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is straightforward and focuses on understanding function parameters, list operations, and equality comparison. It can be used to teach basic concepts in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, char=\"a\") -> bool:\n    return char in s\n\ndef g(char=\"a\"):\n    return \"banana\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "\n\ndef f(lst: list, duplicates=[1, 2, 3, 4, 5, 1]) -> bool:\n    return len(lst) != len(set(lst))\n\ndef g(duplicates=[1, 2, 3, 4, 5, 1]):\n    return duplicates\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, char=\"a\") -> bool:\n    return char in s",
        "solution_func": "def g(char=\"a\"):\n    return \"banana\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a specified character is present in a given string, and a function g that returns the string 'banana'. The assertion checks if the character 'a' is present in the string 'banana'."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, parameter passing, and boolean return values in Python. It tests the student's ability to define functions and understand how to use them together to satisfy a condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], divisor=5) -> bool:\n    assert divisor > 1, 'Hint: The divisor should be greater than 1.'\n    return all(num % divisor == 0 for num in numbers)\n\ndef g(divisor=5):\n    return [i * divisor for i in range(1, 11)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic. It also includes list manipulation and iteration.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], divisor=5) -> bool:\n    assert divisor > 1, 'Hint: The divisor should be greater than 1.'\n    return all(num % divisor == 0 for num in numbers)",
        "solution_func": "def g(divisor=5):\n    return [i * divisor for i in range(1, 11)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are divisible by a given divisor, and a function g that generates a list of numbers multiplied by the divisor. The puzzle tests if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, modulo operation, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: str) -> bool:\n    return 'abc' in x\n\ndef g():\n    import itertools\n    for length in range(1, 5):\n        for combination in itertools.product('abcd', repeat=length):\n            string = ''.join(combination)\n            if 'abc' in string:\n                return string\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves String Manipulation, Importing Modules (Itertools, etc.), and Pattern Recognition.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(x: str) -> bool:\n    return 'abc' in x",
        "solution_func": "def g():\n    import itertools\n    for length in range(1, 5):\n        for combination in itertools.product('abcd', repeat=length):\n            string = ''.join(combination)\n            if 'abc' in string:\n                return string",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a string of length up to 4 characters that contains the substring 'abc'."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating all possible combinations of characters up to a certain length and checking if any of them contain the substring 'abc'. The solution returns the first string found that satisfies this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list) -> bool:\n    return arr == [1, 2, 3, 4, 5]\n\ndef g():\n    import random\n    while True:\n        arr = random.sample(range(1, 10), 5)\n        if arr == [1, 2, 3, 4, 5]:\n            return arr\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and comparison. It also includes random sampling and looping until a condition is met.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(arr: list) -> bool:\n    return arr == [1, 2, 3, 4, 5]",
        "solution_func": "def g():\n    import random\n    while True:\n        arr = random.sample(range(1, 10), 5)\n        if arr == [1, 2, 3, 4, 5]:\n            return arr",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a random list of 5 unique numbers between 1 and 9, and the solution checks if the generated list is equal to [1, 2, 3, 4, 5]."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random list and checking if it matches a specific pattern. It can be used to teach students about list manipulation and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: list) -> bool:\n    return x == ['a', 'b', 'c']\n\ndef g():\n    import random\n    while True:\n        lst = random.choices(['a', 'b', 'c', 'd'], k=3)\n        if lst == ['a', 'b', 'c']:\n            return lst\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic. The function f checks if a list is equal to ['a', 'b', 'c'], and the function g generates a random list and checks if it matches the target list. This involves string manipulation to compare lists and conditional logic to check for a match.",
        "idx_generation": 17,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(x: list) -> bool:\n    return x == ['a', 'b', 'c']",
        "solution_func": "def g():\n    import random\n    while True:\n        lst = random.choices(['a', 'b', 'c', 'd'], k=3)\n        if lst == ['a', 'b', 'c']:\n            return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of 3 elements randomly selected from a set of 4 elements and check if the generated list is equal to ['a', 'b', 'c']."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comparison and random selection in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s.isalpha() and s.islower()\n    \ndef g():\n    import random\n    import string\n    \n    while True:\n        random_string = ''.join(random.choices(string.ascii_lowercase, k=5))\n        if random_string.isalpha() and random_string.islower():\n            return random_string\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s.isalpha() and s.islower()",
        "solution_func": "def g():\n    import random\n    import string\n    \n    while True:\n        random_string = ''.join(random.choices(string.ascii_lowercase, k=5))\n        if random_string.isalpha() and random_string.islower():\n            return random_string",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random string of lowercase letters and checking if the string is all alphabetic and in lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the isalpha() and islower() string methods to check if a randomly generated string meets certain criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) >= 3 and lst[0] + lst[1] == lst[2]\n    \ndef g():\n    import random\n    \n    while True:\n        random_list = random.sample(range(1, 10), 3)\n        if len(random_list) >= 3 and random_list[0] + random_list[1] == random_list[2]:\n            return random_list\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and importing modules (random). It generates a random list of 3 elements and checks if the sum of the first two elements equals the third element.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) >= 3 and lst[0] + lst[1] == lst[2]",
        "solution_func": "def g():\n    import random\n    \n    while True:\n        random_list = random.sample(range(1, 10), 3)\n        if len(random_list) >= 3 and random_list[0] + random_list[1] == random_list[2]:\n            return random_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random list of 3 numbers and checking if the sum of the first two numbers equals the third number in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random list of 3 numbers and checking if the sum of the first two numbers in the list equals the third number. The solution function g() generates random lists until it satisfies the condition defined in function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return 'key1' in d and 'key2' in d and d['key1'] != d['key2']\n    \ndef g():\n    import random\n    \n    while True:\n        random_dict = {'key1': random.randint(1, 10), 'key2': random.randint(1, 10)}\n        if 'key1' in random_dict and 'key2' in random_dict and random_dict['key1'] != random_dict['key2']:\n            return random_dict\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation, conditional logic, and random number generation.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return 'key1' in d and 'key2' in d and d['key1'] != d['key2']",
        "solution_func": "def g():\n    import random\n    \n    while True:\n        random_dict = {'key1': random.randint(1, 10), 'key2': random.randint(1, 10)}\n        if 'key1' in random_dict and 'key2' in random_dict and random_dict['key1'] != random_dict['key2']:\n            return random_dict",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(d: dict) that checks if a dictionary contains keys 'key1' and 'key2' with different values. The solution function g() generates random dictionaries with 'key1' and 'key2' having random integer values, and returns a dictionary that satisfies the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the presence of keys and their values in a dictionary, which is a fundamental concept in Python programming. It also involves using random module for generating random values. This puzzle can be used to teach Python programming to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, rev='racecar') -> bool:\n    return s == rev\n    \ndef g(s='racecar'):\n    if len(s) <= 1:\n        return s\n    return g(s[1:]) + s[0]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves recursion and string manipulation.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, rev='racecar') -> bool:\n    return s == rev",
        "solution_func": "def g(s='racecar'):\n    if len(s) <= 1:\n        return s\n    return g(s[1:]) + s[0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given string is a palindrome and g recursively reverses a string. The assert statement checks if the reversed string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of recursion, string manipulation, and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    return any(target in row for row in matrix)\n\ndef g(target=0) -> List[List[int]]:\n    matrix_size = 3\n    return [[target] * matrix_size for _ in range(matrix_size)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for a target value in a matrix.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, prime=7) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(prime=7) -> int:\n    prime += 1\n    while True:\n        for i in range(2, int(prime**0.5) + 1):\n            if prime % i == 0:\n                break\n        else:\n            return prime\n        prime += 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    return any(target in row for row in matrix)",
        "solution_func": "def g(target=0) -> List[List[int]]:\n    matrix_size = 3\n    return [[target] * matrix_size for _ in range(matrix_size)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a target integer is present in any row of a given matrix, and a function g that generates a matrix filled with the target integer. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, checking for a target integer in a matrix, and generating a matrix with a specific value. It is suitable for teaching Python concepts related to lists, loops, and function interactions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    return any(num % 2 == 0 for num in numbers) and any(num % 2 != 0 for num in numbers)\ndef g():\n    import random\n    numbers = random.sample(range(1, 20), 6)\n    return numbers\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Conditional Logic and Importing Modules (Itertools, etc.)",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return len(d) == len(set(d.keys()))\ndef g():\n    import string\n    import random\n    keys = random.sample(string.ascii_lowercase, 5)\n    return {k: k.upper() for k in keys}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    return any(num % 2 == 0 for num in numbers) and any(num % 2 != 0 for num in numbers)",
        "solution_func": "def g():\n    import random\n    numbers = random.sample(range(1, 20), 6)\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of 6 random numbers between 1 and 20, and then check if the list contains both even and odd numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension to check for even and odd numbers in a randomly generated list of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(nums: List[int], target=10) -> bool:\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    from itertools import combinations\n    for r in range(1, len(nums)+1):\n        for comb in combinations(nums, r):\n            if sum(comb) == target:\n                return comb\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Permutations and Combinations, Importing Modules (Itertools, etc.)",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(nums: List[int], target=10) -> bool:\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))",
        "solution_func": "def g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    from itertools import combinations\n    for r in range(1, len(nums)+1):\n        for comb in combinations(nums, r):\n            if sum(comb) == target:\n                return comb",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of numbers from a given list that adds up to a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list combinations and checking if the sum of the combinations equals the target value.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, target='a') -> bool:\n    return any(target in substr for i in range(len(s)) for j in range(i+1, len(s)+1) if (substr := s[i:j]))\n\ndef g(target='a'):\n    s = 'programming'\n    return [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, target='a') -> bool:\n    return any(target in substr for i in range(len(s)) for j in range(i+1, len(s)+1) if (substr := s[i:j]))",
        "solution_func": "def g(target='a'):\n    s = 'programming'\n    return [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a target substring is present in any substring of a given string. The solution function g generates all possible substrings of a specific string and returns them as a list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, string slicing, and the any() function in Python. The solution function g generates all possible substrings of a given string, and the function f checks if the target substring is present in any of these substrings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'racecar'. The assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nimport math\n\ndef f(nums: List[int]) -> bool:\n    return any([math.isqrt(num) ** 2 == num for num in nums])\n\ndef g():\n    return [4, 9, 16, 25, 36, 49, 64]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and importing modules (math). It checks if the square root of each number in the list is an integer.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\nimport math\n\ndef f(nums: List[int]) -> bool:\n    return any([math.isqrt(num) ** 2 == num for num in nums])",
        "solution_func": "def g():\n    return [4, 9, 16, 25, 36, 49, 64]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the square root of each number in a list is an integer."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function that checks if the square root of each number in a list is an integer.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s.isalpha()\n\ndef g():\n    import random\n    import string\n    size = random.randint(5, 10)\n    return ''.join(random.choices(string.ascii_letters, k=size)).upper()\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and importing modules (random, string). The solution generates a random string of alphabetic characters and checks if it consists only of alphabetic characters.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "\n\ndef f(nums: list) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    import random\n    size = random.randint(5, 10)\n    return sorted(random.sample(range(1, 100), size))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s.isalpha()",
        "solution_func": "def g():\n    import random\n    import string\n    size = random.randint(5, 10)\n    return ''.join(random.choices(string.ascii_letters, k=size)).upper()",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a random string of uppercase letters and check if the string consists only of alphabetic characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the isalpha() method to check if a string contains only alphabetic characters. The solution function generates a random string of uppercase letters and checks if it satisfies the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(squares: list) -> bool:\n    return all(num == int(num) for num in squares)\n\ndef g():\n    import random\n    import math\n    size = random.randint(5, 10)\n    nums = random.sample(range(1, 20), size)\n    return [num ** 2 for num in nums]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic. The function f checks if all numbers in the list are perfect squares, while the function g generates a list of random numbers and calculates their squares. The assert statement checks if the output of g satisfies the condition in f.",
        "idx_generation": 18,
        "target_skills": [],
        "puzzle_history": [
            "\n\ndef f(nums: list) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    import random\n    size = random.randint(5, 10)\n    return sorted(random.sample(range(1, 100), size))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(squares: list) -> bool:\n    return all(num == int(num) for num in squares)",
        "solution_func": "def g():\n    import random\n    import math\n    size = random.randint(5, 10)\n    nums = random.sample(range(1, 20), size)\n    return [num ** 2 for num in nums]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if all elements in a list are perfect squares."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random numbers, squaring each number, and then checking if all elements in the squared list are perfect squares (i.e., integers).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, char='a') -> bool:\n    return s.count(char) % 2 == 0\n\ndef g(char='a'):\n    s = ''\n    count = 0\n    best_match = (float('inf'), '')\n    while count % 2 != 0:\n        s += char\n        count = s.count(char)\n        best_match = min(best_match, (abs(count % 2), s))\n\n    return best_match[1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Mathematical Operations",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, char='a') -> bool:\n    return s.count(char) % 2 == 0",
        "solution_func": "def g(char='a'):\n    s = ''\n    count = 0\n    best_match = (float('inf'), '')\n    while count % 2 != 0:\n        s += char\n        count = s.count(char)\n        best_match = min(best_match, (abs(count % 2), s))\n\n    return best_match[1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the count of a specified character in a string is even, and g generates a string with the specified character until the count of that character becomes even. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of the count method in Python. It also requires knowledge of how to use default arguments in function definitions and the assert statement for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(primes: list, total=10) -> bool:\n    return sum(primes) > total\n\ndef g(total=10):\n    primes = []\n    num = 2\n    best_sum = 0\n    while sum(primes) <= total:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        best_sum = max(best_sum, sum(primes))\n        num += 1\n\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as prime numbers, loops, conditionals, and list manipulation.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(primes: list, total=10) -> bool:\n    return sum(primes) > total",
        "solution_func": "def g(total=10):\n    primes = []\n    num = 2\n    best_sum = 0\n    while sum(primes) <= total:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        best_sum = max(best_sum, sum(primes))\n        num += 1\n\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of a list of prime numbers is greater than a given total, and a function g that generates a list of prime numbers whose sum is less than or equal to the given total. The assertion checks if function f returns True when called with the output of function g as input."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with prime numbers, loops, conditionals, and list operations in Python. It tests the understanding of generating prime numbers and summing lists. It can be used to teach Python programming concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(string: str) -> bool:\n    return string == string[::-1]\n\ndef g(word=\"racecar\"):\n    return word\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return False\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))\ndef g(start=1, diff=3, length=5):\n    return [start + diff * i for i in range(length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g(word=\"racecar\"):\n    return word",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given string is a palindrome. The solution function g returns a word (default is 'racecar') and the puzzle asserts that f(g()) should return True if the word is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\ndef f(strings: List[str]) -> bool:\n    return all(len(s) == len(strings[0]) for s in strings)\n\ndef g(word_length=5, num_words=3):\n    return ['hello' * word_length for _ in range(num_words)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and list operations.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return False\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))\ndef g(start=1, diff=3, length=5):\n    return [start + diff * i for i in range(length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(strings: List[str]) -> bool:\n    return all(len(s) == len(strings[0]) for s in strings)",
        "solution_func": "def g(word_length=5, num_words=3):\n    return ['hello' * word_length for _ in range(num_words)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all strings in a list have the same length, and a function g that generates a list of words with a specified length and number of words. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, function parameters, and the all() function in Python. It also tests the ability to write functions that work together to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g(even_nums=[2, 4, 6], odd_nums=[1, 3, 5]):\n    return even_nums + odd_nums\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 2:\n        return False\n    diff = nums[1] - nums[0]\n    return all(nums[i] - nums[i-1] == diff for i in range(2, len(nums)))\ndef g(start=1, diff=3, length=5):\n    return [start + diff * i for i in range(length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)",
        "solution_func": "def g(even_nums=[2, 4, 6], odd_nums=[1, 3, 5]):\n    return even_nums + odd_nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers contains both even and odd numbers, and a function g that returns a list of predefined even and odd numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, boolean operations, and function definitions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, length=5, range_start=1, range_end=10) -> bool:\n    return len(set(nums)) == len(nums) and len(nums) == length and all(range_start <= num <= range_end for num in nums)\n\ndef g(length=5, range_start=1, range_end=10):\n    import random\n    return random.sample(range(range_start, range_end+1), length)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating a list of random numbers within a specified range and length, and then checking if the list contains unique elements within the specified range and length.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, limit=10) -> bool:\n    return len(set(s)) == len(s) and len(s) <= limit\ndef g(limit=10):\n    import string\n    import random\n    unique_chars = random.sample(string.ascii_lowercase, limit)\n    return ''.join(unique_chars)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list, length=5, range_start=1, range_end=10) -> bool:\n    return len(set(nums)) == len(nums) and len(nums) == length and all(range_start <= num <= range_end for num in nums)",
        "solution_func": "def g(length=5, range_start=1, range_end=10):\n    import random\n    return random.sample(range(range_start, range_end+1), length)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function f that checks if a list of numbers meets certain criteria, and a function g that generates a list of random numbers within a specified range and length. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, set operations, list comprehensions, and random number generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, sum_range=(10, 20)) -> bool:\n    return sum_range[0] <= sum(nums) <= sum_range[1]\n\ndef g():\n    import random\n    return [random.uniform(1.0, 5.0) for _ in range(5)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Importing Modules (Itertools, etc.), and Conditional Logic.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, limit=10) -> bool:\n    return len(set(s)) == len(s) and len(s) <= limit\ndef g(limit=10):\n    import string\n    import random\n    unique_chars = random.sample(string.ascii_lowercase, limit)\n    return ''.join(unique_chars)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list, sum_range=(10, 20)) -> bool:\n    return sum_range[0] <= sum(nums) <= sum_range[1]",
        "solution_func": "def g():\n    import random\n    return [random.uniform(1.0, 5.0) for _ in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function f that takes a list of numbers and checks if the sum of the numbers falls within a specified range. The student also needs to define a function g that generates a list of 5 random floating-point numbers between 1.0 and 5.0. The student must ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with list operations, random number generation, and function definitions in Python. It tests the student's understanding of function composition and list manipulation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, substring='python') -> bool:\n    return substring in text\n\ndef g(substring='python'):\n    import random\n    length = random.randint(5, 10)\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(random.choices(alphabet, k=length)) + substring + ''.join(random.choices(alphabet, k=length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and random generation of strings. The solution checks if a substring is present in a randomly generated string.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str, substring='python') -> bool:\n    return substring in text",
        "solution_func": "def g(substring='python'):\n    import random\n    length = random.randint(5, 10)\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(random.choices(alphabet, k=length)) + substring + ''.join(random.choices(alphabet, k=length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given substring is present in a given text, and a function g that generates a random string with the substring 'python' embedded in it. The puzzle requires g to generate a string and f to check if the substring 'python' is present in that string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of function calls in Python. It tests the student's ability to generate random strings and check for substrings within them.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, target=7) -> bool:\n    return target in lst\n\ndef g(target=7):\n    import random\n    size = random.randint(5, 10)\n    index = random.randint(0, size - 1)\n    return [random.randint(1, 10) for _ in range(size)][:index] + [target] + [random.randint(1, 10) for _ in range(size - index - 1)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation, random number generation, and checking for a target value in a list.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, target=7) -> bool:\n    return target in lst",
        "solution_func": "def g(target=7):\n    import random\n    size = random.randint(5, 10)\n    index = random.randint(0, size - 1)\n    return [random.randint(1, 10) for _ in range(size)][:index] + [target] + [random.randint(1, 10) for _ in range(size - index - 1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(lst: list, target=7) -> bool and g(target=7), where f checks if a target number is in a list and g generates a random list with the target number at a random index. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, random number generation, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='color') -> bool:\n    return key in d\n\ndef g(key='color'):\n    import random\n    colors = ['red', 'blue', 'green', 'yellow', 'purple']\n    value = random.choice(colors)\n    return {key: value}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and random selection of values based on a key. It also includes assertion testing for correctness.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict, key='color') -> bool:\n    return key in d",
        "solution_func": "def g(key='color'):\n    import random\n    colors = ['red', 'blue', 'green', 'yellow', 'purple']\n    value = random.choice(colors)\n    return {key: value}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specified key exists in a dictionary, and a function g that generates a dictionary with a random color value for the specified key. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, text='radar') -> bool:\n    return s == s[::-1]\n\ndef g(text='radar') -> str:\n    return text\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], s='programmingisfun', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='programmingisfun', target=''):\n    i, j, k = 0, 0, 1\n    while i < len(s):\n        while j < len(s):\n            while k < len(s):\n                try:\n                    if s[i:j:k] == target:\n                        return [i, j, k]\n                except (IndexError, ValueError):\n                    pass\n                k += 1\n            j += 1\n        i += 1\n    return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, text='radar') -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(text='radar') -> str:\n    return text",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s: str, text='radar') -> bool that checks if a string is a palindrome and a function g(text='radar') -> str that returns a specific string, the puzzle requires g to return a palindrome string to satisfy the condition f(g()) == True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding palindrome strings and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(bool_values: List[bool], required_true_count=2) -> bool:\n    return sum(bool_values) == required_true_count and len(bool_values) % 2 == 0\n\ndef g(required_true_count=2):\n    \"\"\"\n    This solution generates a list of booleans where the required_true_count number of True values are present.\n    \"\"\"\n    bool_values = [True] * required_true_count + [False] * required_true_count\n\n    return bool_values\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation to generate a list of boolean values with a specific count of True values. The solution function g() uses a simple algorithm to create the required list of boolean values. The puzzle function f() checks if the input list meets the specified conditions.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(bool_values: List[bool], required_true_count=2) -> bool:\n    return sum(bool_values) == required_true_count and len(bool_values) % 2 == 0",
        "solution_func": "def g(required_true_count=2):\n    \"\"\"\n    This solution generates a list of booleans where the required_true_count number of True values are present.\n    \"\"\"\n    bool_values = [True] * required_true_count + [False] * required_true_count\n\n    return bool_values",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that generates a list of boolean values with a specified number of True values, and then checks if the sum of True values in the list is equal to a specified count and the length of the list is even."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, boolean values, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[float], target_value=100, max_count=4) -> bool:\n    return sum(numbers) == target_value and all((n >= 0 for n in numbers)) and len(numbers) <= max_count\n\ndef g(target_value=100, max_count=4):\n    \"\"\"\n    This solution generates a list of numbers that sum up to the target_value.\n    \"\"\"\n    numbers = [25.0, 25.0, 25.0, 25.0]\n\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[float], target_value=100, max_count=4) -> bool:\n    return sum(numbers) == target_value and all((n >= 0 for n in numbers)) and len(numbers) <= max_count",
        "solution_func": "def g(target_value=100, max_count=4):\n    \"\"\"\n    This solution generates a list of numbers that sum up to the target_value.\n    \"\"\"\n    numbers = [25.0, 25.0, 25.0, 25.0]\n\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of numbers that sum up to a target value, with a maximum count of numbers allowed. The solution function returns a list of numbers that meet the criteria specified in the puzzle function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of numbers generated by the solution function meets the conditions set by the puzzle function. The solution function returns a list of numbers that sum up to the target value and have non-negative values, with a maximum count of numbers specified.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], divisor=5) -> bool:\n    return sum(nums) % divisor == 0\ndef g(divisor=5, nums=[16, 7, 3, 9, 11, 5, 8]):\n    return [n for n in nums if n % divisor == 0]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the sum of a list of numbers is divisible by a given divisor. The solution uses list comprehension to filter numbers divisible by the divisor. The assertion checks if the solution satisfies the condition defined in the puzzle.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], divisor=5) -> bool:\n    return sum(nums) % divisor == 0",
        "solution_func": "def g(divisor=5, nums=[16, 7, 3, 9, 11, 5, 8]):\n    return [n for n in nums if n % divisor == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of a list of numbers is divisible by a given divisor, and a function g that filters numbers from a list based on whether they are divisible by the same divisor. The assertion checks if the solution function g satisfies the condition of the challenge function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list operations, modulo operation, and function definition in Python. It tests the understanding of list comprehension and conditional filtering based on a given condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(strings: List[str], char='a') -> bool:\n    return all(char in s for s in strings)\ndef g(char='a', strings=['apple', 'banana', 'kiwi', 'orange']):\n    return [s + char for s in strings]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(strings: List[str], char='a') -> bool:\n    return all(char in s for s in strings)",
        "solution_func": "def g(char='a', strings=['apple', 'banana', 'kiwi', 'orange']):\n    return [s + char for s in strings]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given character is present in all strings in a list, and a function g that appends the character to each string in a predefined list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension, default function arguments, and the all() function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abacaba', n=7) -> bool:\n    return s == pattern and len(s) == n\n\ndef g(pattern='abacaba', n=7):\n    \"\"\"\n    This solution uses recursive backtracking to generate a string that follows the given pattern.\n    \"\"\"\n    def generate_string(idx, curr_str):\n        if idx == n:\n            return curr_str\n        for char in ['a', 'b', 'c']:\n            new_str = curr_str[:idx] + char + curr_str[idx + 1:]\n            if generate_string(idx + 1, new_str):\n                return new_str\n        return None\n    \n    return generate_string(0, pattern)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion, Backtracking, String Manipulation",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abacaba', n=7) -> bool:\n    return s == pattern and len(s) == n",
        "solution_func": "def g(pattern='abacaba', n=7):\n    \"\"\"\n    This solution uses recursive backtracking to generate a string that follows the given pattern.\n    \"\"\"\n    def generate_string(idx, curr_str):\n        if idx == n:\n            return curr_str\n        for char in ['a', 'b', 'c']:\n            new_str = curr_str[:idx] + char + curr_str[idx + 1:]\n            if generate_string(idx + 1, new_str):\n                return new_str\n        return None\n    \n    return generate_string(0, pattern)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires implementing a function g that generates a string following a specific pattern using recursive backtracking, and then checking if the generated string satisfies certain conditions defined in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding recursive backtracking and string manipulation in Python to generate a specific pattern. The solution function g recursively generates a string following the pattern 'abacaba' and the length of 7, and function f checks if the generated string matches the pattern and has the correct length.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], criteria=lambda x: x % 3 == 0, target_sum=27, max_len=6) -> bool:\n    return sum(numbers) == target_sum and all(criteria(num) for num in numbers) and len(numbers) <= max_len\n\ndef g(criteria=lambda x: x % 3 == 0, target_sum=27, max_len=6):\n    \"\"\"\n    This solution utilizes recursion to generate a list of numbers that satisfy the given criteria and sum up to the target_sum.\n    \"\"\"\n    def generate_numbers(idx, curr_list, curr_sum):\n        if idx == max_len:\n            return curr_list if curr_sum == target_sum else None\n        for num in range(1, target_sum + 1):\n            if criteria(num):\n                new_list = curr_list + [num]\n                new_sum = curr_sum + num\n                result = generate_numbers(idx + 1, new_list, new_sum)\n                if result:\n                    return result\n        return None\n    \n    return generate_numbers(0, [], 0)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion, Conditional Logic",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], criteria=lambda x: x % 3 == 0, target_sum=27, max_len=6) -> bool:\n    return sum(numbers) == target_sum and all(criteria(num) for num in numbers) and len(numbers) <= max_len",
        "solution_func": "def g(criteria=lambda x: x % 3 == 0, target_sum=27, max_len=6):\n    \"\"\"\n    This solution utilizes recursion to generate a list of numbers that satisfy the given criteria and sum up to the target_sum.\n    \"\"\"\n    def generate_numbers(idx, curr_list, curr_sum):\n        if idx == max_len:\n            return curr_list if curr_sum == target_sum else None\n        for num in range(1, target_sum + 1):\n            if criteria(num):\n                new_list = curr_list + [num]\n                new_sum = curr_sum + num\n                result = generate_numbers(idx + 1, new_list, new_sum)\n                if result:\n                    return result\n        return None\n    \n    return generate_numbers(0, [], 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of numbers that satisfy a given criteria, sum up to a target value, and have a maximum length. The solution uses recursion to generate such a list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use recursion to generate a list of numbers that meet specific criteria and sum up to a target value within a maximum length constraint. It also requires understanding lambda functions and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10) -> List[int]:\n    return [2, 8]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as Set Operations, Brute Force Search, and Conditional Logic.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pal=\"racecar\") -> bool:\n    return s == s[::-1]\n\ndef g(pal=\"racecar\") -> str:\n    def reverse(s):\n        if len(s) == 0:\n            return s\n        else:\n            return reverse(s[1:]) + s[0]\n    return reverse(pal)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10) -> List[int]:\n    return [2, 8]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if there are two numbers in the list that add up to a target value. The function g returns a list of integers. The puzzle is to find a list of integers that satisfy the condition of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how function f checks for a specific condition in a list of integers and how function g generates a list of integers. The challenge is to find a list of integers that meets the condition of function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int], target=25) -> bool:\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(target=25) -> List[int]:\n    return [8, 9, 8]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Brute Force Search, and List Operations.",
        "idx_generation": 19,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pal=\"racecar\") -> bool:\n    return s == s[::-1]\n\ndef g(pal=\"racecar\") -> str:\n    def reverse(s):\n        if len(s) == 0:\n            return s\n        else:\n            return reverse(s[1:]) + s[0]\n    return reverse(pal)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int], target=25) -> bool:\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=25) -> List[int]:\n    return [8, 9, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding three numbers in a list that sum up to a target value. The function f checks if there exist three numbers in the list that add up to the target value, while function g returns a list of numbers. The assert statement checks if function f returns True when called with the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding nested loops, list manipulation, and conditional statements in Python. It also tests the ability to write functions that work together to solve a specific problem.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=20, min_count=2) -> bool:\n    return sum(numbers) == target_sum and all((n >= 0 for n in numbers)) and len(numbers) >= min_count\n\ndef g(target_sum=20, min_count=2):\n    \"\"\"\n    This solution generates a list of integers that sum up to the target_sum.\n    \"\"\"\n    numbers = []\n    current_sum = 0\n\n    for i in range(min_count):\n        if current_sum >= target_sum:\n            break\n        numbers.append(target_sum // min_count)\n        current_sum += target_sum // min_count\n\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and list operations.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target_sum=20, min_count=2) -> bool:\n    return sum(numbers) == target_sum and all((n >= 0 for n in numbers)) and len(numbers) >= min_count",
        "solution_func": "def g(target_sum=20, min_count=2):\n    \"\"\"\n    This solution generates a list of integers that sum up to the target_sum.\n    \"\"\"\n    numbers = []\n    current_sum = 0\n\n    for i in range(min_count):\n        if current_sum >= target_sum:\n            break\n        numbers.append(target_sum // min_count)\n        current_sum += target_sum // min_count\n\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of integers that sum up to a target sum, with a minimum count of integers specified."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list of integers meets certain conditions such as summing up to a target sum, having non-negative values, and having a minimum count of integers.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(bool_values: List[bool], required_true_count=3, required_false_count=2) -> bool:\n    return bool_values.count(True) == required_true_count and bool_values.count(False) == required_false_count\n\ndef g(required_true_count=3, required_false_count=2):\n    \"\"\"\n    This solution generates a list of booleans with the required counts of True and False values.\n    \"\"\"\n    bool_values = [True] * required_true_count + [False] * required_false_count\n\n    return bool_values\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic and list manipulation to generate a list of booleans with specific counts of True and False values. The solution function uses list manipulation to create the required list of booleans and the puzzle function checks if the counts of True and False values in the input list match the required counts.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(bool_values: List[bool], required_true_count=3, required_false_count=2) -> bool:\n    return bool_values.count(True) == required_true_count and bool_values.count(False) == required_false_count",
        "solution_func": "def g(required_true_count=3, required_false_count=2):\n    \"\"\"\n    This solution generates a list of booleans with the required counts of True and False values.\n    \"\"\"\n    bool_values = [True] * required_true_count + [False] * required_false_count\n\n    return bool_values",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of boolean values and checks if the list contains a specific count of True and False values. The solution function g generates a list of boolean values with the required counts of True and False values."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as list manipulation, boolean operations, and function definition. It provides a clear problem-solving scenario and requires understanding of list operations and boolean comparisons.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, str]], target_sum=10, target_string='hello') -> bool:\n    return sum(num for num, _ in tuples) == target_sum and all((s == target_string for _, s in tuples))\n\ndef g(target_sum=10, target_string='hello'):\n    \"\"\"\n    This solution generates a list of tuples with the target sum and string.\n    \"\"\"\n    tuples = [(target_sum // 2, target_string), (target_sum // 2, target_string)]\n\n    return tuples\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves working with lists, tuples, and conditional logic to check if the sum of numbers in tuples matches a target sum and if all strings in tuples match a target string.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, str]], target_sum=10, target_string='hello') -> bool:\n    return sum(num for num, _ in tuples) == target_sum and all((s == target_string for _, s in tuples))",
        "solution_func": "def g(target_sum=10, target_string='hello'):\n    \"\"\"\n    This solution generates a list of tuples with the target sum and string.\n    \"\"\"\n    tuples = [(target_sum // 2, target_string), (target_sum // 2, target_string)]\n\n    return tuples",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples and two optional parameters, and checks if the sum of the first elements in the tuples is equal to one parameter and if all the second elements in the tuples are equal to the other parameter. The solution function g generates a list of tuples with the target sum and string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, tuple unpacking, and boolean expressions in Python. It also requires knowledge of function parameters and return types. The solution function g demonstrates how to create a list of tuples that satisfy the conditions of function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    return sorted(li, reverse=True) == list(range(998, -1, -1))\n\ndef g():\n    return [abs(998 - i) for i in range(999)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in reverse order and checking if it matches a specific pattern. The solution involves generating a list of numbers based on a specific formula to match the pattern.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(li: List[int]) -> bool:\n    return sorted(li, reverse=True) == list(range(998, -1, -1))",
        "solution_func": "def g():\n    return [abs(998 - i) for i in range(999)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a function that takes a list of integers and checks if the list is sorted in reverse order from 998 to 0. The solution function generates a list of integers in a specific pattern to satisfy the condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of integers in reverse order and checking if it matches a specific pattern. The solution function generates a list that meets the required condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    return all(num % 2 == 0 for num in li)\n\ndef g():\n    return [2 * i for i in range(999)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(li: List[int]) -> bool:\n    return all(num % 2 == 0 for num in li)",
        "solution_func": "def g():\n    return [2 * i for i in range(999)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are even, and a function g that generates a list of even numbers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and the modulo operator in Python. It also tests the ability to define functions and use them in assertions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='ab', segments=2) -> bool:\n    if len(pattern) != 2 or len(s) != 2 * segments:\n        return False\n    mapping = dict(zip(pattern, s))\n    return all(mapping[pattern[0]] != mapping[pattern[1]] for i in range(0, len(s), 2))\ndef g(pattern='ab', segments=2):\n    return ''.join([pattern[i % 2] for i in range(2 * segments)])\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='ab', segments=2) -> bool:\n    if len(pattern) != 2 or len(s) != 2 * segments:\n        return False\n    mapping = dict(zip(pattern, s))\n    return all(mapping[pattern[0]] != mapping[pattern[1]] for i in range(0, len(s), 2))",
        "solution_func": "def g(pattern='ab', segments=2):\n    return ''.join([pattern[i % 2] for i in range(2 * segments)])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string follows a specific pattern based on the input pattern and number of segments. The solution function g generates a string based on the pattern and segments provided, and f verifies if the generated string follows the pattern."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, dictionary mapping, list comprehension, and boolean logic in Python. It tests the ability to create a function that checks a specific pattern in a string and another function that generates a string based on given parameters.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, palindrome='radar') -> bool:\n    return s == palindrome\ndef g(palindrome='radar') -> str:\n    return palindrome\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, a=[1, 2, 3, 2, 1]) -> bool:\n    return lst == a[::-1]\ndef g(a=[1, 2, 3, 2, 1]):\n    return a[::-1]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, palindrome='radar') -> bool:\n    return s == palindrome",
        "solution_func": "def g(palindrome='radar') -> str:\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that returns a predefined palindrome string. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in understanding function definitions and checking for palindromes in Python. It can be used to introduce the concept of functions and string comparison in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, prime=17) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(prime=17) -> int:\n    return prime\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime and returning a boolean value based on the result. It also includes a default prime number argument in the functions.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, a=[1, 2, 3, 2, 1]) -> bool:\n    return lst == a[::-1]\ndef g(a=[1, 2, 3, 2, 1]):\n    return a[::-1]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int, prime=17) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime=17) -> int:\n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(num: int, prime=17) that checks if a given number is prime, and a function g(prime=17) that returns a specified prime number. The puzzle tests whether the function f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for prime numbers and understanding function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, distinct=[1, 2, 3, 4, 5]) -> bool:\n    return len(lst) == len(set(lst))\ndef g(distinct=[1, 2, 3, 4, 5]) -> list:\n    return distinct\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for distinct elements in a list and returning True if all elements are distinct.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, a=[1, 2, 3, 2, 1]) -> bool:\n    return lst == a[::-1]\ndef g(a=[1, 2, 3, 2, 1]):\n    return a[::-1]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, distinct=[1, 2, 3, 4, 5]) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g(distinct=[1, 2, 3, 4, 5]) -> list:\n    return distinct",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list has all distinct elements, and a function g that returns a predefined list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list uniqueness and function return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num_list: list, is_descending=True) -> bool:\n    sorted_list = sorted(num_list, reverse=is_descending)\n    return num_list == sorted_list\n\ndef g(length=5):\n    num_list = list(range(length, 0, -1))\n    return num_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers in descending order and checking if the original list is equal to the sorted list. This puzzle primarily focuses on Sorting and Ordering (Topic 14).",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True"
        ],
        "problem_func": "def f(num_list: list, is_descending=True) -> bool:\n    sorted_list = sorted(num_list, reverse=is_descending)\n    return num_list == sorted_list",
        "solution_func": "def g(length=5):\n    num_list = list(range(length, 0, -1))\n    return num_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given list of numbers is sorted in either ascending or descending order. The solution function g generates a list of numbers in descending order, and the puzzle is to determine if the list is sorted correctly by function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of numbers in either ascending or descending order and checking if the list is correctly sorted. The solution function generates a list in descending order, and the puzzle tests if the sorting function works as expected.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and len(set(tri)) == 3\ndef g(edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "Graph Theory (paths, edges, vertices)",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and len(set(tri)) == 3",
        "solution_func": "def g(edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of triangles forms a valid triangle based on a given set of edges."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires checking if a given list of triangles satisfies certain conditions based on a set of edges provided. The solution function g() constructs a graph based on the edges and finds a valid triangle within the graph.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and edges.index([a, b]) < edges.index([b, c]) < edges.index([c, a])\ndef g(edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "Graph Theory (paths, edges, vertices)",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and edges.index([a, b]) < edges.index([b, c]) < edges.index([c, a])",
        "solution_func": "def g(edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of triangles forms a cycle in a graph defined by a list of edges."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding graph theory concepts such as cycles and graph traversal in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(nums: list) -> bool:\n    return len(nums) == len(set(nums))\n\ndef g():\n    return random.sample(range(1, 50), 5)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to set operations and random sampling.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "\nimport sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n)\n\ndef g():\n    import random\n    while True:\n        number = random.randint(10, 100)\n        if sympy.isprime(number):\n            return number\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(nums: list) -> bool:\n    return len(nums) == len(set(nums))",
        "solution_func": "def g():\n    return random.sample(range(1, 50), 5)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 5 unique random numbers between 1 and 50, and checking if all numbers in the list are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the random module to generate a list of random numbers and then checking if all numbers in the list are unique using a set.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport string\nimport random\n\ndef f(s: str) -> bool:\n    return any(c.islower() for c in s) and any(c.isupper() for c in s)\n\ndef g():\n    return ''.join(random.choices(string.ascii_letters, k=8))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "\nimport sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n)\n\ndef g():\n    import random\n    while True:\n        number = random.randint(10, 100)\n        if sympy.isprime(number):\n            return number\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import string\nimport random\n\ndef f(s: str) -> bool:\n    return any(c.islower() for c in s) and any(c.isupper() for c in s)",
        "solution_func": "def g():\n    return ''.join(random.choices(string.ascii_letters, k=8))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random string of length 8 and checking if it contains both lowercase and uppercase letters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the random module to generate a random string and then checking if the string contains both lowercase and uppercase letters using the islower() and isupper() string methods.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(nums: list) -> bool:\n    return sum(nums) > 3\n\ndef g():\n    return [random.random() for _ in range(7)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves random number generation and list manipulation to check if the sum of the generated numbers is greater than 3.",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "\nimport sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n)\n\ndef g():\n    import random\n    while True:\n        number = random.randint(10, 100)\n        if sympy.isprime(number):\n            return number\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(nums: list) -> bool:\n    return sum(nums) > 3",
        "solution_func": "def g():\n    return [random.random() for _ in range(7)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of 7 random numbers and check if the sum of these numbers is greater than 3."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the random module in Python to generate a list of random numbers and then checking if the sum of these numbers is greater than 3.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(permutations: List[str], char_list=['a', 'b', 'c'], length=3) -> bool:\n    return len(permutations) == len(set(permutations)) >= len(char_list) and all((len(perm) == length for perm in permutations))\ndef g(char_list=['a', 'b', 'c'], length=3):\n    from itertools import permutations\n    return [''.join(perm) for perm in permutations(char_list, length)]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Permutations and Combinations",
        "idx_generation": 20,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(permutations: List[str], char_list=['a', 'b', 'c'], length=3) -> bool:\n    return len(permutations) == len(set(permutations)) >= len(char_list) and all((len(perm) == length for perm in permutations))",
        "solution_func": "def g(char_list=['a', 'b', 'c'], length=3):\n    from itertools import permutations\n    return [''.join(perm) for perm in permutations(char_list, length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating all possible permutations of a given list of characters and checking if the permutations are unique and have the specified length."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to generate permutations using itertools and check for uniqueness and length of the permutations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, target=10) -> bool:\n    return any(sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)+1))\ndef g(target=10):\n    return [3, 1, 4, 1, 5, 9, 2]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as List Manipulation, Brute Force Search, and Conditional Logic.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list, target=10) -> bool:\n    return any(sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)+1))",
        "solution_func": "def g(target=10):\n    return [3, 1, 4, 1, 5, 9, 2]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a subarray in a list of numbers that sums up to a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there exists a subarray in a given list of numbers that sums up to a specified target value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, value=42) -> bool:\n    return any(data[key] == value for key in data)\ndef g(value=42):\n    return {'answer': 42, 'question': 'What is the meaning of life, the universe, and everything?'}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking for a specific value in the dictionary. The solution creates a dictionary with a specific key-value pair and then checks if the value exists in the dictionary.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True"
        ],
        "problem_func": "def f(data: dict, value=42) -> bool:\n    return any(data[key] == value for key in data)",
        "solution_func": "def g(value=42):\n    return {'answer': 42, 'question': 'What is the meaning of life, the universe, and everything?'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specific value exists in a dictionary, and a function g that returns a dictionary with a specific value. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and boolean expressions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, char='a', n=5) -> bool:\n    assert len(s) >= n and char.isalpha()\n\n    def check_condition(sub):\n        return sub.count(char) % 2 == 0\n\n    for i in range(len(s) - n + 1):\n        if check_condition(s[i:i+n]):\n            return True\n    return False\n\ndef g(char='a', n=5):\n    s = 'abracadabra'\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, char='a', n=5) -> bool:\n    assert len(s) >= n and char.isalpha()\n\n    def check_condition(sub):\n        return sub.count(char) % 2 == 0\n\n    for i in range(len(s) - n + 1):\n        if check_condition(s[i:i+n]):\n            return True\n    return False",
        "solution_func": "def g(char='a', n=5):\n    s = 'abracadabra'\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a string, a character, and a number as input, and checks if there exists a substring of the input string of length n where the character appears an even number of times. The solution function g returns a specific string, and the puzzle is to ensure that f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, function definition, and assertion testing. It tests the understanding of string slicing, character counting, and boolean conditions in Python functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='b', val=10) -> bool:\n    assert key in d.keys() and d[key] == val\n\n    for k, v in d.items():\n        if k != key and v > val:\n            return True\n    return False\n\ndef g(key='b', val=10):\n    d = {'a': 5, 'b': 10, 'c': 15, 'd': 20}\n    return d\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, assertion, and conditional logic.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='b', val=10) -> bool:\n    assert key in d.keys() and d[key] == val\n\n    for k, v in d.items():\n        if k != key and v > val:\n            return True\n    return False",
        "solution_func": "def g(key='b', val=10):\n    d = {'a': 5, 'b': 10, 'c': 15, 'd': 20}\n    return d",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary as input and checks if a specific key-value pair exists in the dictionary. The function g returns a dictionary with predefined key-value pairs. The puzzle tests if function f returns True when called with the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding dictionary manipulation and function calls in Python. It tests the ability to check for specific key-value pairs in a dictionary.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Set\n\ndef f(s: Set[int], n=3) -> bool:\n    assert len(s) > 0 and all(num % n == 0 for num in s)\n\n    return sum(s) % n == 0\n\ndef g(n=3):\n    s = {3, 6, 9, 12, 15}\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, set operations, and conditional logic.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Set\n\ndef f(s: Set[int], n=3) -> bool:\n    assert len(s) > 0 and all(num % n == 0 for num in s)\n\n    return sum(s) % n == 0",
        "solution_func": "def g(n=3):\n    s = {3, 6, 9, 12, 15}\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a set of integers and a number n as input, and checks if the sum of the integers in the set is divisible by n. The solution function g returns a specific set of integers and the puzzle is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding set operations, list comprehensions, and modulo arithmetic in Python. It tests the student's ability to define functions, work with sets, and apply mathematical conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    num_set = set(numbers)\n    assert len(num_set) >= 3\n    for num in numbers:\n        assert num > 10\n    return all(num > 0 for num in numbers)\n\ndef g():\n    return [15, 20, 12, 25, 30, 11]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations, conditional logic, and list manipulation.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    word_set = set(words)\n    assert len(word_set) == len(words) > 1\n    for word in words:\n        assert word.isalpha()\n    return all(word.endswith('y') for word in words)\n\ndef g():\n    return ['happy', 'lucky', 'sunny', 'angry', 'funny', 'windy']\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    num_set = set(numbers)\n    assert len(num_set) >= 3\n    for num in numbers:\n        assert num > 10\n    return all(num > 0 for num in numbers)",
        "solution_func": "def g():\n    return [15, 20, 12, 25, 30, 11]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a list of integers, checks if the list contains at least 3 unique numbers, all numbers are greater than 10, and all numbers are positive. The solution function returns a specific list of integers that meets these criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking conditions on a list of integers and ensuring they meet specific criteria. The solution function provides a list that satisfies these conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    long_string = any(len(s) > 5 for s in strings)\n    assert any('z' in s for s in strings)\n    return long_string and all('z' in s for s in strings)\n\ndef g():\n    return ['pizza', 'amazing', 'zebra', 'buzz', 'fizz', 'haze']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    word_set = set(words)\n    assert len(word_set) == len(words) > 1\n    for word in words:\n        assert word.isalpha()\n    return all(word.endswith('y') for word in words)\n\ndef g():\n    return ['happy', 'lucky', 'sunny', 'angry', 'funny', 'windy']\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    long_string = any(len(s) > 5 for s in strings)\n    assert any('z' in s for s in strings)\n    return long_string and all('z' in s for s in strings)",
        "solution_func": "def g():\n    return ['pizza', 'amazing', 'zebra', 'buzz', 'fizz', 'haze']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f that takes a list of strings as input and checks if any string in the list has a length greater than 5, and if all strings contain the letter 'z'. The solution function g returns a specific list of strings that satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking string lengths and the presence of a specific character in a list of strings. The solution function returns a list that meets the conditions of the puzzle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    assert len(numbers) >= 4\n    return all(num % 2 == 0 for num in numbers)\n\ndef g():\n    return [2, 4, 6, 8, 10, 12]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    word_set = set(words)\n    assert len(word_set) == len(words) > 1\n    for word in words:\n        assert word.isalpha()\n    return all(word.endswith('y') for word in words)\n\ndef g():\n    return ['happy', 'lucky', 'sunny', 'angry', 'funny', 'windy']\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    assert len(numbers) >= 4\n    return all(num % 2 == 0 for num in numbers)",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 10, 12]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and checks if all numbers in the list are even. The solution function g returns a list of even numbers, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and the modulo operator in Python. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str, target_substring='python', operation='contains') -> bool:\n    if operation == 'contains':\n        return target_substring in string\n    elif operation == 'startswith':\n        return string.startswith(target_substring)\n    else:\n        return False\n\ndef g(target_substring='python', operation='contains') -> str:\n    import random\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    if operation == 'contains':\n        return ''.join(random.choices(alphabet, k=10)) + target_substring + ''.join(random.choices(alphabet, k=10))\n    elif operation == 'startswith':\n        return target_substring + ''.join(random.choices(alphabet, k=15))\n    else:\n        return ''\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str, target_substring='python', operation='contains') -> bool:\n    if operation == 'contains':\n        return target_substring in string\n    elif operation == 'startswith':\n        return string.startswith(target_substring)\n    else:\n        return False",
        "solution_func": "def g(target_substring='python', operation='contains') -> str:\n    import random\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    if operation == 'contains':\n        return ''.join(random.choices(alphabet, k=10)) + target_substring + ''.join(random.choices(alphabet, k=10))\n    elif operation == 'startswith':\n        return target_substring + ''.join(random.choices(alphabet, k=15))\n    else:\n        return ''",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given string contains or starts with a target substring based on the specified operation, and g generates random strings with the target substring at different positions. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of function parameters and return types in Python. It tests the student's knowledge of string operations and function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sorted_list: List[int], arr=[1, 3, 5, 7, 9]) -> bool:\n    return sorted_list == sorted(arr)\n\ndef g(arr=[1, 3, 5, 7, 9]):\n    return sorted(arr)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if it is equal to a predefined sorted list. This involves topics related to sorting and ordering, list operations, and possibly algorithm optimization.",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], s='pythonpuzzle', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='pythonpuzzle', target=''):\n    def find_indices(s, target, i, j, k):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n        if k < len(s):\n            return find_indices(s, target, i, j, k+1)\n        if j < len(s):\n            return find_indices(s, target, i, j+1, 1)\n        if i < len(s):\n            return find_indices(s, target, i+1, 0, 1)\n        return []\n    return find_indices(s, target, 0, 0, 1)\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(sorted_list: List[int], arr=[1, 3, 5, 7, 9]) -> bool:\n    return sorted_list == sorted(arr)",
        "solution_func": "def g(arr=[1, 3, 5, 7, 9]):\n    return sorted(arr)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given list is sorted in ascending order and matches a predefined list. The solution function g generates a sorted list based on a predefined list and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple comparison and sorting exercise that can help students practice working with lists and sorting algorithms in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g():\n    import random\n    nums = random.sample(range(1, 100), 5)\n    return nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Conditional Logic and Importing Modules (Itertools, etc.)",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, limit=10) -> bool:\n    return len(set(s)) == len(s) and len(s) <= limit\ndef g(limit=10):\n    import string\n    import random\n    unique_chars = random.sample(string.ascii_lowercase, limit)\n    return ''.join(unique_chars)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)",
        "solution_func": "def g():\n    import random\n    nums = random.sample(range(1, 100), 5)\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(nums: list) that checks if a list of numbers contains both even and odd numbers. The solution function g() generates a list of 5 random numbers between 1 and 100 and returns it. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the any() function, and random number generation in Python. It also tests the ability to check for both even and odd numbers in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    import random\n    import string\n    word = ''.join(random.choices(string.ascii_lowercase, k=5))\n    return word + word[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 21,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, limit=10) -> bool:\n    return len(set(s)) == len(s) and len(s) <= limit\ndef g(limit=10):\n    import string\n    import random\n    unique_chars = random.sample(string.ascii_lowercase, limit)\n    return ''.join(unique_chars)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    import random\n    import string\n    word = ''.join(random.choices(string.ascii_lowercase, k=5))\n    return word + word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated string concatenated with its reverse is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a randomly generated string concatenated with its reverse is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, contains='abc', custom_rule=lambda x: x.islower(), length=5) -> bool:\n    return len(text) == length and all(char in contains for char in text) and custom_rule(text)\n\ndef g(contains='abc', custom_rule=lambda x: x.islower(), length=5):\n    \"\"\"\n    This solution iterates through possible combinations of characters to form a string that meets the specified conditions.\n    \"\"\"\n    import itertools\n    for combination in itertools.product(contains, repeat=length):\n        candidate = ''.join(combination)\n        if custom_rule(candidate):\n            return candidate\n    return ''\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic to generate a string that meets certain conditions.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], criteria=lambda x: x % 3 == 0, target_sum=27, max_len=6) -> bool:\n    return sum(numbers) == target_sum and all(criteria(num) for num in numbers) and len(numbers) <= max_len\n\ndef g(criteria=lambda x: x % 3 == 0, target_sum=27, max_len=6):\n    \"\"\"\n    This solution utilizes recursion to generate a list of numbers that satisfy the given criteria and sum up to the target_sum.\n    \"\"\"\n    def generate_numbers(idx, curr_list, curr_sum):\n        if idx == max_len:\n            return curr_list if curr_sum == target_sum else None\n        for num in range(1, target_sum + 1):\n            if criteria(num):\n                new_list = curr_list + [num]\n                new_sum = curr_sum + num\n                result = generate_numbers(idx + 1, new_list, new_sum)\n                if result:\n                    return result\n        return None\n    \n    return generate_numbers(0, [], 0)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str, contains='abc', custom_rule=lambda x: x.islower(), length=5) -> bool:\n    return len(text) == length and all(char in contains for char in text) and custom_rule(text)",
        "solution_func": "def g(contains='abc', custom_rule=lambda x: x.islower(), length=5):\n    \"\"\"\n    This solution iterates through possible combinations of characters to form a string that meets the specified conditions.\n    \"\"\"\n    import itertools\n    for combination in itertools.product(contains, repeat=length):\n        candidate = ''.join(combination)\n        if custom_rule(candidate):\n            return candidate\n    return ''",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a string of a specific length that contains only certain characters and satisfies a custom rule."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text meets certain conditions, and a function g that generates a string meeting those conditions. The solution g iterates through combinations of characters to find a valid string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(length=5):\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    half_length = length // 2\n    palindrome_half = ''.join(random.choices(letters, k=half_length))\n    if length % 2 == 0:\n        return palindrome_half + palindrome_half[::-1]\n    else:\n        return palindrome_half + random.choice(letters) + palindrome_half[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.), Pattern Recognition",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, length=5, range_start=1, range_end=10) -> bool:\n    return len(set(nums)) == len(nums) and len(nums) == length and all(range_start <= num <= range_end for num in nums)\n\ndef g(length=5, range_start=1, range_end=10):\n    import random\n    return random.sample(range(range_start, range_end+1), length)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(length=5):\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    half_length = length // 2\n    palindrome_half = ''.join(random.choices(letters, k=half_length))\n    if length % 2 == 0:\n        return palindrome_half + palindrome_half[::-1]\n    else:\n        return palindrome_half + random.choice(letters) + palindrome_half[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome. The function g(length) generates a random string that may or may not be a palindrome. The assert statement checks if the generated string is indeed a palindrome using the f function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    import sympy\n    return sympy.randprime(1, 100)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves prime number generation using a library function and checking if the generated number is prime using a simple algorithm. It also involves importing a module for prime number generation.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, length=5, range_start=1, range_end=10) -> bool:\n    return len(set(nums)) == len(nums) and len(nums) == length and all(range_start <= num <= range_end for num in nums)\n\ndef g(length=5, range_start=1, range_end=10):\n    import random\n    return random.sample(range(range_start, range_end+1), length)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import sympy\n    return sympy.randprime(1, 100)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g() that generates a random prime number between 1 and 100 using the sympy library. The puzzle requires g() to return a prime number that satisfies the condition of f(num) being True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and the sympy library in Python. It requires them to implement a function that checks for prime numbers and use a library function to generate prime numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(strings: list) -> bool:\n    return len(set(strings)) == len(strings)\n\ndef g(length=5):\n    import random\n    import string\n    return random.sample([''.join(random.choices(string.ascii_lowercase, k=5)) for _ in range(length)], length)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, length=5, range_start=1, range_end=10) -> bool:\n    return len(set(nums)) == len(nums) and len(nums) == length and all(range_start <= num <= range_end for num in nums)\n\ndef g(length=5, range_start=1, range_end=10):\n    import random\n    return random.sample(range(range_start, range_end+1), length)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(strings: list) -> bool:\n    return len(set(strings)) == len(strings)",
        "solution_func": "def g(length=5):\n    import random\n    import string\n    return random.sample([''.join(random.choices(string.ascii_lowercase, k=5)) for _ in range(length)], length)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random strings of a specified length and check if all the strings in the list are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using random module to generate random strings and set data structure to check for uniqueness. The solution function g() generates a list of random strings of a specified length, and the puzzle function f() checks if all the strings in the list are unique.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 7\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome (reads the same forwards and backwards) by comparing the word to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f(word) that returns True if the input word is a palindrome, and a function g() that returns the word 'radar'. The assert statement checks if f(g()) returns True, indicating that 'radar' is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    return num % 2 == 0\n\ndef g():\n    return 10\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is even.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 7\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    return num % 2 == 0",
        "solution_func": "def g():\n    return 10",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num: int) that returns True if the input number is even, and a function g() that returns the number 10. The puzzle asserts that calling f with the output of g should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of defining functions, passing arguments, and using the modulo operator to check for even numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(phrase: str) -> bool:\n    clean_phrase = ''.join(char.lower() for char in phrase if char.isalnum())\n    return clean_phrase == clean_phrase[::-1]\n\ndef g() -> str:\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation and Conditional Logic are used in the problem f and solution g.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(num < 0 for num in lst)\n\ndef g() -> list:\n    return [num for num in range(-10, 0)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(phrase: str) -> bool:\n    clean_phrase = ''.join(char.lower() for char in phrase if char.isalnum())\n    return clean_phrase == clean_phrase[::-1]",
        "solution_func": "def g() -> str:\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "Given a function f that checks if a given phrase is a palindrome after removing non-alphanumeric characters and converting to lowercase, and a function g that returns a specific phrase, determine if the phrase 'A man, a plan, a canal, Panama!' is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a specific phrase is a palindrome after cleaning it up. The solution function g returns the phrase 'A man, a plan, a canal, Panama!' which is then checked by function f to see if it is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\n\ndef g() -> list:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and comparison of rows and columns.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(num < 0 for num in lst)\n\ndef g() -> list:\n    return [num for num in range(-10, 0)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))",
        "solution_func": "def g() -> list:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given matrix is symmetric across its main diagonal, and a function g that returns a specific matrix. The assertion checks if the function f returns True for the matrix returned by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding matrix symmetry and the use of zip and list comprehension in Python. It tests the student's ability to implement and verify matrix symmetry.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(even_sum: int, lst=[3, 8, 2, 10, 7, 6]) -> bool:\n    total = sum(num for num in lst if num % 2 == 0)\n    return total == even_sum\n\ndef g(lst=[3, 8, 2, 10, 7, 6]):\n    return sum(num for num in lst if num % 2 == 0)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the sum of even numbers in a list matches a given value.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, arr=[4, 9, 1, 3, 8, 7]) -> bool:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum\n\ndef g(arr=[4, 9, 1, 3, 8, 7]):\n    if len(arr) <= 2:\n        return sum(arr)\n    incl = arr[0]\n    excl = 0\n    for num in arr[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(even_sum: int, lst=[3, 8, 2, 10, 7, 6]) -> bool:\n    total = sum(num for num in lst if num % 2 == 0)\n    return total == even_sum",
        "solution_func": "def g(lst=[3, 8, 2, 10, 7, 6]):\n    return sum(num for num in lst if num % 2 == 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of even numbers in a list is equal to a given even sum, and a function g that calculates the sum of even numbers in a list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, conditional statements, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(prime_product: int, lst=[2, 5, 7, 4, 3, 9]) -> bool:\n    product = 1\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                product *= num\n    return product == prime_product\n\ndef g(lst=[2, 5, 7, 4, 3, 9]):\n    product = 1\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                product *= num\n    return product\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and calculating the product of prime numbers in a list.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, arr=[4, 9, 1, 3, 8, 7]) -> bool:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum\n\ndef g(arr=[4, 9, 1, 3, 8, 7]):\n    if len(arr) <= 2:\n        return sum(arr)\n    incl = arr[0]\n    excl = 0\n    for num in arr[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(prime_product: int, lst=[2, 5, 7, 4, 3, 9]) -> bool:\n    product = 1\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                product *= num\n    return product == prime_product",
        "solution_func": "def g(lst=[2, 5, 7, 4, 3, 9]):\n    product = 1\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                product *= num\n    return product",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where the first function checks if the product of prime numbers in a given list matches a specified prime product, and the second function calculates the product of prime numbers in a list. The assertion at the end checks if the first function returns True when called with the result of the second function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, loops, conditionals, and function calls in Python. It provides a practical exercise in implementing prime number checks and product calculations in a list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(is_palindrome: bool, word=\"radar\") -> bool:\n    return word == word[::-1] == is_palindrome\n\ndef g(word=\"radar\"):\n    return word[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, arr=[4, 9, 1, 3, 8, 7]) -> bool:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum\n\ndef g(arr=[4, 9, 1, 3, 8, 7]):\n    if len(arr) <= 2:\n        return sum(arr)\n    incl = arr[0]\n    excl = 0\n    for num in arr[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(is_palindrome: bool, word=\"radar\") -> bool:\n    return word == word[::-1] == is_palindrome",
        "solution_func": "def g(word=\"radar\"):\n    return word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given word is a palindrome, and another function g that returns the reverse of a word. The assertion tests if the reverse of a word is a palindrome."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle is not suitable for teaching Python as it has a logical error in the definition of function f. The function f is incorrectly checking if the word is equal to both its reverse and the boolean value is_palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(x: List[int], n=200, s=40000000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 200, s = 40000000):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(x: List[int], n=200, s=40000000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n = 200, s = 40000000):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of integers meets certain conditions, and a function g that generates a list of integers to satisfy those conditions. The goal is to ensure the sum and length of the list match specified values, and that all elements are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the sum, length, and uniqueness of elements in a list, and generating a list that meets these criteria. The solution function g generates a list that satisfies the conditions set by function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(x: List[int], n=250, s=50000000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 250, s = 50000000):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(x: List[int], n=250, s=50000000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n = 250, s = 50000000):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of integers that satisfies certain conditions based on the input parameters n and s."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of integers that has a specific length and sum, with unique elements and certain patterns. The solution function g() generates the list based on the input parameters n and s, and the puzzle function f() checks if the generated list meets the required conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(x: List[int], n=175, s=30000000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 175, s = 30000000):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, Conditional Logic, Set Operations, and Brute Force Search.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(x: List[int], n=175, s=30000000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n = 175, s = 30000000):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of integers meets certain conditions, and a function g that generates a list of integers to satisfy those conditions. The goal is to find a list of integers that satisfies the conditions specified in function f when passed to function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the length, sum, and uniqueness of elements in a list to meet specific criteria. Function g generates a list of integers to meet these criteria and function f verifies if the generated list satisfies the conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(s: int, limit=10) -> bool:\n    return s > limit\n\ndef g(limit=10):\n    \"\"\"\n    This solution generates a list of prime numbers up to the given limit and calculates their sum.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, limit) if is_prime(num)]\n    return sum(primes)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, importing modules (math), number theory (primes), and assertion testing.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pattern='abacaba', n=7) -> bool:\n    return s == pattern and len(s) == n\n\ndef g(pattern='abacaba', n=7):\n    \"\"\"\n    This solution uses recursive backtracking to generate a string that follows the given pattern.\n    \"\"\"\n    def generate_string(idx, curr_str):\n        if idx == n:\n            return curr_str\n        for char in ['a', 'b', 'c']:\n            new_str = curr_str[:idx] + char + curr_str[idx + 1:]\n            if generate_string(idx + 1, new_str):\n                return new_str\n        return None\n    \n    return generate_string(0, pattern)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(s: int, limit=10) -> bool:\n    return s > limit",
        "solution_func": "def g(limit=10):\n    \"\"\"\n    This solution generates a list of prime numbers up to the given limit and calculates their sum.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, limit) if is_prime(num)]\n    return sum(primes)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the sum of prime numbers up to a given limit is greater than the limit itself."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires generating a list of prime numbers up to a given limit and calculating their sum. The solution then checks if this sum is greater than the limit.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(word='radar'):\n    return word\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], s='pythonpuzzle', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='pythonpuzzle', target=''):\n    def find_indices(s, target, i, j, k):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n        if k < len(s):\n            return find_indices(s, target, i, j, k+1)\n        if j < len(s):\n            return find_indices(s, target, i, j+1, 1)\n        if i < len(s):\n            return find_indices(s, target, i+1, 0, 1)\n        return []\n    return find_indices(s, target, 0, 0, 1)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(word='radar'):\n    return word",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle consists of two functions, f(s: str) -> bool which checks if a given string is a palindrome, and g(word='radar') which returns a word. The assert statement checks if the word returned by g() is a palindrome using f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(triplet: List[int], values=[3, 4, 5, 6, 8, 10]) -> bool:\n    a, b, c = triplet\n    return a ** 2 + b ** 2 == c ** 2 and all(num in values for num in triplet)\n\ndef g(values=[3, 4, 5, 6, 8, 10]):\n    for a in values:\n        for b in values:\n            for c in values:\n                if a != b and b != c and a != c and a ** 2 + b ** 2 == c ** 2:\n                    return [a, b, c]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and len(set(tri)) == 3\ndef g(edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(triplet: List[int], values=[3, 4, 5, 6, 8, 10]) -> bool:\n    a, b, c = triplet\n    return a ** 2 + b ** 2 == c ** 2 and all(num in values for num in triplet)",
        "solution_func": "def g(values=[3, 4, 5, 6, 8, 10]):\n    for a in values:\n        for b in values:\n            for c in values:\n                if a != b and b != c and a != c and a ** 2 + b ** 2 == c ** 2:\n                    return [a, b, c]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given triplet of numbers forms a Pythagorean triplet and all numbers are present in a predefined list. The solution function g generates a Pythagorean triplet from a predefined list of values."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding Pythagorean triplets and list comprehension in Python. It is a good exercise for practicing list manipulation and conditional statements in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], word_list=[\"racecar\", \"level\", \"deified\", \"civic\", \"radar\"]) -> bool:\n    return ''.join(words) in word_list and ''.join(words) == ''.join(words)[::-1]\n\ndef g(word_list=[\"racecar\", \"level\", \"deified\", \"civic\", \"radar\"]):\n    return list(word_list[0])\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and len(set(tri)) == 3\ndef g(edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], word_list=[\"racecar\", \"level\", \"deified\", \"civic\", \"radar\"]) -> bool:\n    return ''.join(words) in word_list and ''.join(words) == ''.join(words)[::-1]",
        "solution_func": "def g(word_list=[\"racecar\", \"level\", \"deified\", \"civic\", \"radar\"]):\n    return list(word_list[0])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that takes a list of strings and checks if the concatenation of the strings is a palindrome and exists in a predefined word list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, list operations, and checking for palindromes in Python. It also tests the student's understanding of function parameters and return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(seq: List[int], nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]) -> bool:\n    if len(seq) < 3:\n        return False\n    return all(a + b == c for a, b, c in zip(seq, seq[1:], seq[2:])) and all(num in nums for num in seq)\n\ndef g(nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]):\n    fib_seq = [0, 1]\n    while len(fib_seq) < len(nums):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Pattern Recognition, Mathematical Operations",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and len(set(tri)) == 3\ndef g(edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(seq: List[int], nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]) -> bool:\n    if len(seq) < 3:\n        return False\n    return all(a + b == c for a, b, c in zip(seq, seq[1:], seq[2:])) and all(num in nums for num in seq)",
        "solution_func": "def g(nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]):\n    fib_seq = [0, 1]\n    while len(fib_seq) < len(nums):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle checks if the list forms a Fibonacci sequence and all numbers in the list are part of a predefined Fibonacci sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list of integers forms a Fibonacci sequence and if all numbers in the list are part of a predefined Fibonacci sequence. The solution generates the predefined Fibonacci sequence and checks if it satisfies the conditions of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom itertools import permutations\n\ndef f(words: list, target_word='listen') -> bool:\n    return any(''.join(p) == target_word for p in permutations(words))\ndef g(target_word='listen'):\n    return ''.join(sorted(target_word, reverse=True))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, importing modules (Itertools), and permutations and combinations.",
        "idx_generation": 22,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True"
        ],
        "problem_func": "from itertools import permutations\n\ndef f(words: list, target_word='listen') -> bool:\n    return any(''.join(p) == target_word for p in permutations(words))",
        "solution_func": "def g(target_word='listen'):\n    return ''.join(sorted(target_word, reverse=True))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if any permutation of a list of words is equal to a target word. The solution involves sorting the target word in reverse order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of permutations, string manipulation, and list sorting in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, a=[1, 2, 3]) -> bool:\n    return lst == a[::-1]\n\ndef g(a=[1, 2, 3]):\n    return a[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and comparison.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, a='hello') -> bool:\n    return sorted(s) == sorted(a)\ndef g(a='hello'):\n    return ''.join(sorted(a))\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, a=[1, 2, 3]) -> bool:\n    return lst == a[::-1]",
        "solution_func": "def g(a=[1, 2, 3]):\n    return a[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list is equal to a predefined list in reverse order, and a function g that returns the predefined list in reverse order. The puzzle tests whether calling function f with the output of function g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves list manipulation, function definition, and understanding of list slicing and comparison.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, a={'key1': 'value1', 'key2': 'value2'}) -> bool:\n    return d == a\n\ndef g(a={'key1': 'value1', 'key2': 'value2'}):\n    return a\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and comparison. The solution function returns a dictionary and the puzzle function checks if the input dictionary is equal to a predefined dictionary.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, a='hello') -> bool:\n    return sorted(s) == sorted(a)\ndef g(a='hello'):\n    return ''.join(sorted(a))\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict, a={'key1': 'value1', 'key2': 'value2'}) -> bool:\n    return d == a",
        "solution_func": "def g(a={'key1': 'value1', 'key2': 'value2'}):\n    return a",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given dictionary is equal to a predefined dictionary, and a function g that returns the predefined dictionary. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, default arguments, dictionary comparison, and function invocation. It tests the student's understanding of Python functions and dictionary operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: set, a={1, 2, 3}) -> bool:\n    return s.issuperset(a)\n\ndef g(a={1, 2, 3}):\n    return a\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and conditional logic.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, a='hello') -> bool:\n    return sorted(s) == sorted(a)\ndef g(a='hello'):\n    return ''.join(sorted(a))\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: set, a={1, 2, 3}) -> bool:\n    return s.issuperset(a)",
        "solution_func": "def g(a={1, 2, 3}):\n    return a",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given set is a superset of a predefined set, and a function g that returns a predefined set. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves working with sets and understanding the concept of superset. It also tests the students' understanding of function calls and assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sequence: List[int], expected_next=13) -> bool:\n    \n    return sequence[-1] == expected_next\n\ndef g(expected_next=13) -> List[int]:\n    \n    sequence = [2, 5, 8, 11]\n    sequence.append(expected_next)\n    \n    return sequence\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(sequence: List[int], expected_next=13) -> bool:\n    \n    return sequence[-1] == expected_next",
        "solution_func": "def g(expected_next=13) -> List[int]:\n    \n    sequence = [2, 5, 8, 11]\n    sequence.append(expected_next)\n    \n    return sequence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if the last element of a given list is equal to an expected value, and g generates a list by adding the expected value to a predefined sequence. The puzzle tests if the solution function g produces a list that satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the last element of a list generated by function g is equal to the expected value provided as an argument. The solution function g appends the expected value to a predefined sequence and returns the updated list. The assert statement verifies if the solution function g correctly generates a list that satisfies the condition in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(path: List[str], goal_reached=True) -> bool:\n    \n    return goal_reached and 'O' not in path\n\ndef g(goal_reached=True) -> List[str]:\n    \n    maze = [\n        ['#', '#', '#', '#', '#'],\n        ['#', 'S', ' ', ' ', '#'],\n        ['#', ' ', '#', ' ', '#'],\n        ['#', ' ', ' ', ' ', '#'],\n        ['#', '#', '#', 'G', '#']\n    ]\n    \n    path = ['S']\n    current_pos = (1, 1)\n    \n    while True:\n        if current_pos == (3, 3):\n            path.append('G')\n            return path\n        \n        if maze[current_pos[0] + 1][current_pos[1]] != '#':\n            path.append('D')\n            current_pos = (current_pos[0] + 1, current_pos[1])\n        elif maze[current_pos[0]][current_pos[1] + 1] != '#':\n            path.append('R')\n            current_pos = (current_pos[0], current_pos[1] + 1)\n        else:\n            path.append('U')\n            current_pos = (current_pos[0] - 1, current_pos[1])\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves pathfinding in a maze using conditional logic and backtracking. It also includes list manipulation and assertion testing.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(path: List[str], goal_reached=True) -> bool:\n    \n    return goal_reached and 'O' not in path",
        "solution_func": "def g(goal_reached=True) -> List[str]:\n    \n    maze = [\n        ['#', '#', '#', '#', '#'],\n        ['#', 'S', ' ', ' ', '#'],\n        ['#', ' ', '#', ' ', '#'],\n        ['#', ' ', ' ', ' ', '#'],\n        ['#', '#', '#', 'G', '#']\n    ]\n    \n    path = ['S']\n    current_pos = (1, 1)\n    \n    while True:\n        if current_pos == (3, 3):\n            path.append('G')\n            return path\n        \n        if maze[current_pos[0] + 1][current_pos[1]] != '#':\n            path.append('D')\n            current_pos = (current_pos[0] + 1, current_pos[1])\n        elif maze[current_pos[0]][current_pos[1] + 1] != '#':\n            path.append('R')\n            current_pos = (current_pos[0], current_pos[1] + 1)\n        else:\n            path.append('U')\n            current_pos = (current_pos[0] - 1, current_pos[1])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specific condition is met based on a given list of strings, and a function g that generates a path through a maze represented as a 2D list. The goal is to find a path from the start 'S' to the goal 'G' without encountering obstacles ('#')."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple maze traversal problem where the goal is to reach the 'G' position in the maze without encountering obstacles. The function f checks if the goal is reached without encountering the obstacle 'O' in the path generated by function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, char='a', n=5) -> bool:\n    return s.count(char) == n\n\ndef g(char='a', n=5):\n    return char * n\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, char='a', n=5) -> bool:\n    return s.count(char) == n",
        "solution_func": "def g(char='a', n=5):\n    return char * n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given character appears a specific number of times in a string, and another function g that generates a string with the character repeated a certain number of times. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, function parameters, and function return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(strings: list, palindrome='racecar') -> bool:\n    assert palindrome in strings\n    return palindrome == max(strings, key=len)\n\ndef g(palindrome='racecar'):\n    strings = ['hello', 'world', 'level']\n    strings.append(palindrome)\n    return strings\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(strings: list, palindrome='racecar') -> bool:\n    assert palindrome in strings\n    return palindrome == max(strings, key=len)",
        "solution_func": "def g(palindrome='racecar'):\n    strings = ['hello', 'world', 'level']\n    strings.append(palindrome)\n    return strings",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given list of strings contains a specific palindrome, and a function g that appends a specified palindrome to a list of strings. The assertion at the end checks if the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation, string comparison, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(word='racecar') -> str:\n    return word + word[-2::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(word='racecar') -> str:\n    return word + word[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s) that checks if a given string is a palindrome, and another function g(word) that generates a palindrome by concatenating a word with its reverse excluding the last character. The assertion checks if the generated palindrome satisfies the palindrome condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums)\n\ndef g(n=10) -> List[int]:\n    return [num for num in range(2, n * 2, 2)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and generating a list of even numbers.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums)",
        "solution_func": "def g(n=10) -> List[int]:\n    return [num for num in range(2, n * 2, 2)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where f checks if all numbers in a list are even, and g generates a list of even numbers up to a specified limit. The assertion checks if the output of g satisfies the condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and the modulo operator in Python. It is suitable for teaching Python concepts related to list manipulation and boolean expressions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, condition=lambda x: x.isalpha(), length=5, char='a') -> bool:\n    return len(s) == length and all(condition(ch) for ch in s) and char in s\n\ndef g(condition=lambda x: x.isalpha(), length=5, char='a'):\n    \"\"\"\n    This solution recursively generates a string that satisfies the given conditions and contains the specified character.\n    \"\"\"\n    def generate_string(idx, curr_str):\n        if idx == length:\n            return curr_str if char in curr_str else None\n        for ch in 'abcdefghijklmnopqrstuvwxyz':\n            if condition(ch):\n                new_str = curr_str + ch\n                result = generate_string(idx + 1, new_str)\n                if result:\n                    return result\n        return None\n    \n    return generate_string(0, '')\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Recursion",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], criteria=lambda x: x % 3 == 0, target_sum=27, max_len=6) -> bool:\n    return sum(numbers) == target_sum and all(criteria(num) for num in numbers) and len(numbers) <= max_len\n\ndef g(criteria=lambda x: x % 3 == 0, target_sum=27, max_len=6):\n    \"\"\"\n    This solution utilizes recursion to generate a list of numbers that satisfy the given criteria and sum up to the target_sum.\n    \"\"\"\n    def generate_numbers(idx, curr_list, curr_sum):\n        if idx == max_len:\n            return curr_list if curr_sum == target_sum else None\n        for num in range(1, target_sum + 1):\n            if criteria(num):\n                new_list = curr_list + [num]\n                new_sum = curr_sum + num\n                result = generate_numbers(idx + 1, new_list, new_sum)\n                if result:\n                    return result\n        return None\n    \n    return generate_numbers(0, [], 0)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, condition=lambda x: x.isalpha(), length=5, char='a') -> bool:\n    return len(s) == length and all(condition(ch) for ch in s) and char in s",
        "solution_func": "def g(condition=lambda x: x.isalpha(), length=5, char='a'):\n    \"\"\"\n    This solution recursively generates a string that satisfies the given conditions and contains the specified character.\n    \"\"\"\n    def generate_string(idx, curr_str):\n        if idx == length:\n            return curr_str if char in curr_str else None\n        for ch in 'abcdefghijklmnopqrstuvwxyz':\n            if condition(ch):\n                new_str = curr_str + ch\n                result = generate_string(idx + 1, new_str)\n                if result:\n                    return result\n        return None\n    \n    return generate_string(0, '')",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string meets certain conditions, and a function g that generates a string recursively to satisfy those conditions. The goal is to find a string that satisfies the conditions specified in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, recursion, and condition checking in Python. It can be used to teach students about function definitions, recursion, and algorithmic thinking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], condition=lambda x: x % 2 == 0, target_sum=20, max_len=4) -> bool:\n    return sum(numbers) == target_sum and all(condition(num) for num in numbers) and len(numbers) <= max_len\n\ndef g(condition=lambda x: x % 2 == 0, target_sum=20, max_len=4):\n    \"\"\"\n    This solution generates a list of numbers satisfying the given conditions and sum up to the target_sum using recursion.\n    \"\"\"\n    def generate_numbers(idx, curr_list, curr_sum):\n        if idx == max_len:\n            return curr_list if curr_sum == target_sum else None\n        for num in range(1, target_sum + 1):\n            if condition(num):\n                new_list = curr_list + [num]\n                new_sum = curr_sum + num\n                result = generate_numbers(idx + 1, new_list, new_sum)\n                if result:\n                    return result\n        return None\n    \n    return generate_numbers(0, [], 0)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion, conditional logic, and mathematical operations.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], criteria=lambda x: x % 3 == 0, target_sum=27, max_len=6) -> bool:\n    return sum(numbers) == target_sum and all(criteria(num) for num in numbers) and len(numbers) <= max_len\n\ndef g(criteria=lambda x: x % 3 == 0, target_sum=27, max_len=6):\n    \"\"\"\n    This solution utilizes recursion to generate a list of numbers that satisfy the given criteria and sum up to the target_sum.\n    \"\"\"\n    def generate_numbers(idx, curr_list, curr_sum):\n        if idx == max_len:\n            return curr_list if curr_sum == target_sum else None\n        for num in range(1, target_sum + 1):\n            if criteria(num):\n                new_list = curr_list + [num]\n                new_sum = curr_sum + num\n                result = generate_numbers(idx + 1, new_list, new_sum)\n                if result:\n                    return result\n        return None\n    \n    return generate_numbers(0, [], 0)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], condition=lambda x: x % 2 == 0, target_sum=20, max_len=4) -> bool:\n    return sum(numbers) == target_sum and all(condition(num) for num in numbers) and len(numbers) <= max_len",
        "solution_func": "def g(condition=lambda x: x % 2 == 0, target_sum=20, max_len=4):\n    \"\"\"\n    This solution generates a list of numbers satisfying the given conditions and sum up to the target_sum using recursion.\n    \"\"\"\n    def generate_numbers(idx, curr_list, curr_sum):\n        if idx == max_len:\n            return curr_list if curr_sum == target_sum else None\n        for num in range(1, target_sum + 1):\n            if condition(num):\n                new_list = curr_list + [num]\n                new_sum = curr_sum + num\n                result = generate_numbers(idx + 1, new_list, new_sum)\n                if result:\n                    return result\n        return None\n    \n    return generate_numbers(0, [], 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of numbers and checks if the sum of the numbers is equal to a target sum, all numbers satisfy a given condition, and the length of the list is less than or equal to a maximum length. The solution function g generates a list of numbers that satisfy the conditions and sum up to the target sum using recursion."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a combination of list manipulation, condition checking, and recursion to generate a list of numbers that meet specific criteria. It provides a good exercise for understanding function composition and recursion in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    return any(num > 0 for num in numbers) and any(num < 0 for num in numbers)\n\ndef g():\n    import random\n    numbers = random.sample(range(-10, 10), 8)\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and importing modules (random).",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(numbers: list) -> bool:\n    return any(num % 2 == 0 for num in numbers) and any(num % 2 != 0 for num in numbers)\ndef g():\n    import random\n    numbers = random.sample(range(1, 20), 6)\n    return numbers\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    return any(num > 0 for num in numbers) and any(num < 0 for num in numbers)",
        "solution_func": "def g():\n    import random\n    numbers = random.sample(range(-10, 10), 8)\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 8 random numbers between -10 and 10, and checking if the list contains both positive and negative numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension and the 'any' function to check if a list of random numbers contains both positive and negative numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target_value: int, prices=[7, 1, 5, 3, 6, 4]) -> bool:\n    assert target_value == max(prices[1] - prices[0], prices[2])\n    return True\n\ndef g(prices=[7, 1, 5, 3, 6, 4]):\n    if len(prices) <= 1:\n        return 0\n    \n    max_profit = 0\n    min_price = prices[0]\n    \n    for price in prices[1:]:\n        max_profit = max(max_profit, price - min_price)\n        min_price = min(min_price, price)\n    \n    return max_profit\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding the maximum profit from buying and selling stocks, which falls under Mathematical Operations and Dynamic Programming.",
        "idx_generation": 23,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, numbers=[1, 2, 3, 1]) -> bool:\n    assert max_sum == max(numbers[0] + numbers[2], numbers[1])\n    return True\n\ndef g(numbers=[1, 2, 3, 1]):\n    if len(numbers) <= 2:\n        return sum(numbers)\n    inclusive = numbers[0]\n    exclusive = 0\n    for num in numbers[1:]:\n        temp = inclusive\n        inclusive = max(inclusive, exclusive + num)\n        exclusive = temp\n    return max(inclusive, exclusive)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(target_value: int, prices=[7, 1, 5, 3, 6, 4]) -> bool:\n    assert target_value == max(prices[1] - prices[0], prices[2])\n    return True",
        "solution_func": "def g(prices=[7, 1, 5, 3, 6, 4]):\n    if len(prices) <= 1:\n        return 0\n    \n    max_profit = 0\n    min_price = prices[0]\n    \n    for price in prices[1:]:\n        max_profit = max(max_profit, price - min_price)\n        min_price = min(min_price, price)\n    \n    return max_profit",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding the maximum profit that can be made by buying and selling stocks at different prices."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function to calculate the maximum profit that can be made by buying and selling stocks at different prices. The solution function uses a dynamic programming approach to find the maximum profit.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(lst: List[int], target=25) -> bool:\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(target=25) -> List[int]:\n    return [8, 9, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    return len(lst) != len(set(lst))\n\ndef g() -> List[int]:\n    return [3, 5, 7, 3, 2, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for duplicate elements in a list.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(lst: List[int], target=25) -> bool:\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(target=25) -> List[int]:\n    return [8, 9, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int]) -> bool:\n    return len(lst) != len(set(lst))",
        "solution_func": "def g() -> List[int]:\n    return [3, 5, 7, 3, 2, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and returns True if there are duplicate elements in the list. The solution function g returns a specific list of integers that contains duplicate elements, and the assertion checks if f applied to g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for duplicate elements in a list, which is a common programming task. It can be used to teach students about list manipulation and set operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    return max(lst) == 9 and min(lst) == 2\n\ndef g() -> List[int]:\n    return [3, 5, 7, 9, 2]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding the maximum and minimum values in a list of integers.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(lst: List[int], target=25) -> bool:\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(target=25) -> List[int]:\n    return [8, 9, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int]) -> bool:\n    return max(lst) == 9 and min(lst) == 2",
        "solution_func": "def g() -> List[int]:\n    return [3, 5, 7, 9, 2]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of integers where the maximum value is 9 and the minimum value is 2."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks if a given list of integers meets certain criteria, and then providing a solution that returns a specific list that satisfies the criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom sympy import primerange, isprime\n\ndef f(sum_primes: int, n=1000) -> bool:\n    return sum_primes == sum(primerange(2, n))\n\ndef g(n=1000) -> int:\n    return sum(prime for prime in range(2, n) if isprime(prime))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime numbers, mathematical operations, importing modules, and conditional logic.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True"
        ],
        "problem_func": "from sympy import primerange, isprime\n\ndef f(sum_primes: int, n=1000) -> bool:\n    return sum_primes == sum(primerange(2, n))",
        "solution_func": "def g(n=1000) -> int:\n    return sum(prime for prime in range(2, n) if isprime(prime))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to find the sum of all prime numbers up to a given limit 'n' and check if it matches a given sum of prime numbers. The solution function calculates the sum of prime numbers up to 'n' using sympy library functions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with prime numbers and understanding how to calculate the sum of prime numbers up to a given limit. The solution function uses sympy library functions to efficiently find the sum of prime numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sequence: List[int], nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    diff = sequence[1] - sequence[0]\n    for i in range(1, len(sequence)):\n        if sequence[i] - sequence[i - 1] != diff:\n            return False\n    return True\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            seq = [nums[i], nums[j]]\n            diff = seq[1] - seq[0]\n            for k in range(j + 1, len(nums)):\n                if nums[k] - seq[-1] == diff:\n                    seq.append(nums[k])\n                if len(seq) >= 3:\n                    return seq\n    return []\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, Conditional Logic, and Brute Force Search.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], s='programmingisfun', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='programmingisfun', target=''):\n    i, j, k = 0, 0, 1\n    while i < len(s):\n        while j < len(s):\n            while k < len(s):\n                try:\n                    if s[i:j:k] == target:\n                        return [i, j, k]\n                except (IndexError, ValueError):\n                    pass\n                k += 1\n            j += 1\n        i += 1\n    return []\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(sequence: List[int], nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    diff = sequence[1] - sequence[0]\n    for i in range(1, len(sequence)):\n        if sequence[i] - sequence[i - 1] != diff:\n            return False\n    return True",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6]):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            seq = [nums[i], nums[j]]\n            diff = seq[1] - seq[0]\n            for k in range(j + 1, len(nums)):\n                if nums[k] - seq[-1] == diff:\n                    seq.append(nums[k])\n                if len(seq) >= 3:\n                    return seq\n    return []",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where the first function checks if a given sequence follows an arithmetic progression and the second function generates a sequence from a list of numbers that follows the arithmetic progression. The assertion at the end checks if the second function generates a sequence that satisfies the condition of the first function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding arithmetic progressions and implementing logic to generate sequences that follow this pattern.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], triplet=[3, 4, 5]) -> bool:\n    a, b, c = triplet\n    return a**2 + b**2 == c**2 and all(num in numbers for num in triplet)\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                triplet = [numbers[i], numbers[j], numbers[k]]\n                if triplet[0]**2 + triplet[1]**2 == triplet[2]**2:\n                    return triplet\n    return []\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], s='programmingisfun', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='programmingisfun', target=''):\n    i, j, k = 0, 0, 1\n    while i < len(s):\n        while j < len(s):\n            while k < len(s):\n                try:\n                    if s[i:j:k] == target:\n                        return [i, j, k]\n                except (IndexError, ValueError):\n                    pass\n                k += 1\n            j += 1\n        i += 1\n    return []\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], triplet=[3, 4, 5]) -> bool:\n    a, b, c = triplet\n    return a**2 + b**2 == c**2 and all(num in numbers for num in triplet)",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                triplet = [numbers[i], numbers[j], numbers[k]]\n                if triplet[0]**2 + triplet[1]**2 == triplet[2]**2:\n                    return triplet\n    return []",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a Pythagorean triplet within a given list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given triplet of numbers forms a Pythagorean triplet within a list of numbers. The solution function g generates all possible triplets from the list and returns the first Pythagorean triplet found. The assertion at the end checks if the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    return any(num % 2 == 0 for num in numbers) and any(num % 2 != 0 for num in numbers)\n\ndef g():\n    import random\n    numbers = random.sample(range(1, 20), 5)\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Conditional Logic and Importing Modules (Itertools, etc.)",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, limit=10) -> bool:\n    return len(set(s)) == len(s) and len(s) <= limit\ndef g(limit=10):\n    import string\n    import random\n    unique_chars = random.sample(string.ascii_lowercase, limit)\n    return ''.join(unique_chars)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    return any(num % 2 == 0 for num in numbers) and any(num % 2 != 0 for num in numbers)",
        "solution_func": "def g():\n    import random\n    numbers = random.sample(range(1, 20), 5)\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(numbers: list) that checks if a list of numbers contains both even and odd numbers. The solution function g() generates a list of 5 random numbers between 1 and 20 and returns it. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, logical operators, and random number generation in Python. It also tests the ability to write functions that check for specific conditions in a list of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    total = sum(numbers)\n    return total % 2 == 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total = sum(c)\n            if total % 2 == 0:\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as Conditional Logic, Importing Modules (Itertools), and Permutations and Combinations.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(numbers: List[int], options=[2, 4, 5, 8, 10, 12]) -> bool:\n    product = 1\n    for num in numbers:\n        assert num in options\n        product *= num\n    return product ** 0.5 % 1 == 0\ndef g(options=[2, 4, 5, 8, 10, 12]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            product = 1\n            for num in c:\n                product *= num\n            if product ** 0.5 % 1 == 0:\n                return list(c)\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    total = sum(numbers)\n    return total % 2 == 0",
        "solution_func": "def g(options=[1, 3, 5, 7, 9, 11]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total = sum(c)\n            if total % 2 == 0:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of a list of numbers is even, and a function g that generates combinations of numbers from a given set of options to find a combination whose sum is even. The assert statement checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use itertools combinations to generate combinations of numbers, calculating the sum of a list of numbers, and checking if the sum is even. It also requires understanding how to define default arguments in functions and use assert statements for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], threshold=15, options=[10, 12, 14, 16, 18, 20]) -> bool:\n    return max(numbers) > threshold\n\ndef g(threshold=15, options=[10, 12, 14, 16, 18, 20]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if max(c) > threshold:\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and importing modules (Itertools).",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(numbers: List[int], options=[2, 4, 5, 8, 10, 12]) -> bool:\n    product = 1\n    for num in numbers:\n        assert num in options\n        product *= num\n    return product ** 0.5 % 1 == 0\ndef g(options=[2, 4, 5, 8, 10, 12]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            product = 1\n            for num in c:\n                product *= num\n            if product ** 0.5 % 1 == 0:\n                return list(c)\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], threshold=15, options=[10, 12, 14, 16, 18, 20]) -> bool:\n    return max(numbers) > threshold",
        "solution_func": "def g(threshold=15, options=[10, 12, 14, 16, 18, 20]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if max(c) > threshold:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the maximum number in a list is greater than a threshold value. The solution function g generates combinations of numbers from a given set of options and returns a list of numbers that satisfy the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as list manipulation, function definition, and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], threshold=5, options=[2, 4, 6, 8, 10, 12]) -> bool:\n    return min(numbers) < threshold\n\ndef g(threshold=5, options=[2, 4, 6, 8, 10, 12]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if min(c) < threshold:\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, iteration, and comparison operations.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(numbers: List[int], options=[2, 4, 5, 8, 10, 12]) -> bool:\n    product = 1\n    for num in numbers:\n        assert num in options\n        product *= num\n    return product ** 0.5 % 1 == 0\ndef g(options=[2, 4, 5, 8, 10, 12]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            product = 1\n            for num in c:\n                product *= num\n            if product ** 0.5 % 1 == 0:\n                return list(c)\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], threshold=5, options=[2, 4, 6, 8, 10, 12]) -> bool:\n    return min(numbers) < threshold",
        "solution_func": "def g(threshold=5, options=[2, 4, 6, 8, 10, 12]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if min(c) < threshold:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a combination of numbers from a given list of options that satisfies a certain condition based on a threshold value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using combinations of numbers from a list to check if the minimum value in the combination is less than a specified threshold.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return string == string[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\n\ndef g() -> list:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given string is a palindrome by comparing it with its reverse. The solution function g returns the string 'radar', which is a palindrome. The assert statement confirms that the solution function g satisfies the condition of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)\n\ndef g() -> list:\n    return [5, 4, 3, 2, 1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in reverse order and checking if it is sorted in reverse order. This relates to the topic of Sorting and Ordering (index 14).",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\n\ndef g() -> list:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)",
        "solution_func": "def g() -> list:\n    return [5, 4, 3, 2, 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list is sorted in descending order, and a function g() that returns a specific list. The puzzle tests whether the list returned by g() is sorted in descending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting in Python and implementing a function to check if a list is sorted in descending order.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\n\ndef g() -> list:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num: int) -> bool and g() -> int. Function f checks if a given number is a prime number, while function g always returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, sequence=[1, 2, 3]) -> bool:\n    sequence_length = len(sequence)\n    \n    for i in range(len(lst)):\n        if lst[i:i+sequence_length] == sequence:\n            return True\n    \n    return False\n\ndef g(sequence=[1, 2, 3]):\n    return [1, 2, 3, 4, 5, 6, 7]  # Generate a list containing the desired sequence\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and searching for a specific sequence within a list.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(string: str, pattern='ab') -> bool:\n    pattern_indices = {char: i for i, char in enumerate(pattern)}\n    current_index = 0\n\n    for char in string:\n        if char not in pattern_indices or pattern_indices[char] != current_index:\n            return False\n        current_index = (current_index + 1) % len(pattern)\n\n    return current_index == 0\n\ndef g(pattern='ab'):\n    return 'abab'  # Generate a string following the given pattern\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, sequence=[1, 2, 3]) -> bool:\n    sequence_length = len(sequence)\n    \n    for i in range(len(lst)):\n        if lst[i:i+sequence_length] == sequence:\n            return True\n    \n    return False",
        "solution_func": "def g(sequence=[1, 2, 3]):\n    return [1, 2, 3, 4, 5, 6, 7]  # Generate a list containing the desired sequence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: list, sequence=[1, 2, 3]) that checks if a given list contains a specific sequence. The solution function g(sequence=[1, 2, 3]) generates a list with the desired sequence and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list slicing and comparison in Python. The solution function generates a list with the desired sequence to test the function f. This puzzle can be used to teach Python programming concepts related to list manipulation and function testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(dictionary: dict, key='name', value='Alice') -> bool:\n    return key in dictionary and dictionary[key] == value\n\ndef g(key='name', value='Alice'):\n    return {key: value, 'age': 30}  # Generate a dictionary containing the specified key-value pair\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(string: str, pattern='ab') -> bool:\n    pattern_indices = {char: i for i, char in enumerate(pattern)}\n    current_index = 0\n\n    for char in string:\n        if char not in pattern_indices or pattern_indices[char] != current_index:\n            return False\n        current_index = (current_index + 1) % len(pattern)\n\n    return current_index == 0\n\ndef g(pattern='ab'):\n    return 'abab'  # Generate a string following the given pattern\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(dictionary: dict, key='name', value='Alice') -> bool:\n    return key in dictionary and dictionary[key] == value",
        "solution_func": "def g(key='name', value='Alice'):\n    return {key: value, 'age': 30}  # Generate a dictionary containing the specified key-value pair",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a specified key-value pair exists in a dictionary, and another function g that generates a dictionary with the specified key-value pair. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: str) -> bool:\n    clean_str = ''.join(char.lower() for char in data if char.isalnum())\n    return clean_str == clean_str[::-1]\n\ndef g():\n    import random\n    import string\n    random_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(10))\n    return random_string + random_string[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.), Pattern Recognition",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\ndef f(data: List[Tuple[int]], min_len=2, max_len=4) -> bool:\n    assert all((len(set(t)) == len(t) and min_len <= len(t) <= max_len for t in data))\n    return len(set(data)) == len(data)\ndef g(min_len=2, max_len=4):\n    import random\n    return [tuple(random.sample(range(1, 10), random.randint(min_len, max_len))) for _ in range(10)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(data: str) -> bool:\n    clean_str = ''.join(char.lower() for char in data if char.isalnum())\n    return clean_str == clean_str[::-1]",
        "solution_func": "def g():\n    import random\n    import string\n    random_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(10))\n    return random_string + random_string[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome after removing non-alphanumeric characters, and a function g that generates a random string and its palindrome. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, palindrome checking, random string generation, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: int) -> bool:\n    if data < 2:\n        return False\n    for i in range(2, int(data**0.5) + 1):\n        if data % i == 0:\n            return False\n    return True\n\ndef g():\n    import random\n    return random.randint(1, 100)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search algorithm.",
        "idx_generation": 24,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\ndef f(data: List[Tuple[int]], min_len=2, max_len=4) -> bool:\n    assert all((len(set(t)) == len(t) and min_len <= len(t) <= max_len for t in data))\n    return len(set(data)) == len(data)\ndef g(min_len=2, max_len=4):\n    import random\n    return [tuple(random.sample(range(1, 10), random.randint(min_len, max_len))) for _ in range(10)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(data: int) -> bool:\n    if data < 2:\n        return False\n    for i in range(2, int(data**0.5) + 1):\n        if data % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import random\n    return random.randint(1, 100)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given number is a prime number. The solution generates a random number between 1 and 100 and checks if it is a prime number using the implemented function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to check for primality. The solution tests the implemented function with a random number to verify its correctness.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given text is a palindrome.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns a specific text 'radar'. The assertion tests if the function f returns True when applied to the output of function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(num % 2 == 0 for num in numbers) and any(num % 2 != 0 for num in numbers)\n\ndef g():\n    return [1, 3, 5, 8, 10, 12]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for even and odd numbers in a list using list comprehension and the any() function.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(num % 2 == 0 for num in numbers) and any(num % 2 != 0 for num in numbers)",
        "solution_func": "def g():\n    return [1, 3, 5, 8, 10, 12]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and returns True if the list contains both even and odd numbers. The solution function g returns a specific list of integers that satisfies the condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for the presence of both even and odd numbers in a given list. The solution function provides a list that contains both types of numbers to satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return \"python\" in words\n\ndef g():\n    return [\"java\", \"c++\", \"python\", \"javascript\", \"ruby\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return \"python\" in words",
        "solution_func": "def g():\n    return [\"java\", \"c++\", \"python\", \"javascript\", \"ruby\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if the word 'python' is present in a list of words."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if the word 'python' is in a list of words. The solution function g returns a list of words including 'python', and the assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(prod: int, limit=10) -> bool:\n    return prod % limit == 0\n\ndef g(limit=10):\n    \"\"\"\n    This solution generates the product of consecutive numbers up to the given limit.\n    \"\"\"\n    prod = math.prod(range(1, limit + 1))\n    return prod\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, importing modules (math), and function definition.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(s: int, limit=10) -> bool:\n    return s > limit\n\ndef g(limit=10):\n    \"\"\"\n    This solution generates a list of prime numbers up to the given limit and calculates their sum.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, limit) if is_prime(num)]\n    return sum(primes)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(prod: int, limit=10) -> bool:\n    return prod % limit == 0",
        "solution_func": "def g(limit=10):\n    \"\"\"\n    This solution generates the product of consecutive numbers up to the given limit.\n    \"\"\"\n    prod = math.prod(range(1, limit + 1))\n    return prod",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given product is divisible by a specified limit, and a function g that calculates the product of consecutive numbers up to a given limit. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the product of consecutive numbers and check for divisibility. It can be used to teach concepts of functions, loops, and assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(even_sum: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    return sum(num for num in nums if num % 2 == 0) == even_sum\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    return sum(num for num in nums if num % 2 == 0)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the sum of even numbers in a list equals a given value.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, arr=[4, 9, 1, 3, 8, 7]) -> bool:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum\n\ndef g(arr=[4, 9, 1, 3, 8, 7]):\n    if len(arr) <= 2:\n        return sum(arr)\n    incl = arr[0]\n    excl = 0\n    for num in arr[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(even_sum: int, nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    return sum(num for num in nums if num % 2 == 0) == even_sum",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5, 6]):\n    return sum(num for num in nums if num % 2 == 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of even numbers in a list equals a given value, and a function g that calculates the sum of even numbers in a list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, conditional statements, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(is_palindrome: bool, text=\"radar\") -> bool:\n    return text == text[::-1] == is_palindrome\n\ndef g(text=\"radar\"):\n    return text[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, arr=[4, 9, 1, 3, 8, 7]) -> bool:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum\n\ndef g(arr=[4, 9, 1, 3, 8, 7]):\n    if len(arr) <= 2:\n        return sum(arr)\n    incl = arr[0]\n    excl = 0\n    for num in arr[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(is_palindrome: bool, text=\"radar\") -> bool:\n    return text == text[::-1] == is_palindrome",
        "solution_func": "def g(text=\"radar\"):\n    return text[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given text is a palindrome, and another function g that returns the reverse of the text. The goal is to ensure that function g produces a palindrome text when passed to function f."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle is not suitable for teaching as the implementation of function f is incorrect. The equality check in function f is not correctly structured to check if the text is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, threshold=20) -> bool:\n    return sum(lst) > threshold\n\ndef g(size=5, max_value=10):\n    import random\n    return [random.randint(1, max_value) for _ in range(size)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating a list of random numbers and checking if the sum of the list is greater than a threshold value.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(length=5):\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    half_length = length // 2\n    palindrome_half = ''.join(random.choices(letters, k=half_length))\n    if length % 2 == 0:\n        return palindrome_half + palindrome_half[::-1]\n    else:\n        return palindrome_half + random.choice(letters) + palindrome_half[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, threshold=20) -> bool:\n    return sum(lst) > threshold",
        "solution_func": "def g(size=5, max_value=10):\n    import random\n    return [random.randint(1, max_value) for _ in range(size)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random numbers and check if the sum of the numbers in the list is greater than a specified threshold."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using functions, lists, random number generation, and comparison operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return any(char.islower() for char in text) and any(char.isupper() for char in text)\n\ndef g(upper_str='HELLO', lower_str='world'):\n    return upper_str + lower_str\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g(even_nums=[2, 4, 6], odd_nums=[1, 3, 5]):\n    return even_nums + odd_nums\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return any(char.islower() for char in text) and any(char.isupper() for char in text)",
        "solution_func": "def g(upper_str='HELLO', lower_str='world'):\n    return upper_str + lower_str",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given text contains both lowercase and uppercase characters. The function g concatenates an uppercase string 'HELLO' and a lowercase string 'world'. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and boolean conditions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return any(len(word) < 5 for word in words) and any(len(word) >= 5 for word in words)\n\ndef g(short_words=['cat', 'dog'], long_words=['elephant', 'giraffe']):\n    return short_words + long_words\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic to check the length of words in a list.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g(even_nums=[2, 4, 6], odd_nums=[1, 3, 5]):\n    return even_nums + odd_nums\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return any(len(word) < 5 for word in words) and any(len(word) >= 5 for word in words)",
        "solution_func": "def g(short_words=['cat', 'dog'], long_words=['elephant', 'giraffe']):\n    return short_words + long_words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of words contains both short words (less than 5 characters) and long words (5 or more characters). The solution function g returns a list of short and long words, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the any() function, and list concatenation in Python. It also tests the understanding of boolean expressions and function calls.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(num > 0 for num in numbers) and any(num < 0 for num in numbers)\n\ndef g(positive_nums=[1, 2, 3], negative_nums=[-1, -2, -3]):\n    return positive_nums + negative_nums\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Conditional Logic and List Operations.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g(even_nums=[2, 4, 6], odd_nums=[1, 3, 5]):\n    return even_nums + odd_nums\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(num > 0 for num in numbers) and any(num < 0 for num in numbers)",
        "solution_func": "def g(positive_nums=[1, 2, 3], negative_nums=[-1, -2, -3]):\n    return positive_nums + negative_nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers contains both positive and negative numbers, and a function g that returns a list combining positive and negative numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, logical operators, and function definitions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums)\n\ndef g():\n    return [2*i for i in range(1, 1001)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and generating a list of even numbers.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] > nums[i + 1] for i in range(len(nums) - 1)) and len(nums) == len(set(nums))\ndef g():\n    return [2*i for i in range(999, 0, -1)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums)",
        "solution_func": "def g():\n    return [2*i for i in range(1, 1001)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define a function that checks if all numbers in a list are even, and then generate a list of even numbers using a specific formula to pass the check."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, modulo operator, and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] == nums[i + 1] - 1 for i in range(len(nums) - 1))\n\ndef g():\n    return [i for i in range(10, 20)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and checking if the elements in the list are consecutive numbers.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] > nums[i + 1] for i in range(len(nums) - 1)) and len(nums) == len(set(nums))\ndef g():\n    return [2*i for i in range(999, 0, -1)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] == nums[i + 1] - 1 for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [i for i in range(10, 20)]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function f checks if each element in the list is equal to the next element minus 1. The solution function g generates a list of integers from 10 to 19."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking consecutive elements in a list and the solution generates a list that satisfies the condition. This puzzle can be used to teach students about list comprehension and boolean expressions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num > 0 for num in nums) and any(num < 0 for num in nums)\n\ndef g():\n    return [i for i in range(-10, 11)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation.",
        "idx_generation": 25,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] > nums[i + 1] for i in range(len(nums) - 1)) and len(nums) == len(set(nums))\ndef g():\n    return [2*i for i in range(999, 0, -1)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num > 0 for num in nums) and any(num < 0 for num in nums)",
        "solution_func": "def g():\n    return [i for i in range(-10, 11)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers contains both positive and negative numbers, and a function g that generates a list of integers from -10 to 10. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, boolean expressions, and the any() function in Python. It tests the ability to create functions that meet specific criteria and generate input data to satisfy those criteria.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: str) -> bool:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return all(char in vowels for char in x)\n\ndef g() -> str:\n    import random\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    length = random.randint(5, 10)\n    return ''.join(random.choice(vowels) for _ in range(length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(x: str) -> bool:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return all(char in vowels for char in x)",
        "solution_func": "def g() -> str:\n    import random\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    length = random.randint(5, 10)\n    return ''.join(random.choice(vowels) for _ in range(length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(x: str) that checks if all characters in a given string are vowels, and a function g() that generates a random string of vowels. The puzzle tests whether function f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for vowels in a string and generating random strings. It also tests the understanding of function composition and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g() -> list:\n    import random\n    length = random.randint(5, 10)\n    return [random.randint(1, 100) * 2 for _ in range(length)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and generating a list of random even numbers.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g() -> list:\n    import random\n    length = random.randint(5, 10)\n    return [random.randint(1, 100) * 2 for _ in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all numbers in a list are even, and a function g() that generates a random list of even numbers. The puzzle is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, random number generation, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return n % 7 == 3\n\ndef g() -> int:\n    import random\n    return random.randint(10, 100) * 7 + 3\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Importing Modules (Itertools, etc.)",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return n % 7 == 3",
        "solution_func": "def g() -> int:\n    import random\n    return random.randint(10, 100) * 7 + 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(n) which checks if a given integer is of the form 7x + 3, and g() which generates a random integer of the form 7x + 3. The puzzle requires g() to be called and passed to f() to check if the generated integer satisfies the condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple mathematical condition and random number generation, which can be a good exercise for students to understand function definitions and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Tuple\n\ndef f(ind: int, s='python', target='o') -> bool:\n    return s[ind] == target\n\ndef g(s='python', target='o') -> int:\n    for i, char in enumerate(s):\n        if char == target:\n            return i\n    return -1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], s='programmingisfun', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='programmingisfun', target=''):\n    i, j, k = 0, 0, 1\n    while i < len(s):\n        while j < len(s):\n            while k < len(s):\n                try:\n                    if s[i:j:k] == target:\n                        return [i, j, k]\n                except (IndexError, ValueError):\n                    pass\n                k += 1\n            j += 1\n        i += 1\n    return []\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Tuple\n\ndef f(ind: int, s='python', target='o') -> bool:\n    return s[ind] == target",
        "solution_func": "def g(s='python', target='o') -> int:\n    for i, char in enumerate(s):\n        if char == target:\n            return i\n    return -1",
        "quality": [
            null
        ],
        "description": [
            "Given a string 's' and a target character 'target', function f(ind, s='python', target='o') returns True if the character at index 'ind' in the string 's' is equal to the target character. Function g(s='python', target='o') returns the index of the first occurrence of the target character in the string 's', or -1 if the target character is not found. The puzzle checks if function f with the output of function g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use functions with default arguments, string indexing, enumeration, and returning values based on conditions. It also tests the concept of function composition and checking the correctness of the solution.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(words: List[str], min_len=5, max_len=8, count=4) -> bool:\n    assert all((len(word) == len(set(word)) and min_len <= len(word) <= max_len for word in words))\n    return len(set(words)) >= count\ndef g(min_len=5, max_len=8, count=4):\n    import random\n    import string\n    return [''.join(random.sample(string.ascii_lowercase, random.randint(min_len, max_len))) for _ in range(count)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, random generation, and set operations.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(words: List[str], min_len=5, max_len=8, count=4) -> bool:\n    assert all((len(word) == len(set(word)) and min_len <= len(word) <= max_len for word in words))\n    return len(set(words)) >= count",
        "solution_func": "def g(min_len=5, max_len=8, count=4):\n    import random\n    import string\n    return [''.join(random.sample(string.ascii_lowercase, random.randint(min_len, max_len))) for _ in range(count)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of random strings with unique characters and lengths within a specified range, and then checking if the number of unique strings in the list is greater than or equal to a specified count."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random strings with unique characters and lengths within a range, and then checking if the number of unique strings in the list meets a specified count. The solution function g() generates the random strings, and the puzzle function f() checks if the condition is met.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    seen = set()\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        if sorted_word in seen:\n            return True\n        seen.add(sorted_word)\n    return False\n\ndef g() -> List[str]:\n    return ['listen', 'silent', 'hello', 'world']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations to check for anagrams in a list of words.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10) -> List[int]:\n    return [2, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    seen = set()\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        if sorted_word in seen:\n            return True\n        seen.add(sorted_word)\n    return False",
        "solution_func": "def g() -> List[str]:\n    return ['listen', 'silent', 'hello', 'world']",
        "quality": [
            null
        ],
        "description": [
            "Given a list of words, the puzzle requires checking if any two words are anagrams of each other."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if any two words in a list are anagrams of each other by sorting the characters in each word and comparing them. The solution function returns a list of words to test the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(items: List[int], profit_limit=150, weight_limit=10, items_list=[(10, 5), (20, 10), (30, 15), (40, 20)]) -> bool:\n    for item in items:\n        assert item in items_list\n    total_profit = sum([item[0] for item in items])\n    total_weight = sum([item[1] for item in items])\n    return total_profit <= profit_limit and total_weight <= weight_limit\n\ndef g(profit_limit=150, weight_limit=10, items_list=[(10, 5), (20, 10), (30, 15), (40, 20)]):\n    from itertools import combinations\n    max_profit = 0\n    optimal_combination = []\n    for r in range(1, len(items_list) + 1):\n        for combination in combinations(items_list, r):\n            total_profit = sum([item[0] for item in combination])\n            total_weight = sum([item[1] for item in combination])\n            if total_profit > max_profit and total_weight <= weight_limit:\n                max_profit = total_profit\n                optimal_combination = list(combination)\n    return optimal_combination\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Dynamic Programming, Importing Modules (Itertools, etc.), Set Operations",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(items: List[int], profit_limit=150, weight_limit=10, items_list=[(10, 5), (20, 10), (30, 15), (40, 20)]) -> bool:\n    for item in items:\n        assert item in items_list\n    total_profit = sum([item[0] for item in items])\n    total_weight = sum([item[1] for item in items])\n    return total_profit <= profit_limit and total_weight <= weight_limit",
        "solution_func": "def g(profit_limit=150, weight_limit=10, items_list=[(10, 5), (20, 10), (30, 15), (40, 20)]):\n    from itertools import combinations\n    max_profit = 0\n    optimal_combination = []\n    for r in range(1, len(items_list) + 1):\n        for combination in combinations(items_list, r):\n            total_profit = sum([item[0] for item in combination])\n            total_weight = sum([item[1] for item in combination])\n            if total_profit > max_profit and total_weight <= weight_limit:\n                max_profit = total_profit\n                optimal_combination = list(combination)\n    return optimal_combination",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given combination of items satisfies certain profit and weight limits, and a function g that finds the optimal combination of items to maximize profit within the given limits. The solution g returns the optimal combination of items that satisfies the profit and weight limits."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple optimization problem of finding the optimal combination of items to maximize profit within given limits. It requires understanding of list manipulation, iteration, and basic logic. The puzzle can be used to teach Python programming concepts related to lists, loops, and conditional statements.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict) -> bool:\n    avg_value = sum(data.values()) / len(data)\n    return avg_value > 50\n\ndef g():\n    return {'a': 70, 'b': 80, 'c': 90, 'd': 40, 'e': 60}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic as it calculates the average value of a dictionary and checks if it is greater than 50.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(data: dict) -> bool:\n    avg_value = sum(data.values()) / len(data)\n    return avg_value > 50",
        "solution_func": "def g():\n    return {'a': 70, 'b': 80, 'c': 90, 'd': 40, 'e': 60}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that calculates the average value of a dictionary and checks if it is greater than 50. The solution function g returns a dictionary with values, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, calculating averages, and using assertions for testing. It can be used to teach Python concepts related to dictionaries, arithmetic operations, and function testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    vowels = 'aeiou'\n    vowel_count = sum(1 for char in text if char.lower() in vowels)\n    consonant_count = len(text) - vowel_count\n    return vowel_count >= 2 and consonant_count >= 2\n\ndef g():\n    return 'pythonprogramming'\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to count vowels and consonants in a given text. It also includes conditional logic to check if the text has at least 2 vowels and 2 consonants. The solution function generates a specific text and checks if it satisfies the conditions set by the puzzle function.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    vowels = 'aeiou'\n    vowel_count = sum(1 for char in text if char.lower() in vowels)\n    consonant_count = len(text) - vowel_count\n    return vowel_count >= 2 and consonant_count >= 2",
        "solution_func": "def g():\n    return 'pythonprogramming'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(text: str) that checks if a given text has at least 2 vowels and 2 consonants. The solution function g() returns a specific text 'pythonprogramming' and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves counting vowels and consonants in a given text and checking if the counts meet a specific condition. The solution function returns a fixed text to satisfy the condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: list) -> bool:\n    product = 1\n    for num in data:\n        product *= num\n    return product > 0\n\ndef g():\n    return [1.5, -2.0, 3.5, -4.0, 5.0]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(data: list) -> bool:\n    product = 1\n    for num in data:\n        product *= num\n    return product > 0",
        "solution_func": "def g():\n    return [1.5, -2.0, 3.5, -4.0, 5.0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that takes a list of numbers as input and checks if the product of all the numbers in the list is greater than 0. The solution function provides a list of numbers that satisfies the condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the product of numbers in a list and compare it to a specific condition. It also requires knowledge of list manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number or not, and a function g() that returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list contains only unique elements.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list contains only unique elements, and then defining a function g() that returns a list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations and the set data structure in Python to check for uniqueness of elements in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sum_even: int, nums=[3, 8, 2, 5, 10, 7]) -> bool:\n    return sum(num for num in nums if num % 2 == 0) == sum_even\n\ndef g(nums=[3, 8, 2, 5, 10, 7]):\n    return sum(num for num in nums if num % 2 == 0)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": 26,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, arr=[4, 9, 1, 3, 8, 7]) -> bool:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum\n\ndef g(arr=[4, 9, 1, 3, 8, 7]):\n    if len(arr) <= 2:\n        return sum(arr)\n    incl = arr[0]\n    excl = 0\n    for num in arr[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(sum_even: int, nums=[3, 8, 2, 5, 10, 7]) -> bool:\n    return sum(num for num in nums if num % 2 == 0) == sum_even",
        "solution_func": "def g(nums=[3, 8, 2, 5, 10, 7]):\n    return sum(num for num in nums if num % 2 == 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of even numbers in a list equals a given value, and a function g that calculates the sum of even numbers in a list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, conditional statements, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abab') -> bool:\n    return s == pattern\n\ndef g(pattern='abab'):\n    return pattern\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, pattern='abab') -> bool:\n    return s == pattern",
        "solution_func": "def g(pattern='abab'):\n    return pattern",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string matches a specified pattern and g returns the specified pattern. The puzzle tests if the function f applied to the output of function g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about defining functions to check if a string matches a pattern and then testing the functions to ensure they work correctly.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(lst: List[Tuple[int, str]], n=3) -> bool:\n    return len(lst) == n and all(isinstance(item[0], int) and isinstance(item[1], str) for item in lst)\n\ndef g(n=3):\n    return [(i, 'a') for i in range(1, n+1)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, type checking, and list comprehension.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(lst: List[Tuple[int, str]], n=3) -> bool:\n    return len(lst) == n and all(isinstance(item[0], int) and isinstance(item[1], str) for item in lst)",
        "solution_func": "def g(n=3):\n    return [(i, 'a') for i in range(1, n+1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples as input and checks if the list has a specific length and if each tuple contains an integer as the first element and a string as the second element. The solution function g generates a list of tuples with integers and strings based on a given parameter n, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the structure of a list of tuples and generating a list of tuples with specific criteria. It tests the understanding of list comprehension, type checking, and assertion testing in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name', value='Alice') -> bool:\n    return key in d and d[key] == value\n\ndef g(key='name', value='Alice'):\n    return {key: value}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict, key='name', value='Alice') -> bool:\n    return key in d and d[key] == value",
        "solution_func": "def g(key='name', value='Alice'):\n    return {key: value}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given key-value pair exists in a dictionary and g creates a dictionary with a specified key-value pair. The assertion tests if the solution g satisfies the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for a specific key-value pair in a dictionary and how to create a dictionary with a given key-value pair. It also tests the understanding of function calls and assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s: str = \"racecar\") -> str:\n    return s + s[::-1][1:]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s: str = \"racecar\") -> str:\n    return s + s[::-1][1:]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it with its reverse. The solution function appends the reverse of the string excluding the first character to the original string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for palindromes and manipulating strings in Python. It is suitable for teaching concepts like string manipulation and conditionals.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(word.islower() for word in words)\n\ndef g(n: int = 5) -> List[str]:\n    import random\n    return [\"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=random.randint(3, 8))) for _ in range(n)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(word.islower() for word in words)",
        "solution_func": "def g(n: int = 5) -> List[str]:\n    import random\n    return [\"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=random.randint(3, 8))) for _ in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of random strings and checking if all the strings are in lowercase letters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, random module, and string manipulation to generate random strings and then checking if all the strings are in lowercase.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return len(set(tuples)) == len(tuples)\n\ndef g(n: int = 5) -> List[Tuple[int, int]]:\n    import random\n    return list(set((random.randint(1, 10), random.randint(1, 10)) for _ in range(n)))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and random number generation, which are related to topics 9 and 18.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return len(set(tuples)) == len(tuples)",
        "solution_func": "def g(n: int = 5) -> List[Tuple[int, int]]:\n    import random\n    return list(set((random.randint(1, 10), random.randint(1, 10)) for _ in range(n)))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a list of random tuples of integers within a specified range and checking if all the tuples in the list are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to generate random tuples, create a set to remove duplicates, and compare the length of the set with the original list to determine uniqueness.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return all(val > 10 for val in d.values())\n\ndef g():\n    import random\n    while True:\n        new_dict = {key: random.randint(1, 20) for key in range(5, 10)}\n        if all(val > 10 for val in new_dict.values()):\n            return new_dict\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, random number generation, and validation of dictionary values. It does not explicitly involve any of the listed topics.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return lst == sorted(lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if new_list == sorted(new_list):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return all(val > 10 for val in d.values())",
        "solution_func": "def g():\n    import random\n    while True:\n        new_dict = {key: random.randint(1, 20) for key in range(5, 10)}\n        if all(val > 10 for val in new_dict.values()):\n            return new_dict",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(d: dict) that checks if all values in a dictionary are greater than 10. The solution function g() generates a random dictionary with values between 1 and 20, and returns it only if all values are greater than 10."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, list comprehensions, and boolean conditions in Python. The solution function g() generates a dictionary and checks if all values meet the condition specified in function f().",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(d: dict, key='age') -> bool:\n    return key in d\n\ndef g(key='age'):\n    return {key: random.randint(20, 40)}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, random number generation, and assertion testing.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: set, a={1, 2, 3}) -> bool:\n    return s.issuperset(a)\n\ndef g(a={1, 2, 3}):\n    return a\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(d: dict, key='age') -> bool:\n    return key in d",
        "solution_func": "def g(key='age'):\n    return {key: random.randint(20, 40)}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specified key exists in a dictionary, and a function g that generates a dictionary with a random value for the specified key. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves working with dictionaries, functions, and assertions to validate the solution.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)\ndef g():\n    return [3, 7, 12, 15, 20, 22]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)",
        "solution_func": "def g():\n    return [3, 7, 12, 15, 20, 22]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(nums: List[int]) -> bool that checks if a list of integers is sorted in ascending order. The solution function g() returns a sorted list of integers and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and comparison in Python. It is a simple and straightforward puzzle that can be used to teach basic list manipulation and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return sum(nums) > 100\ndef g():\n    return [25, 30, 45, 20]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return sum(nums) > 100",
        "solution_func": "def g():\n    return [25, 30, 45, 20]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers as input and returns True if the sum of the integers in the list is greater than 100. The solution function g returns a specific list of integers, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation and comparison operations in Python. It tests the understanding of function definitions, list manipulation, and comparison operators.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(missing_num: int) -> bool:\n    return missing_num == 7\ndef g():\n    numbers = [1, 2, 3, 4, 5, 6, 8, 9, 10]\n    return [num for num in range(1, 11) if num not in numbers][0]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding a missing number in a list and checking if it matches a specific value.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(missing_num: int) -> bool:\n    return missing_num == 7",
        "solution_func": "def g():\n    numbers = [1, 2, 3, 4, 5, 6, 8, 9, 10]\n    return [num for num in range(1, 11) if num not in numbers][0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the missing number in a list of numbers from 1 to 10 and checking if the missing number is 7."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f to check if a given number is 7, and a function g that finds the missing number in a list of numbers from 1 to 10. The assertion checks if the missing number found by g is indeed 7.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom itertools import permutations\n\ndef f(words: list, target_word='listen') -> bool:\n    return any(''.join(p) == target_word for p in permutations(words))\ndef g(target_word='listen'):\n    return ''.join(sorted(target_word, reverse=True))\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns the string 'level', which is a palindrome. The assert statement confirms that the solution function g() satisfies the condition of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number theory is used in the puzzle to check if a number is prime or not.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom itertools import permutations\n\ndef f(words: list, target_word='listen') -> bool:\n    return any(''.join(p) == target_word for p in permutations(words))\ndef g(target_word='listen'):\n    return ''.join(sorted(target_word, reverse=True))\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns the number 17. The puzzle requires g() to return a number and f(g()) to evaluate to True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function that returns a specific number to satisfy the condition of the puzzle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    assert all(num > 0 for num in numbers)\n    assert sum(numbers) > 100\n    return all(num % 2 == 0 for num in numbers)\ndef g():\n    return [20, 30, 40, 50, 60]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic, list operations, and mathematical operations.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int]) -> bool:\n    assert all(num > 0 for num in numbers)\n    assert sum(numbers) > 100\n    return all(num % 2 == 0 for num in numbers)",
        "solution_func": "def g():\n    return [20, 30, 40, 50, 60]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a list of positive integers, ensures the sum of the numbers is greater than 100, and checks if all numbers in the list are even. The solution function returns a specific list that satisfies these conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking conditions on a list of positive integers and verifying if they are all even and the sum is greater than 100. The solution function returns a list that meets these criteria.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sentence: str) -> bool:\n    processed_sentence = ''.join(char.lower() for char in sentence if char.isalnum())\n    return processed_sentence == processed_sentence[::-1]\n\ndef g(sentence='A man, a plan, a canal, Panama!'):\n    return sentence\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic to check if a sentence is a palindrome.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom itertools import permutations\n\ndef f(words: list, target_word='listen') -> bool:\n    return any(''.join(p) == target_word for p in permutations(words))\ndef g(target_word='listen'):\n    return ''.join(sorted(target_word, reverse=True))\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(sentence: str) -> bool:\n    processed_sentence = ''.join(char.lower() for char in sentence if char.isalnum())\n    return processed_sentence == processed_sentence[::-1]",
        "solution_func": "def g(sentence='A man, a plan, a canal, Panama!'):\n    return sentence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires writing a function that checks if a given sentence is a palindrome after removing non-alphanumeric characters and converting all characters to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a sentence is a palindrome after processing it by removing non-alphanumeric characters and converting all characters to lowercase.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str, anagram='silent') -> bool:\n    return sorted(word) == sorted(anagram)\n\ndef g(anagram='silent'):\n    return anagram\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and sorting and ordering topics.",
        "idx_generation": 27,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom itertools import permutations\n\ndef f(words: list, target_word='listen') -> bool:\n    return any(''.join(p) == target_word for p in permutations(words))\ndef g(target_word='listen'):\n    return ''.join(sorted(target_word, reverse=True))\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str, anagram='silent') -> bool:\n    return sorted(word) == sorted(anagram)",
        "solution_func": "def g(anagram='silent'):\n    return anagram",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given word is an anagram of a default word 'silent', and a function g that returns the default word 'silent'. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if a given word is an anagram of a default word using sorted strings. The solution function g simply returns the default word. The assertion ensures that the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i, len(matrix)))\n\ndef g():\n    import random\n    while True:\n        size = random.randint(2, 5)\n        new_matrix = [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n        for i in range(size):\n            for j in range(i, size):\n                new_matrix[j][i] = new_matrix[i][j]\n        return new_matrix\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. The solution generates random symmetric matrices and checks if the function f correctly identifies them as symmetric.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(i, len(matrix)))",
        "solution_func": "def g():\n    import random\n    while True:\n        size = random.randint(2, 5)\n        new_matrix = [[random.randint(1, 10) for _ in range(size)] for _ in range(size)]\n        for i in range(size):\n            for j in range(i, size):\n                new_matrix[j][i] = new_matrix[i][j]\n        return new_matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given matrix is symmetric along its main diagonal. The solution function g generates random symmetric matrices and checks if they satisfy the condition of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding matrix symmetry and generating random matrices. It requires knowledge of list comprehension, loops, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return any(num % 2 == 0 for num in lst) and any(num % 2 != 0 for num in lst)\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation to check for even and odd numbers in a list.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return any(num % 2 == 0 for num in lst) and any(num % 2 != 0 for num in lst)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: list) -> bool that checks if a list contains both even and odd numbers. The solution function g() returns a list of numbers and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions and the any() function in Python to check for the presence of even and odd numbers in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return any(char.islower() for char in s) and any(char.isupper() for char in s)\ndef g():\n    return \"HelloWorld\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return any(char.islower() for char in s) and any(char.isupper() for char in s)",
        "solution_func": "def g():\n    return \"HelloWorld\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if a given string contains both lowercase and uppercase characters. The solution function g() returns the string 'HelloWorld' and the puzzle is solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for the presence of both lowercase and uppercase characters in a given string. The solution function returns a string that satisfies this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return sum(nums) > 100\ndef g():\n    return [40, 30, 35]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return sum(nums) > 100",
        "solution_func": "def g():\n    return [40, 30, 35]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of numbers as input and returns True if the sum of the numbers is greater than 100. The function g returns a specific list of numbers, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that calculates the sum of a list of numbers and comparing it to a threshold value. It also requires understanding how to call a function and use an assertion to check the result.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) <= 3:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=25):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Fibonacci sequence generation and checking if the generated Fibonacci numbers are present in the input list.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) <= 2:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=20):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) <= 3:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])",
        "solution_func": "def g(limit=25):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of numbers contains two specific Fibonacci numbers. The solution function g generates Fibonacci numbers up to a specified limit and returns them in a list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding Fibonacci numbers and list operations in Python. The solution function generates Fibonacci numbers and the challenge function checks if the list contains two specific Fibonacci numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 4:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=30):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Fibonacci sequence generation and checking for presence of certain numbers in a list.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) <= 2:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=20):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 4:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])",
        "solution_func": "def g(limit=30):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if two Fibonacci numbers are present in a list of numbers generated by function g. Function g generates Fibonacci numbers up to a specified limit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding Fibonacci sequence, list comprehension, and function return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[str]) -> bool:\n    return len(lst) != len(set(lst))\n\ndef g() -> List[str]:\n    return [\"apple\", \"banana\", \"cherry\", \"apple\"]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations to check for duplicates in a list of strings.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[str]) -> bool:\n    return len(lst) != len(set(lst))",
        "solution_func": "def g() -> List[str]:\n    return [\"apple\", \"banana\", \"cherry\", \"apple\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of strings and returns True if there are duplicate elements in the list. The solution function g returns a list with duplicate elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation and the use of set to check for duplicates in a list of strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name') -> bool:\n    return key in d\n\ndef g(key='name') -> dict:\n    return {key: \"Alice\", \"age\": 30, \"city\": \"New York\"}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and checking for the existence of a key in a dictionary.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict, key='name') -> bool:\n    return key in d",
        "solution_func": "def g(key='name') -> dict:\n    return {key: \"Alice\", \"age\": 30, \"city\": \"New York\"}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specified key exists in a dictionary, and a function g that returns a dictionary with a specified key. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves working with dictionaries and function calls.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], element_found=False) -> bool:\n    return element_found or 2 in numbers\n\ndef g(element_found=False) -> List[int]:\n    prime_numbers = []\n    for num in range(2, 20):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as prime numbers, loops, and list manipulation.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(path: List[str], goal_reached=True) -> bool:\n    \n    return goal_reached and 'O' not in path\n\ndef g(goal_reached=True) -> List[str]:\n    \n    maze = [\n        ['#', '#', '#', '#', '#'],\n        ['#', 'S', ' ', ' ', '#'],\n        ['#', ' ', '#', ' ', '#'],\n        ['#', ' ', ' ', ' ', '#'],\n        ['#', '#', '#', 'G', '#']\n    ]\n    \n    path = ['S']\n    current_pos = (1, 1)\n    \n    while True:\n        if current_pos == (3, 3):\n            path.append('G')\n            return path\n        \n        if maze[current_pos[0] + 1][current_pos[1]] != '#':\n            path.append('D')\n            current_pos = (current_pos[0] + 1, current_pos[1])\n        elif maze[current_pos[0]][current_pos[1] + 1] != '#':\n            path.append('R')\n            current_pos = (current_pos[0], current_pos[1] + 1)\n        else:\n            path.append('U')\n            current_pos = (current_pos[0] - 1, current_pos[1])\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], element_found=False) -> bool:\n    return element_found or 2 in numbers",
        "solution_func": "def g(element_found=False) -> List[int]:\n    prime_numbers = []\n    for num in range(2, 20):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the number 2 is present in a list of integers. The solution function g generates a list of prime numbers between 2 and 19, and the assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, prime number generation, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], condition_met=False) -> bool:\n    return condition_met or 55 in numbers\n\ndef g(condition_met=False) -> List[int]:\n    fibonacci = [0, 1]\n    while fibonacci[-1] < 100:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations (fibonacci sequence) and conditional logic.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(path: List[str], goal_reached=True) -> bool:\n    \n    return goal_reached and 'O' not in path\n\ndef g(goal_reached=True) -> List[str]:\n    \n    maze = [\n        ['#', '#', '#', '#', '#'],\n        ['#', 'S', ' ', ' ', '#'],\n        ['#', ' ', '#', ' ', '#'],\n        ['#', ' ', ' ', ' ', '#'],\n        ['#', '#', '#', 'G', '#']\n    ]\n    \n    path = ['S']\n    current_pos = (1, 1)\n    \n    while True:\n        if current_pos == (3, 3):\n            path.append('G')\n            return path\n        \n        if maze[current_pos[0] + 1][current_pos[1]] != '#':\n            path.append('D')\n            current_pos = (current_pos[0] + 1, current_pos[1])\n        elif maze[current_pos[0]][current_pos[1] + 1] != '#':\n            path.append('R')\n            current_pos = (current_pos[0], current_pos[1] + 1)\n        else:\n            path.append('U')\n            current_pos = (current_pos[0] - 1, current_pos[1])\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], condition_met=False) -> bool:\n    return condition_met or 55 in numbers",
        "solution_func": "def g(condition_met=False) -> List[int]:\n    fibonacci = [0, 1]\n    while fibonacci[-1] < 100:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g. Function f checks if the number 55 is in a given list of integers. Function g generates a list of Fibonacci numbers up to 100. The puzzle asserts that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for the presence of a specific number in a list and generating Fibonacci numbers. It is a simple and straightforward puzzle that can be used to teach basic Python concepts like list manipulation and condition checking.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], condition_satisfied=False) -> bool:\n    return condition_satisfied or 'level' in words\n\ndef g(condition_satisfied=False) -> List[str]:\n    words = [\"radar\", \"level\", \"python\", \"madam\", \"racecar\"]\n    palindromic_words = [word for word in words if word == word[::-1]]\n    return palindromic_words\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(path: List[str], goal_reached=True) -> bool:\n    \n    return goal_reached and 'O' not in path\n\ndef g(goal_reached=True) -> List[str]:\n    \n    maze = [\n        ['#', '#', '#', '#', '#'],\n        ['#', 'S', ' ', ' ', '#'],\n        ['#', ' ', '#', ' ', '#'],\n        ['#', ' ', ' ', ' ', '#'],\n        ['#', '#', '#', 'G', '#']\n    ]\n    \n    path = ['S']\n    current_pos = (1, 1)\n    \n    while True:\n        if current_pos == (3, 3):\n            path.append('G')\n            return path\n        \n        if maze[current_pos[0] + 1][current_pos[1]] != '#':\n            path.append('D')\n            current_pos = (current_pos[0] + 1, current_pos[1])\n        elif maze[current_pos[0]][current_pos[1] + 1] != '#':\n            path.append('R')\n            current_pos = (current_pos[0], current_pos[1] + 1)\n        else:\n            path.append('U')\n            current_pos = (current_pos[0] - 1, current_pos[1])\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], condition_satisfied=False) -> bool:\n    return condition_satisfied or 'level' in words",
        "solution_func": "def g(condition_satisfied=False) -> List[str]:\n    words = [\"radar\", \"level\", \"python\", \"madam\", \"racecar\"]\n    palindromic_words = [word for word in words if word == word[::-1]]\n    return palindromic_words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the word 'level' is in a list of words, and a function g that returns a list of palindromic words from a predefined list. The puzzle is to ensure that function f returns True when function g is called."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, string manipulation, and function calling in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] >= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] < nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] > nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Dynamic Programming, Sorting and Ordering",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] >= subsequence[i - 1]:\n            return False\n    return True",
        "solution_func": "def g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] < nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] > nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python. The first function f(subsequence: List[int], nums=[0]) checks if a given subsequence is strictly decreasing. The second function g(nums=[0]) finds the longest decreasing subsequence in a list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for a strictly decreasing subsequence and finding the longest decreasing subsequence using dynamic programming in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return subsequence == subsequence[::-1]\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if nums[start] == nums[end] and length == 2:\n                dp[start][end] = 2\n            elif nums[start] == nums[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start][end - 1], dp[start + 1][end])\n\n    subsequence = []\n    start, end = 0, n - 1\n    while start <= end:\n        if nums[start] == nums[end]:\n            subsequence.append(nums[start])\n            if start != end:\n                subsequence.append(nums[end])\n        start += 1\n        end -= 1\n\n    return subsequence\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Dynamic Programming, String Manipulation",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return subsequence == subsequence[::-1]",
        "solution_func": "def g(nums=[0]):\n    n = len(nums)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if nums[start] == nums[end] and length == 2:\n                dp[start][end] = 2\n            elif nums[start] == nums[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start][end - 1], dp[start + 1][end])\n\n    subsequence = []\n    start, end = 0, n - 1\n    while start <= end:\n        if nums[start] == nums[end]:\n            subsequence.append(nums[start])\n            if start != end:\n                subsequence.append(nums[end])\n        start += 1\n        end -= 1\n\n    return subsequence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given subsequence is a palindrome or not using dynamic programming."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of dynamic programming to find the longest palindromic subsequence in a given list of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom sympy import isprime\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(isprime(num) for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    primes = [num for num in nums if isprime(num)]\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given subsequence of numbers consists of prime numbers and then extracting the prime numbers from the given list of numbers.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom sympy import isprime\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(isprime(num) for num in subsequence)",
        "solution_func": "def g(nums=[0]) -> List[int]:\n    primes = [num for num in nums if isprime(num)]\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if all numbers in a given subsequence are prime, and a function g that returns a list of prime numbers from a given list of numbers. The assertion checks if applying function g to the default input satisfies the condition of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use the sympy library to check for prime numbers and filter a list based on prime numbers. It also tests the understanding of function composition and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"level\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'level'. The assertion checks if the function f(g()) returns True for the input 'level', which is a palindrome.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nimport sympy\ndef g():\n    return sympy.nextprime(7)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm and utilizing the sympy library to generate the next prime number.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nimport sympy",
        "solution_func": "def g():\n    return sympy.nextprime(7)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number, and a function g() that returns the next prime number after 7. The puzzle requires verifying if the next prime number after 7 satisfies the prime number check function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves prime number checking and using a library function to find the next prime number. It tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list contains unique elements by comparing its length with the length of a set created from the list. This involves concepts of sets and list manipulation.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list contains only unique elements, and then defining a function g() that returns a list with unique elements. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, set operations, and function definitions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    n = \"abba\"\n    while True:\n        if n == n[::-1]:\n            return n\n        n = chr(ord(n[-1]) + 1) + n[:-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Recursion",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d)**2 for d in str(n))\n    if digit_sum < 2:\n        return False\n    for i in range(2, int(digit_sum ** 0.5) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 100\n    while True:\n        digit_sum = sum(int(d)**2 for d in str(n))\n        if digit_sum < 2:\n            n += 1\n            continue\n        is_prime = True\n        for i in range(2, int(digit_sum ** 0.5) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n += 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    n = \"abba\"\n    while True:\n        if n == n[::-1]:\n            return n\n        n = chr(ord(n[-1]) + 1) + n[:-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s: str) that checks if a given string is a palindrome, and a function g() that generates strings until it finds a palindrome. The assertion checks if the generated palindrome satisfies the palindrome condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    n = [1, 2, 3, 4]\n    while True:\n        if len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list contains only unique elements and generating a list with unique elements.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d)**2 for d in str(n))\n    if digit_sum < 2:\n        return False\n    for i in range(2, int(digit_sum ** 0.5) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 100\n    while True:\n        digit_sum = sum(int(d)**2 for d in str(n))\n        if digit_sum < 2:\n            n += 1\n            continue\n        is_prime = True\n        for i in range(2, int(digit_sum ** 0.5) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n += 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g():\n    n = [1, 2, 3, 4]\n    while True:\n        if len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of numbers where each number is unique within the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list contains only unique elements and finding a list that satisfies this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, char='a') -> bool:\n    return char in text\n\ndef g(char='a') -> str:\n    return char\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 28,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, prime=17) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(prime=17) -> int:\n    return prime\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str, char='a') -> bool:\n    return char in text",
        "solution_func": "def g(char='a') -> str:\n    return char",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given character is present in a given text, and g returns a character. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple one that tests the understanding of function definitions and function calls in Python. It can be used to introduce basic concepts of functions and function composition in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, char_found=False) -> bool:\n    return char_found or 'a' in text\n\ndef g(char_found=False) -> str:\n    vowels = 'aeiou'\n    return vowels\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], element_found=False) -> bool:\n    return element_found or 2 in numbers\n\ndef g(element_found=False) -> List[int]:\n    prime_numbers = []\n    for num in range(2, 20):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str, char_found=False) -> bool:\n    return char_found or 'a' in text",
        "solution_func": "def g(char_found=False) -> str:\n    vowels = 'aeiou'\n    return vowels",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if the character 'a' is present in a given text and g returns a string of vowels. The assert statement checks if calling f with the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, boolean logic, and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], word_found=False) -> bool:\n    return word_found or 'Python' in words\n\ndef g(word_found=False) -> List[str]:\n    programming_languages = ['Java', 'C++', 'Python', 'JavaScript', 'Ruby']\n    return programming_languages\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], element_found=False) -> bool:\n    return element_found or 2 in numbers\n\ndef g(element_found=False) -> List[int]:\n    prime_numbers = []\n    for num in range(2, 20):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], word_found=False) -> bool:\n    return word_found or 'Python' in words",
        "solution_func": "def g(word_found=False) -> List[str]:\n    programming_languages = ['Java', 'C++', 'Python', 'JavaScript', 'Ruby']\n    return programming_languages",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and a boolean as input, and returns True if the word 'Python' is found in the list. The solution function g returns a list of programming languages and the puzzle asserts that calling f with the output of g should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the word 'Python' is present in a list of programming languages. The solution function returns a list of programming languages and the puzzle asserts that the word 'Python' should be found in this list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], square_found=False) -> bool:\n    return square_found or any(num == int(num ** 0.5) ** 2 for num in numbers)\n\ndef g(square_found=False) -> List[int]:\n    squares = [num ** 2 for num in range(1, 11)]\n    return squares\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and list manipulation.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], element_found=False) -> bool:\n    return element_found or 2 in numbers\n\ndef g(element_found=False) -> List[int]:\n    prime_numbers = []\n    for num in range(2, 20):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], square_found=False) -> bool:\n    return square_found or any(num == int(num ** 0.5) ** 2 for num in numbers)",
        "solution_func": "def g(square_found=False) -> List[int]:\n    squares = [num ** 2 for num in range(1, 11)]\n    return squares",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions: f(numbers: List[int], square_found=False) -> bool and g(square_found=False) -> List[int]. Function f checks if any number in the input list is a perfect square, while function g generates a list of squares. The assert statement checks if function f returns True when called with the output of function g as input."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for perfect squares in a list and generating a list of squares. It is a suitable challenge to test understanding of list comprehension and boolean logic in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, pattern='abc') -> bool:\n    return pattern in text\n\ndef g(pattern='abc'):\n    import random\n    import string\n    random.seed(3)\n    n = 3\n    text = ''.join(random.choices(string.ascii_lowercase, k=n))\n    \n    while pattern not in text:\n        n += 1\n        text = ''.join(random.choices(string.ascii_lowercase, k=n))\n    \n    return text\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.), Randomization",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, pattern='abc') -> bool:\n    return pattern in text",
        "solution_func": "def g(pattern='abc'):\n    import random\n    import string\n    random.seed(3)\n    n = 3\n    text = ''.join(random.choices(string.ascii_lowercase, k=n))\n    \n    while pattern not in text:\n        n += 1\n        text = ''.join(random.choices(string.ascii_lowercase, k=n))\n    \n    return text",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that checks if a given pattern is present in a given text. The solution function g generates random text until the pattern is found and returns that text."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, random generation, and function implementation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves factors, common factors, and checking if a sequence of numbers meets certain conditions. It also uses itertools for combinations. The solution generates combinations of numbers from a given list that satisfy the conditions specified in the puzzle.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(sequence: List[int], common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] - sequence[i-1] == common_diff\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\ndef g(common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] - c[i] == common_diff for i in range(len(c)-1)):\n                return list(c)\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit",
        "solution_func": "def g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given sequence of numbers meets certain conditions, and a function g that generates combinations of numbers from a given set that satisfy the conditions of f. The goal is to find a combination of numbers that satisfies the conditions specified in f when passed to g and then checked by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, conditions, and combinations in Python. It requires students to implement a function that generates combinations and checks if they meet specific criteria defined in another function.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sequence: List[int], common_ratio=2, range_limit=200, options=[2, 4, 8, 16, 32]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] / sequence[i-1] == common_ratio\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_ratio=2, range_limit=200, options=[2, 4, 8, 16, 32]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] / c[i-1] == common_ratio for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Mathematical Operations, Conditional Logic, Importing Modules (Itertools), Permutations and Combinations",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(sequence: List[int], common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] - sequence[i-1] == common_diff\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\ndef g(common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] - c[i] == common_diff for i in range(len(c)-1)):\n                return list(c)\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(sequence: List[int], common_ratio=2, range_limit=200, options=[2, 4, 8, 16, 32]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] / sequence[i-1] == common_ratio\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit",
        "solution_func": "def g(common_ratio=2, range_limit=200, options=[2, 4, 8, 16, 32]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] / c[i-1] == common_ratio for i in range(1, len(c))):\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers satisfies a specific condition and falls within certain limits. The solution involves finding combinations of numbers from a given set that meet the condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, and condition checking in Python. The solution requires using itertools to find combinations of numbers that satisfy the condition specified in the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sequence: List[int], common_sum=12, range_limit=100, options=[2, 3, 5, 7, 11]) -> bool:\n    assert sum(sequence) == common_sum\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_sum=12, range_limit=100, options=[2, 3, 5, 7, 11]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if sum(c) == common_sum:\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as List Manipulation, Itertools, Combinations, and Assertion.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(sequence: List[int], common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] - sequence[i-1] == common_diff\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\ndef g(common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] - c[i] == common_diff for i in range(len(c)-1)):\n                return list(c)\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(sequence: List[int], common_sum=12, range_limit=100, options=[2, 3, 5, 7, 11]) -> bool:\n    assert sum(sequence) == common_sum\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit",
        "solution_func": "def g(common_sum=12, range_limit=100, options=[2, 3, 5, 7, 11]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if sum(c) == common_sum:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a combination of numbers from a given list that sum up to a common value, while also ensuring that the sum of the combination is equal to a specified value and the maximum value in the combination does not exceed a certain limit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given combination of numbers from a list meets specific criteria related to their sum and values, and the solution involves generating combinations to satisfy these conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # simulated annealing\n    import random\n    import math\n\n    def fitness(individual, vecs):\n        return sum(sum(v[i] for i in individual) % 2 for v in vecs)\n\n    def neighbor(current, d):\n        new = current[:]\n        index = random.randint(0, d - 1)\n        if index in new:\n            new.remove(index)\n        else:\n            new.append(index)\n        return new\n\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    current_solution = [i for i in range(d) if random.random() > 0.5]\n    temperature = 1.0\n    cooling_rate = 0.0001\n\n    while temperature > 0.0001:\n        new_solution = neighbor(current_solution, d)\n        current_fitness = fitness(current_solution, vecs)\n        new_fitness = fitness(new_solution, vecs)\n\n        if new_fitness >= current_fitness or random.random() < math.exp((new_fitness - current_fitness) / temperature):\n            current_solution = new_solution\n\n        temperature *= 1 - cooling_rate\n\n    return current_solution\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise operations and simulated annealing algorithm for optimization.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4",
        "solution_func": "def g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # simulated annealing\n    import random\n    import math\n\n    def fitness(individual, vecs):\n        return sum(sum(v[i] for i in individual) % 2 for v in vecs)\n\n    def neighbor(current, d):\n        new = current[:]\n        index = random.randint(0, d - 1)\n        if index in new:\n            new.remove(index)\n        else:\n            new.append(index)\n        return new\n\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    current_solution = [i for i in range(d) if random.random() > 0.5]\n    temperature = 1.0\n    cooling_rate = 0.0001\n\n    while temperature > 0.0001:\n        new_solution = neighbor(current_solution, d)\n        current_fitness = fitness(current_solution, vecs)\n        new_fitness = fitness(new_solution, vecs)\n\n        if new_fitness >= current_fitness or random.random() < math.exp((new_fitness - current_fitness) / temperature):\n            current_solution = new_solution\n\n        temperature *= 1 - cooling_rate\n\n    return current_solution",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves implementing a simulated annealing algorithm to solve a binary optimization problem. The goal is to find a solution that satisfies a specific condition based on the input vectors."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle requires understanding of simulated annealing, binary representation, and fitness evaluation. The solution uses random search and temperature-based optimization to find a suitable solution for the given vectors.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    \"\"\"\n    This solution checks if a number is a prime number.\n    \"\"\"\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (primes) and Mathematical Operations (range, modulo).",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    \"\"\"\n    This solution checks if a string is a palindrome.\n    \"\"\"\n    return \"radar\"\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    \"\"\"\n    This solution checks if a number is a prime number.\n    \"\"\"\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given number is a prime number using a function f(n) and a solution function g() that returns a specific number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand prime numbers and how to check for primality using a simple algorithm. The solution function g() returns a specific number (17) to test the prime number check in function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, template='ABABA') -> bool:\n    return all(s[i] == template[i % len(template)] for i in range(len(s)))\ndef g(template='ABABA'):\n    import itertools\n    alphabet = set(template)\n    for n in range(1, len(alphabet) + 1):\n        for combo in itertools.product(alphabet, repeat=n):\n            if ''.join(combo) * (len(template) // n) + ''.join(combo[:len(template) % n]) == template:\n                return ''.join(combo)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Permutations and Combinations, Importing Modules (Itertools, etc.)",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(sequence: List[int], common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] - sequence[i-1] == common_diff\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\ndef g(common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] - c[i] == common_diff for i in range(len(c)-1)):\n                return list(c)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, template='ABABA') -> bool:\n    return all(s[i] == template[i % len(template)] for i in range(len(s)))",
        "solution_func": "def g(template='ABABA'):\n    import itertools\n    alphabet = set(template)\n    for n in range(1, len(alphabet) + 1):\n        for combo in itertools.product(alphabet, repeat=n):\n            if ''.join(combo) * (len(template) // n) + ''.join(combo[:len(template) % n]) == template:\n                return ''.join(combo)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string follows a specific template pattern, and a function g that generates a string based on the template pattern. The goal is to find a string that satisfies the template pattern."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and pattern matching, which are common concepts in Python programming. It requires understanding of string operations and itertools module for generating combinations. The solution function g uses itertools to generate possible combinations of characters to match the template pattern provided in the function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(number: int) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef g(number=10):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    next_num = number + 1\n    while True:\n        if is_prime(next_num):\n            return next_num\n        next_num += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(word: str) -> bool:\n    return len(set(word)) == len(word)\ndef g(word=\"python\"):\n    return ''.join(sorted(set(word), key=word.index))\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(number: int) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True",
        "solution_func": "def g(number=10):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    next_num = number + 1\n    while True:\n        if is_prime(next_num):\n            return next_num\n        next_num += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(number) that checks if a given number is a prime number, and a function g(number) that finds the next prime number after a given number. The puzzle requires understanding of prime numbers and basic looping in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a common programming concept of prime numbers and requires the student to implement a function to check for prime numbers and another function to find the next prime number. It provides a practical application of loops and conditional statements in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(number: int) -> bool:\n    return str(number) == str(number)[::-1]\n\ndef g(number=100):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    for n in range(number - 1, 0, -1):\n        if is_palindrome(n):\n            return n\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(word: str) -> bool:\n    return len(set(word)) == len(word)\ndef g(word=\"python\"):\n    return ''.join(sorted(set(word), key=word.index))\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(number: int) -> bool:\n    return str(number) == str(number)[::-1]",
        "solution_func": "def g(number=100):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    for n in range(number - 1, 0, -1):\n        if is_palindrome(n):\n            return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given number is a palindrome, and a function g that finds the largest palindrome number less than a given number. The assertion checks if the solution function g returns a palindrome number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of palindrome numbers and requires implementing a function to find the largest palindrome number less than a given input. The solution function g iterates backwards from the input number to find the largest palindrome number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(num) for num in nums)\ndef g() -> List[int]:\n    primes = []\n    for num in range(2, 1000):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime numbers, loops, and list comprehension.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(num) for num in nums)",
        "solution_func": "def g() -> List[int]:\n    primes = []\n    for num in range(2, 1000):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if all numbers in a given list are prime, and a function g that generates a list of prime numbers up to 1000. The puzzle requires checking if function f applied to the output of function g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(strings: List[str]) -> bool:\n    return all(len(s) == len(strings[0]) for s in strings)\ndef g() -> List[str]:\n    return ['abc' * 333 for _ in range(999)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and list operations.",
        "idx_generation": 29,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(strings: List[str]) -> bool:\n    return all(len(s) == len(strings[0]) for s in strings)",
        "solution_func": "def g() -> List[str]:\n    return ['abc' * 333 for _ in range(999)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and returns True if all strings have the same length, and a function g that generates a list of strings with a specific length to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all strings in a list have the same length, and the solution generates a list of strings with the same length to pass the condition in the function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a word is a palindrome.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that returns True if the word is a palindrome (reads the same forwards and backwards). The solution function g() returns the word 'level', and the assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product > 1000\n\ndef g():\n    return [25, 20, 10, 3, 2]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product > 1000",
        "solution_func": "def g():\n    return [25, 20, 10, 3, 2]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers, calculates the product of all the integers in the list, and returns True if the product is greater than 1000. The solution function g returns a specific list of integers that satisfies the condition set by function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the product of a list of integers and compare it to a specific value. It also requires implementing a function that returns a list of integers that meets the condition set by the function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return all(isinstance(key, str) for key in data.keys())\n\ndef g():\n    return {'name': 1, 'age': 25, 'score': 90}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation as it checks if all keys in a dictionary are strings.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return all(isinstance(key, str) for key in data.keys())",
        "solution_func": "def g():\n    return {'name': 1, 'age': 25, 'score': 90}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all keys in a dictionary are strings, and a function g that returns a dictionary with string keys and integer values. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding dictionary keys and types in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[float]) -> bool:\n    average = sum(numbers) / len(numbers)\n    return average > 5\n\ndef g():\n    return [6.5, 7.2, 4.8, 5.5, 6.9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[float]) -> bool:\n    average = sum(numbers) / len(numbers)\n    return average > 5",
        "solution_func": "def g():\n    return [6.5, 7.2, 4.8, 5.5, 6.9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that calculates the average of a list of numbers and checks if the average is greater than 5. The solution provides a list of numbers and asserts that the average is indeed greater than 5."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation and comparison operations in Python. It tests the students' understanding of calculating averages and using comparison operators.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n += 2 * (n // 3)\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n += 2 * (n // 3)\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as Recursion, Conditional Logic, and Mathematical Operations.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n += 2 * (n // 3)\n    return n > 0 and n % 3 == 2",
        "solution_func": "def g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n += 2 * (n // 3)\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) and g(), where f(n) checks if a given number satisfies a specific condition after a series of operations, and g() iterates through numbers to find one that satisfies the condition. The goal is to find a number that meets the condition defined in f(n) after applying the operations in g()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding loops, conditions, and arithmetic operations in Python. It requires the student to analyze the code to determine the relationship between the functions f() and g() and find a number that satisfies the condition in f().",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(count: int, s=\"(()())\") -> bool:\n    assert count == 3\n    return True\n\ndef g(s=\"(()())\"):\n    stack = []\n    valid_pairs = 0\n    \n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            valid_pairs += 1\n    \n    return valid_pairs\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(target_value: int, prices=[7, 1, 5, 3, 6, 4]) -> bool:\n    assert target_value == max(prices[1] - prices[0], prices[2])\n    return True\n\ndef g(prices=[7, 1, 5, 3, 6, 4]):\n    if len(prices) <= 1:\n        return 0\n    \n    max_profit = 0\n    min_price = prices[0]\n    \n    for price in prices[1:]:\n        max_profit = max(max_profit, price - min_price)\n        min_price = min(min_price, price)\n    \n    return max_profit\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(count: int, s=\"(()())\") -> bool:\n    assert count == 3\n    return True",
        "solution_func": "def g(s=\"(()())\"):\n    stack = []\n    valid_pairs = 0\n    \n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            valid_pairs += 1\n    \n    return valid_pairs",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if the number of valid pairs of parentheses in a given string is equal to 3, and g counts the number of valid pairs of parentheses in the string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking the number of valid pairs of parentheses in a given string and ensuring it is equal to a specific count. The solution function g counts the valid pairs of parentheses in the string and the puzzle function f checks if this count is equal to 3.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target_sum: int, limit=4000000) -> bool:\n    assert target_sum == 4613732\n    return True\n\ndef g(limit=4000000):\n    sum_even_fibonacci = 0\n    fib1, fib2 = 1, 2\n    \n    while fib2 <= limit:\n        if fib2 % 2 == 0:\n            sum_even_fibonacci += fib2\n        \n        fib1, fib2 = fib2, fib1 + fib2\n    \n    return sum_even_fibonacci\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and loops.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(target_value: int, prices=[7, 1, 5, 3, 6, 4]) -> bool:\n    assert target_value == max(prices[1] - prices[0], prices[2])\n    return True\n\ndef g(prices=[7, 1, 5, 3, 6, 4]):\n    if len(prices) <= 1:\n        return 0\n    \n    max_profit = 0\n    min_price = prices[0]\n    \n    for price in prices[1:]:\n        max_profit = max(max_profit, price - min_price)\n        min_price = min(min_price, price)\n    \n    return max_profit\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(target_sum: int, limit=4000000) -> bool:\n    assert target_sum == 4613732\n    return True",
        "solution_func": "def g(limit=4000000):\n    sum_even_fibonacci = 0\n    fib1, fib2 = 1, 2\n    \n    while fib2 <= limit:\n        if fib2 % 2 == 0:\n            sum_even_fibonacci += fib2\n        \n        fib1, fib2 = fib2, fib1 + fib2\n    \n    return sum_even_fibonacci",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the sum of even Fibonacci numbers up to a certain limit and checking if it equals a specific target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves calculating the sum of even Fibonacci numbers up to a limit and comparing it to a target sum. The solution function g() calculates the sum of even Fibonacci numbers, and the puzzle function f() checks if the sum matches the target sum.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(permutations: List[List[int]], num_list=[1, 2, 3]) -> bool:\n    return all(sum(perm) % 2 == 0 for perm in permutations)\ndef g(num_list=[1, 2, 3]):\n    from itertools import permutations\n    return list(permutations(num_list))\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Permutations and Combinations, Importing Modules (Itertools, etc.)",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(permutations: List[str], char_list=['a', 'b', 'c'], length=3) -> bool:\n    return len(permutations) == len(set(permutations)) >= len(char_list) and all((len(perm) == length for perm in permutations))\ndef g(char_list=['a', 'b', 'c'], length=3):\n    from itertools import permutations\n    return [''.join(perm) for perm in permutations(char_list, length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List \ndef f(permutations: List[List[int]], num_list=[1, 2, 3]) -> bool:\n    return all(sum(perm) % 2 == 0 for perm in permutations)",
        "solution_func": "def g(num_list=[1, 2, 3]):\n    from itertools import permutations\n    return list(permutations(num_list))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the sum of all permutations of a given list of numbers is even."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to generate all permutations of a list of numbers and check if the sum of each permutation is even.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a given text is a palindrome. The solution function `g()` returns the string 'radar', which is a palindrome. The puzzle function `f()` checks if the input text is equal to its reverse, which is a common technique for checking palindromes.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    return any(target in row for row in matrix)\n\ndef g(target=0) -> List[List[int]]:\n    matrix_size = 3\n    return [[target] * matrix_size for _ in range(matrix_size)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns the text 'radar'. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 7\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (primality testing) and Mathematical Operations (looping, square root operation).",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    return any(target in row for row in matrix)\n\ndef g(target=0) -> List[List[int]]:\n    matrix_size = 3\n    return [[target] * matrix_size for _ in range(matrix_size)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 7",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns the number 7, and assert that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a number is prime and then defining another function to return a specific number. The assertion checks if the second function returns a number for which the first function returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]\n\ndef g():\n    return \"A man a plan a canal Panama\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]",
        "solution_func": "def g():\n    return \"A man a plan a canal Panama\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if a given text is a palindrome after removing spaces and converting to lowercase. The solution function returns a specific text that is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and checking for palindromes in Python. It is a good exercise to practice string methods and logical comparisons.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(num % 2 == 0 for num in numbers) and any(num % 2 != 0 for num in numbers)\n\ndef g():\n    return [2, 5, 8, 3, 7, 10]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers contains both even and odd numbers.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(num % 2 == 0 for num in numbers) and any(num % 2 != 0 for num in numbers)",
        "solution_func": "def g():\n    return [2, 5, 8, 3, 7, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and returns True if the list contains both even and odd numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of integers contains both even and odd numbers using list comprehension and the any() function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return str(n) == str(n)[::-1]\n\ndef g(start=100):\n    n = start + 1\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n += 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a number is a palindrome. It also includes a loop with conditional logic to find the next palindrome number starting from a given number.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return int(digit_product ** 0.5) ** 2 == digit_product\n\ndef g():\n    n = 9876\n    while True:\n        digit_product = 1\n        for d in str(n):\n            digit_product *= int(d)\n        if int(digit_product ** 0.5) ** 2 == digit_product:\n            return n\n        n -= 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return str(n) == str(n)[::-1]",
        "solution_func": "def g(start=100):\n    n = start + 1\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given integer is a palindrome, and a function g(start) that finds the next palindrome number greater than a given starting number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of palindrome numbers and requires students to implement a function to find the next palindrome number greater than a given starting point.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return str(n) == str(n)[::-1]\n\ndef g(start=999):\n    n = start - 1\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n -= 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 30,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return int(digit_product ** 0.5) ** 2 == digit_product\n\ndef g():\n    n = 9876\n    while True:\n        digit_product = 1\n        for d in str(n):\n            digit_product *= int(d)\n        if int(digit_product ** 0.5) ** 2 == digit_product:\n            return n\n        n -= 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return str(n) == str(n)[::-1]",
        "solution_func": "def g(start=999):\n    n = start - 1\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n -= 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given integer is a palindrome, and a function g(start) that finds the largest palindrome number less than the given start value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of palindrome numbers and string manipulation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst) and len(lst) == len(set(lst))\n\ndef g():\n    n = [2, 4, 6, 8]\n    while True:\n        if all(num % 2 == 0 for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 2)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and if the list has unique elements. The solution generates a list of even numbers and checks if the conditions are satisfied.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    n = [1, 2, 3, 4]\n    while True:\n        if len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst) and len(lst) == len(set(lst))",
        "solution_func": "def g():\n    n = [2, 4, 6, 8]\n    while True:\n        if all(num % 2 == 0 for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 2)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of even numbers where all elements are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list contains only even numbers and has no duplicates. The solution generates a list of even numbers and ensures it meets the criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(lst: list) -> bool:\n    return all(sympy.isprime(num) for num in lst) and len(lst) == len(set(lst))\n\ndef g():\n    n = [2, 3, 5, 7]\n    while True:\n        if all(sympy.isprime(num) for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime numbers, list manipulation, and loop iteration.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    n = [1, 2, 3, 4]\n    while True:\n        if len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import sympy\n\ndef f(lst: list) -> bool:\n    return all(sympy.isprime(num) for num in lst) and len(lst) == len(set(lst))",
        "solution_func": "def g():\n    n = [2, 3, 5, 7]\n    while True:\n        if all(sympy.isprime(num) for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of prime numbers where all numbers are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of numbers consists of prime numbers and all numbers are unique. The solution generates a list of prime numbers and ensures uniqueness by continuously adding the next prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom math import isqrt\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return isqrt(sum(subsequence)) ** 2 == sum(subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    perfect_squares = [num for num in nums if isqrt(num) ** 2 == num]\n    return perfect_squares\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom sympy import isprime\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(isprime(num) for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    primes = [num for num in nums if isprime(num)]\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom math import isqrt\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return isqrt(sum(subsequence)) ** 2 == sum(subsequence)",
        "solution_func": "def g(nums=[0]) -> List[int]:\n    perfect_squares = [num for num in nums if isqrt(num) ** 2 == num]\n    return perfect_squares",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where f checks if the sum of a subsequence of numbers is a perfect square, and g returns a list of perfect squares from a given list of numbers. The assertion checks if g returns a valid solution for f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for perfect squares and manipulate lists in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return subsequence == sorted(subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    sorted_nums = sorted(nums)\n    return sorted_nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if the sorted list is equal to the original list. This falls under the topic of Sorting and Ordering.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom sympy import isprime\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(isprime(num) for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    primes = [num for num in nums if isprime(num)]\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return subsequence == sorted(subsequence)",
        "solution_func": "def g(nums=[0]) -> List[int]:\n    sorted_nums = sorted(nums)\n    return sorted_nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given list of integers is sorted in ascending order. The solution function sorts the input list and returns the sorted list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if a list of integers is sorted in ascending order. The solution function sorts the input list and returns the sorted list, which satisfies the condition of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(num % 2 == 0 for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    evens = [num for num in nums if num % 2 == 0]\n    return evens\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and filtering based on a condition. It does not involve any complex algorithms or data structures.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom sympy import isprime\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(isprime(num) for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    primes = [num for num in nums if isprime(num)]\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(num % 2 == 0 for num in subsequence)",
        "solution_func": "def g(nums=[0]) -> List[int]:\n    evens = [num for num in nums if num % 2 == 0]\n    return evens",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions in Python, where f checks if all numbers in a given list are even, and g returns a list of even numbers from a given list. The assertion checks if the solution function g returns a list of even numbers that satisfies the condition of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, checking for even numbers, and using the all() function to validate a condition. It is suitable for teaching Python concepts related to list manipulation and boolean expressions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting, iteration, and conditional logic to check if a certain condition is met. It also includes list manipulation and assertion. The solution generates a list based on the input parameters and asserts that the function f returns True when applied to the generated list.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
        "solution_func": "def g(t=1000000, n=500):\n    return [2] * n + [t]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and two optional parameters, and checks if the sum of the sorted list elements exceeds a threshold value. The function g generates a list of integers and a threshold value, and the assertion checks if f returns True for the output of g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and conditional statements in Python. It also requires understanding of function parameters and return values.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(x: List[int], t=500000, n=250) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=500000, n=250):\n    return [3] * n + [t]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting, iteration, and conditional logic to check if a certain condition is met. It also includes list manipulation and assertion. ",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(x: List[int], t=500000, n=250) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
        "solution_func": "def g(t=500000, n=250):\n    return [3] * n + [t]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and two optional parameters, and checks if the sum of the sorted list elements exceeds a threshold value. The function g generates a list of integers and a threshold value, and the puzzle is to ensure that f returns True when called with the output of g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and conditional statements in Python. It also requires understanding function parameters and return values.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(x: List[int], t=750000, n=375) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=750000, n=375):\n    return [4] * n + [t]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting, conditional logic, and list manipulation.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(x: List[int], t=750000, n=375) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
        "solution_func": "def g(t=750000, n=375):\n    return [4] * n + [t]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and two optional parameters, and checks if the sum of the sorted list elements exceeds a threshold value. The function g generates a list of integers based on the parameters, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and conditional statements in Python. The solution function g generates a list with specific values to meet the condition of function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_value: int, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return max_value == max(seq)\ndef g(seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return max(seq)\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding the maximum value in a sequence and checking if it matches a given value. This relates to topics such as Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(max_value: int, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return max_value == max(seq)",
        "solution_func": "def g(seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return max(seq)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that returns the maximum value in a given sequence, and then check if the function correctly identifies the maximum value in a predefined sequence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that finds the maximum value in a sequence and then verifying if the function works correctly by comparing the result with a predefined sequence.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(avg_positive: float, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    positive_nums = [num for num in seq if num > 0]\n    return avg_positive == sum(positive_nums) / len(positive_nums) if positive_nums else 0\ndef g(seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    positive_nums = [num for num in seq if num > 0]\n    return sum(positive_nums) / len(positive_nums) if positive_nums else 0\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to calculate the average of positive numbers in a sequence.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True"
        ],
        "problem_func": "def f(avg_positive: float, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    positive_nums = [num for num in seq if num > 0]\n    return avg_positive == sum(positive_nums) / len(positive_nums) if positive_nums else 0",
        "solution_func": "def g(seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    positive_nums = [num for num in seq if num > 0]\n    return sum(positive_nums) / len(positive_nums) if positive_nums else 0",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the average of positive numbers in a sequence matches a given value, and g calculates the average of positive numbers in a sequence. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about calculating the average of positive numbers in a sequence and comparing it with a given value. The functions f and g are defined to perform these tasks and the assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    seen = set()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=15) -> List[int]:\n    return [3, 5, 7]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Brute Force Search as it iterates through all possible combinations of three numbers in the list to find the target sum. It also involves List Operations as it works with lists of integers.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10) -> List[int]:\n    return [2, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    seen = set()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False",
        "solution_func": "def g(target=15) -> List[int]:\n    return [3, 5, 7]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a combination of three numbers from a list that add up to a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if there exists a combination of three numbers in a list that sum up to a target value. The solution function returns a list of numbers that satisfy this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], letter='P') -> bool:\n    first_letter = letter.lower()\n    return all(string.lower().startswith(first_letter) for string in strings)\n\ndef g(letter='P') -> List[str]:\n    return ['Python', 'Puzzle', 'Programming']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10) -> List[int]:\n    return [2, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], letter='P') -> bool:\n    first_letter = letter.lower()\n    return all(string.lower().startswith(first_letter) for string in strings)",
        "solution_func": "def g(letter='P') -> List[str]:\n    return ['Python', 'Puzzle', 'Programming']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f that takes a list of strings and a letter as input, and checks if all strings in the list start with the specified letter (case-insensitive). The solution function g returns a list of strings and ensures that all strings start with the specified letter."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all strings in a list start with a specific letter, which is a common task in programming. The solution function g generates a list of strings that satisfy the condition, demonstrating the use of list comprehension and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target=10) -> bool:\n    return all(sum(t) == target for t in tuples)\n\ndef g(target=10) -> List[Tuple[int, int]]:\n    return [(3, 7), (2, 8), (1, 9)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and List Operations.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10) -> List[int]:\n    return [2, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target=10) -> bool:\n    return all(sum(t) == target for t in tuples)",
        "solution_func": "def g(target=10) -> List[Tuple[int, int]]:\n    return [(3, 7), (2, 8), (1, 9)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of tuples in a list equals a target value, and a function g that returns a list of tuples. The assertion checks if function f returns True when called with the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, tuple manipulation, and function calling in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(chars: str, word='python') -> bool:\n    from itertools import permutations\n    return any(''.join(perm) == word for perm in permutations(chars))\n\ndef g(word='python'):\n    chars = 'ptnohy'\n    from itertools import permutations\n    for perm in permutations(chars):\n        if ''.join(perm) == word:\n            return perm\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, permutations and combinations, and importing modules (Itertools).",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(nums: List[int], target=10) -> bool:\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    from itertools import combinations\n    for r in range(1, len(nums)+1):\n        for comb in combinations(nums, r):\n            if sum(comb) == target:\n                return comb\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(chars: str, word='python') -> bool:\n    from itertools import permutations\n    return any(''.join(perm) == word for perm in permutations(chars))",
        "solution_func": "def g(word='python'):\n    chars = 'ptnohy'\n    from itertools import permutations\n    for perm in permutations(chars):\n        if ''.join(perm) == word:\n            return perm",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(chars: str, word='python') that checks if any permutation of the input characters matches a specific word. The solution function g(word='python') generates permutations of a specific set of characters and returns the permutation that matches the word."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding permutations in Python and how to check for a specific condition within a set of permutations. It also requires knowledge of function calls and assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. This involves comparing elements at symmetric positions across the diagonal. The solution function generates a specific matrix and checks if it satisfies the symmetry condition.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(nums: List[int], target=10) -> bool:\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums)+1) for comb in combinations(nums, r))\n\ndef g(target=10):\n    nums = [1, 2, 3, 4, 5]\n    from itertools import combinations\n    for r in range(1, len(nums)+1):\n        for comb in combinations(nums, r):\n            if sum(comb) == target:\n                return comb\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given matrix is symmetric along its main diagonal, and a function g that returns a specific matrix. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension, matrix indexing, and the all() function in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(s: List[Tuple[str, int]]) -> bool:\n    return len(set(s)) == 500 and all((len(x[0]) == x[1] for x in s))\n\ndef g():\n    return [((\"a\" * (i + 1) + \"b\"), len(\"a\" * (i + 1) + \"b\")) for i in range(500)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and list operations.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(s: List[Tuple[str, int]]) -> bool:\n    return len(set(s)) == 500 and all((len(x[0]) == x[1] for x in s))",
        "solution_func": "def g():\n    return [((\"a\" * (i + 1) + \"b\"), len(\"a\" * (i + 1) + \"b\")) for i in range(500)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires creating a list of tuples where each tuple contains a string and its length, with specific conditions on the list elements. The function f checks if the list meets the conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves creating a list of tuples with specific string and length combinations, and then checking if the list satisfies certain conditions using the function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 750 and all((x.count('x') > x.count('y') and 'y' in x for x in s))\n\ndef g():\n    return [\"x\" * (i + 3) + \"y\" for i in range(750)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and set operations.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(s: List[str]) -> bool:\n    return len(set(s)) == 750 and all((x.count('x') > x.count('y') and 'y' in x for x in s))",
        "solution_func": "def g():\n    return [\"x\" * (i + 3) + \"y\" for i in range(750)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires creating a list of strings where each string contains a certain number of 'x's followed by a 'y', and then checking if the list meets specific conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves creating a list of strings with a specific pattern and then checking if the list satisfies two conditions: the list should have 750 unique elements and each element should have more 'x's than 'y's.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a given text is a palindrome. The solution function returns a specific palindrome text 'radar'.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\n\ndef g() -> list:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns a specific text 'radar'. The assertion tests if the function f returns True when applied to the output of function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return nums == sorted(nums)\n\ndef g() -> list:\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\n\ndef g() -> list:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return nums == sorted(nums)",
        "solution_func": "def g() -> list:\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given list of numbers is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(nums) that returns True if the input list of numbers is sorted in ascending order. It also provides a solution function g() that returns a sorted list of numbers. The assertion checks if the solution function g() satisfies the condition of the puzzle function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime or not using a simple algorithm. It does not directly relate to any specific topic from the list provided.",
        "idx_generation": 31,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\n\ndef g() -> list:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(num) checks if a given number is a prime number, and g() returns the number 17. The puzzle tests whether the number returned by g() is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a specific number is a prime number using the f(num) function and then verifying if the number returned by g() satisfies this condition. This puzzle can be used to teach students about prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a string is a palindrome.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)\ndef g():\n    return [3, 7, 12, 15, 20, 22]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle consists of two functions, f(s: str) which checks if a given string is a palindrome, and g() which returns the string 'radar'. The assert statement confirms that the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g() -> List[int]:\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and generating a list of even numbers.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)\ndef g():\n    return [3, 7, 12, 15, 20, 22]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int]) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g() -> List[int]:\n    return [2, 4, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, function f checks if all numbers in the list are even. Function g returns a list of even numbers. The assert statement checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, checking for even numbers, and using the all() function. The solution function g returns a list of even numbers, and the puzzle tests if function f correctly identifies all numbers in the list as even.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)\n\ndef g() -> str:\n    return \"python\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)\ndef g():\n    return [3, 7, 12, 15, 20, 22]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g() -> str:\n    return \"python\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g() that returns a string, and the function f(s: str) checks if the string has all unique characters. The student needs to ensure that the function g() returns a string with all unique characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation and the use of set to check for unique characters in a string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 2, 3, 4, 5, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and conditional logic to check if a pair of numbers in a list sum up to a target value.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pattern='abracadabra') -> bool:\n    return any(s[i:i+len(pattern)] == pattern for i in range(len(s) - len(pattern) + 1))\ndef g(pattern='abracadabra'):\n    return 'abracadabraabracadabra'\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list, target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    return [1, 2, 3, 4, 5, 5]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the function f checks if there are two numbers in the list that add up to a target value. The function g returns a list of numbers. The puzzle is to determine if function f returns True when called with the output of function g as input."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for the presence of two numbers in a list that add up to a target value using a set to store seen numbers. The solution function g returns a list of numbers to test the functionality of function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return all(isinstance(key, str) for key in d.keys())\n\ndef g():\n    return {'one': 1, 'two': 2, 'three': 3}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all keys in a dictionary are strings.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pattern='abracadabra') -> bool:\n    return any(s[i:i+len(pattern)] == pattern for i in range(len(s) - len(pattern) + 1))\ndef g(pattern='abracadabra'):\n    return 'abracadabraabracadabra'\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return all(isinstance(key, str) for key in d.keys())",
        "solution_func": "def g():\n    return {'one': 1, 'two': 2, 'three': 3}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if all keys in a dictionary are of type string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(d: dict) that returns True if all keys in the input dictionary are of type string. The solution function g() returns a dictionary with string keys, and the assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    return sum(numbers) == target_sum\n\ndef g(target_sum=10):\n    return [2, 3, 5]\n    \nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    return sum(numbers) == target_sum",
        "solution_func": "def g(target_sum=10):\n    return [2, 3, 5]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the function f checks if the sum of the numbers is equal to a target sum. The function g returns a list of numbers [2, 3, 5]. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to pass a list of numbers to a function and check if the sum matches a target sum. The solution function g returns a list that satisfies the condition. The assert statement verifies the correctness of the solution.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, char='a') -> bool:\n    return char in s\n\ndef g(char='a'):\n    return char * 3\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, char='a') -> bool:\n    return char in s",
        "solution_func": "def g(char='a'):\n    return char * 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f(s: str, char='a') -> bool and g(char='a'), where f checks if a given character is present in a string and g returns a string with the given character repeated three times. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, function calls, default arguments, string manipulation, and boolean comparisons in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median == target\n\ndef g(target=5):\n    return [3, 4, 5, 6, 7]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, Mathematical Operations, Conditional Logic, and Sorting and Ordering.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median == target",
        "solution_func": "def g(target=5):\n    return [3, 4, 5, 6, 7]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that calculates the median of a list of numbers and checks if it is equal to a target value. The solution function g returns a list of numbers, and the puzzle is solved if the median of this list is equal to the target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of list manipulation, sorting, and calculating the median. The solution function g returns a list that satisfies the condition of the puzzle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 == 0 for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 2 == 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even, generating random numbers, and using list comprehension.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 == 0 for num in numbers)",
        "solution_func": "def g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 2 == 0 for num in numbers):\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of 5 random numbers between 1 and 100, and check if all numbers in the list are even."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random numbers and checking if they are all even. The solution function g() generates a list of random numbers and returns it only if all numbers are even. The puzzle function f(numbers) checks if all numbers in the input list are even.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(len(word) > 3 for word in words)\n\ndef g():\n    import random\n    while True:\n        words = [''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(4, 8))) for _ in range(5)]\n        if all(len(word) > 3 for word in words):\n            return words\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and random generation of words. The solution checks if all words have a length greater than 3.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(len(word) > 3 for word in words)",
        "solution_func": "def g():\n    import random\n    while True:\n        words = [''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(4, 8))) for _ in range(5)]\n        if all(len(word) > 3 for word in words):\n            return words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all words in a list have a length greater than 3, and a function g that generates a list of random words and returns it if all words have a length greater than 3. The assert statement checks if function f applied to the output of function g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the length of words in a list and generating random words. It tests the understanding of list comprehension, random module, and the all() function in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return sum(nums) > 100\n\ndef g():\n    import random\n    while True:\n        nums = [random.randint(1, 50) for _ in range(5)]\n        if sum(nums) > 100:\n            return nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves random number generation, list manipulation, and conditional logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return sum(nums) > 100",
        "solution_func": "def g():\n    import random\n    while True:\n        nums = [random.randint(1, 50) for _ in range(5)]\n        if sum(nums) > 100:\n            return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 5 random integers between 1 and 50, checking if the sum of the list is greater than 100, and returning the list if the condition is met."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random numbers and checking a condition based on the sum of the numbers. The solution function returns a list of numbers that satisfy the condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name') -> bool:\n    return key in d\n\ndef g():\n    return {'name': 'Alice', 'age': 25}, 'name'\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict, key='name') -> bool:\n    return key in d",
        "solution_func": "def g():\n    return {'name': 'Alice', 'age': 25}, 'name'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a specified key exists in a dictionary. The function g returns a dictionary and a key, and the puzzle tests if the key exists in the dictionary."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for the existence of a key in a dictionary using a given function f and verifying the solution using function g.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, word=\"racecar\") -> bool:\n    return s == s[::-1]\ndef g(word=\"racecar\"):\n    return word[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(x: List[int], lst=[1, 2, 3, 4, 5]) -> bool:\n    return x == sorted(x)\ndef g(lst=[1, 2, 3, 4, 5]):\n    return sorted(lst)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, word=\"racecar\") -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(word=\"racecar\"):\n    return word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome, and a function g that returns the reverse of a specified word. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically checking for palindromes and reversing strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, number=7) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(number=7):\n    number += 1\n    while True:\n        if all(number % i != 0 for i in range(2, int(number**0.5) + 1)):\n            return number\n        number += 1\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Number Theory (primality testing) and Mathematical Operations (finding prime numbers).",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(x: List[int], lst=[1, 2, 3, 4, 5]) -> bool:\n    return x == sorted(x)\ndef g(lst=[1, 2, 3, 4, 5]):\n    return sorted(lst)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int, number=7) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(number=7):\n    number += 1\n    while True:\n        if all(number % i != 0 for i in range(2, int(number**0.5) + 1)):\n            return number\n        number += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num: int, number=7) -> bool and g(number=7), where f checks if a number is prime and g finds the next prime number after a given number. The assert statement at the end checks if the solution function g returns the correct next prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of prime numbers, loops, and conditionals in Python. It challenges students to understand and implement a prime number checking algorithm and a function to find the next prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(year: int, current_year=2023) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False\ndef g(current_year=2023):\n    while True:\n        current_year += 1\n        if (current_year % 4 == 0 and current_year % 100 != 0) or (current_year % 400 == 0):\n            return current_year\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Conditional Logic, Mathematical Operations",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(x: List[int], lst=[1, 2, 3, 4, 5]) -> bool:\n    return x == sorted(x)\ndef g(lst=[1, 2, 3, 4, 5]):\n    return sorted(lst)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(year: int, current_year=2023) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False",
        "solution_func": "def g(current_year=2023):\n    while True:\n        current_year += 1\n        if (current_year % 4 == 0 and current_year % 100 != 0) or (current_year % 400 == 0):\n            return current_year",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(year) that checks if a given year is a leap year, and a function g() that finds the next leap year after a given current year. The puzzle tests the correctness of the leap year logic implemented in the functions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about leap years and involves understanding leap year conditions and implementing logic to find the next leap year. It is a good exercise to test understanding of conditional statements and loops in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: list) -> bool:\n    return sum(x) % 2 == 0\ndef g():\n    return [2, 4, 6, 8]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True"
        ],
        "problem_func": "def f(x: list) -> bool:\n    return sum(x) % 2 == 0",
        "solution_func": "def g():\n    return [2, 4, 6, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of elements in a list is even, and a function g that returns a specific list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as list manipulation, function definition, and assertion testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int, nums=[10, 15, 20, 25, 30, 35], threshold=50) -> bool:\n    return total > threshold\n\ndef g(nums=[10, 15, 20, 25, 30, 35], threshold=50):\n    return sum(num for num in nums if num % 2 == 0)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(total: int, nums=[10, 15, 20, 25, 30, 35], threshold=50) -> bool:\n    return total > threshold",
        "solution_func": "def g(nums=[10, 15, 20, 25, 30, 35], threshold=50):\n    return sum(num for num in nums if num % 2 == 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given total is greater than a threshold, and a function g that calculates the sum of even numbers in a list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves understanding function definitions, conditional statements, list comprehension, and function invocation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(count: int, text=\"python programming puzzles\", char='p', min_count=2, max_count=5) -> bool:\n    return min_count <= count <= max_count\n\ndef g(text=\"python programming puzzles\", char='p', min_count=2, max_count=5):\n    return text.count(char)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 32,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(count: int, text=\"python programming puzzles\", char='p', min_count=2, max_count=5) -> bool:\n    return min_count <= count <= max_count",
        "solution_func": "def g(text=\"python programming puzzles\", char='p', min_count=2, max_count=5):\n    return text.count(char)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the count of a specific character in a given text falls within a specified range, and a function g that counts the occurrences of the character in the text. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function definitions, parameter passing, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list) -> bool:\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1) if arr[i] % 2 == 0)\ndef g():\n    arr = [5, 3, 8, 2, 10, 4, 7]\n    arr.sort()\n    return arr\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if all even numbers are in non-decreasing order.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list) -> bool:\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1) if arr[i] % 2 == 0)",
        "solution_func": "def g():\n    arr = [5, 3, 8, 2, 10, 4, 7]\n    arr.sort()\n    return arr",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires implementing a function f(arr) that checks if all even numbers in the input list are in non-decreasing order. The solution function g() creates a list, sorts it, and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the order of even numbers in a list and sorting the list in the solution function. It can be a good exercise for students to practice list manipulation and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom math import isqrt\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, isqrt(n) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(sum(numbers)) == (target_sum in numbers)\n\ndef g(target_sum=100):\n    from random import randint\n\n    numbers = [randint(1, 50) for _ in range(10)]\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, importing modules (math, random), and algorithm optimization (prime number check).",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\nfrom math import isqrt\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, isqrt(n) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(sum(numbers)) == (target_sum in numbers)",
        "solution_func": "def g(target_sum=100):\n    from random import randint\n\n    numbers = [randint(1, 50) for _ in range(10)]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of random numbers, calculate the sum of the numbers, check if the sum is a prime number, and compare it to a target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random numbers, calculating the sum, checking for primality, and comparing it to a target sum. It tests the student's understanding of list generation, sum calculation, prime number checking, and boolean comparison.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s.islower()\n\ndef g() -> str:\n    return \"hello\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(x: list) -> bool:\n    return sum(x) % 2 == 0\ndef g():\n    return [2, 4, 6, 8]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s.islower()",
        "solution_func": "def g() -> str:\n    return \"hello\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is in lowercase, and a function g that returns the string 'hello'. The puzzle tests whether the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string methods in Python and function composition. It is a simple puzzle suitable for teaching basic string manipulation and function evaluation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number theory is used in the puzzle to check if a number is prime or not.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(x: list) -> bool:\n    return sum(x) % 2 == 0\ndef g():\n    return [2, 4, 6, 8]\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g() that returns an integer, and the function f(num) checks if the input number is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a prime number using a provided function f(num) and defining a function g() that returns a specific integer. The student needs to ensure that the function g() returns the correct integer to satisfy the condition f(g()) == True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return 'apple' in d\n\ndef g() -> dict:\n    return {'apple': 5, 'banana': 3, 'cherry': 2}\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and checking for a specific key in the dictionary.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(x: list) -> bool:\n    return sum(x) % 2 == 0\ndef g():\n    return [2, 4, 6, 8]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return 'apple' in d",
        "solution_func": "def g() -> dict:\n    return {'apple': 5, 'banana': 3, 'cherry': 2}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if the key 'apple' exists in a dictionary returned by a function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks if a specific key exists in a dictionary and then calling this function with a dictionary containing the key 'apple'. The assertion checks if the function returns True when the key 'apple' is present in the dictionary.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(avg: float, nums=[10, 20, 30, 40, 50], lower=20, upper=40) -> bool:\n    return lower <= avg <= upper\n\ndef g(nums=[10, 20, 30, 40, 50], lower=20, upper=40):\n    return sum(nums) / len(nums)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(avg: float, nums=[10, 20, 30, 40, 50], lower=20, upper=40) -> bool:\n    return lower <= avg <= upper",
        "solution_func": "def g(nums=[10, 20, 30, 40, 50], lower=20, upper=40):\n    return sum(nums) / len(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the average of a list of numbers falls within a specified range, and a function g that calculates the average of a given list of numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about understanding how to define functions in Python, pass arguments to functions, calculate averages, and use comparison operators to check conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], divisor=5, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    return sum(numbers) % divisor == 0\n\ndef g(divisor=5, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if sum(c) % divisor == 0:\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, Importing Modules (Itertools), and Permutations and Combinations.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], threshold=15, options=[10, 12, 14, 16, 18, 20]) -> bool:\n    return max(numbers) > threshold\n\ndef g(threshold=15, options=[10, 12, 14, 16, 18, 20]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if max(c) > threshold:\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], divisor=5, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    return sum(numbers) % divisor == 0",
        "solution_func": "def g(divisor=5, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if sum(c) % divisor == 0:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where the first function checks if the sum of a list of numbers is divisible by a given divisor, and the second function finds a combination of numbers from a given set that satisfies the divisibility condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list manipulation, iteration, and itertools combinations in Python to solve a divisibility challenge.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], threshold=5, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    return min(numbers) < threshold\n\ndef g(threshold=5, options=[1, 2, 3, 4, 5, 6]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if min(p) < threshold:\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as list manipulation, itertools module, and assertion testing.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], threshold=15, options=[10, 12, 14, 16, 18, 20]) -> bool:\n    return max(numbers) > threshold\n\ndef g(threshold=15, options=[10, 12, 14, 16, 18, 20]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if max(c) > threshold:\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], threshold=5, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    return min(numbers) < threshold",
        "solution_func": "def g(threshold=5, options=[1, 2, 3, 4, 5, 6]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if min(p) < threshold:\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python. The first function f takes a list of integers, a threshold value, and a list of options as input and returns True if the minimum value in the list is less than the threshold. The second function g generates permutations of the options list and returns a list of values that satisfy the condition of f. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use functions, lists, and permutations in Python. It also requires knowledge of function composition and comparison. This puzzle can be used to teach Python programming concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    return sum(numbers) == target\n\ndef g(target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if sum(p) == target:\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and permutations and combinations.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], threshold=15, options=[10, 12, 14, 16, 18, 20]) -> bool:\n    return max(numbers) > threshold\n\ndef g(threshold=15, options=[10, 12, 14, 16, 18, 20]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if max(c) > threshold:\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    return sum(numbers) == target",
        "solution_func": "def g(target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if sum(p) == target:\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of numbers from a given list that adds up to a target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function that checks if a given list of numbers can add up to a target sum using permutations of numbers from a specified set of options. The solution function generates permutations of the options and returns the combination that sums up to the target.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"level\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'level'. The assertion checks if the function f(g()) returns True for the string 'level', which is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in lst)\n\ndef g():\n    return [2, 3, 5, 7, 11]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are prime numbers using a function and then asserting the result with a predefined list of prime numbers.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in lst)",
        "solution_func": "def g():\n    return [2, 3, 5, 7, 11]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all numbers in a list are prime, and a function g() that returns a list of prime numbers. The puzzle is solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of numbers are prime and returning a list of prime numbers. It requires understanding of list comprehension, functions, and prime number checking algorithm.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and sorting, which falls under the topics of Sorting and Ordering (14) and Dictionary Operations.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())",
        "solution_func": "def g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if the keys of a dictionary are in sorted order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(d: dict) that returns True if the keys of the input dictionary are in sorted order. The solution function g() returns a dictionary with keys in ascending order, which satisfies the condition of f(g()) == True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(words: List[str], options=['apple', 'banana', 'cherry'], n=6, max_len=7) -> bool:\n    word_count = len(words)\n    return word_count == n and all(word in options for word in words) and all(len(word) <= max_len for word in words)\ndef g(options=['apple', 'banana', 'cherry'], n=6, max_len=7):\n    return [options[i % len(options)] for i in range(n)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic to generate a list of words based on given options and constraints. The solution uses list comprehension and assertion to validate the generated list of words.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(words: List[str], options=['apple', 'banana', 'cherry'], n=6, max_len=7) -> bool:\n    word_count = len(words)\n    return word_count == n and all(word in options for word in words) and all(len(word) <= max_len for word in words)",
        "solution_func": "def g(options=['apple', 'banana', 'cherry'], n=6, max_len=7):\n    return [options[i % len(options)] for i in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that generates a list of words based on given options, and then checks if the generated list meets certain criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, function parameters, and list manipulation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(bool_values: List[bool], options=[True, False], n=10, count_true=4) -> bool:\n    true_count = sum(bool_values)\n    return len(bool_values) == n and all(val in options for val in bool_values) and true_count == count_true\ndef g(options=[True, False], n=10, count_true=4):\n    return [True if i < count_true else False for i in range(n)]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic, list manipulation, and function definition.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(bool_values: List[bool], options=[True, False], n=10, count_true=4) -> bool:\n    true_count = sum(bool_values)\n    return len(bool_values) == n and all(val in options for val in bool_values) and true_count == count_true",
        "solution_func": "def g(options=[True, False], n=10, count_true=4):\n    return [True if i < count_true else False for i in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that generates a list of boolean values based on given parameters, and another function that checks if the generated list meets certain conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, boolean operations, and function parameters in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple \ndef f(data: List[Tuple[int, str]], options=[(1, 'one'), (2, 'two'), (3, 'three')], n=6, max_val=3) -> bool:\n    valid_data = all(item in options for item in data)\n    sum_vals = sum(val for val, _ in data)\n    return len(data) == n and valid_data and sum_vals <= max_val*n\ndef g(options=[(1, 'one'), (2, 'two'), (3, 'three')], n=6, max_val=3):\n    return [(i % len(options) + 1, options[i % len(options)][1]) for i in range(n)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and validation based on certain conditions. It also requires generating a list based on given options. The solution generates a list based on the options provided and checks if it satisfies the conditions specified in the puzzle.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple \ndef f(data: List[Tuple[int, str]], options=[(1, 'one'), (2, 'two'), (3, 'three')], n=6, max_val=3) -> bool:\n    valid_data = all(item in options for item in data)\n    sum_vals = sum(val for val, _ in data)\n    return len(data) == n and valid_data and sum_vals <= max_val*n",
        "solution_func": "def g(options=[(1, 'one'), (2, 'two'), (3, 'three')], n=6, max_val=3):\n    return [(i % len(options) + 1, options[i % len(options)][1]) for i in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of tuples and checks if the list meets certain conditions based on predefined options, total number of elements, and maximum value. The solution function g generates a list of tuples based on the given options, number of elements, and maximum value, and ensures that function f returns True when applied to the output of g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle provides a challenge related to list manipulation, conditions checking, and function validation in Python. The solution function g generates the required list of tuples to satisfy the conditions of function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, target_sum=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(size=9):\n    return list(range(1, size+1))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Brute Force Search, and Conditional Logic.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pattern='abracadabra') -> bool:\n    return any(s[i:i+len(pattern)] == pattern for i in range(len(s) - len(pattern) + 1))\ndef g(pattern='abracadabra'):\n    return 'abracadabraabracadabra'\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list, target_sum=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(size=9):\n    return list(range(1, size+1))",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the function f checks if there are two numbers in the list that add up to a target sum. The function g generates a list of numbers from 1 to a specified size. The assertion checks if function f returns True when applied to the list generated by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for a specific condition in a list of numbers and generating a list of numbers using a function. It tests the student's understanding of list manipulation and algorithmic thinking.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(grades: dict) -> bool:\n    avg_grade = sum(grades.values()) / len(grades)\n    return avg_grade > 80\n\ndef g():\n    return {'Alice': 90, 'Bob': 85, 'Charlie': 95}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to calculate the average grade and check if it is greater than 80.",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pattern='abracadabra') -> bool:\n    return any(s[i:i+len(pattern)] == pattern for i in range(len(s) - len(pattern) + 1))\ndef g(pattern='abracadabra'):\n    return 'abracadabraabracadabra'\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(grades: dict) -> bool:\n    avg_grade = sum(grades.values()) / len(grades)\n    return avg_grade > 80",
        "solution_func": "def g():\n    return {'Alice': 90, 'Bob': 85, 'Charlie': 95}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that calculates the average grade from a dictionary of grades and checks if it is greater than 80. The solution function g returns a dictionary of grades for students, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves calculating the average grade from a dictionary and checking a condition. It is a simple and straightforward puzzle that can be used to teach Python programming concepts such as dictionaries, functions, and conditionals.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(words: list) -> bool:\n    return any(word == word[::-1] for word in words)\n\ndef g():\n    return ['python', 'radar', 'programming']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pattern='abracadabra') -> bool:\n    return any(s[i:i+len(pattern)] == pattern for i in range(len(s) - len(pattern) + 1))\ndef g(pattern='abracadabra'):\n    return 'abracadabraabracadabra'\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(words: list) -> bool:\n    return any(word == word[::-1] for word in words)",
        "solution_func": "def g():\n    return ['python', 'radar', 'programming']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if any word in a given list is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if any word in a list is a palindrome. The solution function g returns a list of words, and the puzzle asserts that at least one word in the list is a palindrome.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nimport math\n\ndef f(nums: List[int]) -> bool:\n    return all([math.factorial(num) % 10 == 0 for num in nums])\n\ndef g():\n    return [5, 10, 15, 20]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations (index 1) and importing modules (index 12).",
        "idx_generation": 33,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nimport math\n\ndef f(nums: List[int]) -> bool:\n    return any([math.isqrt(num) ** 2 == num for num in nums])\n\ndef g():\n    return [4, 9, 16, 25, 36, 49, 64]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nimport math\n\ndef f(nums: List[int]) -> bool:\n    return all([math.factorial(num) % 10 == 0 for num in nums])",
        "solution_func": "def g():\n    return [5, 10, 15, 20]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding if the factorial of each number in a given list results in a number ending with 0."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the factorial of each number in a list ends with 0. The solution function returns a list of numbers that satisfy this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int) -> bool:\n    return total % 2 == 0\n\ndef g():\n    numbers = [2, 4, 6, 8]\n    return sum(numbers)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\nimport sympy\n\ndef f(lst: list) -> bool:\n    return all(sympy.isprime(num) for num in lst) and len(lst) == len(set(lst))\n\ndef g():\n    n = [2, 3, 5, 7]\n    while True:\n        if all(sympy.isprime(num) for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(total: int) -> bool:\n    return total % 2 == 0",
        "solution_func": "def g():\n    numbers = [2, 4, 6, 8]\n    return sum(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given total is even, and a function g that returns the sum of a list of even numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves basic concepts like functions, conditionals, and arithmetic operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_product: int) -> bool:\n    return max_product == 20\n\ndef g():\n    numbers = [4, 5]\n    return max(numbers) * min(numbers)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\nimport sympy\n\ndef f(lst: list) -> bool:\n    return all(sympy.isprime(num) for num in lst) and len(lst) == len(set(lst))\n\ndef g():\n    n = [2, 3, 5, 7]\n    while True:\n        if all(sympy.isprime(num) for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(max_product: int) -> bool:\n    return max_product == 20",
        "solution_func": "def g():\n    numbers = [4, 5]\n    return max(numbers) * min(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the maximum product of two numbers from a given list and checking if it equals 20."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to find the maximum product of two numbers from a list and comparing it to a specific value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str, pattern='ABAB') -> bool:\n    return string == pattern\n\ndef g(pattern='ABAB'):\n    \"\"\"\n    This solution creates a string based on the specified pattern.\n    \"\"\"\n    return pattern\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str, pattern='ABAB') -> bool:\n    return string == pattern",
        "solution_func": "def g(pattern='ABAB'):\n    \"\"\"\n    This solution creates a string based on the specified pattern.\n    \"\"\"\n    return pattern",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the solution function to return a specific pattern string, and the puzzle function checks if the input string matches the specified pattern."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle is not suitable for teaching Python as it does not involve any algorithmic challenge or problem-solving skills.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], step=2) -> bool:\n    return all((numbers[i] - numbers[i-1] == step for i in range(1, len(numbers))))\n\ndef g(step=2):\n    \"\"\"\n    This solution generates a list of numbers increasing by the specified step.\n    \"\"\"\n    return [i * step for i in range(1, 5)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to generate a list of numbers increasing by a specified step.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], step=2) -> bool:\n    return all((numbers[i] - numbers[i-1] == step for i in range(1, len(numbers))))",
        "solution_func": "def g(step=2):\n    \"\"\"\n    This solution generates a list of numbers increasing by the specified step.\n    \"\"\"\n    return [i * step for i in range(1, 5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers generated by a function follows a specific arithmetic progression with a given step value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension, arithmetic progression, and function evaluation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return string == string[::-1]\n\ndef g():\n    return \"racecar\"[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nimport sympy\ndef g():\n    return sympy.nextprime(7)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g():\n    return \"racecar\"[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks if a string is a palindrome and then providing a solution that returns a palindrome string to test the function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if any(num <= 1 or all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)) for num in numbers):\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers in a list of integers using a brute force approach. It also includes random number generation and conditional logic. The solution generates a list of random numbers and checks if any of them are prime using the `is_prime` function. It returns the list of numbers that contain at least one prime number.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 == 0 for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 2 == 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in numbers)",
        "solution_func": "def g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if any(num <= 1 or all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)) for num in numbers):\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if any of the randomly generated numbers in a list are prime numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of prime numbers and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(letters: List[str]) -> bool:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return any(letter in vowels for letter in letters)\n\ndef g():\n    import random\n    while True:\n        letters = [chr(random.randint(65, 90)) for _ in range(5)]\n        if any(letter in {'A', 'E', 'I', 'O', 'U'} for letter in letters):\n            return letters\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Set Operations, Importing Modules",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 == 0 for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 2 == 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(letters: List[str]) -> bool:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return any(letter in vowels for letter in letters)",
        "solution_func": "def g():\n    import random\n    while True:\n        letters = [chr(random.randint(65, 90)) for _ in range(5)]\n        if any(letter in {'A', 'E', 'I', 'O', 'U'} for letter in letters):\n            return letters",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 5 random uppercase letters and checking if any of them are vowels (A, E, I, O, U). The solution function generates the list of letters and returns it if it contains at least one vowel."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random uppercase letters and checking for vowels, which can be a fun and engaging challenge for students. It also reinforces the concepts of list comprehension and set membership in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return sum(numbers) > 0\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(-50, 50) for _ in range(5)]\n        if sum(numbers) > 0:\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and importing modules (random).",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 == 0 for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 2 == 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return sum(numbers) > 0",
        "solution_func": "def g():\n    import random\n    while True:\n        numbers = [random.randint(-50, 50) for _ in range(5)]\n        if sum(numbers) > 0:\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of 5 random integers between -50 and 50, and check if the sum of these numbers is greater than 0."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random numbers and checking if their sum is greater than 0. The solution function g() generates the list of numbers and returns it if the sum is greater than 0. The puzzle function f() checks if the sum of the input list is greater than 0.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting, conditional logic, and list manipulation.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
        "solution_func": "def g(t=1000000, n=500):\n    return [2] * n + [t]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and two optional parameters t and n. The function checks if the sum of the sorted list elements exceeds a threshold t at a specific index n. The solution function g generates a list of integers to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and conditional checks in Python. The solution function g generates a list that will pass the condition in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_product: int) -> bool:\n    return max_product > 50\n\ndef g(numbers=[5, 10, 3, 8, 7]):\n    sorted_nums = sorted(numbers, reverse=True)\n    max_product = sorted_nums[0] * sorted_nums[1]\n    return max_product\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Mathematical Operations, Sorting and Ordering",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(max_product: int) -> bool:\n    return max_product > 50",
        "solution_func": "def g(numbers=[5, 10, 3, 8, 7]):\n    sorted_nums = sorted(numbers, reverse=True)\n    max_product = sorted_nums[0] * sorted_nums[1]\n    return max_product",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the maximum product of the two largest numbers in a list is greater than 50, and g calculates the maximum product of the two largest numbers in a given list. The assertion checks if the function f returns True when applied to the result of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge related to finding the maximum product of two numbers in a list and comparing it to a threshold value. It can be used to teach basic Python programming concepts like list manipulation, sorting, and function composition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], threshold=5) -> bool:\n    for string in strings:\n        if len(string) > threshold:\n            return True\n    return False\n\ndef g(threshold=5) -> List[str]:\n    return [\"apple\", \"banana\", \"grapes\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10) -> List[int]:\n    return [2, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], threshold=5) -> bool:\n    for string in strings:\n        if len(string) > threshold:\n            return True\n    return False",
        "solution_func": "def g(threshold=5) -> List[str]:\n    return [\"apple\", \"banana\", \"grapes\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions in Python. The first function f takes a list of strings and a threshold value as input, and returns True if any string in the list has a length greater than the threshold. The second function g returns a list of strings. The puzzle is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions in Python, work with lists, and apply a condition to check string lengths. It also requires understanding function composition and assertion testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(bool_list: List[bool]) -> bool:\n    return all(bool_list)\n\ndef g() -> List[bool]:\n    return [True, True, True]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and boolean operations.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10) -> List[int]:\n    return [2, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(bool_list: List[bool]) -> bool:\n    return all(bool_list)",
        "solution_func": "def g() -> List[bool]:\n    return [True, True, True]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of booleans and returns True if all elements in the list are True. The solution function g returns a list of three True values, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in using the all() function in Python to check if all elements in a list are True. The solution function g always returns a list of three True values, satisfying the condition for f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    for tup in tuples:\n        if tup[1] > tup[0]:\n            return True\n    return False\n\ndef g() -> List[Tuple[int, int]]:\n    return [(1, 2), (3, 3), (4, 5)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10) -> List[int]:\n    return [2, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    for tup in tuples:\n        if tup[1] > tup[0]:\n            return True\n    return False",
        "solution_func": "def g() -> List[Tuple[int, int]]:\n    return [(1, 2), (3, 3), (4, 5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples as input and returns True if there exists a tuple where the second element is greater than the first element. The solution function g returns a specific list of tuples to test the function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves iterating over a list of tuples and checking a condition for each tuple. The solution function provides a test case to verify the correctness of the function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g():\n    import random\n    vowels = 'aeiou'\n    word = ''.join(random.choice(vowels) for _ in range(5))\n    return word + word[-2::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 34,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 == 0 for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 2 == 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    import random\n    vowels = 'aeiou'\n    word = ''.join(random.choice(vowels) for _ in range(5))\n    return word + word[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated 5-letter word is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that checks if a given word is a palindrome. The function g() generates a random 5-letter word using vowels and their reverse. The assert statement checks if the generated word is a palindrome using the function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string, ignore_case=True) -> bool:\n    s = string.lower() if ignore_case else string\n    return s == s[::-1]\n\ndef g(length=10, char='a', ignore_case=True):\n    string = char * length\n    return string\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(pairs, target_pair=('x', 3)) -> bool:\n    return target_pair in pairs\n\ndef g(size=5, element='x', value=3, target_pair=('x', 3)):\n    return [(element, value)] * size\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string, ignore_case=True) -> bool:\n    s = string.lower() if ignore_case else string\n    return s == s[::-1]",
        "solution_func": "def g(length=10, char='a', ignore_case=True):\n    string = char * length\n    return string",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that generates a string of a specified length with a specified character. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, function definition, and function invocation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g(size=5, start=1, step=2):\n    return list(range(start, start + size * step, step))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list contains unique elements and generating a list with a specific pattern using range function.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(pairs, target_pair=('x', 3)) -> bool:\n    return target_pair in pairs\n\ndef g(size=5, element='x', value=3, target_pair=('x', 3)):\n    return [(element, value)] * size\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g(size=5, start=1, step=2):\n    return list(range(start, start + size * step, step))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list contains unique elements, and a function g(size, start, step) that generates a list of numbers based on the input parameters. The puzzle tests whether the generated list by g() satisfies the uniqueness condition in f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, uniqueness check, and function parameter usage in Python. It provides a practical exercise in writing functions and testing them with assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(number=17):\n    return number\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm. It does not directly relate to any specific topic from the list provided.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(pairs, target_pair=('x', 3)) -> bool:\n    return target_pair in pairs\n\ndef g(size=5, element='x', value=3, target_pair=('x', 3)):\n    return [(element, value)] * size\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(number=17):\n    return number",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g(number) that returns a specific number (default is 17). The assertion checks if the number returned by g is a prime number according to the function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], target_letter='a', min_length=3) -> bool:\n    return any(target_letter in word for word in words) and all(len(word) >= min_length for word in words)\n\ndef g(target_letter='a', min_length=3):\n    word_list = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    return [word for word in word_list if target_letter in word and len(word) >= min_length]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], target_letter='a', min_length=3) -> bool:\n    return any(target_letter in word for word in words) and all(len(word) >= min_length for word in words)",
        "solution_func": "def g(target_letter='a', min_length=3):\n    word_list = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    return [word for word in word_list if target_letter in word and len(word) >= min_length]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of words, a target letter, and a minimum length as parameters. The function checks if the target letter is present in any word in the list and if all words in the list have a length greater than or equal to the minimum length. The solution function g generates a list of words that meet the criteria specified in f, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, boolean expressions, and function parameter defaults in Python. It also tests the ability to write functions that manipulate lists based on certain conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], pattern='AB') -> bool:\n    return all((pattern[i % len(pattern)] == 'A' and strings[i].isupper()) or (pattern[i % len(pattern)] == 'B' and strings[i].islower()) for i in range(len(strings)))\n\ndef g(pattern='AB'):\n    return ['HELLO', 'world', 'PYTHON', 'programming'] * 2\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, List Operations",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], pattern='AB') -> bool:\n    return all((pattern[i % len(pattern)] == 'A' and strings[i].isupper()) or (pattern[i % len(pattern)] == 'B' and strings[i].islower()) for i in range(len(strings)))",
        "solution_func": "def g(pattern='AB'):\n    return ['HELLO', 'world', 'PYTHON', 'programming'] * 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and a pattern as input, and checks if the strings in the list follow a specific pattern based on the pattern provided. The solution function g generates a list of strings and repeats it twice. The puzzle tests whether the function f correctly evaluates the generated list of strings with the given pattern."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, string manipulation, and pattern matching in Python. It also tests the ability to define functions with default arguments and use of the assert statement for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], common_difference=2) -> bool:\n    return all(numbers[i] - numbers[i-1] == common_difference for i in range(1, len(numbers)))\n\ndef g(common_difference=2):\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if a list of numbers follows a specific pattern.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], common_difference=2) -> bool:\n    return all(numbers[i] - numbers[i-1] == common_difference for i in range(1, len(numbers)))",
        "solution_func": "def g(common_difference=2):\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers has a common difference between consecutive elements, with a default common difference of 2. The solution function returns a list of numbers with a common difference of 2."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if a list of numbers has a specific common difference between consecutive elements. The solution function generates a list with the specified common difference.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(start_idx: int, s='pythonisfun', target='fun') -> bool:\n    return s[start_idx:start_idx + len(target)] == target\n\ndef g(s='pythonisfun', target='fun'):\n    for start_idx, _ in enumerate(s):\n        if s[start_idx:start_idx + len(target)] == target:\n            return start_idx\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Itertools",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(start_idx: int, s='pythonisfun', target='fun') -> bool:\n    return s[start_idx:start_idx + len(target)] == target",
        "solution_func": "def g(s='pythonisfun', target='fun'):\n    for start_idx, _ in enumerate(s):\n        if s[start_idx:start_idx + len(target)] == target:\n            return start_idx",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the starting index of a target substring in a given string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a target substring exists at a specific index in a given string, and then implementing a function to find the starting index of the target substring using a loop and string slicing. The assertion at the end checks if the solution function correctly finds the starting index of the target substring.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)\n\ndef g(size=7):\n    import string\n    import random\n    return ''.join(random.sample(string.ascii_lowercase, size))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g(size=7):\n    import string\n    import random\n    return ''.join(random.sample(string.ascii_lowercase, size))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random string of a specified size and checking if all characters in the string are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the set data structure to check for uniqueness of characters in a string and generating a random string using the random module in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s='racecar'):\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    return sum(numbers) == target\n\ndef g(target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if sum(p) == target:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='racecar'):\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g(s) that returns the input string 'racecar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(num=17):\n    return num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is a prime number using a simple algorithm. It also includes a default parameter in the solution function.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    return sum(numbers) == target\n\ndef g(target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if sum(p) == target:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(num=17):\n    return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num) and g(num=17), where f checks if a given number is a prime number and g returns a fixed number. The puzzle requires g to return a number such that f returns True when applied to that number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, num=5) -> bool:\n    factorial = 1\n    for i in range(1, num+1):\n        factorial *= i\n    return result == factorial\n\ndef g(num=5):\n    return num * g(num-1) if num > 1 else 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Mathematical Operations, Recursion, and Conditional Logic.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    return sum(numbers) == target\n\ndef g(target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if sum(p) == target:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(result: int, num=5) -> bool:\n    factorial = 1\n    for i in range(1, num+1):\n        factorial *= i\n    return result == factorial",
        "solution_func": "def g(num=5):\n    return num * g(num-1) if num > 1 else 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the result is equal to the factorial of a given number, and a function g that calculates the factorial of a given number recursively. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of factorial calculation and recursive functions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(even_nums: list, threshold=100) -> bool:\n    product = 1\n    for num in even_nums:\n        product *= num\n    return product > threshold\n\ndef g(threshold=100):\n    even_nums = []\n    num = 2\n    best_product = 1\n    while num <= threshold:\n        if num % 2 == 0:\n            even_nums.append(num)\n        best_product = max(best_product, num)\n        num += 2\n\n    return even_nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and list manipulation.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(primes: list, total=10) -> bool:\n    return sum(primes) > total\n\ndef g(total=10):\n    primes = []\n    num = 2\n    best_sum = 0\n    while sum(primes) <= total:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        best_sum = max(best_sum, sum(primes))\n        num += 1\n\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(even_nums: list, threshold=100) -> bool:\n    product = 1\n    for num in even_nums:\n        product *= num\n    return product > threshold",
        "solution_func": "def g(threshold=100):\n    even_nums = []\n    num = 2\n    best_product = 1\n    while num <= threshold:\n        if num % 2 == 0:\n            even_nums.append(num)\n        best_product = max(best_product, num)\n        num += 2\n\n    return even_nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of even numbers up to a given threshold, calculating the product of these numbers, and checking if the product is greater than the threshold."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding loops, conditionals, lists, and function calls in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(strings: tuple, length=10) -> bool:\n    return len(''.join(strings)) > length\n\ndef g(length=10):\n    str1 = \"hello\"\n    str2 = \"world\"\n    while len(str1 + str2) <= length:\n        str1 += \"!\"\n        str2 += \"!\"\n    \n    return (str1, str2)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(primes: list, total=10) -> bool:\n    return sum(primes) > total\n\ndef g(total=10):\n    primes = []\n    num = 2\n    best_sum = 0\n    while sum(primes) <= total:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        best_sum = max(best_sum, sum(primes))\n        num += 1\n\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(strings: tuple, length=10) -> bool:\n    return len(''.join(strings)) > length",
        "solution_func": "def g(length=10):\n    str1 = \"hello\"\n    str2 = \"world\"\n    while len(str1 + str2) <= length:\n        str1 += \"!\"\n        str2 += \"!\"\n    \n    return (str1, str2)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the combined length of a tuple of strings is greater than a specified length. The solution function g generates two strings and concatenates them with exclamation marks until their combined length is greater than the specified length, then returns the tuple of strings."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, concatenation, and comparison of string lengths in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return string == string[::-1]\n\ndef g() -> str:\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(num < 0 for num in lst)\n\ndef g() -> list:\n    return [num for num in range(-10, 0)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g() -> str:\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given string is a palindrome by comparing it with its reverse. The solution function g returns the string 'racecar', which is a palindrome. The assert statement confirms that the solution function g returns a palindrome string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return len(nums) != len(set(nums))\n\ndef g() -> list:\n    return [1, 2, 3, 4, 5, 5, 6]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for duplicate elements in a list.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(num < 0 for num in lst)\n\ndef g() -> list:\n    return [num for num in range(-10, 0)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return len(nums) != len(set(nums))",
        "solution_func": "def g() -> list:\n    return [1, 2, 3, 4, 5, 5, 6]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list contains duplicate elements, and a function g that returns a list with duplicate elements. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about identifying duplicate elements in a list using set operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(4):\n        assert n % 4 == 3\n        n -= 3 + (n - 3) // 4\n    return n > 0 and n % 4 == 3\n\ndef g():\n    m = 3\n    while True:\n        n = m\n        for i in range(4):\n            if n % 4 != 3:\n                break\n            n -= 3 + (n - 3) // 4\n        if n > 0 and n % 4 == 3:\n            return m\n        m += 4\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic, loops, and mathematical operations.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(4):\n        assert n % 4 == 3\n        n -= 3 + (n - 3) // 4\n    return n > 0 and n % 4 == 3",
        "solution_func": "def g():\n    m = 3\n    while True:\n        n = m\n        for i in range(4):\n            if n % 4 != 3:\n                break\n            n -= 3 + (n - 3) // 4\n        if n > 0 and n % 4 == 3:\n            return m\n        m += 4",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) and g(), where f(n) checks a specific condition on an input integer n and g() iterates over integers to find a value that satisfies the condition checked by f(n)."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop that checks a condition on an integer and a function that iterates over integers to find a value that satisfies the condition. The solution function g() iterates over integers starting from 3 and increments by 4 until it finds a value that satisfies the condition checked by f(n).",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(2):\n        assert n % 2 == 1\n        n -= 1 + (n - 1) // 2\n    return n > 0 and n % 2 == 1\n\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(2):\n            if n % 2 != 1:\n                break\n            n -= 1 + (n - 1) // 2\n        if n > 0 and n % 2 == 1:\n            return m\n        m += 2\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion, Conditional Logic, Brute Force Search",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(2):\n        assert n % 2 == 1\n        n -= 1 + (n - 1) // 2\n    return n > 0 and n % 2 == 1",
        "solution_func": "def g():\n    m = 1\n    while True:\n        n = m\n        for i in range(2):\n            if n % 2 != 1:\n                break\n            n -= 1 + (n - 1) // 2\n        if n > 0 and n % 2 == 1:\n            return m\n        m += 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) and g(), where f(n) checks if a given number meets a specific condition and g() iterates through numbers to find one that satisfies the condition. The puzzle requires understanding of loops, conditions, and arithmetic operations in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge that tests the understanding of loops, conditions, and arithmetic operations in Python. It provides a good exercise for students to practice these concepts in Python programming.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 4\n        n -= 4 + (n - 4) // 5\n    return n > 0 and n % 5 == 4\n\ndef g():\n    m = 4\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 4:\n                break\n            n -= 4 + (n - 4) // 5\n        if n > 0 and n % 5 == 4:\n            return m\n        m += 5\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as Backtracking, Conditional Logic, and Mathematical Operations.",
        "idx_generation": 35,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 4\n        n -= 4 + (n - 4) // 5\n    return n > 0 and n % 5 == 4",
        "solution_func": "def g():\n    m = 4\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 4:\n                break\n            n -= 4 + (n - 4) // 5\n        if n > 0 and n % 5 == 4:\n            return m\n        m += 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(n) and g(), where f checks a specific condition on an input integer n using a loop, and g generates integers until it finds one that satisfies the condition checked by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop and condition checking to find an integer that satisfies a specific property. It requires understanding of loops, arithmetic operations, and conditionals in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return sum(nums) % len(nums) == 0\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the sum of the numbers in the list is divisible by the length of the list.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nimport math\n\ndef f(nums: List[int]) -> bool:\n    return any([math.isqrt(num) ** 2 == num for num in nums])\n\ndef g():\n    return [4, 9, 16, 25, 36, 49, 64]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return sum(nums) % len(nums) == 0",
        "solution_func": "def g():\n    return [10, 20, 30, 40, 50]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers as input and returns True if the sum of the integers in the list is divisible by the length of the list. The solution function g returns a specific list of integers that satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, arithmetic operations, and function definitions in Python. It can be used to teach students about list manipulation and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(char for char in s if char.isalnum()).lower()\n    return s == s[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target=10) -> bool:\n    return any(sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)+1))\ndef g(target=10):\n    return [3, 1, 4, 1, 5, 9, 2]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(char for char in s if char.isalnum()).lower()\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if a given string is a palindrome after removing non-alphanumeric characters and converting to lowercase. The solution function returns a specific string that is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, palindrome checking, and function calling in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm. It does not directly relate to any specific topic from the list provided.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target=10) -> bool:\n    return any(sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)+1))\ndef g(target=10):\n    return [3, 1, 4, 1, 5, 9, 2]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns the number 17 such that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand prime number checking and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sentence: str) -> bool:\n    return ' '.join(sentence.split()[::-1]) == \"world hello\"\n\ndef g():\n    return \"hello world\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target=10) -> bool:\n    return any(sum(nums[i:j]) == target for i in range(len(nums)) for j in range(i+1, len(nums)+1))\ndef g(target=10):\n    return [3, 1, 4, 1, 5, 9, 2]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(sentence: str) -> bool:\n    return ' '.join(sentence.split()[::-1]) == \"world hello\"",
        "solution_func": "def g():\n    return \"hello world\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a sentence as input, reverses the order of the words in the sentence, and checks if it matches the string 'world hello'. The solution function returns the string 'hello world'."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of list slicing in Python. The solution function reverses the order of the words in the input sentence to match the target string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict) -> bool:\n    return all(isinstance(value, (int, float)) for value in data.values())\n\ndef g():\n    return {'a': 1, 'b': 2.5, 'c': 0, 'd': -3}  # Generate a dictionary with only numeric values\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all values in a dictionary are numeric (int or float) using the `isinstance` function and a list comprehension.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(string: str, pattern='ab') -> bool:\n    pattern_indices = {char: i for i, char in enumerate(pattern)}\n    current_index = 0\n\n    for char in string:\n        if char not in pattern_indices or pattern_indices[char] != current_index:\n            return False\n        current_index = (current_index + 1) % len(pattern)\n\n    return current_index == 0\n\ndef g(pattern='ab'):\n    return 'abab'  # Generate a string following the given pattern\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(data: dict) -> bool:\n    return all(isinstance(value, (int, float)) for value in data.values())",
        "solution_func": "def g():\n    return {'a': 1, 'b': 2.5, 'c': 0, 'd': -3}  # Generate a dictionary with only numeric values",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a dictionary with only numeric values and checking if all values in the dictionary are either integers or floats."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to create a dictionary with specific data types and using the 'all' function to check if all values in the dictionary meet a certain condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums)\n\ndef g(start=1, end=10):\n    evens = [num for num in range(start, end) if num % 2 == 0]\n    return evens\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and generating a list of even numbers within a given range.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) <= 1:\n        return False\n    for num in nums:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n    return True\n\ndef g(start=2, end=20):\n    primes = []\n    for num in range(start, end):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 == 0 for num in nums)",
        "solution_func": "def g(start=1, end=10):\n    evens = [num for num in range(start, end) if num % 2 == 0]\n    return evens",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if all numbers in a list are even, and a function g that generates a list of even numbers within a given range. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, checking for even numbers, and using the all() function to validate a condition. It is a suitable puzzle for teaching Python to master's students in CS as it covers basic concepts like list operations and boolean expressions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], threshold=1000) -> bool:\n    sorted_nums = sorted(nums, reverse=True)\n    mid = len(sorted_nums) // 2\n    return sum(sorted_nums[:mid]) > sum(sorted_nums[mid:]) and sum(sorted_nums) > threshold\n\ndef g(nums=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    return nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers, calculating sums, and comparing them. It also uses default parameter values in the function definition.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # simulated annealing\n    import random\n    import math\n\n    def fitness(individual, vecs):\n        return sum(sum(v[i] for i in individual) % 2 for v in vecs)\n\n    def neighbor(current, d):\n        new = current[:]\n        index = random.randint(0, d - 1)\n        if index in new:\n            new.remove(index)\n        else:\n            new.append(index)\n        return new\n\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    current_solution = [i for i in range(d) if random.random() > 0.5]\n    temperature = 1.0\n    cooling_rate = 0.0001\n\n    while temperature > 0.0001:\n        new_solution = neighbor(current_solution, d)\n        current_fitness = fitness(current_solution, vecs)\n        new_fitness = fitness(new_solution, vecs)\n\n        if new_fitness >= current_fitness or random.random() < math.exp((new_fitness - current_fitness) / temperature):\n            current_solution = new_solution\n\n        temperature *= 1 - cooling_rate\n\n    return current_solution\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], threshold=1000) -> bool:\n    sorted_nums = sorted(nums, reverse=True)\n    mid = len(sorted_nums) // 2\n    return sum(sorted_nums[:mid]) > sum(sorted_nums[mid:]) and sum(sorted_nums) > threshold",
        "solution_func": "def g(nums=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and a threshold value, sorts the list in descending order, calculates the sum of the first half of the sorted list and the sum of the second half, and returns True if the sum of the first half is greater than the sum of the second half and the total sum of the list is greater than the threshold value. The solution function g returns a predefined list of integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting and summing elements in a list, which are fundamental concepts in Python programming. It also includes conditional logic and list slicing. The solution function g simply returns a predefined list of integers to be used as input for function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int) -> bool:\n    return factorial % 10 == 0\n\ndef g(n=5):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # simulated annealing\n    import random\n    import math\n\n    def fitness(individual, vecs):\n        return sum(sum(v[i] for i in individual) % 2 for v in vecs)\n\n    def neighbor(current, d):\n        new = current[:]\n        index = random.randint(0, d - 1)\n        if index in new:\n            new.remove(index)\n        else:\n            new.append(index)\n        return new\n\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    current_solution = [i for i in range(d) if random.random() > 0.5]\n    temperature = 1.0\n    cooling_rate = 0.0001\n\n    while temperature > 0.0001:\n        new_solution = neighbor(current_solution, d)\n        current_fitness = fitness(current_solution, vecs)\n        new_fitness = fitness(new_solution, vecs)\n\n        if new_fitness >= current_fitness or random.random() < math.exp((new_fitness - current_fitness) / temperature):\n            current_solution = new_solution\n\n        temperature *= 1 - cooling_rate\n\n    return current_solution\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(factorial: int) -> bool:\n    return factorial % 10 == 0",
        "solution_func": "def g(n=5):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function to check if the factorial of a given number ends with 0, and providing a solution function to calculate the factorial of a given number. The assertion checks if the solution function correctly calculates the factorial that ends with 0."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple factorial calculation and checking the last digit of the result. It can be used to teach basic Python programming concepts like functions, loops, and assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1]\n\ndef g(s=\"radar\"):\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # simulated annealing\n    import random\n    import math\n\n    def fitness(individual, vecs):\n        return sum(sum(v[i] for i in individual) % 2 for v in vecs)\n\n    def neighbor(current, d):\n        new = current[:]\n        index = random.randint(0, d - 1)\n        if index in new:\n            new.remove(index)\n        else:\n            new.append(index)\n        return new\n\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    current_solution = [i for i in range(d) if random.random() > 0.5]\n    temperature = 1.0\n    cooling_rate = 0.0001\n\n    while temperature > 0.0001:\n        new_solution = neighbor(current_solution, d)\n        current_fitness = fitness(current_solution, vecs)\n        new_fitness = fitness(new_solution, vecs)\n\n        if new_fitness >= current_fitness or random.random() < math.exp((new_fitness - current_fitness) / temperature):\n            current_solution = new_solution\n\n        temperature *= 1 - cooling_rate\n\n    return current_solution\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(palindrome: str) -> bool:\n    return palindrome == palindrome[::-1]",
        "solution_func": "def g(s=\"radar\"):\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given string is a palindrome, and a function g that returns a specific string. The assertion tests if the function f applied to the output of function g returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num > 0 for num in lst)\n\ndef g():\n    import random\n    lst = random.choices(range(-5, 6), k=random.randint(2, 5))\n    return [num for num in lst if num > 0]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": 36,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return any(lst)\n    \ndef g():\n    import random\n    while True:\n        lst = random.choices([False, True], k=random.randint(2, 5))\n        if any(lst):\n            return lst\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num > 0 for num in lst)",
        "solution_func": "def g():\n    import random\n    lst = random.choices(range(-5, 6), k=random.randint(2, 5))\n    return [num for num in lst if num > 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all numbers in a list are greater than 0, and a function g() that generates a random list of numbers and returns a new list with only positive numbers. The puzzle tests whether the function g() correctly filters out negative numbers from the generated list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and random number generation in Python. It also tests the ability to write functions that meet specific criteria and to use assertions for testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    vowels = 'aeiou'\n    return all(v in s for v in vowels)\ndef g():\n    return 'aieou'\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    vowels = 'aeiou'\n    return all(v in s for v in vowels)",
        "solution_func": "def g():\n    return 'aieou'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if all vowels ('aeiou') are present in a given string. The solution function g() returns a string 'aieou' and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for the presence of all vowels in a given string and ensuring that the solution function returns the correct string to satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target_value: int, text='hello world') -> bool:\n    assert target_value == 3\n    return True\n\ndef g(text='hello world'):\n    vowels = 'aeiou'\n    return sum(1 for char in text if char.lower() in vowels)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(target_value: int, prices=[7, 1, 5, 3, 6, 4]) -> bool:\n    assert target_value == max(prices[1] - prices[0], prices[2])\n    return True\n\ndef g(prices=[7, 1, 5, 3, 6, 4]):\n    if len(prices) <= 1:\n        return 0\n    \n    max_profit = 0\n    min_price = prices[0]\n    \n    for price in prices[1:]:\n        max_profit = max(max_profit, price - min_price)\n        min_price = min(min_price, price)\n    \n    return max_profit\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(target_value: int, text='hello world') -> bool:\n    assert target_value == 3\n    return True",
        "solution_func": "def g(text='hello world'):\n    vowels = 'aeiou'\n    return sum(1 for char in text if char.lower() in vowels)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that counts the number of vowels in a given text and ensure that the count matches a specific target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, counting characters, and using assertions to validate the solution.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target_value: int, num=5) -> bool:\n    assert target_value == 120\n    return True\n\ndef g(num=5):\n    if num == 0:\n        return 1\n\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n\n    return factorial\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and recursion.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(target_value: int, prices=[7, 1, 5, 3, 6, 4]) -> bool:\n    assert target_value == max(prices[1] - prices[0], prices[2])\n    return True\n\ndef g(prices=[7, 1, 5, 3, 6, 4]):\n    if len(prices) <= 1:\n        return 0\n    \n    max_profit = 0\n    min_price = prices[0]\n    \n    for price in prices[1:]:\n        max_profit = max(max_profit, price - min_price)\n        min_price = min(min_price, price)\n    \n    return max_profit\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(target_value: int, num=5) -> bool:\n    assert target_value == 120\n    return True",
        "solution_func": "def g(num=5):\n    if num == 0:\n        return 1\n\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n\n    return factorial",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that calculates the factorial of a given number and then use this function to check if the factorial of 5 is equal to 120."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate factorials in Python and using the factorial function to solve a specific challenge.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str, sub='ab') -> bool:\n    assert len(sub) > 1 and sub in string and len(set(sub)) == len(sub)\n    return all(sub in string[i:i+len(sub)] for i in range(len(string) - len(sub) + 1))\ndef g(sub='ab'):\n    # brute force\n    string = 'abracadabra'\n\n    from itertools import permutations\n    for p in permutations(sub):\n        if all(char in sub for char in p) and len(p) == len(set(p)):\n            return ''.join(p)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation, Brute Force Search, Set Operations, and Permutations and Combinations.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(string: str, sub='ab') -> bool:\n    assert len(sub) > 1 and sub in string and len(set(sub)) == len(sub)\n    return all(sub in string[i:i+len(sub)] for i in range(len(string) - len(sub) + 1))",
        "solution_func": "def g(sub='ab'):\n    # brute force\n    string = 'abracadabra'\n\n    from itertools import permutations\n    for p in permutations(sub):\n        if all(char in sub for char in p) and len(p) == len(set(p)):\n            return ''.join(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string contains a specific substring with certain conditions, and a function g that generates permutations of a given substring and returns the first valid permutation. The solution g is then checked against f to ensure it satisfies the conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, checking for substrings, and generating permutations. It requires understanding of string operations, permutations, and boolean logic.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sentence: str) -> bool:\n    cleaned_sentence = ''.join(filter(str.isalnum, sentence)).lower()\n    return cleaned_sentence == cleaned_sentence[::-1]\n\ndef g():\n    return \"A man, a plan, a canal, Panama!\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)\ndef g():\n    return [3, 7, 12, 15, 20, 22]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(sentence: str) -> bool:\n    cleaned_sentence = ''.join(filter(str.isalnum, sentence)).lower()\n    return cleaned_sentence == cleaned_sentence[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal, Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given sentence is a palindrome after removing non-alphanumeric characters and converting to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function that removes non-alphanumeric characters from a sentence, converts it to lowercase, and checks if the resulting string is a palindrome. The provided solution demonstrates the usage of the function with a specific sentence.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int], threshold=20) -> bool:\n    return sum(numbers) > threshold\n\ndef g():\n    return [5, 10, 8, 2, 7]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the sum of numbers in a list is greater than a threshold value.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)\ndef g():\n    return [3, 7, 12, 15, 20, 22]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int], threshold=20) -> bool:\n    return sum(numbers) > threshold",
        "solution_func": "def g():\n    return [5, 10, 8, 2, 7]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and a threshold value, and returns True if the sum of the integers in the list is greater than the threshold. The solution function g returns a specific list of integers that satisfies the condition set by function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks if the sum of a list of integers exceeds a given threshold. The solution function provides a list of integers that meets this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(words: List[str]) -> bool:\n    return all(word[0].isupper() for word in words)\n\ndef g():\n    return [\"Python\", \"Programming\", \"Puzzles\", \"Creation\"]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation by checking if the first letter of each word in a list is uppercase.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)\ndef g():\n    return [3, 7, 12, 15, 20, 22]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(words: List[str]) -> bool:\n    return all(word[0].isupper() for word in words)",
        "solution_func": "def g():\n    return [\"Python\", \"Programming\", \"Puzzles\", \"Creation\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a list of words as input and checks if all words start with an uppercase letter. The solution function provides a list of words and asserts that the puzzle function returns True when applied to the provided list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension and string manipulation in Python by checking if all words in a list start with an uppercase letter.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given text is a palindrome.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product > 1000\n\ndef g():\n    return [25, 20, 10, 3, 2]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns the text 'racecar'. The assert statement confirms that the function f returns True when applied to the output of function g.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(len(s) == len(strings[0]) for s in strings)\n\ndef g():\n    return [\"cat\", \"dog\", \"rat\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and list operations.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product > 1000\n\ndef g():\n    return [25, 20, 10, 3, 2]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(len(s) == len(strings[0]) for s in strings)",
        "solution_func": "def g():\n    return [\"cat\", \"dog\", \"rat\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and returns True if all strings have the same length, and a function g that returns a specific list of strings. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves understanding list comprehension, the all() function, and basic list operations. It also tests the students' ability to define functions and understand how to use them in conjunction with each other.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and checking if it is sorted correctly. This falls under the topic of Sorting and Ordering.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product > 1000\n\ndef g():\n    return [25, 20, 10, 3, 2]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given list of numbers is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a list of numbers is sorted in ascending order. The solution function g returns a pre-sorted list, and the assertion checks if f applied to the output of g returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(sequence: List[int], common_ratio=3, range_limit=100, options=[2, 6, 18, 54, 162]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] / sequence[i-1] == common_ratio\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_ratio=3, range_limit=100, options=[2, 6, 18, 54, 162]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] / c[i] == common_ratio for i in range(len(c)-1)):\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as Mathematical Operations, Conditional Logic, Importing Modules (Itertools), and Permutations and Combinations.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(sequence: List[int], common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] - sequence[i-1] == common_diff\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\ndef g(common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] - c[i] == common_diff for i in range(len(c)-1)):\n                return list(c)\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(sequence: List[int], common_ratio=3, range_limit=100, options=[2, 6, 18, 54, 162]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] / sequence[i-1] == common_ratio\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit",
        "solution_func": "def g(common_ratio=3, range_limit=100, options=[2, 6, 18, 54, 162]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] / c[i] == common_ratio for i in range(len(c)-1)):\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given sequence of numbers follows a specific pattern and falls within certain limits. The solution function g generates combinations of numbers from a given set that satisfy the pattern defined in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for a specific pattern in a sequence of numbers and generating combinations of numbers that satisfy the pattern. It also requires knowledge of itertools combinations and list operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], min_length=4, max_length=8, starts_with='P') -> bool:\n    return all(len(word) >= min_length and len(word) <= max_length and word.startswith(starts_with) for word in words)\n\ndef g(min_length=4, max_length=8, starts_with='P'):\n    import itertools\n    possible_words = ['Python', 'Programming', 'Puzzle', 'Practice', 'Program']\n    for n in range(1, len(possible_words)+1):\n        for c in itertools.combinations(possible_words, n):\n            if all(len(word) >= min_length and len(word) <= max_length and word.startswith(starts_with) for word in c):\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and itertools module for generating combinations. It also includes conditional logic and list operations.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(sequence: List[int], common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] - sequence[i-1] == common_diff\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\ndef g(common_diff=5, range_limit=50, options=[3, 7, 12, 17, 22]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] - c[i] == common_diff for i in range(len(c)-1)):\n                return list(c)\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], min_length=4, max_length=8, starts_with='P') -> bool:\n    return all(len(word) >= min_length and len(word) <= max_length and word.startswith(starts_with) for word in words)",
        "solution_func": "def g(min_length=4, max_length=8, starts_with='P'):\n    import itertools\n    possible_words = ['Python', 'Programming', 'Puzzle', 'Practice', 'Program']\n    for n in range(1, len(possible_words)+1):\n        for c in itertools.combinations(possible_words, n):\n            if all(len(word) >= min_length and len(word) <= max_length and word.startswith(starts_with) for word in c):\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of words meet certain criteria, and a function g that generates combinations of words to satisfy the criteria defined in f. The assert statement checks if the output of g satisfies the criteria of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, itertools combinations, and assertion testing in Python. It tests the understanding of list operations, iteration, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='abc') -> bool:\n    return pattern in s\n\ndef g(pattern='abc'):\n    letters = list(pattern)\n    n = len(letters)\n    string = ''\n    for i in range(1, n + 1):\n        string += ''.join(letters[:i])\n    return string\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='abc') -> bool:\n    return pattern in s",
        "solution_func": "def g(pattern='abc'):\n    letters = list(pattern)\n    n = len(letters)\n    string = ''\n    for i in range(1, n + 1):\n        string += ''.join(letters[:i])\n    return string",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(s: str, pattern='abc') -> bool checks if a given pattern is present in a string, and g(pattern='abc') generates a string by concatenating the pattern letters incrementally. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and checking for a specific pattern within a string. It can be used to teach students about string operations and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(arr: List[int], diff=5) -> bool:\n    if len(arr) < 3:\n        return False\n    return all(arr[i] - arr[i-1] == diff for i in range(2, len(arr)))\n\ndef g(diff=5):\n    start = 1\n    n = 5\n    return [start + diff*i for i in range(n)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for a specific difference between elements in the list.",
        "idx_generation": 37,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(arr: List[int], diff=5) -> bool:\n    if len(arr) < 3:\n        return False\n    return all(arr[i] - arr[i-1] == diff for i in range(2, len(arr)))",
        "solution_func": "def g(diff=5):\n    start = 1\n    n = 5\n    return [start + diff*i for i in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the elements in a list follow an arithmetic progression with a given difference, and a function g that generates a list following an arithmetic progression with a given difference. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, arithmetic progression, and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g():\n    import random\n    while True:\n        length = random.randint(5, 10)\n        new_list = [random.randint(1, 100) for _ in range(length)]\n        if all(num % 2 == 0 for num in new_list):\n            return new_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even, generating random lists of numbers, and using list comprehension.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int]) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g():\n    import random\n    while True:\n        length = random.randint(5, 10)\n        new_list = [random.randint(1, 100) for _ in range(length)]\n        if all(num % 2 == 0 for num in new_list):\n            return new_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random list of integers and checking if all the numbers in the list are even."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f(lst) that checks if all numbers in a given list are even, and a function g() that generates a random list of integers and returns it only if all numbers in the list are even. The assert statement at the end verifies that the solution function g() satisfies the condition of function f(lst).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums) - 1))\n\ndef g():\n    import random\n    while True:\n        length = random.randint(5, 10)\n        new_list = sorted([random.randint(1, 100) for _ in range(length)])\n        if all(new_list[i] <= new_list[i+1] for i in range(len(new_list) - 1)):\n            return new_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers in ascending order and checking if the list is sorted. It also includes the use of random numbers and loops.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    import random\n    while True:\n        length = random.randint(5, 10)\n        new_list = sorted([random.randint(1, 100) for _ in range(length)])\n        if all(new_list[i] <= new_list[i+1] for i in range(len(new_list) - 1)):\n            return new_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers is sorted in non-decreasing order, and a function g that generates a random list of numbers and returns it if it is sorted. The puzzle requires students to understand list sorting and comparison operations in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple concept of checking if a list is sorted in non-decreasing order. It can be used to teach students about list operations, sorting, and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target_product=200, divisor=5) -> bool:\n    def is_divisible(product, divisor):\n        return product % divisor == 0\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return is_divisible(product, divisor) == (target_product in numbers)\n\ndef g(target_product=200, divisor=5):\n    from random import randint\n\n    numbers = [randint(1, 10) for _ in range(5)]\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and importing modules (random).",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom math import isqrt\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, isqrt(n) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(sum(numbers)) == (target_sum in numbers)\n\ndef g(target_sum=100):\n    from random import randint\n\n    numbers = [randint(1, 50) for _ in range(10)]\n    return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target_product=200, divisor=5) -> bool:\n    def is_divisible(product, divisor):\n        return product % divisor == 0\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return is_divisible(product, divisor) == (target_product in numbers)",
        "solution_func": "def g(target_product=200, divisor=5):\n    from random import randint\n\n    numbers = [randint(1, 10) for _ in range(5)]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that takes a list of integers, calculates the product of the numbers in the list, and checks if the product is divisible by a given divisor. The function also checks if the target product is present in the list of numbers. The solution function g generates a list of random integers and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, integer operations, and conditional statements in Python. It also requires understanding of functions and how to generate random numbers. The solution function g provides a list of random numbers to test the function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom math import sqrt\n\ndef f(numbers: List[int], target_product=144) -> bool:\n    def is_perfect_square(n):\n        return int(sqrt(n))**2 == n\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return is_perfect_square(product) == (target_product in numbers)\n\ndef g(target_product=144):\n    from random import randint\n\n    numbers = [randint(1, 12) for _ in range(6)]\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, Importing Modules (Itertools, etc.), and Probability and Statistics.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom math import isqrt\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, isqrt(n) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(sum(numbers)) == (target_sum in numbers)\n\ndef g(target_sum=100):\n    from random import randint\n\n    numbers = [randint(1, 50) for _ in range(10)]\n    return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom math import sqrt\n\ndef f(numbers: List[int], target_product=144) -> bool:\n    def is_perfect_square(n):\n        return int(sqrt(n))**2 == n\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return is_perfect_square(product) == (target_product in numbers)",
        "solution_func": "def g(target_product=144):\n    from random import randint\n\n    numbers = [randint(1, 12) for _ in range(6)]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that takes a list of integers and a target product, checks if the product of the integers is a perfect square, and compares it to the target product. The solution function g generates a list of random integers and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, integer operations, and checking for perfect squares. It also includes generating random numbers. This puzzle can be used to teach Python programming concepts to master's students in CS.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target_product=63) -> bool:\n    def is_odd(n):\n        return n % 2 != 0\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return is_odd(product) == (target_product in numbers)\n\ndef g(target_product=63):\n    from random import randint\n\n    numbers = [randint(1, 10) for _ in range(7)]\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and random number generation.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom math import isqrt\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, isqrt(n) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(sum(numbers)) == (target_sum in numbers)\n\ndef g(target_sum=100):\n    from random import randint\n\n    numbers = [randint(1, 50) for _ in range(10)]\n    return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target_product=63) -> bool:\n    def is_odd(n):\n        return n % 2 != 0\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return is_odd(product) == (target_product in numbers)",
        "solution_func": "def g(target_product=63):\n    from random import randint\n\n    numbers = [randint(1, 10) for _ in range(7)]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of 7 random numbers between 1 and 10, calculate their product, and check if the product is odd and if the target product is in the list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, random number generation, product calculation, and conditional checks based on the product and target product.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(bool_values: List[bool], min_count=2) -> bool:\n    return len(bool_values) >= min_count and all(bool_values)\n\ndef g(min_count=2):\n    \"\"\"\n    This solution generates a list of True boolean values.\n    \"\"\"\n    bool_values = [True] * min_count\n\n    return bool_values\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and boolean operations.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(bool_values: List[bool], min_count=2) -> bool:\n    return len(bool_values) >= min_count and all(bool_values)",
        "solution_func": "def g(min_count=2):\n    \"\"\"\n    This solution generates a list of True boolean values.\n    \"\"\"\n    bool_values = [True] * min_count\n\n    return bool_values",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of True boolean values and checking if the list meets a minimum count requirement."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves creating a list of True boolean values and ensuring that the list has a minimum count of True values. The solution function generates the list based on the specified minimum count and the puzzle function checks if the generated list meets the criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[float], target_sum=10.0, min_count=2) -> bool:\n    return sum(numbers) == target_sum and all((n >= 0 for n in numbers)) and len(numbers) >= min_count\n\ndef g(target_sum=10.0, min_count=2):\n    \"\"\"\n    This solution generates a list of floating-point numbers that sum up to the target_sum.\n    \"\"\"\n    numbers = [1.0] * min_count\n    numbers.append(target_sum - min_count)\n\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[float], target_sum=10.0, min_count=2) -> bool:\n    return sum(numbers) == target_sum and all((n >= 0 for n in numbers)) and len(numbers) >= min_count",
        "solution_func": "def g(target_sum=10.0, min_count=2):\n    \"\"\"\n    This solution generates a list of floating-point numbers that sum up to the target_sum.\n    \"\"\"\n    numbers = [1.0] * min_count\n    numbers.append(target_sum - min_count)\n\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of floating-point numbers that sum up to a target sum, with a minimum count of numbers. The solution function g() creates such a list based on the given target sum and minimum count."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of floating-point numbers generated by function g() meets specific criteria defined in function f(). The solution function g() is designed to create a list that satisfies the conditions set by function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target=24) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product == target\n\ndef g(target=24) -> List[int]:\n    return [2, 3, 4]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, List Operations, and Function Definition.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target=10) -> bool:\n    return all(sum(t) == target for t in tuples)\n\ndef g(target=10) -> List[Tuple[int, int]]:\n    return [(3, 7), (2, 8), (1, 9)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target=24) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product == target",
        "solution_func": "def g(target=24) -> List[int]:\n    return [2, 3, 4]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if the product of a list of numbers is equal to a target value, and g returns a list of numbers. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions in Python, work with lists, and use the assert statement for testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target=10) -> bool:\n    return all(sum(t) == target for t in tuples)\n\ndef g(target=10) -> List[Tuple[int, int]]:\n    return [(3, 7), (2, 8), (1, 9)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that returns True if the word is a palindrome (reads the same forwards and backwards), and a function g() that returns the word 'radar'. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm. It does not directly relate to any of the listed topics.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target=10) -> bool:\n    return all(sum(t) == target for t in tuples)\n\ndef g(target=10) -> List[Tuple[int, int]]:\n    return [(3, 7), (2, 8), (1, 9)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(num) checks if a given number is a prime number, and g() always returns the number 17. The puzzle tests whether the function f correctly identifies 17 as a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithm to check for prime numbers and a fixed solution function that always returns 17. The puzzle is straightforward and can be used to teach students about prime numbers and function testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, element=3) -> bool:\n    return element in lst and all(isinstance(x, int) for x in lst)\n\ndef g(element=3):\n    \"\"\"\n    This solution iteratively generates a list that includes the specified element.\n    \"\"\"\n    lst = []\n    for i in range(5):\n        lst.append(i)\n    lst.append(element)\n    return lst\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a specific element is present in a list and if all elements in the list are integers. The solution generates a list with a specified element included.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, condition=lambda x: x.isalpha(), length=5, char='a') -> bool:\n    return len(s) == length and all(condition(ch) for ch in s) and char in s\n\ndef g(condition=lambda x: x.isalpha(), length=5, char='a'):\n    \"\"\"\n    This solution recursively generates a string that satisfies the given conditions and contains the specified character.\n    \"\"\"\n    def generate_string(idx, curr_str):\n        if idx == length:\n            return curr_str if char in curr_str else None\n        for ch in 'abcdefghijklmnopqrstuvwxyz':\n            if condition(ch):\n                new_str = curr_str + ch\n                result = generate_string(idx + 1, new_str)\n                if result:\n                    return result\n        return None\n    \n    return generate_string(0, '')\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, element=3) -> bool:\n    return element in lst and all(isinstance(x, int) for x in lst)",
        "solution_func": "def g(element=3):\n    \"\"\"\n    This solution iteratively generates a list that includes the specified element.\n    \"\"\"\n    lst = []\n    for i in range(5):\n        lst.append(i)\n    lst.append(element)\n    return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: list, element=3) that checks if a specified element is in a list and if all elements in the list are integers. The solution function g(element=3) generates a list of integers with a specified element included at the end."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for the presence of an element in a list and verifying if all elements in the list are integers. The solution function generates a list with the specified element included. This puzzle can be used to teach Python programming concepts related to list manipulation, element presence check, and type checking.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name', value='Alice') -> bool:\n    return key in d and d[key] == value\n\ndef g(key='name', value='Alice'):\n    \"\"\"\n    This solution generates a dictionary with the specified key and value.\n    \"\"\"\n    return {key: value}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation, conditional logic, and function assertion.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, condition=lambda x: x.isalpha(), length=5, char='a') -> bool:\n    return len(s) == length and all(condition(ch) for ch in s) and char in s\n\ndef g(condition=lambda x: x.isalpha(), length=5, char='a'):\n    \"\"\"\n    This solution recursively generates a string that satisfies the given conditions and contains the specified character.\n    \"\"\"\n    def generate_string(idx, curr_str):\n        if idx == length:\n            return curr_str if char in curr_str else None\n        for ch in 'abcdefghijklmnopqrstuvwxyz':\n            if condition(ch):\n                new_str = curr_str + ch\n                result = generate_string(idx + 1, new_str)\n                if result:\n                    return result\n        return None\n    \n    return generate_string(0, '')\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict, key='name', value='Alice') -> bool:\n    return key in d and d[key] == value",
        "solution_func": "def g(key='name', value='Alice'):\n    \"\"\"\n    This solution generates a dictionary with the specified key and value.\n    \"\"\"\n    return {key: value}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a specified key-value pair exists in a dictionary, and a function g that generates a dictionary with the specified key-value pair. The assertion tests if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding dictionary manipulation in Python and testing function output using assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: set, elements={2, 4, 6, 8}) -> bool:\n    return s == elements\n\ndef g(elements={2, 4, 6, 8}):\n    \"\"\"\n    This solution generates a set with the specified elements.\n    \"\"\"\n    return elements\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and conditional logic.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, condition=lambda x: x.isalpha(), length=5, char='a') -> bool:\n    return len(s) == length and all(condition(ch) for ch in s) and char in s\n\ndef g(condition=lambda x: x.isalpha(), length=5, char='a'):\n    \"\"\"\n    This solution recursively generates a string that satisfies the given conditions and contains the specified character.\n    \"\"\"\n    def generate_string(idx, curr_str):\n        if idx == length:\n            return curr_str if char in curr_str else None\n        for ch in 'abcdefghijklmnopqrstuvwxyz':\n            if condition(ch):\n                new_str = curr_str + ch\n                result = generate_string(idx + 1, new_str)\n                if result:\n                    return result\n        return None\n    \n    return generate_string(0, '')\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: set, elements={2, 4, 6, 8}) -> bool:\n    return s == elements",
        "solution_func": "def g(elements={2, 4, 6, 8}):\n    \"\"\"\n    This solution generates a set with the specified elements.\n    \"\"\"\n    return elements",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given set is equal to a predefined set of elements, and a function g that generates and returns the predefined set of elements. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is straightforward and involves understanding how sets work in Python. The solution function g simply returns the predefined set of elements, and the challenge function f checks if a given set is equal to this predefined set.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], element_found=False) -> bool:\n    return element_found or 3 in numbers\n\ndef g(element_found=False) -> List[int]:\n    odd_numbers = [num for num in range(1, 21) if num % 2 != 0]\n    return odd_numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Conditional Logic and List Operations.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], element_found=False) -> bool:\n    return element_found or 2 in numbers\n\ndef g(element_found=False) -> List[int]:\n    prime_numbers = []\n    for num in range(2, 20):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], element_found=False) -> bool:\n    return element_found or 3 in numbers",
        "solution_func": "def g(element_found=False) -> List[int]:\n    odd_numbers = [num for num in range(1, 21) if num % 2 != 0]\n    return odd_numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the number 3 is in a given list of integers. The function g generates a list of odd numbers from 1 to 20. The puzzle asserts that calling f with the output of g should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, checking for a specific element in a list, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], element_found=False) -> bool:\n    return element_found or 5 in numbers\n\ndef g(element_found=False) -> List[int]:\n    fib_numbers = [0, 1]\n    while fib_numbers[-1] + fib_numbers[-2] <= 20:\n        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])\n    return fib_numbers\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and searching for a specific element in the list.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], element_found=False) -> bool:\n    return element_found or 2 in numbers\n\ndef g(element_found=False) -> List[int]:\n    prime_numbers = []\n    for num in range(2, 20):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], element_found=False) -> bool:\n    return element_found or 5 in numbers",
        "solution_func": "def g(element_found=False) -> List[int]:\n    fib_numbers = [0, 1]\n    while fib_numbers[-1] + fib_numbers[-2] <= 20:\n        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])\n    return fib_numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if the number 5 is present in a given list of integers. The solution generates a list of Fibonacci numbers up to 20 and checks if the number 5 is present in that list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, conditionals, and function implementation in Python. The solution uses a while loop to generate Fibonacci numbers and then checks for the presence of the number 5 in the generated list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, num=7) -> bool:\n    assert num > 0 and num % 2 == 1, 'Hint: num should be a positive odd number.'\n    return len(text) == num and text.isalpha() and text.islower() and text == ''.join(sorted(text))\n    \ndef g(num=7):\n    import string\n    return ''.join([char for char in string.ascii_lowercase[:num]])\n    \nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Sorting and Ordering, Importing Modules (Itertools, etc.)",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, num=7) -> bool:\n    assert num > 0 and num % 2 == 1, 'Hint: num should be a positive odd number.'\n    return len(text) == num and text.isalpha() and text.islower() and text == ''.join(sorted(text))",
        "solution_func": "def g(num=7):\n    import string\n    return ''.join([char for char in string.ascii_lowercase[:num]])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define two functions, f and g, where f checks if a given text meets certain conditions and g generates a specific text based on a given number. The assertion at the end checks if the output of g satisfies the conditions of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, list comprehension, and assertion testing in Python. It tests the student's understanding of string operations and function implementation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(data: Dict[str, int], key='xyz') -> bool:\n    return key in data and data[key] > 0 and len(data) == 3 and sum(data.values()) == 10\n    \ndef g(key='xyz'):\n    return {key: 5, 'abc': 3, 'def': 2}\n    \nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as dictionary manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Dict\n\ndef f(data: Dict[str, int], key='xyz') -> bool:\n    return key in data and data[key] > 0 and len(data) == 3 and sum(data.values()) == 10",
        "solution_func": "def g(key='xyz'):\n    return {key: 5, 'abc': 3, 'def': 2}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary as input and checks if a specific key exists in the dictionary, has a positive value, the dictionary has a length of 3, and the sum of all values in the dictionary is 10. The solution function g returns a dictionary with the specified key having a value of 5, and two other keys with values 3 and 2. The assertion checks if the function f returns True when called with the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, checking conditions on dictionary keys and values, and understanding function calls and assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(strings: list) -> bool:\n    for string in strings:\n        if 'a' in string:\n            return True\n    return False\n\ndef g():\n    return ['apple', 'banana', 'orange']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 9, 3, 7]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(strings: list) -> bool:\n    for string in strings:\n        if 'a' in string:\n            return True\n    return False",
        "solution_func": "def g():\n    return ['apple', 'banana', 'orange']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings as input and returns True if any string in the list contains the letter 'a', otherwise it returns False. The solution function g returns a list of strings, and the puzzle is solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if any string in a list contains the letter 'a'. The solution function returns a list of strings, and the puzzle is solved if the function f correctly identifies the presence of 'a' in any string from the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return string == string[::-1]\n\ndef g():\n    return 'radar'\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 38,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    return [1, 9, 3, 7]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g():\n    return 'radar'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome (reads the same forwards and backwards) by comparing the string with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks if a string is a palindrome and then providing a solution that returns a specific palindrome string to test the function.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 5\n        n -= 5 + (n - 5) // 6\n    return n > 0 and n % 6 == 5\n\ndef g():\n    m = 5\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 5:\n                break\n            n -= 5 + (n - 5) // 6\n        if n > 0 and n % 6 == 5:\n            return m\n        m += 6\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Backtracking, Conditional Logic, and Mathematical Operations.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 4\n        n -= 4 + (n - 4) // 5\n    return n > 0 and n % 5 == 4\n\ndef g():\n    m = 4\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 4:\n                break\n            n -= 4 + (n - 4) // 5\n        if n > 0 and n % 5 == 4:\n            return m\n        m += 5\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 5\n        n -= 5 + (n - 5) // 6\n    return n > 0 and n % 6 == 5",
        "solution_func": "def g():\n    m = 5\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 5:\n                break\n            n -= 5 + (n - 5) // 6\n        if n > 0 and n % 6 == 5:\n            return m\n        m += 6",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) and g(), where f(n) checks a specific condition on an input integer n and g() iterates over integers to find a value that satisfies the condition checked by f(n). The goal is to find an integer that meets the condition specified in f(n) after applying the operations in g()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop and arithmetic operations to check a condition on an integer. It requires understanding of loops, arithmetic operations, and condition checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(4):\n        assert n % 4 == 3\n        n -= 3 + (n - 3) // 4\n    return n > 0 and n % 4 == 3\n\ndef g():\n    m = 3\n    while True:\n        n = m\n        for i in range(4):\n            if n % 4 != 3:\n                break\n            n -= 3 + (n - 3) // 4\n        if n > 0 and n % 4 == 3:\n            return m\n        m += 4\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as Backtracking, Conditional Logic, and Mathematical Operations.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 4\n        n -= 4 + (n - 4) // 5\n    return n > 0 and n % 5 == 4\n\ndef g():\n    m = 4\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 4:\n                break\n            n -= 4 + (n - 4) // 5\n        if n > 0 and n % 5 == 4:\n            return m\n        m += 5\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(4):\n        assert n % 4 == 3\n        n -= 3 + (n - 3) // 4\n    return n > 0 and n % 4 == 3",
        "solution_func": "def g():\n    m = 3\n    while True:\n        n = m\n        for i in range(4):\n            if n % 4 != 3:\n                break\n            n -= 3 + (n - 3) // 4\n        if n > 0 and n % 4 == 3:\n            return m\n        m += 4",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) and g(), where f(n) checks a specific condition on an input integer n, and g() iterates through integers to find a value that satisfies the condition checked by f(n). The puzzle requires understanding of loops, conditions, and arithmetic operations in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop that checks a specific condition on an integer n in function f(n), and function g() iterates through integers to find a value that satisfies the condition checked by f(n). The solution g() returns the first integer that meets the condition specified in f(n).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(7):\n        assert n % 7 == 6\n        n -= 6 + (n - 6) // 7\n    return n > 0 and n % 7 == 6\n\ndef g():\n    m = 6\n    while True:\n        n = m\n        for i in range(7):\n            if n % 7 != 6:\n                break\n            n -= 6 + (n - 6) // 7\n        if n > 0 and n % 7 == 6:\n            return m\n        m += 7\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves backtracking and conditional logic to find a solution that satisfies a specific condition.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 4\n        n -= 4 + (n - 4) // 5\n    return n > 0 and n % 5 == 4\n\ndef g():\n    m = 4\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 4:\n                break\n            n -= 4 + (n - 4) // 5\n        if n > 0 and n % 5 == 4:\n            return m\n        m += 5\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(7):\n        assert n % 7 == 6\n        n -= 6 + (n - 6) // 7\n    return n > 0 and n % 7 == 6",
        "solution_func": "def g():\n    m = 6\n    while True:\n        n = m\n        for i in range(7):\n            if n % 7 != 6:\n                break\n            n -= 6 + (n - 6) // 7\n        if n > 0 and n % 7 == 6:\n            return m\n        m += 7",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(n) and g(), where f checks a specific condition on an input integer n and g generates integers until f returns True for a generated integer. The goal is to find the smallest integer that satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop that iterates over integers and performs calculations based on certain conditions. The solution function g generates integers and checks if they satisfy the condition in function f. The puzzle challenges students to understand the condition and implement a solution to find the smallest integer that meets the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(word: str = \"racecar\") -> str:\n    return word\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return len(set(tuples)) == len(tuples)\n\ndef g(n: int = 5) -> List[Tuple[int, int]]:\n    import random\n    return list(set((random.randint(1, 10), random.randint(1, 10)) for _ in range(n)))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(word: str = \"racecar\") -> str:\n    return word",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome. The solution function g(word) returns a word (default is 'racecar'). The assertion checks if the solution function g() returns a palindrome word.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(nums) -> bool:\n    return len(nums) == len(set(nums))\n\ndef g(min_val=1, max_val=10, size=5):\n    return random.sample(range(min_val, max_val + 1), size)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves concepts related to set operations and random sampling using the `random` module in Python.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g(size=5, start=1, step=2):\n    return list(range(start, start + size * step, step))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(nums) -> bool:\n    return len(nums) == len(set(nums))",
        "solution_func": "def g(min_val=1, max_val=10, size=5):\n    return random.sample(range(min_val, max_val + 1), size)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a list of random numbers within a specified range and size, and checking if all the numbers in the list are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of generating random numbers and checking for uniqueness in a list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d) -> bool:\n    return len(d) == len(set(d.keys()))\n\ndef g(keys=['apple', 'banana', 'cherry']):\n    return {key: len(key) for key in keys}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking for uniqueness of keys in the dictionary.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g(size=5, start=1, step=2):\n    return list(range(start, start + size * step, step))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d) -> bool:\n    return len(d) == len(set(d.keys()))",
        "solution_func": "def g(keys=['apple', 'banana', 'cherry']):\n    return {key: len(key) for key in keys}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the length of a dictionary is equal to the number of unique keys in the dictionary. The solution function g creates a dictionary with keys as strings and values as the length of the strings, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding dictionary operations, uniqueness of keys, and function return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(str_values: List[str], target_string='apple') -> bool:\n    return target_string in str_values\n\ndef g(pattern='fruit', target_string='apple'):\n    \"\"\"\n    This solution generates a list of strings based on the specified pattern.\n    \"\"\"\n    if pattern == 'fruit':\n        str_values = ['banana', 'apple', 'orange']\n    else:\n        str_values = ['red', 'blue', 'green']\n\n    return str_values\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(bool_values: List[bool], required_true_count=2) -> bool:\n    return sum(bool_values) == required_true_count and len(bool_values) % 2 == 0\n\ndef g(required_true_count=2):\n    \"\"\"\n    This solution generates a list of booleans where the required_true_count number of True values are present.\n    \"\"\"\n    bool_values = [True] * required_true_count + [False] * required_true_count\n\n    return bool_values\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(str_values: List[str], target_string='apple') -> bool:\n    return target_string in str_values",
        "solution_func": "def g(pattern='fruit', target_string='apple'):\n    \"\"\"\n    This solution generates a list of strings based on the specified pattern.\n    \"\"\"\n    if pattern == 'fruit':\n        str_values = ['banana', 'apple', 'orange']\n    else:\n        str_values = ['red', 'blue', 'green']\n\n    return str_values",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a target string is present in a list of strings, and a function g that generates a list of strings based on a specified pattern. The solution asserts that the target string 'apple' is present in the generated list of strings."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, list manipulation, and function invocation in Python. It also tests the concept of function return values and assertion statements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(data: Dict[str, int], target_key='age') -> bool:\n    return target_key in data\n\ndef g(target_key='age'):\n    \"\"\"\n    This solution generates a dictionary with specific key-value pairs.\n    \"\"\"\n    data = {'name': 'Alice', 'age': 30, 'city': 'New York'}\n\n    return data\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking for a specific key in the dictionary.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(bool_values: List[bool], required_true_count=2) -> bool:\n    return sum(bool_values) == required_true_count and len(bool_values) % 2 == 0\n\ndef g(required_true_count=2):\n    \"\"\"\n    This solution generates a list of booleans where the required_true_count number of True values are present.\n    \"\"\"\n    bool_values = [True] * required_true_count + [False] * required_true_count\n\n    return bool_values\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Dict\n\ndef f(data: Dict[str, int], target_key='age') -> bool:\n    return target_key in data",
        "solution_func": "def g(target_key='age'):\n    \"\"\"\n    This solution generates a dictionary with specific key-value pairs.\n    \"\"\"\n    data = {'name': 'Alice', 'age': 30, 'city': 'New York'}\n\n    return data",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specified key exists in a dictionary, and a function g that generates a dictionary with specific key-value pairs. The goal is to ensure that function f returns True when called with the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves working with dictionaries and function calls. It tests the understanding of dictionary manipulation and function return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 1\n        n -= 1 + (n - 1) // 3\n    return n > 0 and n % 3 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 1:\n                break\n            n -= 1 + (n - 1) // 3\n        if n > 0 and n % 3 == 1:\n            return m\n        m += 3\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic, loops, and mathematical operations.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 1\n        n -= 1 + (n - 1) // 3\n    return n > 0 and n % 3 == 1",
        "solution_func": "def g():\n    m = 1\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 1:\n                break\n            n -= 1 + (n - 1) // 3\n        if n > 0 and n % 3 == 1:\n            return m\n        m += 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) and g(), where f(n) checks if a given number satisfies a specific condition after a series of operations, and g() iterates through numbers to find the first one that satisfies the condition. The puzzle tests the understanding of loops, conditions, and mathematical operations in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop and mathematical operations to check if a number satisfies a condition. The solution function g() iterates through numbers to find the first one that satisfies the condition defined in f(n).",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(4):\n        assert n % 4 == 1\n        n -= 1 + (n - 1) // 4\n    return n > 0 and n % 4 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(4):\n            if n % 4 != 1:\n                break\n            n -= 1 + (n - 1) // 4\n        if n > 0 and n % 4 == 1:\n            return m\n        m += 4\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as recursion, conditional logic, and mathematical operations.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(4):\n        assert n % 4 == 1\n        n -= 1 + (n - 1) // 4\n    return n > 0 and n % 4 == 1",
        "solution_func": "def g():\n    m = 1\n    while True:\n        n = m\n        for i in range(4):\n            if n % 4 != 1:\n                break\n            n -= 1 + (n - 1) // 4\n        if n > 0 and n % 4 == 1:\n            return m\n        m += 4",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) and g(), where f(n) checks a specific condition on an input integer n and g() iterates over integers to find a value that satisfies the condition checked by f(n). The goal is to find an integer that satisfies the condition defined in f(n) after iterating through a specific process in g()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop in both functions to check a condition on an integer. The solution function g() iterates over integers to find a value that satisfies the condition checked by f(n). The puzzle is suitable for teaching Python programming concepts such as loops, conditions, and function interactions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 1\n        n -= 1 + (n - 1) // 6\n    return n > 0 and n % 6 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 1:\n                break\n            n -= 1 + (n - 1) // 6\n        if n > 0 and n % 6 == 1:\n            return m\n        m += 6\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion, Conditional Logic, Mathematical Operations",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 1\n        n -= 1 + (n - 1) // 6\n    return n > 0 and n % 6 == 1",
        "solution_func": "def g():\n    m = 1\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 1:\n                break\n            n -= 1 + (n - 1) // 6\n        if n > 0 and n % 6 == 1:\n            return m\n        m += 6",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(n) and g(), where f checks a specific condition on an input integer n and g iterates through integers to find the first one that satisfies the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop that checks a condition on an integer n and a loop in the solution function g() that iterates through integers to find the first one that satisfies the condition in f. The solution function g() returns the first integer that satisfies the condition in f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return len(numbers) == len(set(numbers))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list contains unique elements by converting it to a set and comparing the lengths.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return len(numbers) == len(set(numbers))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and returns True if all elements in the list are unique, and a function g that returns a specific list of integers. The puzzle checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for uniqueness of elements in a list and testing the solution with a specific list of integers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return any(s == s[::-1] for s in strings)\n\ndef g():\n    return [\"radar\", \"python\", \"level\", \"hello\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return any(s == s[::-1] for s in strings)",
        "solution_func": "def g():\n    return [\"radar\", \"python\", \"level\", \"hello\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that checks if any string in a list is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if any string in a list is a palindrome using a given function and verifying the solution with a predefined list of strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(s.isupper() for s in strings)\n\ndef g():\n    return [\"APPLE\", \"ORANGE\", \"BANANA\", \"KIWI\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 39,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(s.isupper() for s in strings)",
        "solution_func": "def g():\n    return [\"APPLE\", \"ORANGE\", \"BANANA\", \"KIWI\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a list of strings as input and checks if all the strings are in uppercase. The solution function returns a list of uppercase strings and the puzzle is considered solved if all the strings in the returned list are in uppercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all strings in a list are in uppercase, which is a good exercise for understanding list comprehension and string methods in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s=\"racecar\") -> str:\n    return s[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s=\"racecar\") -> str:\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given string is a palindrome and g returns the reverse of a default string. The assertion checks if the reverse of the default string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically reversing a string and checking for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(num=5) -> int:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    next_num = num + 1\n    while True:\n        if is_prime(next_num):\n            return next_num\n        next_num += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers and finding the next prime number after a given number.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(num=5) -> int:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    next_num = num + 1\n    while True:\n        if is_prime(next_num):\n            return next_num\n        next_num += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num) which checks if a given number is prime, and g(num) which finds the next prime number after the input number. The goal is to ensure that the output of f(g()) is True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to find the next prime number. It tests the student's knowledge of loops, conditionals, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total_sum: int) -> bool:\n    return total_sum % 2 == 0\n\ndef g():\n    import random\n    numbers = random.sample(range(-50, 50), 8)\n    return sum(num for num in numbers if num > 0 and num % 2 == 0)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the total sum of a list of numbers is even.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return len(d) == len(set(d.keys()))\ndef g():\n    import string\n    import random\n    keys = random.sample(string.ascii_lowercase, 5)\n    return {k: k.upper() for k in keys}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(total_sum: int) -> bool:\n    return total_sum % 2 == 0",
        "solution_func": "def g():\n    import random\n    numbers = random.sample(range(-50, 50), 8)\n    return sum(num for num in numbers if num > 0 and num % 2 == 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given total sum is even, and a function g that generates a list of random numbers, filters out positive even numbers, and calculates their sum. The assertion checks if f applied to the result of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of functions, conditionals, loops, and assertions in Python. It tests the student's understanding of function definitions, list comprehensions, and modulo operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(strings: list) -> bool:\n    return all(s.isalnum() for s in strings)\n\ndef g():\n    import random\n    import string\n    return [''.join(random.choices(string.ascii_letters + string.digits, k=4)) for _ in range(6)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation using the `isalnum()` method and generating random strings using the `random` and `string` modules in Python.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return len(d) == len(set(d.keys()))\ndef g():\n    import string\n    import random\n    keys = random.sample(string.ascii_lowercase, 5)\n    return {k: k.upper() for k in keys}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(strings: list) -> bool:\n    return all(s.isalnum() for s in strings)",
        "solution_func": "def g():\n    import random\n    import string\n    return [''.join(random.choices(string.ascii_letters + string.digits, k=4)) for _ in range(6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of random strings and checking if all strings in the list are alphanumeric."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the 'random' and 'string' modules in Python to generate random strings and then checking if all strings in the generated list are alphanumeric using the 'isalnum()' method.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list) -> bool:\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1) if arr[i] % 2 == 0)\n\ndef g():\n    arr = [5, 3, 8, 2, 10, 4, 7]\n    arr.sort()\n    return arr\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if all even numbers are in non-decreasing order.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(arr: list) -> bool:\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1) if arr[i] % 2 == 0)\ndef g():\n    arr = [5, 3, 8, 2, 10, 4, 7]\n    arr.sort()\n    return arr\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(arr: list) -> bool:\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1) if arr[i] % 2 == 0)",
        "solution_func": "def g():\n    arr = [5, 3, 8, 2, 10, 4, 7]\n    arr.sort()\n    return arr",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires sorting a list of numbers and checking if all even numbers are in non-decreasing order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of numbers and checking if all even numbers are in non-decreasing order. The solution function sorts the list and returns it.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    square_sums = [(x**2 + y**2) for x in nums for y in nums if x != y]\n    return any((num**0.5).is_integer() for num in square_sums)\n\ndef g(limit=20):\n    return list(range(1, limit))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 4:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=30):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    square_sums = [(x**2 + y**2) for x in nums for y in nums if x != y]\n    return any((num**0.5).is_integer() for num in square_sums)",
        "solution_func": "def g(limit=20):\n    return list(range(1, limit))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers, calculates the sum of squares of pairs of distinct elements in the list, and checks if any of these sums is a perfect square. The solution function g generates a list of integers up to a specified limit. The assertion checks if the solution function g satisfies the condition of the puzzle function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with list comprehensions, checking for perfect squares, and generating a list of integers. It tests the understanding of list operations and mathematical concepts in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in nums)\n\ndef g(limit=50):\n    primes = []\n    for num in range(2, limit):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Number Theory (factors, primes, etc.) and Mathematical Operations.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 4:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=30):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return all(is_prime(num) for num in nums)",
        "solution_func": "def g(limit=50):\n    primes = []\n    for num in range(2, limit):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if all numbers in a given list are prime, and a function g that generates a list of prime numbers up to a specified limit. The puzzle requires understanding of prime numbers and list comprehension in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a good understanding of prime numbers and list comprehension in Python, making it suitable for teaching Python programming concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    products = [x * y for x in nums for y in nums if x != y]\n    return any((num**0.5).is_integer() for num in products)\n\ndef g(limit=25):\n    return list(range(1, limit))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 40,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 4:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=30):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    products = [x * y for x in nums for y in nums if x != y]\n    return any((num**0.5).is_integer() for num in products)",
        "solution_func": "def g(limit=25):\n    return list(range(1, limit))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers, calculates the products of all pairs of distinct integers in the list, and checks if any of the square roots of these products are integers. The solution function g generates a list of integers up to a specified limit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves list comprehension, checking for integer square roots, and generating a list of integers. It can be used to teach concepts like list manipulation, comprehension, and mathematical operations in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g() -> str:\n    return \"racecar\"[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nimport sympy\ndef g():\n    return sympy.nextprime(7)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g() -> str:\n    return \"racecar\"[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle consists of two functions, f(word) which checks if a word is a palindrome, and g() which returns a specific word in reverse. The assert statement confirms that the solution g() returns a palindrome word.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return n % 2 == 0\n\ndef g() -> int:\n    return 4 * 2\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nimport sympy\ndef g():\n    return sympy.nextprime(7)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return n % 2 == 0",
        "solution_func": "def g() -> int:\n    return 4 * 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given integer is even, and a function g() that returns the result of 4 multiplied by 2. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves basic concepts like functions, integer operations, and boolean comparisons.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(grade: int) -> bool:\n    return grade >= 60\n\ndef g() -> int:\n    return 50 + 25\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nimport sympy\ndef g():\n    return sympy.nextprime(7)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(grade: int) -> bool:\n    return grade >= 60",
        "solution_func": "def g() -> int:\n    return 50 + 25",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(grade) checks if the grade is greater than or equal to 60, and g() returns the sum of 50 and 25. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function calls and comparisons in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_sum: int, numbers=[3, 2, 1, 5, 4]) -> bool:\n    assert max_sum == max(numbers[0] + numbers[3], numbers[1] + numbers[4])\n    return True\n\ndef g(numbers=[3, 2, 1, 5, 4]):\n    if len(numbers) <= 2:\n        return sum(numbers)\n    inclusive = numbers[0]\n    exclusive = 0\n    for num in numbers[1:]:\n        temp = inclusive\n        inclusive = max(inclusive, exclusive + num)\n        exclusive = temp\n    return max(inclusive, exclusive)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and dynamic programming.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, numbers=[1, 2, 3, 1]) -> bool:\n    assert max_sum == max(numbers[0] + numbers[2], numbers[1])\n    return True\n\ndef g(numbers=[1, 2, 3, 1]):\n    if len(numbers) <= 2:\n        return sum(numbers)\n    inclusive = numbers[0]\n    exclusive = 0\n    for num in numbers[1:]:\n        temp = inclusive\n        inclusive = max(inclusive, exclusive + num)\n        exclusive = temp\n    return max(inclusive, exclusive)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(max_sum: int, numbers=[3, 2, 1, 5, 4]) -> bool:\n    assert max_sum == max(numbers[0] + numbers[3], numbers[1] + numbers[4])\n    return True",
        "solution_func": "def g(numbers=[3, 2, 1, 5, 4]):\n    if len(numbers) <= 2:\n        return sum(numbers)\n    inclusive = numbers[0]\n    exclusive = 0\n    for num in numbers[1:]:\n        temp = inclusive\n        inclusive = max(inclusive, exclusive + num)\n        exclusive = temp\n    return max(inclusive, exclusive)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the maximum sum of two specific numbers in a list matches a given value, and g calculates the maximum sum of a list of numbers using a specific algorithm. The assert statement checks if g is a solution to f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is focused on understanding how to calculate the maximum sum of a list of numbers using a specific algorithm. It requires knowledge of list manipulation and dynamic programming concepts in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    num = 2\n    while True:\n        if is_prime(num):\n            return num\n        num += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a brute force search algorithm. It also includes concepts of mathematical operations and conditional logic.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    n = \"abba\"\n    while True:\n        if n == n[::-1]:\n            return n\n        n = chr(ord(n[-1]) + 1) + n[:-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    num = 2\n    while True:\n        if is_prime(num):\n            return num\n        num += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given number is prime, and a function g() that finds and returns the first prime number. The puzzle requires verifying that the output of g() satisfies the condition of f(n) being True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to check for primality. It also requires implementing a function to find the first prime number. The solution g() iterates through numbers to find the first prime number and then checks if it satisfies the condition of f(n) being True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    return all(arr[i] >= arr[i+1] for i in range(len(arr)-1))\n\ndef g():\n    arr = [10, 7, 5, 3, 1]\n    return arr\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list is sorted in non-increasing order. It requires understanding of list manipulation and comparison operations.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(arr: List[int]) -> bool:\n    return all(arr[i] >= arr[i+1] for i in range(len(arr)-1))",
        "solution_func": "def g():\n    arr = [10, 7, 5, 3, 1]\n    return arr",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function f checks if each element in the list is greater than or equal to the next element. The solution function g returns a specific list of integers. The puzzle is considered solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list is sorted in non-increasing order. The solution function returns a list that satisfies this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns the string 'radar', which is a palindrome. The assert statement confirms that the solution function g() correctly solves the challenge defined by function f(s).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(arr: List[int]) -> bool:\n    return all(num % 2 == 0 for num in arr)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking if all numbers in a list are even.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(arr: List[int]) -> bool:\n    return all(num % 2 == 0 for num in arr)",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are even, and a function g that returns a list of even numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and defining functions in Python. It is a simple puzzle suitable for teaching basic concepts in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g() -> list:\n    return [2, 4, 6, 8, 10]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and providing a list of even numbers as a solution.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g() -> list:\n    return [2, 4, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: list) that checks if all numbers in a list are even, and a function g() that returns a list of even numbers. The puzzle is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and defining functions in Python. It also tests the ability to check if a given solution satisfies the conditions of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns the string 'radar', which is a palindrome, and the assertion confirms that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return all(isinstance(key, str) for key in d.keys())\n\ndef g() -> dict:\n    return {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all keys in a dictionary are strings.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return all(isinstance(key, str) for key in d.keys())",
        "solution_func": "def g() -> dict:\n    return {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(d: dict) that checks if all keys in a dictionary are strings, and a function g() that returns a dictionary with string keys. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries and checking the types of keys in a dictionary. It tests the understanding of dictionary keys and type checking in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, elem=5) -> bool:\n    assert elem in lst, 'Hint: elem should be present in the list.'\n    return all(isinstance(i, int) for i in lst) and sum(lst) == 15\n\ndef g(start=1, end=6):\n    return list(range(start, end))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking conditions on the elements of the list.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(text: str, num=7) -> bool:\n    assert num > 0 and num % 2 == 1, 'Hint: num should be a positive odd number.'\n    return len(text) == num and text.isalpha() and text.islower() and text == ''.join(sorted(text))\n    \ndef g(num=7):\n    import string\n    return ''.join([char for char in string.ascii_lowercase[:num]])\n    \nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, elem=5) -> bool:\n    assert elem in lst, 'Hint: elem should be present in the list.'\n    return all(isinstance(i, int) for i in lst) and sum(lst) == 15",
        "solution_func": "def g(start=1, end=6):\n    return list(range(start, end))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list and a default element, and checks if the element is present in the list and if all elements in the list are integers summing up to 15. The solution function g generates a list of integers within a specified range. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, default arguments, list operations, type checking, and assertion testing in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1] and len(word) > 1\n\ndef g(word='radar'):\n    return word[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(text: str, num=7) -> bool:\n    assert num > 0 and num % 2 == 1, 'Hint: num should be a positive odd number.'\n    return len(text) == num and text.isalpha() and text.islower() and text == ''.join(sorted(text))\n    \ndef g(num=7):\n    import string\n    return ''.join([char for char in string.ascii_lowercase[:num]])\n    \nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1] and len(word) > 1",
        "solution_func": "def g(word='radar'):\n    return word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome (reads the same forwards and backwards) with a length greater than 1."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f to check if a word is a palindrome and has a length greater than 1, and a function g that returns the reverse of a default word 'radar'. The assertion tests if the solution g satisfies the condition of being a palindrome with a length greater than 1.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int, nums=[2, 4, 6, 8, 10], threshold=20) -> bool:\n    return total > threshold\ndef g(nums=[2, 4, 6, 8, 10], threshold=20):\n    return sum(num for num in nums if num % 2 == 0)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(total: int, nums=[2, 4, 6, 8, 10], threshold=20) -> bool:\n    return total > threshold",
        "solution_func": "def g(nums=[2, 4, 6, 8, 10], threshold=20):\n    return sum(num for num in nums if num % 2 == 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g that calculates the sum of even numbers in a list and then check if the sum is greater than a given threshold."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, conditional statements, and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(longest_path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(longest_path) - 1):\n        assert [longest_path[i], longest_path[i + 1]] in edges\n    assert longest_path[0] == 0\n    assert longest_path[-1] == max((max(edge) for edge in edges))\n    return True\n\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    longest_path = max(paths.values(), key=len)\n    return longest_path\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "Graph Theory (paths, edges, vertices)",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(longest_path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(longest_path) - 1):\n        assert [longest_path[i], longest_path[i + 1]] in edges\n    assert longest_path[0] == 0\n    assert longest_path[-1] == max((max(edge) for edge in edges))\n    return True",
        "solution_func": "def g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    longest_path = max(paths.values(), key=len)\n    return longest_path",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, f and g. Function f checks if a given longest path is valid based on a list of edges, while function g generates the longest path based on the edges provided. The puzzle tests whether function g generates a valid longest path according to function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to validate a longest path based on a list of edges and how to generate the longest path from the given edges. It requires knowledge of list manipulation, loops, and assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(optimal_route: List[str], locations=[('A', 'B')]) -> bool:\n    for i in range(len(optimal_route) - 1):\n        assert (optimal_route[i], optimal_route[i + 1]) in locations\n    assert optimal_route[0] == 'A'\n    assert optimal_route[-1] == 'B'\n    return True\n\ndef g(locations=[('A', 'B')]):\n    route = [loc[0] for loc in locations] + [locations[-1][1]]\n    return route\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves backtracking to find the optimal route from location A to location B.",
        "idx_generation": 41,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(optimal_route: List[str], locations=[('A', 'B')]) -> bool:\n    for i in range(len(optimal_route) - 1):\n        assert (optimal_route[i], optimal_route[i + 1]) in locations\n    assert optimal_route[0] == 'A'\n    assert optimal_route[-1] == 'B'\n    return True",
        "solution_func": "def g(locations=[('A', 'B')]):\n    route = [loc[0] for loc in locations] + [locations[-1][1]]\n    return route",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings representing a route and a list of tuples representing locations, and checks if the route is valid based on the locations. The function g generates a route based on the given locations. The puzzle checks if function f returns True when called with the route generated by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that validates a route based on given locations and how to generate a route using another function. The solution function g generates a route based on the given locations, and the puzzle checks if the validation function f returns True for this generated route.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(input_dict: dict) -> bool:\n    return len(input_dict) == len(set(input_dict.keys()))\n\ndef g():\n    import random\n    import string\n    keys = random.choices(string.ascii_lowercase, k=random.randint(5, 10))\n    values = [random.randint(1, 100) for _ in range(len(keys))]\n    return dict(zip(keys, values))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation, random generation of keys and values, and checking for uniqueness of keys in the dictionary.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "\n\ndef f(lst: list) -> bool:\n    return all(elem % 2 == 0 for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(elem % 2 == 0 for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(input_dict: dict) -> bool:\n    return len(input_dict) == len(set(input_dict.keys()))",
        "solution_func": "def g():\n    import random\n    import string\n    keys = random.choices(string.ascii_lowercase, k=random.randint(5, 10))\n    values = [random.randint(1, 100) for _ in range(len(keys))]\n    return dict(zip(keys, values))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random dictionary with unique keys and values, and then checking if the keys are unique in the dictionary."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves creating a dictionary with random keys and values, and then verifying if the keys are unique in the dictionary.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target_sum: int, values=[4, 7, 2, 9, 3]) -> bool:\n    assert target_sum == values[0] + values[-1]\n    return True\n\ndef g(values=[4, 7, 2, 9, 3]):\n    return values[0] + values[-1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations, Conditional Logic, and List Operations.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, numbers=[3, 2, 1, 5, 4]) -> bool:\n    assert max_sum == max(numbers[0] + numbers[3], numbers[1] + numbers[4])\n    return True\n\ndef g(numbers=[3, 2, 1, 5, 4]):\n    if len(numbers) <= 2:\n        return sum(numbers)\n    inclusive = numbers[0]\n    exclusive = 0\n    for num in numbers[1:]:\n        temp = inclusive\n        inclusive = max(inclusive, exclusive + num)\n        exclusive = temp\n    return max(inclusive, exclusive)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(target_sum: int, values=[4, 7, 2, 9, 3]) -> bool:\n    assert target_sum == values[0] + values[-1]\n    return True",
        "solution_func": "def g(values=[4, 7, 2, 9, 3]):\n    return values[0] + values[-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of the first and last elements in a list equals a given target sum. The solution function g returns the sum of the first and last elements in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is straightforward and involves basic list manipulation and comparison. It tests the understanding of list indexing and function return values.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_product: int, numbers=[2, 5, 3, 7, 4]) -> bool:\n    max_pair = max(numbers) * sorted(numbers)[-2]\n    assert max_product == max_pair\n    return True\n\ndef g(numbers=[2, 5, 3, 7, 4]):\n    sorted_nums = sorted(numbers)\n    return sorted_nums[-1] * sorted_nums[-2]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Sorting and Ordering, and Conditional Logic.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, numbers=[3, 2, 1, 5, 4]) -> bool:\n    assert max_sum == max(numbers[0] + numbers[3], numbers[1] + numbers[4])\n    return True\n\ndef g(numbers=[3, 2, 1, 5, 4]):\n    if len(numbers) <= 2:\n        return sum(numbers)\n    inclusive = numbers[0]\n    exclusive = 0\n    for num in numbers[1:]:\n        temp = inclusive\n        inclusive = max(inclusive, exclusive + num)\n        exclusive = temp\n    return max(inclusive, exclusive)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(max_product: int, numbers=[2, 5, 3, 7, 4]) -> bool:\n    max_pair = max(numbers) * sorted(numbers)[-2]\n    assert max_product == max_pair\n    return True",
        "solution_func": "def g(numbers=[2, 5, 3, 7, 4]):\n    sorted_nums = sorted(numbers)\n    return sorted_nums[-1] * sorted_nums[-2]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the maximum product of two numbers in a list and checking if it matches a given value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to find the maximum product of two numbers in a list and comparing it with a given value.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(concatenated: str, strings=['hello', 'world', 'python', 'code']) -> bool:\n    assert concatenated == strings[0] + strings[-1]\n    return True\n\ndef g(strings=['hello', 'world', 'python', 'code']):\n    return strings[0] + strings[-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, numbers=[3, 2, 1, 5, 4]) -> bool:\n    assert max_sum == max(numbers[0] + numbers[3], numbers[1] + numbers[4])\n    return True\n\ndef g(numbers=[3, 2, 1, 5, 4]):\n    if len(numbers) <= 2:\n        return sum(numbers)\n    inclusive = numbers[0]\n    exclusive = 0\n    for num in numbers[1:]:\n        temp = inclusive\n        inclusive = max(inclusive, exclusive + num)\n        exclusive = temp\n    return max(inclusive, exclusive)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(concatenated: str, strings=['hello', 'world', 'python', 'code']) -> bool:\n    assert concatenated == strings[0] + strings[-1]\n    return True",
        "solution_func": "def g(strings=['hello', 'world', 'python', 'code']):\n    return strings[0] + strings[-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if the concatenated first and last elements of a list of strings match a given input, and g returns the concatenation of the first and last elements of the list. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, list indexing, string concatenation, and function invocation. It tests the student's ability to define functions and use them correctly to satisfy a given condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # randomized approach\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise operations and randomization techniques.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4",
        "solution_func": "def g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # randomized approach\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a certain condition is met based on a list of integers, and a function g that uses a randomized approach to find a solution to meet that condition. The solution is considered correct if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations, randomization, and checking conditions based on a threshold. It requires understanding of bitwise manipulation and probability in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    s = \"radar\"\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    s = \"radar\"\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return sum(lst) > 10\n\ndef g():\n    import random\n    while True:\n        lst = [random.uniform(1, 5) for _ in range(random.randint(2, 5))]\n        if sum(lst) > 10:\n            return lst\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, random number generation, and conditional logic.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return len(lst) >= 3 and all(isinstance(x, int) for x in lst)\ndef g():\n    import random\n    while True:\n        lst = random.choices(range(1, 10), k=random.randint(3, 6))\n        if len(lst) >= 3 and all(isinstance(x, int) for x in lst):\n            return lst\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return sum(lst) > 10",
        "solution_func": "def g():\n    import random\n    while True:\n        lst = [random.uniform(1, 5) for _ in range(random.randint(2, 5))]\n        if sum(lst) > 10:\n            return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random list of numbers and checking if the sum of the list is greater than 10."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f(lst) that checks if the sum of a given list is greater than 10, and a function g() that generates random lists until the sum is greater than 10. The assert statement ensures that the solution g() satisfies the condition of f().",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return any(key % 6 == 0 for key in d.keys())\n\ndef g():\n    import random\n    while True:\n        d = {random.randint(2, 20)*2: random.randint(1, 20)*2 + 1 for _ in range(random.randint(2, 5))}\n        if any(key % 6 == 0 for key in d.keys()):\n            return d\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to dictionary manipulation, random number generation, and conditional logic.",
        "idx_generation": 42,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return len(lst) >= 3 and all(isinstance(x, int) for x in lst)\ndef g():\n    import random\n    while True:\n        lst = random.choices(range(1, 10), k=random.randint(3, 6))\n        if len(lst) >= 3 and all(isinstance(x, int) for x in lst):\n            return lst\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return any(key % 6 == 0 for key in d.keys())",
        "solution_func": "def g():\n    import random\n    while True:\n        d = {random.randint(2, 20)*2: random.randint(1, 20)*2 + 1 for _ in range(random.randint(2, 5))}\n        if any(key % 6 == 0 for key in d.keys()):\n            return d",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(d: dict) that checks if any key in a dictionary is divisible by 6, and a function g() that generates a random dictionary and returns it if any key is divisible by 6. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, list comprehensions, random number generation, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g(length=5, char='a'):\n    return char * length\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(length=5, char='a'):\n    return char * length",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(s: str) -> bool which checks if a given string is a palindrome, and g(length=5, char='a') which generates a string of a specified length with a specified character. The assertion checks if the output of g() satisfies the condition of being a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(strings: List[str]) -> bool:\n    return len(set(strings)) == len(strings)\ndef g(length=5):\n    return [str(i) * 2 for i in range(1, length + 1)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(strings: List[str]) -> bool:\n    return len(set(strings)) == len(strings)",
        "solution_func": "def g(length=5):\n    return [str(i) * 2 for i in range(1, length + 1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of strings contains only unique elements, and a function g that generates a list of strings with repeated digits based on a specified length. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, set operations, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, pattern='aba') -> bool:\n    return s == s[::-1]\ndef g(pattern='aba'):\n    return pattern + pattern[-2::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, pattern='aba') -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(pattern='aba'):\n    return pattern + pattern[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given string is a palindrome and g generates a specific pattern based on the input pattern. The puzzle tests whether the output of g satisfies the condition of f being True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, prime=9973) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g(prime=9973):\n    return prime\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm. It also includes default parameter values and assertion testing.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True"
        ],
        "problem_func": "def f(num: int, prime=9973) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime=9973):\n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(num) that checks if a given number is prime, and a function g() that returns a prime number. The puzzle tests whether the function f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for prime numbers and understanding function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str, character='a') -> bool:\n    return string.count(character) % 2 != 0\n\ndef g(num_occurrences=5, character='a') -> str:\n    return character * num_occurrences\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str, character='a') -> bool:\n    return string.count(character) % 2 != 0",
        "solution_func": "def g(num_occurrences=5, character='a') -> str:\n    return character * num_occurrences",
        "quality": [
            null
        ],
        "description": [
            "Given a function f that checks if the number of occurrences of a character in a string is odd, and a function g that generates a string with a specified number of occurrences of a character, the puzzle requires finding a character and number of occurrences that satisfy the condition in f when passed to g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how the count of occurrences of a character in a string can be used to determine if it is odd or even, and then finding the correct input values for g to satisfy the condition in f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str, separator=',') -> bool:\n    return separator in string\n\ndef g(length=10, separator=',') -> str:\n    import random\n    characters = [chr(random.randint(97, 122)) for _ in range(length)]\n    return separator.join(characters)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str, separator=',') -> bool:\n    return separator in string",
        "solution_func": "def g(length=10, separator=',') -> str:\n    import random\n    characters = [chr(random.randint(97, 122)) for _ in range(length)]\n    return separator.join(characters)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specified separator is present in a given string, and a function g that generates a random string of specified length with a specified separator. The puzzle requires g to generate a string and f to check if the separator is present in the generated string, returning True if it is."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of function parameters in Python. It tests the student's ability to generate random strings and check for a specific condition in the generated string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            product = 1\n            for num in p:\n                product *= num\n            if product % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, permutations and combinations, and conditional logic.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    total = sum(numbers)\n    return total % 2 == 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total = sum(c)\n            if total % 2 == 0:\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 != 0",
        "solution_func": "def g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            product = 1\n            for num in p:\n                product *= num\n            if product % 2 != 0:\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the product of a list of numbers is odd, and a function g that generates permutations of a given set of options and returns the first permutation whose product is odd."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the product of a list of numbers and how to generate permutations of a set of options in Python. The solution function g uses permutations to find a list of numbers whose product is odd.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\nfrom sympy import isprime\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    max_num = max(numbers)\n    return isprime(max_num)\n\ndef g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if isprime(max(c)):\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.), Importing Modules (Itertools, etc.)",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    total = sum(numbers)\n    return total % 2 == 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total = sum(c)\n            if total % 2 == 0:\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom sympy import isprime\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    max_num = max(numbers)\n    return isprime(max_num)",
        "solution_func": "def g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if isprime(max(c)):\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of numbers from a given list of options that includes the largest prime number in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand prime numbers, combinations, and how to find the largest prime number in a given set of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\n\ndef f(numbers: List[int], options=[1, 2, 3, 4, 5, 6]) -> bool:\n    average = sum(numbers) / len(numbers)\n    return average.is_integer()\n\ndef g(options=[1, 2, 3, 4, 5, 6]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if sum(c) % len(c) == 0:\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, iteration using itertools, and conditional logic.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    total = sum(numbers)\n    return total % 2 == 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total = sum(c)\n            if total % 2 == 0:\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], options=[1, 2, 3, 4, 5, 6]) -> bool:\n    average = sum(numbers) / len(numbers)\n    return average.is_integer()",
        "solution_func": "def g(options=[1, 2, 3, 4, 5, 6]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if sum(c) % len(c) == 0:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a subset of numbers from a given list of options such that the sum of the subset is divisible by the length of the subset."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to calculate the average of a list of numbers, check if it is an integer, and find a subset of numbers that meets a specific condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(strings, length_limit=10) -> bool:\n    for s in strings:\n        assert s == s[::-1] and len(s) <= length_limit\n    return True\n\ndef g(length_limit=10):\n    from itertools import permutations\n    for n in range(2, length_limit+1):\n        for p in permutations('abcde', n):\n            if all(s == s[::-1] and len(s) <= length_limit for s in p):\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and permutations and combinations.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(strings, length_limit=10) -> bool:\n    for s in strings:\n        assert s == s[::-1] and len(s) <= length_limit\n    return True",
        "solution_func": "def g(length_limit=10):\n    from itertools import permutations\n    for n in range(2, length_limit+1):\n        for p in permutations('abcde', n):\n            if all(s == s[::-1] and len(s) <= length_limit for s in p):\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a list of strings are palindromes and have a length less than or equal to a given limit, and g generates permutations of strings 'abcde' of varying lengths to find a list of palindromes within the length limit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for palindromes and generating permutations of strings to find palindromes within a length limit.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers, limit=100) -> bool:\n    for num in numbers:\n        if num < 2:\n            continue\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return True\n    return False\n\ndef g(limit=100):\n    from itertools import combinations\n    for n in range(2, limit+1):\n        for c in combinations(range(1, limit+1), n):\n            if any(is_prime(num) for num in c):\n                return list(c)\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime numbers, itertools module, and function implementation.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers, limit=100) -> bool:\n    for num in numbers:\n        if num < 2:\n            continue\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return True\n    return False",
        "solution_func": "def g(limit=100):\n    from itertools import combinations\n    for n in range(2, limit+1):\n        for c in combinations(range(1, limit+1), n):\n            if any(is_prime(num) for num in c):\n                return list(c)\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if there exists a prime number in a combination of numbers within a given limit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires finding a combination of numbers within a limit and checking if any of them are prime numbers.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(pattern, size=5) -> bool:\n    for i in range(len(pattern) - size + 1):\n        if all(pattern[i+j] for j in range(size)):\n            return True\n    return False\n\ndef g(size=5):\n    from itertools import product\n    for n in range(2, size+1):\n        for p in product([True, False], repeat=n):\n            if any(all(p[i+j] for j in range(size)) for i in range(n - size + 1)):\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Pattern Recognition, Importing Modules (Itertools, etc.), Brute Force Search",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(pattern, size=5) -> bool:\n    for i in range(len(pattern) - size + 1):\n        if all(pattern[i+j] for j in range(size)):\n            return True\n    return False",
        "solution_func": "def g(size=5):\n    from itertools import product\n    for n in range(2, size+1):\n        for p in product([True, False], repeat=n):\n            if any(all(p[i+j] for j in range(size)) for i in range(n - size + 1)):\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(pattern, size=5) and g(size=5), where f checks if a specific pattern exists in a sequence and g generates all possible patterns of a given size. The goal is to find a pattern in the generated patterns that satisfies the condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves iterating over patterns and sequences to check for a specific condition. It requires understanding of loops, conditions, and itertools in Python. It can be used to teach algorithmic thinking and problem-solving skills in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(combinations: List[str], char_list=['x', 'y', 'z'], length=2) -> bool:\n    return len(combinations) == len(set(combinations)) >= len(char_list) and all((len(comb) == length for comb in combinations))\n\ndef g(char_list=['x', 'y', 'z'], length=2):\n    from itertools import combinations\n    return [''.join(comb) for comb in combinations(char_list, length)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves permutations and combinations to generate unique combinations of characters from a given list. It also includes the use of itertools module for generating combinations. The solution function uses itertools.combinations to generate combinations and checks if the generated combinations satisfy the conditions specified in the puzzle function.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(permutations: List[str], char_list=['a', 'b', 'c'], length=3) -> bool:\n    return len(permutations) == len(set(permutations)) >= len(char_list) and all((len(perm) == length for perm in permutations))\ndef g(char_list=['a', 'b', 'c'], length=3):\n    from itertools import permutations\n    return [''.join(perm) for perm in permutations(char_list, length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(combinations: List[str], char_list=['x', 'y', 'z'], length=2) -> bool:\n    return len(combinations) == len(set(combinations)) >= len(char_list) and all((len(comb) == length for comb in combinations))",
        "solution_func": "def g(char_list=['x', 'y', 'z'], length=2):\n    from itertools import combinations\n    return [''.join(comb) for comb in combinations(char_list, length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and checks if the list contains unique elements, has a length greater than or equal to the length of a given character list, and each string in the list has a specific length. The solution function g generates combinations of characters from a given character list with a specified length and returns them as a list of strings. The assertion checks if the solution function g satisfies the conditions of the puzzle function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for unique elements, length comparison, and string length in a list of strings. The solution function generates combinations of characters and ensures they meet the conditions of the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(subsets: List[List[int]], num_list=[1, 2, 3], target=4) -> bool:\n    return any(sum(subset) == target for subset in subsets)\n\ndef g(num_list=[1, 2, 3], target=4):\n    from itertools import combinations\n    return [list(comb) for r in range(len(num_list)+1) for comb in combinations(num_list, r)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, Itertools, and Combinations.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(permutations: List[str], char_list=['a', 'b', 'c'], length=3) -> bool:\n    return len(permutations) == len(set(permutations)) >= len(char_list) and all((len(perm) == length for perm in permutations))\ndef g(char_list=['a', 'b', 'c'], length=3):\n    from itertools import permutations\n    return [''.join(perm) for perm in permutations(char_list, length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(subsets: List[List[int]], num_list=[1, 2, 3], target=4) -> bool:\n    return any(sum(subset) == target for subset in subsets)",
        "solution_func": "def g(num_list=[1, 2, 3], target=4):\n    from itertools import combinations\n    return [list(comb) for r in range(len(num_list)+1) for comb in combinations(num_list, r)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of lists of integers, a target integer, and a default list of integers. The function checks if there exists a subset in the input list of lists whose sum equals the target integer. The solution function g generates all possible subsets of the default list of integers using combinations and returns them as a list of lists."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, and the use of itertools combinations in Python. It also tests the understanding of list comprehension and the any() function for checking conditions in a list comprehension.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\n\ndef f(words: List[str], target='python') -> bool:\n    assert all([len(word) > 0 for word in words])\n    sorted_words = sorted(words)\n    return target in sorted_words\n\ndef g(target='python'):\n    return ['java', 'c', 'python', 'javascript', 'ruby', 'php', 'html', target]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting operations.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], target='python') -> bool:\n    assert all([len(word) > 0 for word in words])\n    sorted_words = sorted(words)\n    return target in sorted_words",
        "solution_func": "def g(target='python'):\n    return ['java', 'c', 'python', 'javascript', 'ruby', 'php', 'html', target]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function f that takes a list of words and a target word, sorts the list of words, and checks if the target word is in the sorted list. The solution function g generates a list of programming languages with the target word included, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, sorting, and checking for the presence of a target word. It tests the student's understanding of list manipulation and boolean logic.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\n\ndef f(numbers: List[float], threshold=1000.0) -> bool:\n    assert all([num >= 0 for num in numbers])\n    return sum(numbers) > threshold\n\ndef g(threshold=1000.0):\n    return [5.5, 10.2, 15.3, 20.1, 25.7, threshold]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[float], threshold=1000.0) -> bool:\n    assert all([num >= 0 for num in numbers])\n    return sum(numbers) > threshold",
        "solution_func": "def g(threshold=1000.0):\n    return [5.5, 10.2, 15.3, 20.1, 25.7, threshold]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define a function f that takes a list of numbers and a threshold value, and checks if the sum of the numbers in the list is greater than the threshold. The solution function g generates a list of numbers and the threshold value, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, function parameters, and comparison operations in Python. It also tests the students' ability to define functions and use them in assertions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List, Tuple\n\ndef f(data: List[Tuple[int, str]], target=(7, 'hello')) -> bool:\n    assert all([t[0] > 0 for t in data])\n    return target in data\n\ndef g(target=(7, 'hello')):\n    return [(5, 'world'), (3, 'python'), (7, 'hello'), (10, 'java'), target]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, tuple comparison, and assertion checking.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(data: List[Tuple[int, str]], target=(7, 'hello')) -> bool:\n    assert all([t[0] > 0 for t in data])\n    return target in data",
        "solution_func": "def g(target=(7, 'hello')):\n    return [(5, 'world'), (3, 'python'), (7, 'hello'), (10, 'java'), target]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function f that takes a list of tuples and a target tuple as input, and checks if the target tuple is present in the list. The function g generates a list of tuples and returns it. The puzzle tests whether the function f correctly identifies the target tuple in the generated list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, tuple comparison, and function implementation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \n\ndef f(sorted_list: List[int], original_list=[9, 2, 5, 1, 7]) -> bool:\n    return sorted_list == sorted(original_list)\n\ndef g(original_list=[9, 2, 5, 1, 7]) -> List[int]:\n    def custom_sort(arr):\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n        return arr\n\n    return custom_sort(original_list)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \n\ndef f(sorted_list: List[int], original_list=[9, 2, 5, 1, 7]) -> bool:\n    return sorted_list == sorted(original_list)",
        "solution_func": "def g(original_list=[9, 2, 5, 1, 7]) -> List[int]:\n    def custom_sort(arr):\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n        return arr\n\n    return custom_sort(original_list)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a custom sorting algorithm to sort a list of integers and then check if the sorted list matches a predefined list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves implementing a custom sorting function to sort a list of integers and then checking if the sorted list matches a predefined list. The solution function sorts the original list using the custom sorting algorithm and returns the sorted list. The puzzle function checks if the sorted list matches the predefined list and returns True if they are equal.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \n\ndef f(sum_even: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    return sum_even == sum(num for num in numbers if num % 2 == 0)\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> int:\n    return sum(num for num in numbers if num % 2 == 0)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the sum of even numbers in a list equals a given value.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \n\ndef f(sum_even: int, numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> bool:\n    return sum_even == sum(num for num in numbers if num % 2 == 0)",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]) -> int:\n    return sum(num for num in numbers if num % 2 == 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python. The first function checks if the sum of even numbers in a list is equal to a given value. The second function calculates the sum of even numbers in a list. The assertion statement checks if the first function returns True when called with the result of the second function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic concepts of functions, list comprehension, and conditional statements in Python. It tests the understanding of function composition and conditional logic in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \n\ndef f(max_number: int, numbers=[17, 42, 8, 31, 55, 12]) -> bool:\n    return max_number == max(numbers)\n\ndef g(numbers=[17, 42, 8, 31, 55, 12]) -> int:\n    return max(numbers)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding the maximum number in a list and checking if it matches a given number. This relates to topics such as Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \n\ndef f(max_number: int, numbers=[17, 42, 8, 31, 55, 12]) -> bool:\n    return max_number == max(numbers)",
        "solution_func": "def g(numbers=[17, 42, 8, 31, 55, 12]) -> int:\n    return max(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the maximum number in a list and checking if it matches a given input."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to find the maximum number in a list and comparing it with a given input.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int) -> bool:\n    return total % 2 == 0\n\ndef g():\n    import random\n\n    numbers = [random.randint(1, 100) for _ in range(5)]\n    return sum(num for num in numbers if num % 2 == 0)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic. The function f checks if the total sum is even, and the function g generates a list of random numbers and calculates the sum of even numbers in the list.",
        "idx_generation": 43,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return len(d) == len(set(d.keys()))\ndef g():\n    import string\n    import random\n    keys = random.sample(string.ascii_lowercase, 5)\n    return {k: k.upper() for k in keys}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(total: int) -> bool:\n    return total % 2 == 0",
        "solution_func": "def g():\n    import random\n\n    numbers = [random.randint(1, 100) for _ in range(5)]\n    return sum(num for num in numbers if num % 2 == 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given total is even, and a function g that generates a list of random numbers, sums the even numbers in the list, and returns the sum. The assert statement checks if f applied to the result of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of functions, conditionals, loops, and assertions in Python. It tests the understanding of checking even numbers and summing elements in a list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string) -> bool:\n    return string == string[::-1]\n\ndef g(input_string=\"racecar\"):\n    reverse_string = input_string[::-1]\n    return [reverse_string]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(pattern, size=5) -> bool:\n    for i in range(len(pattern) - size + 1):\n        if all(pattern[i+j] for j in range(size)):\n            return True\n    return False\n\ndef g(size=5):\n    from itertools import product\n    for n in range(2, size+1):\n        for p in product([True, False], repeat=n):\n            if any(all(p[i+j] for j in range(size)) for i in range(n - size + 1)):\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g(input_string=\"racecar\"):\n    reverse_string = input_string[::-1]\n    return [reverse_string]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given input string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a string is a palindrome, and a function g that returns the reverse of a default input string. The assertion tests if the reverse of the default input string is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return string == string[::-1]\n\ndef g() -> str:\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g() -> str:\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given string is a palindrome by comparing it with its reverse. The solution function g returns the string 'level', which is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(x: List[int], n=200, s=40000000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 200, s = 40000000):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 2\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, Conditional Logic, Set Operations, and Mathematical Operations.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(x: List[int], n=200, s=40000000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n = 200, s = 40000000):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 2\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of integers meets certain conditions, and a function g that generates a list of integers to satisfy those conditions. The goal is to find a list of integers that meets the conditions specified in function f using function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the length, sum, and uniqueness of a list of integers in function f, and generating a list of integers in function g to satisfy those conditions. The solution function g iteratively generates a list of integers to meet the conditions specified in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(x: List[int], n=180, s=34200000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 180, s = 34200000):\n    a = 2\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 3\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking conditions based on the sum and uniqueness of elements in the list.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(x: List[int], n=180, s=34200000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n = 180, s = 34200000):\n    a = 2\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 3\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of integers that satisfies specific conditions such as length, sum, and uniqueness of elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of integers that meets certain criteria and then checking if the generated list satisfies the conditions defined in the function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(x: List[int], n=220, s=40040000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 220, s = 40040000):\n    a = 3\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 4\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(x: List[int], n=220, s=40040000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n = 220, s = 40040000):\n    a = 3\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 4\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of integers meets certain conditions, and a function g that generates a list of integers to satisfy those conditions. The goal is to ensure the sum and length of the list meet specific criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the length, sum, and uniqueness of elements in a list, and generating a list that satisfies these conditions. The solution function g generates a list of integers to meet the specified sum and length requirements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    \"\"\"\n    This solution returns a hardcoded palindrome string.\n    \"\"\"\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, result=120) -> bool:\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n    return factorial == result\n\ndef g(result=120):\n    \"\"\"\n    This solution calculates the factorial of a given number.\n    \"\"\"\n    return 5\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    \"\"\"\n    This solution returns a hardcoded palindrome string.\n    \"\"\"\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, provide a solution g() that returns a hardcoded palindrome string and assert that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given solution returns a hardcoded palindrome string and verifying that the function f(s) correctly identifies it as a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    \"\"\"\n    This solution returns a hardcoded prime number.\n    \"\"\"\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime and returning a hardcoded prime number.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, result=120) -> bool:\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n    return factorial == result\n\ndef g(result=120):\n    \"\"\"\n    This solution calculates the factorial of a given number.\n    \"\"\"\n    return 5\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    \"\"\"\n    This solution returns a hardcoded prime number.\n    \"\"\"\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number, and a function g() that returns a hardcoded prime number. The assertion checks if the output of g() satisfies the condition of being a prime number according to f(num)."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to check for primality. The solution provides a hardcoded prime number to test the primality check function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a string is a palindrome.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. The solution function g() returns the string 'racecar', which is a palindrome. The assert statement confirms that the solution function g() satisfies the condition of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)\n\ndef g():\n    return [5, 4, 3, 2, 1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in reverse order and checking if it is sorted correctly. This relates to the topic of Sorting and Ordering.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)",
        "solution_func": "def g():\n    return [5, 4, 3, 2, 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list is sorted in descending order, and a function g() that returns a specific list. The puzzle tests whether the list returned by g() is sorted in descending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting in Python and implementing a function to check if a list is sorted in descending order. It also requires defining a function to return a specific list for testing purposes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) as it checks if a given number is a prime number or not.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function f(num) that checks if a given number is a prime number. The student needs to ensure that the function returns True if the number is prime and False otherwise. The solution function g() returns the number 17, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is prime and ensuring that the solution function returns a specific number (17) for the check to pass.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations to check for uniqueness of elements in a list.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list contains only unique elements by comparing the length of the list with the length of a set created from the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the concept of sets in Python and how to check for uniqueness in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, strings=['radar', 'level', 'rotor', 'madam']) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"madam\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, strings=['radar', 'level', 'rotor', 'madam']) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"madam\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks if a given string is a palindrome by comparing it to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks if a string is a palindrome and then providing a string to test this function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int, nums=[4, 9, 16, 25, 36, 49, 64, 81, 100]) -> bool:\n    return n in nums\ndef g():\n    return 36\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a given number is present in a predefined list of perfect squares.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int, nums=[4, 9, 16, 25, 36, 49, 64, 81, 100]) -> bool:\n    return n in nums",
        "solution_func": "def g():\n    return 36",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given number is present in a predefined list of perfect squares."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given number is present in a list of perfect squares. The solution function g returns the number 36, and the assertion checks if f(36) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(dictionary: dict, value=42) -> bool:\n    return any(val == value for val in dictionary.values())\n\ndef g(value=42):\n    # generate random dictionaries\n    while True:\n        dictionary = {key: random.randint(1, 100) for key in range(1, random.randint(1, 10))}\n        if any(val == value for val in dictionary.values()):\n            return dictionary\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and random number generation.",
        "idx_generation": 45,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(string: str, sub='ab') -> bool:\n    assert len(sub) > 1 and sub in string and len(set(sub)) == len(sub)\n    return all(sub in string[i:i+len(sub)] for i in range(len(string) - len(sub) + 1))\ndef g(sub='ab'):\n    # brute force\n    string = 'abracadabra'\n\n    from itertools import permutations\n    for p in permutations(sub):\n        if all(char in sub for char in p) and len(p) == len(set(p)):\n            return ''.join(p)\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(dictionary: dict, value=42) -> bool:\n    return any(val == value for val in dictionary.values())",
        "solution_func": "def g(value=42):\n    # generate random dictionaries\n    while True:\n        dictionary = {key: random.randint(1, 100) for key in range(1, random.randint(1, 10))}\n        if any(val == value for val in dictionary.values()):\n            return dictionary",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions: f(dictionary: dict, value=42) -> bool and g(value=42). Function f checks if a given value exists in the values of a dictionary. Function g generates random dictionaries and returns one if it contains the specified value. The assert statement checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, random number generation, and boolean checks. It tests the understanding of dictionary comprehension, value comparison, and function return values in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median == target\n\ndef g(target=5):\n    return [3, 4, 5, 6, 7]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that returns True if the word is a palindrome (reads the same forwards and backwards), and a function g() that returns the word 'racecar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(number: int, target=120) -> bool:\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n\n    return factorial(number) == target\n\ndef g(target=120):\n    return 5\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and recursion.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median == target\n\ndef g(target=5):\n    return [3, 4, 5, 6, 7]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(number: int, target=120) -> bool:\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n\n    return factorial(number) == target",
        "solution_func": "def g(target=120):\n    return 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that calculates the factorial of a given number and checks if it is equal to a target value. The solution function simply returns a fixed value. The assertion checks if the solution function satisfies the condition set by the puzzle function."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle involves understanding factorial calculation and function comparison. The solution function returns a fixed value, which may not be obvious to students at first glance. The assertion tests if the solution function meets the criteria set by the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(seq: List[int], prime_sum=False) -> bool:\n    if len(seq) < 1:\n        return False\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return all(is_prime(num) for num in seq) and is_prime(sum(seq)) if prime_sum else True\n\ndef g(prime_sum=False):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    return primes if not prime_sum else sum(primes)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers in a list and the sum of the list elements. It also includes a lambda function for prime number checking and a list comprehension. The solution generates a list of prime numbers and calculates the sum of the list elements based on the input parameter. The assert statement checks if the solution satisfies the puzzle condition.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(seq: List[int], nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]) -> bool:\n    if len(seq) < 3:\n        return False\n    return all(a + b == c for a, b, c in zip(seq, seq[1:], seq[2:])) and all(num in nums for num in seq)\n\ndef g(nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]):\n    fib_seq = [0, 1]\n    while len(fib_seq) < len(nums):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(seq: List[int], prime_sum=False) -> bool:\n    if len(seq) < 1:\n        return False\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return all(is_prime(num) for num in seq) and is_prime(sum(seq)) if prime_sum else True",
        "solution_func": "def g(prime_sum=False):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    return primes if not prime_sum else sum(primes)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers contains only prime numbers and if the sum of the list is also a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to implement a function that checks if a list of numbers contains only prime numbers and if the sum of the list is also a prime number. The solution function generates a list of prime numbers and optionally calculates the sum of those primes. The assertion at the end checks if the solution function satisfies the conditions of the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], square_char_count=False) -> bool:\n    if len(strings) < 1:\n        return False\n    is_palindrome = lambda s: s == s[::-1]\n    char_count = sum(len(s) for s in strings)\n    return all(is_palindrome(s) for s in strings) and (char_count**0.5).is_integer() if square_char_count else True\n\ndef g(square_char_count=False):\n    palindromes = ['radar', 'level', 'deified', 'madam']\n    return palindromes if not square_char_count else sum(len(p) for p in palindromes)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(seq: List[int], nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]) -> bool:\n    if len(seq) < 3:\n        return False\n    return all(a + b == c for a, b, c in zip(seq, seq[1:], seq[2:])) and all(num in nums for num in seq)\n\ndef g(nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]):\n    fib_seq = [0, 1]\n    while len(fib_seq) < len(nums):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], square_char_count=False) -> bool:\n    if len(strings) < 1:\n        return False\n    is_palindrome = lambda s: s == s[::-1]\n    char_count = sum(len(s) for s in strings)\n    return all(is_palindrome(s) for s in strings) and (char_count**0.5).is_integer() if square_char_count else True",
        "solution_func": "def g(square_char_count=False):\n    palindromes = ['radar', 'level', 'deified', 'madam']\n    return palindromes if not square_char_count else sum(len(p) for p in palindromes)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of strings contains only palindromes and the total character count of the strings is a perfect square if specified. The solution function returns a list of palindromes and optionally the sum of character counts if square_char_count is True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is focused on checking for palindromes in a list of strings and performing a mathematical check on the character count. It requires understanding of list comprehension, lambda functions, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int]], prime_tuple_sum=False) -> bool:\n    if len(tuples) < 1:\n        return False\n    unique_elements = lambda t: len(set(t)) == len(t)\n    tuple_sum = sum(len(t) for t in tuples)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return all(unique_elements(t) for t in tuples) and is_prime(tuple_sum) if prime_tuple_sum else True\n\ndef g(prime_tuple_sum=False):\n    tuples = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\n    return tuples if not prime_tuple_sum else sum(len(t) for t in tuples)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Mathematical Operations, Conditional Logic, List Operations, and Number Theory (primes).",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(seq: List[int], nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]) -> bool:\n    if len(seq) < 3:\n        return False\n    return all(a + b == c for a, b, c in zip(seq, seq[1:], seq[2:])) and all(num in nums for num in seq)\n\ndef g(nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]):\n    fib_seq = [0, 1]\n    while len(fib_seq) < len(nums):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int]], prime_tuple_sum=False) -> bool:\n    if len(tuples) < 1:\n        return False\n    unique_elements = lambda t: len(set(t)) == len(t)\n    tuple_sum = sum(len(t) for t in tuples)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return all(unique_elements(t) for t in tuples) and is_prime(tuple_sum) if prime_tuple_sum else True",
        "solution_func": "def g(prime_tuple_sum=False):\n    tuples = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\n    return tuples if not prime_tuple_sum else sum(len(t) for t in tuples)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the sum of lengths of tuples in a list is a prime number, with an option to include this sum as a prime number in the check."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of lambda functions, list comprehension, checking for unique elements in tuples, checking for prime numbers, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: tuple) -> bool:\n    return sum(n) % 5 == 3 and (n[0] + n[1]) % 2 == 0\n\ndef g():\n    m = (1, 2)\n    while True:\n        n = m\n        if sum(n) % 5 == 3 and (n[0] + n[1]) % 2 == 0:\n            return m\n        m = (m[0] + 2, m[1] + 3)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(7):\n        assert n % 7 == 6\n        n -= 6 + (n - 6) // 7\n    return n > 0 and n % 7 == 6\n\ndef g():\n    m = 6\n    while True:\n        n = m\n        for i in range(7):\n            if n % 7 != 6:\n                break\n            n -= 6 + (n - 6) // 7\n        if n > 0 and n % 7 == 6:\n            return m\n        m += 7\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: tuple) -> bool:\n    return sum(n) % 5 == 3 and (n[0] + n[1]) % 2 == 0",
        "solution_func": "def g():\n    m = (1, 2)\n    while True:\n        n = m\n        if sum(n) % 5 == 3 and (n[0] + n[1]) % 2 == 0:\n            return m\n        m = (m[0] + 2, m[1] + 3)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of a tuple is divisible by 5 and if the sum of the tuple elements is even. The solution function g iterates through tuples, starting from (1, 2), and returns the first tuple that satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic arithmetic operations and looping in Python. It requires understanding of tuple manipulation, modulo operation, and conditional statements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: str) -> bool:\n    return len(n) > 5 and n.islower() and n.isalpha()\n\ndef g():\n    m = 'abcdef'\n    while True:\n        if len(m) > 5 and m.islower() and m.isalpha():\n            return m\n        m = chr(ord(m[-1]) + 1) + m[:-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Itertools",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(7):\n        assert n % 7 == 6\n        n -= 6 + (n - 6) // 7\n    return n > 0 and n % 7 == 6\n\ndef g():\n    m = 6\n    while True:\n        n = m\n        for i in range(7):\n            if n % 7 != 6:\n                break\n            n -= 6 + (n - 6) // 7\n        if n > 0 and n % 7 == 6:\n            return m\n        m += 7\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: str) -> bool:\n    return len(n) > 5 and n.islower() and n.isalpha()",
        "solution_func": "def g():\n    m = 'abcdef'\n    while True:\n        if len(m) > 5 and m.islower() and m.isalpha():\n            return m\n        m = chr(ord(m[-1]) + 1) + m[:-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a string 'm' that is longer than 5 characters, all lowercase, and consists only of alphabetic characters by incrementing the characters in a specific pattern."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a string 'm' by incrementing characters in a specific pattern until the conditions of length, lowercase, and alphabetic characters are met. The solution function 'g' returns the generated string 'm' and the puzzle function 'f' checks if the conditions are satisfied.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: list) -> bool:\n    return sum(n) > 10 and all(x > 0 for x in n)\n\ndef g():\n    m = [1.5, 2.5]\n    while True:\n        if sum(m) > 10 and all(x > 0 for x in m):\n            return m\n        m = [x + 1 for x in m]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the sum of elements in a list is greater than 10 and all elements are positive. The solution uses a while loop to increment the elements of a list until the condition is met.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(7):\n        assert n % 7 == 6\n        n -= 6 + (n - 6) // 7\n    return n > 0 and n % 7 == 6\n\ndef g():\n    m = 6\n    while True:\n        n = m\n        for i in range(7):\n            if n % 7 != 6:\n                break\n            n -= 6 + (n - 6) // 7\n        if n > 0 and n % 7 == 6:\n            return m\n        m += 7\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: list) -> bool:\n    return sum(n) > 10 and all(x > 0 for x in n)",
        "solution_func": "def g():\n    m = [1.5, 2.5]\n    while True:\n        if sum(m) > 10 and all(x > 0 for x in m):\n            return m\n        m = [x + 1 for x in m]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of numbers that satisfies the conditions of having a sum greater than 10 and all elements being greater than 0."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, condition checking, and iteration in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\ndef f(subsets: List[List[int]], target_sum=5) -> bool:\n    return any(sum(subset) == target_sum for subset in subsets)\ndef g(int_list=[1, 2, 3]):\n    def powerset(s):\n        result = [[]]\n        for elem in s:\n            result += [x + [elem] for x in result]\n        return result\n\n    return [subset for subset in powerset(int_list) if subset != []]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, Recursion, and Brute Force Search.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(permutations: List[str], char_list=['a', 'b', 'c'], length=3) -> bool:\n    return len(permutations) == len(set(permutations)) >= len(char_list) and all((len(perm) == length for perm in permutations))\ndef g(char_list=['a', 'b', 'c'], length=3):\n    from itertools import permutations\n    return [''.join(perm) for perm in permutations(char_list, length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(subsets: List[List[int]], target_sum=5) -> bool:\n    return any(sum(subset) == target_sum for subset in subsets)",
        "solution_func": "def g(int_list=[1, 2, 3]):\n    def powerset(s):\n        result = [[]]\n        for elem in s:\n            result += [x + [elem] for x in result]\n        return result\n\n    return [subset for subset in powerset(int_list) if subset != []]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of lists of integers and a target sum, and returns True if any subset of the lists sums up to the target sum. The solution function g generates all possible subsets of a given list of integers using the powerset algorithm and checks if any subset sums up to the target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the powerset algorithm, and checking for subset sums. It provides a good exercise in algorithmic thinking and list manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return len(set(strings)) == len(strings)\n\ndef g(n: int = 5) -> List[str]:\n    import random\n    import string\n    return [''.join(random.choice(string.ascii_letters) for _ in range(5)) for _ in range(n)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations, Importing Modules (Itertools, etc.)",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return len(set(tuples)) == len(tuples)\n\ndef g(n: int = 5) -> List[Tuple[int, int]]:\n    import random\n    return list(set((random.randint(1, 10), random.randint(1, 10)) for _ in range(n)))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return len(set(strings)) == len(strings)",
        "solution_func": "def g(n: int = 5) -> List[str]:\n    import random\n    import string\n    return [''.join(random.choice(string.ascii_letters) for _ in range(5)) for _ in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random strings and check if all the strings in the list are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the random and string modules in Python to generate a list of random strings and then checking if all the strings in the list are unique using a set comparison.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(floats: List[float], threshold: float = 0.5) -> bool:\n    return sum(floats) / len(floats) > threshold\n\ndef g(n: int = 5) -> List[float]:\n    import random\n    return [random.uniform(0, 1) for _ in range(n)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list operations, and conditional logic.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return len(set(tuples)) == len(tuples)\n\ndef g(n: int = 5) -> List[Tuple[int, int]]:\n    import random\n    return list(set((random.randint(1, 10), random.randint(1, 10)) for _ in range(n)))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(floats: List[float], threshold: float = 0.5) -> bool:\n    return sum(floats) / len(floats) > threshold",
        "solution_func": "def g(n: int = 5) -> List[float]:\n    import random\n    return [random.uniform(0, 1) for _ in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python. The first function f takes a list of floats and a threshold value, and returns True if the average of the floats in the list is greater than the threshold. The second function g generates a list of random floats between 0 and 1. The puzzle asserts that applying function f to the output of function g should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic concepts of functions, lists, random number generation, and comparison operations in Python. It tests the student's understanding of function composition and list manipulation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(x: List[int], a=10, s=2, e=100) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)]) and all([num % 2 == 0 for num in x])\ndef g(a=10, s=2, e=100):\n    return list(range(a, e + 1, s))\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(x: List[int], a=10, s=2, e=100) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)]) and all([num % 2 == 0 for num in x])",
        "solution_func": "def g(a=10, s=2, e=100):\n    return list(range(a, e + 1, s))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and checks if the list meets certain conditions, and a function g that generates a list of integers based on given parameters. The puzzle tests the implementation of f and g to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, list comprehension, and function implementation in Python. It also tests the ability to define functions with default parameters and use assert statements for testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], diff=2) -> bool:\n    return all(numbers[i] - numbers[i-1] == diff for i in range(1, len(numbers)))\n\ndef g(start=1, diff=2, length=5):\n    return [start + i * diff for i in range(length)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], s='pythonpuzzle', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='pythonpuzzle', target=''):\n    def find_indices(s, target, i, j, k):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n        if k < len(s):\n            return find_indices(s, target, i, j, k+1)\n        if j < len(s):\n            return find_indices(s, target, i, j+1, 1)\n        if i < len(s):\n            return find_indices(s, target, i+1, 0, 1)\n        return []\n    return find_indices(s, target, 0, 0, 1)\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], diff=2) -> bool:\n    return all(numbers[i] - numbers[i-1] == diff for i in range(1, len(numbers)))",
        "solution_func": "def g(start=1, diff=2, length=5):\n    return [start + i * diff for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the elements in a list follow a specific arithmetic progression with a given difference, and defining a function g that generates a list based on a starting value, difference, and length. The puzzle tests whether function f correctly identifies the arithmetic progression generated by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, range function, and arithmetic progression. It tests the student's ability to define functions, work with lists, and understand how to check for a specific pattern in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] >= numbers[i+1] for i in range(len(numbers)-1))\n\ndef g(start=10, step=2, length=5):\n    return [start - i * step for i in range(length)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and comparison operations.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], s='pythonpuzzle', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='pythonpuzzle', target=''):\n    def find_indices(s, target, i, j, k):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n        if k < len(s):\n            return find_indices(s, target, i, j, k+1)\n        if j < len(s):\n            return find_indices(s, target, i, j+1, 1)\n        if i < len(s):\n            return find_indices(s, target, i+1, 0, 1)\n        return []\n    return find_indices(s, target, 0, 0, 1)\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] >= numbers[i+1] for i in range(len(numbers)-1))",
        "solution_func": "def g(start=10, step=2, length=5):\n    return [start - i * step for i in range(length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers is in non-increasing order, and a function g that generates a list of numbers in a specific pattern. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension, range function, and the all() function in Python. It also requires understanding of function parameters and default values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(input_string: str, default_char='a') -> bool:\n    return default_char in input_string\n\ndef g(default_char='a') -> str:\n    return default_char * 3\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(subsets: List[List[int]], num_list=[1, 2, 3], target=4) -> bool:\n    return any(sum(subset) == target for subset in subsets)\n\ndef g(num_list=[1, 2, 3], target=4):\n    from itertools import combinations\n    return [list(comb) for r in range(len(num_list)+1) for comb in combinations(num_list, r)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(input_string: str, default_char='a') -> bool:\n    return default_char in input_string",
        "solution_func": "def g(default_char='a') -> str:\n    return default_char * 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f takes an input string and a default character, and checks if the default character is in the input string. g takes a default character and returns that character repeated three times. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming as it involves string manipulation and function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\ndef f(strings: List[str], default_string='abc') -> bool:\n    return any(s.startswith(default_string) for s in strings)\n\ndef g(default_string='abc') -> List[str]:\n    return [default_string + str(i) for i in range(1, 4)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation and List operations are used in the puzzle.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(subsets: List[List[int]], num_list=[1, 2, 3], target=4) -> bool:\n    return any(sum(subset) == target for subset in subsets)\n\ndef g(num_list=[1, 2, 3], target=4):\n    from itertools import combinations\n    return [list(comb) for r in range(len(num_list)+1) for comb in combinations(num_list, r)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(strings: List[str], default_string='abc') -> bool:\n    return any(s.startswith(default_string) for s in strings)",
        "solution_func": "def g(default_string='abc') -> List[str]:\n    return [default_string + str(i) for i in range(1, 4)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement two functions: f takes a list of strings and a default string, and checks if any string in the list starts with the default string. g generates a list of strings by concatenating the default string with numbers from 1 to 3. The puzzle tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, strings, list comprehension, and function calls in Python. It also tests the understanding of boolean expressions and the any() function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    assert text.isalpha() and text.isupper()\n    return len(set(text)) == 5\ndef g():\n    # brute force\n    from itertools import permutations\n    for p in permutations(\"ABCDE\"):\n        if len(set(p)) == 5:\n            return ''.join(p)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation, Set Operations, and Importing Modules (Itertools).",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str) -> bool:\n    assert text.isalpha() and text.isupper()\n    return len(set(text)) == 5",
        "solution_func": "def g():\n    # brute force\n    from itertools import permutations\n    for p in permutations(\"ABCDE\"):\n        if len(set(p)) == 5:\n            return ''.join(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a string of length 5 with all unique uppercase alphabetic characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string contains 5 unique uppercase alphabetic characters.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, divisor=4) -> bool:\n    return result % divisor == 0\n\ndef g(numbers=[1, 2, 3, 4, 5, 6]):\n    return sum([num for num in numbers if num % 2 == 0])\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 46,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(data: dict, key='b', value=10) -> bool:\n    assert key in data\n    assert data[key] == value\n    return True\n\ndef g(key='b', value=10):\n    return {key: value}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(result: int, divisor=4) -> bool:\n    return result % divisor == 0",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5, 6]):\n    return sum([num for num in numbers if num % 2 == 0])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the sum of even numbers in a list is divisible by a given divisor, and g returns the sum of even numbers in a predefined list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic concepts of functions, list comprehension, and modulo operation in Python. It can be used to teach students how to define functions, work with lists, and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    import random\n    while True:\n        length = random.randint(5, 10)\n        letters = [chr(random.randint(97, 122)) for _ in range(length)]\n        palindrome = ''.join(letters + letters[::-1])\n        return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.)",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums) - 1))\n\ndef g():\n    import random\n    while True:\n        length = random.randint(5, 10)\n        new_list = sorted([random.randint(1, 100) for _ in range(length)])\n        if all(new_list[i] <= new_list[i+1] for i in range(len(new_list) - 1)):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    import random\n    while True:\n        length = random.randint(5, 10)\n        letters = [chr(random.randint(97, 122)) for _ in range(length)]\n        palindrome = ''.join(letters + letters[::-1])\n        return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(s) that checks if a given string is a palindrome, and a function g() that generates a random palindrome string. The assert statement checks if the generated palindrome string is indeed a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if a randomly generated palindrome string is correctly identified as a palindrome by the function f(s). It involves understanding string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    import random\n    while True:\n        prime_candidate = random.randint(2, 100)\n        if all(prime_candidate % i != 0 for i in range(2, int(prime_candidate**0.5) + 1)):\n            return prime_candidate\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to prime numbers, random number generation, loops, and conditionals.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums) - 1))\n\ndef g():\n    import random\n    while True:\n        length = random.randint(5, 10)\n        new_list = sorted([random.randint(1, 100) for _ in range(length)])\n        if all(new_list[i] <= new_list[i+1] for i in range(len(new_list) - 1)):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import random\n    while True:\n        prime_candidate = random.randint(2, 100)\n        if all(prime_candidate % i != 0 for i in range(2, int(prime_candidate**0.5) + 1)):\n            return prime_candidate",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is prime, and a function g() that generates a random number and checks if it is prime using function f. The assertion at the end verifies the correctness of the solution."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to check for primality. It also requires knowledge of generating random numbers and using list comprehensions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return len(set(strings)) != len(strings)\n\ndef g():\n    import random\n    while True:\n        length = random.randint(5, 10)\n        strings = [str(random.randint(1, 100)) for _ in range(length)]\n        if len(set(strings)) != len(strings):\n            return strings\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and set operations.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums) - 1))\n\ndef g():\n    import random\n    while True:\n        length = random.randint(5, 10)\n        new_list = sorted([random.randint(1, 100) for _ in range(length)])\n        if all(new_list[i] <= new_list[i+1] for i in range(len(new_list) - 1)):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return len(set(strings)) != len(strings)",
        "solution_func": "def g():\n    import random\n    while True:\n        length = random.randint(5, 10)\n        strings = [str(random.randint(1, 100)) for _ in range(length)]\n        if len(set(strings)) != len(strings):\n            return strings",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of random strings and checking if there are any duplicates in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random strings and checking if there are any duplicates in the list. The function f checks if there are duplicates in the input list of strings, and the function g generates a list of random strings until it finds a list with duplicates. The assert statement checks if the function f returns True when applied to the output of function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(num: int) -> bool:\n    return sympy.isprime(num)\n\ndef g():\n    return sympy.prime(1)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is prime using the sympy library in Python.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(word: str, anagram='silent') -> bool:\n    return sorted(word) == sorted(anagram)\n\ndef g(anagram='silent'):\n    return anagram\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import sympy\n\ndef f(num: int) -> bool:\n    return sympy.isprime(num)",
        "solution_func": "def g():\n    return sympy.prime(1)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given number is a prime number using the sympy library in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to use the sympy library to check for prime numbers and implement a function that returns True if the input number is prime.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(word: str, anagram='silent') -> bool:\n    return sorted(word) == sorted(anagram)\n\ndef g(anagram='silent'):\n    return anagram\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'level'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(square_value: int, num=4) -> bool:\n    return square_value == 16\n\ndef g(num=4) -> int:\n    return num ** 2\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(target_value: int, num=5) -> bool:\n    assert target_value == 120\n    return True\n\ndef g(num=5):\n    if num == 0:\n        return 1\n\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n\n    return factorial\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(square_value: int, num=4) -> bool:\n    return square_value == 16",
        "solution_func": "def g(num=4) -> int:\n    return num ** 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if the square of a given value is equal to 16, and g returns the square of a given number. The puzzle tests if the function f returns True when applied to the result of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if the square of a given number is equal to 16. The solution function g simply returns the square of the input number. The puzzle can be used to teach basic function definition and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(vowel_count: int, word=\"hello\") -> bool:\n    return vowel_count == 2\n\ndef g(word=\"hello\") -> int:\n    vowels = \"aeiou\"\n    return sum(1 for char in word if char.lower() in vowels)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(target_value: int, num=5) -> bool:\n    assert target_value == 120\n    return True\n\ndef g(num=5):\n    if num == 0:\n        return 1\n\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n\n    return factorial\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(vowel_count: int, word=\"hello\") -> bool:\n    return vowel_count == 2",
        "solution_func": "def g(word=\"hello\") -> int:\n    vowels = \"aeiou\"\n    return sum(1 for char in word if char.lower() in vowels)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that counts the number of vowels in a given word and returns True if the count is equal to 2."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining two functions, one to check if the vowel count is equal to 2 and another to count the vowels in a given word. The solution function should return the count of vowels in the word.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(seq: List[int], size=8) -> bool:\n    return all(seq[i] + seq[i + 1] == seq[i + 2] for i in range(len(seq) - 2))\n\ndef g(size=8):\n    # generate Fibonacci sequence\n    fib_seq = [0, 1]\n    for i in range(2, size):\n        fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n    return fib_seq\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and pattern recognition. The puzzle requires checking if a given sequence follows a specific pattern, which involves mathematical operations. The solution generates a Fibonacci sequence, which is a well-known mathematical sequence. Therefore, the topics used in this puzzle are Mathematical Operations and Pattern Recognition.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # simulated annealing\n    import random\n    import math\n\n    def fitness(individual, vecs):\n        return sum(sum(v[i] for i in individual) % 2 for v in vecs)\n\n    def neighbor(current, d):\n        new = current[:]\n        index = random.randint(0, d - 1)\n        if index in new:\n            new.remove(index)\n        else:\n            new.append(index)\n        return new\n\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    current_solution = [i for i in range(d) if random.random() > 0.5]\n    temperature = 1.0\n    cooling_rate = 0.0001\n\n    while temperature > 0.0001:\n        new_solution = neighbor(current_solution, d)\n        current_fitness = fitness(current_solution, vecs)\n        new_fitness = fitness(new_solution, vecs)\n\n        if new_fitness >= current_fitness or random.random() < math.exp((new_fitness - current_fitness) / temperature):\n            current_solution = new_solution\n\n        temperature *= 1 - cooling_rate\n\n    return current_solution\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(seq: List[int], size=8) -> bool:\n    return all(seq[i] + seq[i + 1] == seq[i + 2] for i in range(len(seq) - 2))",
        "solution_func": "def g(size=8):\n    # generate Fibonacci sequence\n    fib_seq = [0, 1]\n    for i in range(2, size):\n        fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n    return fib_seq",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that checks if a given sequence of integers follows a specific pattern, and a function g that generates a Fibonacci sequence of a specified size. The puzzle tests the student's understanding of list manipulation and pattern recognition in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves implementing a function to check a specific pattern in a sequence and generating a Fibonacci sequence. It requires knowledge of list comprehension, range function, and basic arithmetic operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], palindrome=\"racecar\") -> bool:\n    combined = ''.join(words)\n    return combined == combined[::-1]\n\ndef g(palindrome=\"racecar\"):\n    # generate palindrome string\n    return [palindrome]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # simulated annealing\n    import random\n    import math\n\n    def fitness(individual, vecs):\n        return sum(sum(v[i] for i in individual) % 2 for v in vecs)\n\n    def neighbor(current, d):\n        new = current[:]\n        index = random.randint(0, d - 1)\n        if index in new:\n            new.remove(index)\n        else:\n            new.append(index)\n        return new\n\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    current_solution = [i for i in range(d) if random.random() > 0.5]\n    temperature = 1.0\n    cooling_rate = 0.0001\n\n    while temperature > 0.0001:\n        new_solution = neighbor(current_solution, d)\n        current_fitness = fitness(current_solution, vecs)\n        new_fitness = fitness(new_solution, vecs)\n\n        if new_fitness >= current_fitness or random.random() < math.exp((new_fitness - current_fitness) / temperature):\n            current_solution = new_solution\n\n        temperature *= 1 - cooling_rate\n\n    return current_solution\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], palindrome=\"racecar\") -> bool:\n    combined = ''.join(words)\n    return combined == combined[::-1]",
        "solution_func": "def g(palindrome=\"racecar\"):\n    # generate palindrome string\n    return [palindrome]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of words, the puzzle requires generating a palindrome string and checking if the combined string of the words is equal to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and checking for palindromes in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \n\ndef f(seq: List[int]) -> bool:\n    return seq == seq[::-1]\n\ndef g(seq=[1, 2, 3, 4, 3, 2, 1]):\n    return seq + seq[-2::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list is a palindrome and manipulating lists in Python.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \n\ndef f(seq: List[int]) -> bool:\n    return seq == seq[::-1]",
        "solution_func": "def g(seq=[1, 2, 3, 4, 3, 2, 1]):\n    return seq + seq[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle checks if the list is a palindrome (reads the same forwards and backwards). The solution function appends the reverse of the list excluding the last two elements to the original list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list is a palindrome and the solution function modifies the list to satisfy the palindrome condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s='racecar'):\n    return s + s[-2::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='racecar'):\n    return s + s[-2::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome. The solution function reverses the string and appends it to the original string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a string is a palindrome and the solution function constructs a palindrome by reversing and appending the original string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return sum(numbers) > 50\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(2, 100) * 2 for _ in range(7)]\n        if sum(numbers) > 50:\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, random number generation, and conditional logic.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(letters: List[str]) -> bool:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return any(letter in vowels for letter in letters)\n\ndef g():\n    import random\n    while True:\n        letters = [chr(random.randint(65, 90)) for _ in range(5)]\n        if any(letter in {'A', 'E', 'I', 'O', 'U'} for letter in letters):\n            return letters\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return sum(numbers) > 50",
        "solution_func": "def g():\n    import random\n    while True:\n        numbers = [random.randint(2, 100) * 2 for _ in range(7)]\n        if sum(numbers) > 50:\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 7 random even numbers between 4 and 200, checking if their sum is greater than 50, and returning the list if the condition is met."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random numbers, calculating their sum, and checking if the sum is greater than 50. The solution function g() generates a list of numbers and returns it if the sum is greater than 50. The puzzle function f() checks if the sum of the input list is greater than 50.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return max(numbers) > 50\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(6)]\n        if max(numbers) > 50:\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves random number generation, list manipulation, and comparison operations.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(letters: List[str]) -> bool:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return any(letter in vowels for letter in letters)\n\ndef g():\n    import random\n    while True:\n        letters = [chr(random.randint(65, 90)) for _ in range(5)]\n        if any(letter in {'A', 'E', 'I', 'O', 'U'} for letter in letters):\n            return letters\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return max(numbers) > 50",
        "solution_func": "def g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(6)]\n        if max(numbers) > 50:\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the maximum number in a list of integers is greater than 50. The solution function g generates a list of 6 random integers and returns it only if the maximum number is greater than 50."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to generate random numbers in Python, working with lists, and using the max function to compare values. It also requires understanding how to define functions and use them to check conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return min(len(s) for s in strings) < 5\n\ndef g():\n    import random\n    while True:\n        strings = [''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10))) for _ in range(4)]\n        if min(len(s) for s in strings) < 5:\n            return strings\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Randomization",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(letters: List[str]) -> bool:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return any(letter in vowels for letter in letters)\n\ndef g():\n    import random\n    while True:\n        letters = [chr(random.randint(65, 90)) for _ in range(5)]\n        if any(letter in {'A', 'E', 'I', 'O', 'U'} for letter in letters):\n            return letters\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return min(len(s) for s in strings) < 5",
        "solution_func": "def g():\n    import random\n    while True:\n        strings = [''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10))) for _ in range(4)]\n        if min(len(s) for s in strings) < 5:\n            return strings",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating random strings and checking if the minimum length of the strings is less than 5."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires generating random strings and checking if the minimum length of the strings is less than 5. The solution function g() generates random strings and returns them if the condition is met, satisfying the puzzle's requirements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(max_product: int, nums=[-10, -3, 5, 2, -10]) -> bool:\n\n    def brute_force_max_product(arr: List[int]) -> int:\n        arr.sort()\n        return max(arr[0] * arr[1] * arr[-1], arr[-1] * arr[-2] * arr[-3])\n\n    return brute_force_max_product(nums) == max_product\n\ndef g(nums=[-10, -3, 5, 2, -10]) -> int:\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Brute Force Search and Sorting and Ordering topics.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(max_product: int, nums=[-10, -3, 5, 2, -10]) -> bool:\n\n    def brute_force_max_product(arr: List[int]) -> int:\n        arr.sort()\n        return max(arr[0] * arr[1] * arr[-1], arr[-1] * arr[-2] * arr[-3])\n\n    return brute_force_max_product(nums) == max_product",
        "solution_func": "def g(nums=[-10, -3, 5, 2, -10]) -> int:\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the maximum product of three integers in a list matches a given value, using a brute force approach. The solution function g sorts the list and calculates the maximum product of three integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to find the maximum product of three integers in a list and comparing it with a given value. It also requires knowledge of sorting lists and basic arithmetic operations in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(max_profit: int, prices=[7, 1, 5, 3, 6, 4]) -> bool:\n\n    def calculate_max_profit(prices: List[int]) -> int:\n        max_profit = 0\n        min_price = float('inf')\n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        return max_profit\n\n    return calculate_max_profit(prices) == max_profit\n\ndef g(prices=[7, 1, 5, 3, 6, 4]) -> int:\n    max_profit = 0\n    min_price = float('inf')\n    for price in prices:\n        if price < min_price:\n            min_price = price\n        elif price - min_price > max_profit:\n            max_profit = price - min_price\n    return max_profit\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and Algorithm Optimization.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(max_profit: int, prices=[7, 1, 5, 3, 6, 4]) -> bool:\n\n    def calculate_max_profit(prices: List[int]) -> int:\n        max_profit = 0\n        min_price = float('inf')\n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        return max_profit\n\n    return calculate_max_profit(prices) == max_profit",
        "solution_func": "def g(prices=[7, 1, 5, 3, 6, 4]) -> int:\n    max_profit = 0\n    min_price = float('inf')\n    for price in prices:\n        if price < min_price:\n            min_price = price\n        elif price - min_price > max_profit:\n            max_profit = price - min_price\n    return max_profit",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the maximum profit calculated from a list of prices matches a given maximum profit value. The solution function g calculates the maximum profit from the list of prices and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the maximum profit from a list of prices and comparing it to a given maximum profit value. It tests the student's ability to implement and verify a specific algorithm for calculating profits from stock prices.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(longest_prefix: str, strings=['flower', 'flow', 'flight']) -> bool:\n\n    def find_longest_common_prefix(strings: List[str]) -> str:\n        if not strings:\n            return \"\"\n        strings.sort()\n        prefix = \"\"\n        for char in strings[0]:\n            if all(s.startswith(prefix + char) for s in strings):\n                prefix += char\n            else:\n                break\n        return prefix\n\n    return find_longest_common_prefix(strings) == longest_prefix\n\ndef g(strings=['flower', 'flow', 'flight']) -> str:\n    if not strings:\n        return \"\"\n    strings.sort()\n    prefix = \"\"\n    for char in strings[0]:\n        if all(s.startswith(prefix + char) for s in strings):\n            prefix += char\n        else:\n            break\n    return prefix\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Sorting and Ordering",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(longest_prefix: str, strings=['flower', 'flow', 'flight']) -> bool:\n\n    def find_longest_common_prefix(strings: List[str]) -> str:\n        if not strings:\n            return \"\"\n        strings.sort()\n        prefix = \"\"\n        for char in strings[0]:\n            if all(s.startswith(prefix + char) for s in strings):\n                prefix += char\n            else:\n                break\n        return prefix\n\n    return find_longest_common_prefix(strings) == longest_prefix",
        "solution_func": "def g(strings=['flower', 'flow', 'flight']) -> str:\n    if not strings:\n        return \"\"\n    strings.sort()\n    prefix = \"\"\n    for char in strings[0]:\n        if all(s.startswith(prefix + char) for s in strings):\n            prefix += char\n        else:\n            break\n    return prefix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the longest common prefix among a list of strings and checking if it matches a given prefix."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves implementing a function to find the longest common prefix among a list of strings and then checking if it matches a specified prefix. The solution function g() implements the logic to find the longest common prefix.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s.islower()\n\ndef g() -> str:\n    return \"hello\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)\n\ndef g() -> list:\n    return [5, 4, 3, 2, 1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s.islower()",
        "solution_func": "def g() -> str:\n    return \"hello\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if a given string is in lowercase, and a function g() that returns the string 'hello'. The puzzle asserts that calling f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and function composition. It tests the student's ability to define functions and use them together to solve a specific task.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return all(num % 2 == 0 for num in nums)\n\ndef g() -> list:\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and providing a list of even numbers as a solution.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)\n\ndef g() -> list:\n    return [5, 4, 3, 2, 1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return all(num % 2 == 0 for num in nums)",
        "solution_func": "def g() -> list:\n    return [2, 4, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are even, and a function g that returns a list of even numbers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and the modulo operator in Python. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(password: str) -> bool:\n    return len(password) >= 8 and any(char.isdigit() for char in password) and any(char.isalpha() for char in password)\n\ndef g() -> str:\n    return \"Password123\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 47,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)\n\ndef g() -> list:\n    return [5, 4, 3, 2, 1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(password: str) -> bool:\n    return len(password) >= 8 and any(char.isdigit() for char in password) and any(char.isalpha() for char in password)",
        "solution_func": "def g() -> str:\n    return \"Password123\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(password: str) that checks if a given password is at least 8 characters long and contains at least one digit and one letter. The solution function g() returns a specific password 'Password123' and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the length and character composition of a password. The solution function provides a specific password that meets the criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], sorted_list=[]) -> bool:\n    return subsequence == sorted(subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    return sorted(nums)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if it is sorted. The topics used in this puzzle are sorting and ordering.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom sympy import isprime\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(isprime(num) for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    primes = [num for num in nums if isprime(num)]\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], sorted_list=[]) -> bool:\n    return subsequence == sorted(subsequence)",
        "solution_func": "def g(nums=[0]) -> List[int]:\n    return sorted(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks if a given list is sorted in ascending order. The solution function generates a sorted list from the input list and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in checking if a list is sorted and generating a sorted list. It can be used to teach basic list manipulation and sorting in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g(size=5):\n    import random\n    return random.sample(range(1, 10), size)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations to check for uniqueness of elements in a list. It also uses random module for generating a sample list of integers. The solution function g() generates a random sample list of integers within a specified range.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(dictionary: dict, keys=['name', 'age', 'city']) -> bool:\n    assert all(key in dictionary for key in keys)\n    assert len(dictionary.keys()) >= len(keys)\n    return True\n\ndef g(keys=['name', 'age', 'city']):\n    import random\n    return {key: random.randint(1, 100) if key == 'age' else random.choice(['John', 'Alice', 'Bob', 'Emma']) for key in keys}\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g(size=5):\n    import random\n    return random.sample(range(1, 10), size)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list generated by a function contains unique elements or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random numbers and checking if all elements in the list are unique.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves sorting, list manipulation, and conditional logic.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
        "solution_func": "def g(t=1000000, n=500):\n    return [2] * n + [t]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and two optional parameters t and n. The function checks if the sum of the sorted list elements exceeds a threshold t at a specific index n. The solution function g generates a list of integers to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and conditional checks in Python. The solution function g generates a list that meets the condition specified in function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(s == s[::-1] and s.islower() for s in strings)\n\ndef g():\n    return ['radar', 'level', 'deified']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(seq: List[int], nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]) -> bool:\n    if len(seq) < 3:\n        return False\n    return all(a + b == c for a, b, c in zip(seq, seq[1:], seq[2:])) and all(num in nums for num in seq)\n\ndef g(nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]):\n    fib_seq = [0, 1]\n    while len(fib_seq) < len(nums):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(s == s[::-1] and s.islower() for s in strings)",
        "solution_func": "def g():\n    return ['radar', 'level', 'deified']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that checks if all strings in a list are palindromes and in lowercase letters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all strings in a list are palindromes and in lowercase letters. The solution function should return a list of strings that are palindromes and in lowercase.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(list(set(nums)))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as List Operations, Sorting and Ordering, Set Operations, and Function Definition.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(seq: List[int], nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]) -> bool:\n    if len(seq) < 3:\n        return False\n    return all(a + b == c for a, b, c in zip(seq, seq[1:], seq[2:])) and all(num in nums for num in seq)\n\ndef g(nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]):\n    fib_seq = [0, 1]\n    while len(fib_seq) < len(nums):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(list(set(nums)))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is sorted and contains unique elements. The solution function g returns a specific list of integers that meets the criteria of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, sorting, and set operations in Python. It also tests the ability to define functions and use them to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int]]) -> bool:\n    return all(len(set(t)) == len(t) for t in tuples)\n\ndef g():\n    return [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all tuples in a list have unique elements.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(seq: List[int], nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]) -> bool:\n    if len(seq) < 3:\n        return False\n    return all(a + b == c for a, b, c in zip(seq, seq[1:], seq[2:])) and all(num in nums for num in seq)\n\ndef g(nums=[0, 1, 1, 2, 3, 5, 8, 13, 21]):\n    fib_seq = [0, 1]\n    while len(fib_seq) < len(nums):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int]]) -> bool:\n    return all(len(set(t)) == len(t) for t in tuples)",
        "solution_func": "def g():\n    return [(1, 2, 3), (4, 5, 6), (7, 8, 9)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples as input and checks if each tuple contains unique elements. The solution function g returns a list of tuples with unique elements in each tuple."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for unique elements in tuples and testing the solution function with the provided assertion.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return max(numbers) % 2 == 0\n\ndef g() -> List[int]:\n    return [12, 7, 18, 4]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target=10) -> bool:\n    return all(sum(t) == target for t in tuples)\n\ndef g(target=10) -> List[Tuple[int, int]]:\n    return [(3, 7), (2, 8), (1, 9)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return max(numbers) % 2 == 0",
        "solution_func": "def g() -> List[int]:\n    return [12, 7, 18, 4]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function f checks if the maximum number in the list is even. The solution function g returns a specific list of integers, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python to master's students in CS as it involves working with lists, finding the maximum number, and checking for evenness.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] >= numbers[i+1] for i in range(len(numbers)-1))\n\ndef g() -> List[int]:\n    return [10, 8, 5, 3]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves sorting and ordering of a list of numbers.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target=10) -> bool:\n    return all(sum(t) == target for t in tuples)\n\ndef g(target=10) -> List[Tuple[int, int]]:\n    return [(3, 7), (2, 8), (1, 9)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] >= numbers[i+1] for i in range(len(numbers)-1))",
        "solution_func": "def g() -> List[int]:\n    return [10, 8, 5, 3]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the puzzle function f checks if the list is sorted in non-increasing order. The solution function g returns a specific list of integers. The puzzle is considered solved if the solution list is sorted in non-increasing order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list is sorted in non-increasing order, and the solution provides a list that meets this condition. The assertion at the end confirms the correctness of the solution.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome. The solution function returns a specific palindrome string 'level' to satisfy the condition of the puzzle.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'level'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns 17 and assert that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f(num) that checks if a number is prime, and then defining a function g() that returns a specific number. The puzzle tests the student's understanding of function definitions and assertions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    return digit_sum == n\n\ndef g():\n    for n in range(1, 10000):\n        if sum(int(d) for d in str(n)) == n:\n            return n\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations to calculate the digit sum of a number and check if it is equal to the number itself.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    return digit_sum == n",
        "solution_func": "def g():\n    for n in range(1, 10000):\n        if sum(int(d) for d in str(n)) == n:\n            return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that calculates the sum of the digits of a number and checks if it is equal to the number itself. The solution function g() iterates through numbers from 1 to 9999 to find the first number that satisfies the condition in f(n)."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge related to digit sums and number comparison. It can be used to teach basic concepts of functions, loops, and conditionals in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    return n % digit_sum == 0\n\ndef g():\n    for n in range(1, 10000):\n        if n % sum(int(d) for d in str(n)) == 0:\n            return n\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and string manipulation to calculate the digit sum of a number and check if the number is divisible by its digit sum.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    return n % digit_sum == 0",
        "solution_func": "def g():\n    for n in range(1, 10000):\n        if n % sum(int(d) for d in str(n)) == 0:\n            return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a number between 1 and 9999 where the number is divisible by the sum of its digits."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a number is divisible by the sum of its digits. The solution function iterates through numbers from 1 to 9999 to find the first number that satisfies this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return digit_product == n\n\ndef g():\n    for n in range(1, 10000):\n        product = 1\n        for d in str(n):\n            product *= int(d)\n        if product == n:\n            return n\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations to check if the product of the digits of a number is equal to the number itself.",
        "idx_generation": 48,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return digit_product == n",
        "solution_func": "def g():\n    for n in range(1, 10000):\n        product = 1\n        for d in str(n):\n            product *= int(d)\n        if product == n:\n            return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a number between 1 and 9999 where the product of its digits is equal to the number itself."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the product of the digits of a number is equal to the number itself. The solution iterates through numbers from 1 to 9999 to find such a number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    return sorted(li, reverse=True) == list(range(998, -1, -1))\n\ndef g():\n    return [abs(998 - i) for i in range(999)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(nums: List[int]) -> bool:\n    return sum([num for num in nums if is_prime(num)]) == 17\n\ndef g():\n    return [2, 3, 5, 7]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to prime numbers, list comprehension, and assertion testing.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    return sorted(li, reverse=True) == list(range(998, -1, -1))\n\ndef g():\n    return [abs(998 - i) for i in range(999)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(nums: List[int]) -> bool:\n    return sum([num for num in nums if is_prime(num)]) == 17",
        "solution_func": "def g():\n    return [2, 3, 5, 7]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding prime numbers in a list of integers and checking if their sum equals 17."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for prime numbers in a list and verifying if their sum is equal to 17 using the provided functions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(s.islower() for s in strings)\n\ndef g():\n    return [\"hello\", \"world\", \"python\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    return sorted(li, reverse=True) == list(range(998, -1, -1))\n\ndef g():\n    return [abs(998 - i) for i in range(999)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(s.islower() for s in strings)",
        "solution_func": "def g():\n    return [\"hello\", \"world\", \"python\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function g() to return a list of strings, and function f(strings: List[str]) to check if all strings in the list are in lowercase. The puzzle is to ensure that function f() returns True when all strings in the list returned by function g() are in lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all strings in a list are in lowercase, which is a basic Python programming concept. The solution function g() returns a list of strings, and the challenge function f() checks if all strings are in lowercase.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(lst: List[int], target=25) -> bool:\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(target=25) -> List[int]:\n    return [8, 9, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))\n\ndef g() -> List[int]:\n    return [3, 7, 2, 3, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to set operations and conditional logic.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(lst: List[int], target=25) -> bool:\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(target=25) -> List[int]:\n    return [8, 9, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))",
        "solution_func": "def g() -> List[int]:\n    return [3, 7, 2, 3, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list contains duplicate elements, and a function g that returns a list with duplicate elements. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation and set operations in Python, as well as the concept of checking for duplicates in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (factors, primes, etc.) as it checks if a given number is a prime number or not.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(lst: List[int], target=25) -> bool:\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(target=25) -> List[int]:\n    return [8, 9, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g() -> int:\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g() that returns the number 17. The puzzle tests whether the function f correctly identifies 17 as a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts related to functions, loops, conditionals, and prime number checking. It provides a simple challenge to test understanding of basic programming logic in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lists: List[List[int]], integer_average=False) -> bool:\n    if len(lists) < 1:\n        return False\n    is_integer = lambda n: n.is_integer()\n    average = sum(sum(l) for l in lists) / sum(len(l) for l in lists)\n    return all(is_integer(average) for l in lists) if integer_average else True\n\ndef g(integer_average=False):\n    lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n    return lists if not integer_average else sum(sum(l) for l in lists) / sum(len(l) for l in lists)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the average of sublists is an integer. It also uses list manipulation and lambda functions.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int]], prime_tuple_sum=False) -> bool:\n    if len(tuples) < 1:\n        return False\n    unique_elements = lambda t: len(set(t)) == len(t)\n    tuple_sum = sum(len(t) for t in tuples)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return all(unique_elements(t) for t in tuples) and is_prime(tuple_sum) if prime_tuple_sum else True\n\ndef g(prime_tuple_sum=False):\n    tuples = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\n    return tuples if not prime_tuple_sum else sum(len(t) for t in tuples)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lists: List[List[int]], integer_average=False) -> bool:\n    if len(lists) < 1:\n        return False\n    is_integer = lambda n: n.is_integer()\n    average = sum(sum(l) for l in lists) / sum(len(l) for l in lists)\n    return all(is_integer(average) for l in lists) if integer_average else True",
        "solution_func": "def g(integer_average=False):\n    lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n    return lists if not integer_average else sum(sum(l) for l in lists) / sum(len(l) for l in lists)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of lists of integers and an optional boolean parameter. It calculates the average of all integers in the lists and checks if the average is an integer. The solution function g generates a list of lists of integers and returns the average if the boolean parameter is True. The puzzle requires the solution function to return a list of lists of integers that satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists of lists, calculating averages, and checking if a number is an integer. It provides a good exercise for understanding list manipulation and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lists: List[List[int]], perfect_square_product=False) -> bool:\n    if len(lists) < 1:\n        return False\n    is_perfect_square = lambda n: int(n**0.5)**2 == n\n    product = 1\n    for l in lists:\n        product *= 1 if not l else l[-1] if len(l) == 1 else l[0] * l[-1]\n    return is_perfect_square(product) if perfect_square_product else True\n\ndef g(perfect_square_product=False):\n    lists = [[2, 3], [5, 7], [11, 13]]\n    product = 1\n    for l in lists:\n        product *= 1 if not l else l[-1] if len(l) == 1 else l[0] * l[-1]\n    return lists if not perfect_square_product else product\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check for perfect square products.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int]], prime_tuple_sum=False) -> bool:\n    if len(tuples) < 1:\n        return False\n    unique_elements = lambda t: len(set(t)) == len(t)\n    tuple_sum = sum(len(t) for t in tuples)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return all(unique_elements(t) for t in tuples) and is_prime(tuple_sum) if prime_tuple_sum else True\n\ndef g(prime_tuple_sum=False):\n    tuples = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\n    return tuples if not prime_tuple_sum else sum(len(t) for t in tuples)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lists: List[List[int]], perfect_square_product=False) -> bool:\n    if len(lists) < 1:\n        return False\n    is_perfect_square = lambda n: int(n**0.5)**2 == n\n    product = 1\n    for l in lists:\n        product *= 1 if not l else l[-1] if len(l) == 1 else l[0] * l[-1]\n    return is_perfect_square(product) if perfect_square_product else True",
        "solution_func": "def g(perfect_square_product=False):\n    lists = [[2, 3], [5, 7], [11, 13]]\n    product = 1\n    for l in lists:\n        product *= 1 if not l else l[-1] if len(l) == 1 else l[0] * l[-1]\n    return lists if not perfect_square_product else product",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of lists of integers and a boolean flag as input. The function calculates the product of the last element of each inner list and checks if the product is a perfect square. The solution function g generates a specific list of lists and calculates the product in a similar manner. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists of lists, calculating products, and checking for perfect squares. It requires understanding of list manipulation, conditional statements, and lambda functions in Python. This puzzle can be used to teach Python programming concepts related to lists, loops, conditionals, and functions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lists: List[List[int]], prime_max=False) -> bool:\n    if len(lists) < 1:\n        return False\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    max_element = max(max(l) for l in lists)\n    return is_prime(max_element) if prime_max else True\n\ndef g(prime_max=False):\n    lists = [[2, 3, 5], [7, 11], [13, 17, 19]]\n    max_element = max(max(l) for l in lists)\n    return lists if not prime_max else max_element\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int]], prime_tuple_sum=False) -> bool:\n    if len(tuples) < 1:\n        return False\n    unique_elements = lambda t: len(set(t)) == len(t)\n    tuple_sum = sum(len(t) for t in tuples)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return all(unique_elements(t) for t in tuples) and is_prime(tuple_sum) if prime_tuple_sum else True\n\ndef g(prime_tuple_sum=False):\n    tuples = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\n    return tuples if not prime_tuple_sum else sum(len(t) for t in tuples)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lists: List[List[int]], prime_max=False) -> bool:\n    if len(lists) < 1:\n        return False\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    max_element = max(max(l) for l in lists)\n    return is_prime(max_element) if prime_max else True",
        "solution_func": "def g(prime_max=False):\n    lists = [[2, 3, 5], [7, 11], [13, 17, 19]]\n    max_element = max(max(l) for l in lists)\n    return lists if not prime_max else max_element",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of lists of integers and an optional boolean parameter. It checks if the maximum element in the lists is a prime number based on the boolean parameter. The solution function g generates a list of lists of integers and returns either the lists or the maximum element based on the boolean parameter. The puzzle is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists of lists, finding the maximum element, checking if it is a prime number, and understanding how boolean parameters affect the function behavior. It tests the student's understanding of list manipulation, max function, lambda functions, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sum_of_squares: int, nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n\n    def calculate_sum_of_squares_even(arr: List[int]) -> int:\n        return sum(x**2 for x in arr if x % 2 == 0)\n\n    return calculate_sum_of_squares_even(nums) == sum_of_squares\n\ndef g(nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> int:\n    return sum(x**2 for x in nums if x % 2 == 0)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, list manipulation, and function composition.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(max_product: int, nums=[-10, -3, 5, 2, -10]) -> bool:\n\n    def brute_force_max_product(arr: List[int]) -> int:\n        arr.sort()\n        return max(arr[0] * arr[1] * arr[-1], arr[-1] * arr[-2] * arr[-3])\n\n    return brute_force_max_product(nums) == max_product\n\ndef g(nums=[-10, -3, 5, 2, -10]) -> int:\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(sum_of_squares: int, nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n\n    def calculate_sum_of_squares_even(arr: List[int]) -> int:\n        return sum(x**2 for x in arr if x % 2 == 0)\n\n    return calculate_sum_of_squares_even(nums) == sum_of_squares",
        "solution_func": "def g(nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> int:\n    return sum(x**2 for x in nums if x % 2 == 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of squares of even numbers in a list matches a given value, and a function g that calculates the sum of squares of even numbers in a list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, conditional statements, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int], difference=3) -> bool:\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i] - lst[j]) == difference:\n                return True\n    return False\n\ndef g(difference=3) -> List[int]:\n    return [5, 8, 11, 14]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(lst: List[int], target=25) -> bool:\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == target:\n                    return True\n    return False\n\ndef g(target=25) -> List[int]:\n    return [8, 9, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int], difference=3) -> bool:\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i] - lst[j]) == difference:\n                return True\n    return False",
        "solution_func": "def g(difference=3) -> List[int]:\n    return [5, 8, 11, 14]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, function f checks if there exists a pair of integers in the list whose absolute difference is equal to a specified difference. Function g returns a list of integers. The puzzle is to find a list of integers that satisfies the condition specified in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to iterate over a list of integers and check for a specific condition of absolute difference. The solution function g provides a list of integers that meets the condition in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(x: List[int], n=200, s=40000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 200, s = 40000):\n    a = 2\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 2\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(x: List[int], n=200, s=40000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n = 200, s = 40000):\n    a = 2\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 2\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of integers meets certain conditions, and a function g that generates a list of integers to satisfy those conditions. The goal is to ensure the sum and length of the list match specified values, and all elements are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the sum, length, and uniqueness of elements in a list, and generating a list that meets these criteria. The solution function g generates a list that satisfies the conditions set by function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(x: List[int], n=150, s=11250) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 150, s = 11250):\n    a = 3\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 3\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, Conditional Logic, Set Operations, and Mathematical Operations.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(x: List[int], n=150, s=11250) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n = 150, s = 11250):\n    a = 3\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 3\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of integers meets certain conditions, and a function g that generates a list of integers to satisfy those conditions. The goal is to ensure the sum and length of the list meet specific criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the sum and length of a list of integers to match predefined values, along with ensuring uniqueness of elements in the list. The solution function g generates a list of integers that meets these criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(x: List[int], n=180, s=32400) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 180, s = 32400):\n    a = 4\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 4\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as List Manipulation, Conditional Logic, Set Operations, and Mathematical Operations.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(x: List[int], n=180, s=32400) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)",
        "solution_func": "def g(n = 180, s = 32400):\n    a = 4\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 4\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of integers meets certain conditions, and a function g that generates a list of integers to satisfy those conditions. The goal is to find a list of integers that meets the conditions specified in function f when passed to function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the length, sum, and uniqueness of a list of integers in function f, and generating a list of integers in function g that satisfies these conditions. The solution function g uses a specific algorithm to generate the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(word='racecar'):\n    return word + word[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target_sum=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(size=9):\n    return list(range(1, size+1))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(word='racecar'):\n    return word + word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome by comparing it to its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. It also defines a function g(word) that returns the word concatenated with its reverse. The puzzle asserts that f(g()) should return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(strings: list) -> bool:\n    seen_anagrams = set()\n    for string in strings:\n        sorted_string = ''.join(sorted(string))\n        if sorted_string in seen_anagrams:\n            return True\n        seen_anagrams.add(sorted_string)\n    return False\n\ndef g(words=['listen', 'silent', 'earth', 'heart']):\n    import random\n    random.shuffle(words)\n    return words\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target_sum=10) -> bool:\n    seen = set()\n    for num in nums:\n        if target_sum - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(size=9):\n    return list(range(1, size+1))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(strings: list) -> bool:\n    seen_anagrams = set()\n    for string in strings:\n        sorted_string = ''.join(sorted(string))\n        if sorted_string in seen_anagrams:\n            return True\n        seen_anagrams.add(sorted_string)\n    return False",
        "solution_func": "def g(words=['listen', 'silent', 'earth', 'heart']):\n    import random\n    random.shuffle(words)\n    return words",
        "quality": [
            null
        ],
        "description": [
            "Given a list of words, the puzzle function f checks if there are any anagrams in the list. The solution function g shuffles the list of words and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of sets, sorting, and shuffling in Python. It also reinforces the concept of anagrams.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1] and len(word) > 1\ndef g(word='racecar') -> str:\n    return word[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1] and len(word) > 1",
        "solution_func": "def g(word='racecar') -> str:\n    return word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome (reads the same forwards and backwards) with a length greater than 1."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f to check if a word is a palindrome and has a length greater than 1, and a function g that returns the reverse of a default word 'racecar'. The assertion at the end checks if the solution g satisfies the condition of the puzzle f(g()).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers) and len(numbers) > 1\ndef g(numbers=[5, 2, 8, 11, 20]) -> List[int]:\n    return sorted(numbers)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and checking if the list is sorted and has more than one element.",
        "idx_generation": 49,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers) and len(numbers) > 1",
        "solution_func": "def g(numbers=[5, 2, 8, 11, 20]) -> List[int]:\n    return sorted(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that takes a list of integers and returns True if the list is sorted in ascending order and has more than one element. The solution function sorts a given list of integers and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and comparison in Python. It is a good exercise for students to practice working with lists and boolean expressions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport itertools\n\ndef f(word: str, s='programmingpuzzle') -> bool:\n    return all(word.count(char) <= s.count(char) for char in word)\n\ndef g(s='programmingpuzzle', word='program'):\n    permutations = itertools.permutations(s)\n    for perm in permutations:\n        if ''.join(perm).startswith(word):\n            return ''.join(perm)\n    return ''\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and permutations and combinations.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], s='pythonpuzzle', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s='pythonpuzzle', target=''):\n    def find_indices(s, target, i, j, k):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\n        if k < len(s):\n            return find_indices(s, target, i, j, k+1)\n        if j < len(s):\n            return find_indices(s, target, i, j+1, 1)\n        if i < len(s):\n            return find_indices(s, target, i+1, 0, 1)\n        return []\n    return find_indices(s, target, 0, 0, 1)\nassert f(g()) == True\n"
        ],
        "problem_func": "import itertools\n\ndef f(word: str, s='programmingpuzzle') -> bool:\n    return all(word.count(char) <= s.count(char) for char in word)",
        "solution_func": "def g(s='programmingpuzzle', word='program'):\n    permutations = itertools.permutations(s)\n    for perm in permutations:\n        if ''.join(perm).startswith(word):\n            return ''.join(perm)\n    return ''",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if all characters in a given word appear fewer times than in a predefined string. The function g generates permutations of the predefined string and returns the first permutation that starts with a given word. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, num=123) -> bool:\n    return str(num) in s\n\ndef g(num=123) -> str:\n    return \"The number is: \" + str(num)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, num=123) -> bool:\n    return str(num) in s",
        "solution_func": "def g(num=123) -> str:\n    return \"The number is: \" + str(num)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given number is present in a string, and a function g that returns a string representation of the number. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function calls and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name') -> bool:\n    return key in d\n\ndef g(key='name') -> dict:\n    return {key: 'John Doe', 'age': 30, 'city': 'New York'}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and checking for the existence of a key in a dictionary.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict, key='name') -> bool:\n    return key in d",
        "solution_func": "def g(key='name') -> dict:\n    return {key: 'John Doe', 'age': 30, 'city': 'New York'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a specified key exists in a dictionary and g returns a dictionary with a specified key-value pair. The puzzle tests whether f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in working with dictionaries and function calls in Python. It can be used to teach students about dictionary manipulation and function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, target_sum=10) -> bool:\n    return any((target_sum - num in nums for num in nums))\n\ndef g(target_sum=10) -> list:\n    return [1, 2, 3, target_sum-6, 5]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Operations, Conditional Logic, and Mathematical Operations.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list, target_sum=10) -> bool:\n    return any((target_sum - num in nums for num in nums))",
        "solution_func": "def g(target_sum=10) -> list:\n    return [1, 2, 3, target_sum-6, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if there are two numbers in a given list that add up to a target sum. The solution function g returns a list of numbers that includes two numbers that add up to the target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension and checking for the existence of pairs of numbers that sum up to a target value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'level'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"noon\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(matrix: List[List[int]]) -> bool:\n    return all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n\ndef g():\n    matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n    return matrix\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"noon\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'noon'. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, char='a') -> bool:\n    return s == s[::-1] and char in s\ndef g(char='a'):\n    return \"racecar\" + char + \"racecar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, char='a') -> bool:\n    return s == s[::-1] and char in s",
        "solution_func": "def g(char='a'):\n    return \"racecar\" + char + \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that checks if a given string is a palindrome and contains a specific character. The solution function constructs a palindrome string with the specified character in the middle."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, checking for palindromes, and function parameter usage in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='age', min_age=18) -> bool:\n    return key in d and d[key] >= min_age\ndef g(key='age', min_age=18):\n    return {'name': 'Alice', 'age': 25}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict, key='age', min_age=18) -> bool:\n    return key in d and d[key] >= min_age",
        "solution_func": "def g(key='age', min_age=18):\n    return {'name': 'Alice', 'age': 25}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given dictionary contains a specified key with a value greater than or equal to a specified minimum age. The function g returns a dictionary with a 'name' and 'age' key-value pair. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary manipulation and function evaluation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == lst[::-1]\n\ndef g():\n    return [1, 2, 3, 2, 1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list is a palindrome, which falls under String Manipulation and List Operations.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == lst[::-1]",
        "solution_func": "def g():\n    return [1, 2, 3, 2, 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given list is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(lst) that returns True if the input list is a palindrome, and a function g() that returns a specific list. The assertion checks if the function f applied to the output of g returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return sum(lst) == 15\n\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return sum(lst) == 15",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if the sum of elements in a list is equal to 15. The solution function g() returns a list [1, 2, 3, 4, 5] and asserts that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if the sum of elements in a list is equal to a specific value. The solution function provides a list that satisfies this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, min_diff=3) -> bool:\n    return min(abs(nums[i] - nums[j]) for i in range(len(nums)) for j in range(i+1, len(nums)) if i != j) == min_diff\n\ndef g(min_diff=3):\n    return [1, 4, 7, 10]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target_sum=15) -> bool:\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target_sum=15):\n    return [i for i in range(1, target_sum) if target_sum - i in range(1, target_sum)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list, min_diff=3) -> bool:\n    return min(abs(nums[i] - nums[j]) for i in range(len(nums)) for j in range(i+1, len(nums)) if i != j) == min_diff",
        "solution_func": "def g(min_diff=3):\n    return [1, 4, 7, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of numbers and a minimum difference as input, and checks if the minimum absolute difference between any two numbers in the list is equal to the specified minimum difference. The solution function g returns a specific list of numbers that satisfies the condition set by function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves finding a list of numbers where the minimum absolute difference between any two numbers is equal to the specified minimum difference. The solution function g returns such a list of numbers.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, all_prime=True) -> bool:\n    return all(num > 1 and all(num % i != 0 for i in range(2, int(num**0.5)+1)) for num in nums) == all_prime\n\ndef g(all_prime=True):\n    return [2, 3, 5, 7, 11]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to prime numbers, list comprehension, and boolean logic.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target_sum=15) -> bool:\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target_sum=15):\n    return [i for i in range(1, target_sum) if target_sum - i in range(1, target_sum)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list, all_prime=True) -> bool:\n    return all(num > 1 and all(num % i != 0 for i in range(2, int(num**0.5)+1)) for num in nums) == all_prime",
        "solution_func": "def g(all_prime=True):\n    return [2, 3, 5, 7, 11]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all numbers in a list are prime, and a function g that returns a list of prime numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, list comprehension, and function calling in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list, average=5) -> bool:\n    return sum(nums) / len(nums) == average\n\ndef g(average=5):\n    return [2, 4, 6, 8]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and List Operations.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, target_sum=15) -> bool:\n    return any(nums[i] + nums[j] == target_sum for i in range(len(nums)) for j in range(i+1, len(nums)))\ndef g(target_sum=15):\n    return [i for i in range(1, target_sum) if target_sum - i in range(1, target_sum)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list, average=5) -> bool:\n    return sum(nums) / len(nums) == average",
        "solution_func": "def g(average=5):\n    return [2, 4, 6, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the average of a list of numbers is equal to a specified average, and a function g that returns a list of numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function to calculate the average of a list of numbers and comparing it to a specified average. The solution function g returns a list of numbers that satisfies the condition for the average.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(input_word=\"python\"):\n    return input_word + input_word[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 4:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=30):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(input_word=\"python\"):\n    return input_word + input_word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, and a function g(input_word) that returns the input word concatenated with its reverse, the puzzle requires finding an input word that results in a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes[0]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime numbers, loops, and conditionals.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 4:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=30):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes[0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g(limit) that generates a list of prime numbers up to a specified limit. The puzzle requires finding the first prime number generated by function g and checking if it is indeed a prime number using function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, loops, list comprehension, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom random import randint\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))\n\ndef g(length=7):\n    duplicate_list = [randint(1, 10) for _ in range(length)]\n    return duplicate_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Set Operations and Random Number Generation.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 4:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=30):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom random import randint\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))",
        "solution_func": "def g(length=7):\n    duplicate_list = [randint(1, 10) for _ in range(length)]\n    return duplicate_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a list of random integers and checking if there are any duplicates in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand list generation, checking for duplicates using set(), and function return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str, word='level') -> bool:\n    return palindrome == palindrome[::-1]\n\ndef g(word='level') -> str:\n    reversed_word = word[::-1]\n    return reversed_word\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return subsequence == sorted(subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    sorted_nums = sorted(nums)\n    return sorted_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(palindrome: str, word='level') -> bool:\n    return palindrome == palindrome[::-1]",
        "solution_func": "def g(word='level') -> str:\n    reversed_word = word[::-1]\n    return reversed_word",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome by comparing it to its reverse. The solution function reverses the word and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a word is a palindrome and providing a solution to reverse the word. The solution function should return the reversed word.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int, n=5) -> bool:\n    def factorial_recursive(n):\n        if n == 0:\n            return 1\n        return n * factorial_recursive(n-1)\n    return factorial == factorial_recursive(n)\n\ndef g(n=5) -> int:\n    def factorial_recursive(n):\n        if n == 0:\n            return 1\n        return n * factorial_recursive(n-1)\n    return factorial_recursive(n)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion and mathematical operations to calculate factorial. The solution function also involves recursion to calculate factorial and passes the result to the puzzle function. The assert statement checks if the puzzle function returns True when called with the result of the solution function.",
        "idx_generation": 50,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return subsequence == sorted(subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    sorted_nums = sorted(nums)\n    return sorted_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(factorial: int, n=5) -> bool:\n    def factorial_recursive(n):\n        if n == 0:\n            return 1\n        return n * factorial_recursive(n-1)\n    return factorial == factorial_recursive(n)",
        "solution_func": "def g(n=5) -> int:\n    def factorial_recursive(n):\n        if n == 0:\n            return 1\n        return n * factorial_recursive(n-1)\n    return factorial_recursive(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the factorial of a given number matches a recursive factorial function, and g calculates the factorial of a given number using recursion. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding recursion and factorial calculation in Python. It can be used to teach students about recursive functions and how to check the correctness of a solution using assertions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(product_of_odds: int, nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n\n    def calculate_product_of_odds(arr: List[int]) -> int:\n        product = 1\n        for x in arr:\n            if x % 2 != 0:\n                product *= x\n        return product\n\n    return calculate_product_of_odds(nums) == product_of_odds\n\ndef g(nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> int:\n    product = 1\n    for x in nums:\n        if x % 2 != 0:\n            product *= x\n    return product\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and function definition.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sum_of_squares: int, nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n\n    def calculate_sum_of_squares_even(arr: List[int]) -> int:\n        return sum(x**2 for x in arr if x % 2 == 0)\n\n    return calculate_sum_of_squares_even(nums) == sum_of_squares\n\ndef g(nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> int:\n    return sum(x**2 for x in nums if x % 2 == 0)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(product_of_odds: int, nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n\n    def calculate_product_of_odds(arr: List[int]) -> int:\n        product = 1\n        for x in arr:\n            if x % 2 != 0:\n                product *= x\n        return product\n\n    return calculate_product_of_odds(nums) == product_of_odds",
        "solution_func": "def g(nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> int:\n    product = 1\n    for x in nums:\n        if x % 2 != 0:\n            product *= x\n    return product",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the product of odd numbers in a given list matches a specified value, and a function g that calculates the product of odd numbers in a list. The puzzle requires implementing f and g functions to ensure f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation and conditional statements in Python to calculate the product of odd numbers in a list and compare it with a specified value.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(max_diff: int, nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n\n    def calculate_max_adjacent_diff(arr: List[int]) -> int:\n        max_diff = 0\n        for i in range(len(arr) - 1):\n            diff = abs(arr[i] - arr[i+1])\n            max_diff = max(max_diff, diff)\n        return max_diff\n\n    return calculate_max_adjacent_diff(nums) == max_diff\n\ndef g(nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> int:\n    max_diff = 0\n    for i in range(len(nums) - 1):\n        diff = abs(nums[i] - nums[i+1])\n        max_diff = max(max_diff, diff)\n    return max_diff\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and function definition. The solution function g() calculates the maximum adjacent difference in a list of numbers, while the puzzle function f() checks if the calculated maximum adjacent difference matches a given input value.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sum_of_squares: int, nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n\n    def calculate_sum_of_squares_even(arr: List[int]) -> int:\n        return sum(x**2 for x in arr if x % 2 == 0)\n\n    return calculate_sum_of_squares_even(nums) == sum_of_squares\n\ndef g(nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> int:\n    return sum(x**2 for x in nums if x % 2 == 0)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(max_diff: int, nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> bool:\n\n    def calculate_max_adjacent_diff(arr: List[int]) -> int:\n        max_diff = 0\n        for i in range(len(arr) - 1):\n            diff = abs(arr[i] - arr[i+1])\n            max_diff = max(max_diff, diff)\n        return max_diff\n\n    return calculate_max_adjacent_diff(nums) == max_diff",
        "solution_func": "def g(nums=[-1, 2, 3, 4, 5, 6, 7, 8]) -> int:\n    max_diff = 0\n    for i in range(len(nums) - 1):\n        diff = abs(nums[i] - nums[i+1])\n        max_diff = max(max_diff, diff)\n    return max_diff",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a maximum difference value and a list of numbers as input. The function calculates the maximum difference between adjacent numbers in the list and compares it to the given maximum difference value. The solution function g calculates the maximum difference between adjacent numbers in a list. The puzzle is to ensure that the solution function g satisfies the condition of the function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions in Python, work with lists, calculate differences between adjacent elements, and compare values. It also tests the understanding of function calls and assertions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(averages: List[float], num_list=[4, 6, 8]) -> bool:\n    return all(avg.is_integer() for avg in averages)\ndef g(num_list=[4, 6, 8]):\n    from itertools import chain, combinations\n    return [(sum(subset) / len(subset)) for r in range(1, len(num_list)+1) for subset in combinations(num_list, r)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Itertools, List Comprehension, Type Annotations, and Assertions.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(permutations: List[List[int]], num_list=[1, 2, 3]) -> bool:\n    return all(sum(perm) % 2 == 0 for perm in permutations)\ndef g(num_list=[1, 2, 3]):\n    from itertools import permutations\n    return list(permutations(num_list))\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List \ndef f(averages: List[float], num_list=[4, 6, 8]) -> bool:\n    return all(avg.is_integer() for avg in averages)",
        "solution_func": "def g(num_list=[4, 6, 8]):\n    from itertools import chain, combinations\n    return [(sum(subset) / len(subset)) for r in range(1, len(num_list)+1) for subset in combinations(num_list, r)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the averages of all possible subsets of a given list of numbers are integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to generate all possible subsets of a list of numbers and calculate their averages, then check if all the averages are integers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(phrase: str) -> bool:\n    vowels = set(\"aeiou\")\n    has_vowels = any(char.lower() in vowels for char in phrase)\n    has_consonants = any(char.isalpha() and char.lower() not in vowels for char in phrase)\n    return has_vowels and has_consonants\n\ndef g():\n    import random\n    import string\n    phrase = ''.join(random.choices(string.ascii_lowercase, k=10))\n    return phrase\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations, Importing Modules (Itertools, etc.)",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g():\n    import random\n    nums = random.sample(range(1, 100), 5)\n    return nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(phrase: str) -> bool:\n    vowels = set(\"aeiou\")\n    has_vowels = any(char.lower() in vowels for char in phrase)\n    has_consonants = any(char.isalpha() and char.lower() not in vowels for char in phrase)\n    return has_vowels and has_consonants",
        "solution_func": "def g():\n    import random\n    import string\n    phrase = ''.join(random.choices(string.ascii_lowercase, k=10))\n    return phrase",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a randomly generated string contains both vowels and consonants. Another function g generates a random string of length 10. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with strings, sets, random module, and assert statement in Python. It tests the understanding of string manipulation and set operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    has_positive = any(num > 0 for num in numbers)\n    has_negative = any(num < 0 for num in numbers)\n    return has_positive and has_negative\n\ndef g():\n    import random\n    numbers = random.sample(range(-50, 51), 6)\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation to check if a list of numbers contains both positive and negative numbers.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g():\n    import random\n    nums = random.sample(range(1, 100), 5)\n    return nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    has_positive = any(num > 0 for num in numbers)\n    has_negative = any(num < 0 for num in numbers)\n    return has_positive and has_negative",
        "solution_func": "def g():\n    import random\n    numbers = random.sample(range(-50, 51), 6)\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 6 random numbers between -50 and 50 and checking if the list contains both positive and negative numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random numbers and checking if it contains both positive and negative numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(letters: list) -> bool:\n    has_uppercase = any(letter.isupper() for letter in letters)\n    has_lowercase = any(letter.islower() for letter in letters)\n    return has_uppercase and has_lowercase\n\ndef g():\n    import random\n    import string\n    letters = random.choices(string.ascii_letters, k=7)\n    return letters\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g():\n    import random\n    nums = random.sample(range(1, 100), 5)\n    return nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(letters: list) -> bool:\n    has_uppercase = any(letter.isupper() for letter in letters)\n    has_lowercase = any(letter.islower() for letter in letters)\n    return has_uppercase and has_lowercase",
        "solution_func": "def g():\n    import random\n    import string\n    letters = random.choices(string.ascii_letters, k=7)\n    return letters",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of random letters and checking if the list contains both uppercase and lowercase letters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random letters and checking if the list contains both uppercase and lowercase letters. The solution function g() generates a list of random letters, and the puzzle function f(letters) checks if the list contains both uppercase and lowercase letters.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(x: List[int], t=2021, a=10, e=99, s=3) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\n\ndef g(t=2021, a=10, e=99, s=3):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 2 * correction\n    else:\n        x[i] = correction\n    return x\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, list manipulation, and assertion testing.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(x: List[int], t=2021, a=10, e=99, s=3) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])",
        "solution_func": "def g(t=2021, a=10, e=99, s=3):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 2 * correction\n    else:\n        x[i] = correction\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks certain conditions on a list of integers, and a function g that generates a list of integers to satisfy those conditions. The goal is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the sum of a sublist of integers, ensuring no zeros are repeated, and checking that specific elements in the list are not zero. Function g generates a list of integers to meet these conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \n\ndef f(x: List[int], t=123456, a=5, e=80, s=4) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\n\ndef g(t=123456, a=5, e=80, s=4):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 2 * correction\n    else:\n        x[i] = correction\n    return x\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, list manipulation, and set operations.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \n\ndef f(x: List[int], t=123456, a=5, e=80, s=4) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])",
        "solution_func": "def g(t=123456, a=5, e=80, s=4):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 2 * correction\n    else:\n        x[i] = correction\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of integers meets certain conditions, and a function g that generates a list of integers to satisfy those conditions. The goal is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves list manipulation, condition checking, and algorithmic thinking in Python. It requires understanding of list comprehension, set operations, and loop logic.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(x: List[int], t=777, a=15, e=90, s=5) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\n\ndef g(t=777, a=15, e=90, s=5):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 2 * correction\n    else:\n        x[i] = correction\n    return x\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(x: List[int], t=777, a=15, e=90, s=5) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])",
        "solution_func": "def g(t=777, a=15, e=90, s=5):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 2 * correction\n    else:\n        x[i] = correction\n    return x",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks certain conditions on a list of integers, and a function g that generates a list of integers to satisfy those conditions. The goal is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves manipulating a list of integers to meet specific conditions and checking if the conditions are satisfied. It requires understanding of list comprehension, set operations, and list manipulation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=3) -> bool:\n    return len(s) % n == 0\n\ndef g(n=3):\n    return \"Python\" * n\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=500000, n=250) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=500000, n=250):\n    return [3] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, n=3) -> bool:\n    return len(s) % n == 0",
        "solution_func": "def g(n=3):\n    return \"Python\" * n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the length of a given string is divisible by a given number, and a function g that returns a string repeated a certain number of times. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as function definition, string manipulation, and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, key='name', n=3) -> bool:\n    return key in data\n\ndef g(key='name', n=3):\n    return {key: 'Alice', 'age': 30, 'city': 'New York'}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking if a key exists in the dictionary.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=500000, n=250) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=500000, n=250):\n    return [3] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(data: dict, key='name', n=3) -> bool:\n    return key in data",
        "solution_func": "def g(key='name', n=3):\n    return {key: 'Alice', 'age': 30, 'city': 'New York'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a specified key exists in a dictionary. The function g creates a dictionary with a specified key and values. The assertion checks if f returns True when called with the output of g as input."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks for a key in a dictionary and how to create a dictionary with specific key-value pairs. The assertion tests if the function f correctly identifies the presence of the specified key in the dictionary created by g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(words: tuple) -> bool:\n    sorted_chars = lambda word: ''.join(sorted(word))\n    return sorted_chars(words[0]) == sorted_chars(words[1])\n\ndef g():\n    strings = (\"listen\", \"silent\")\n    return strings\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int]], prime_tuple_sum=False) -> bool:\n    if len(tuples) < 1:\n        return False\n    unique_elements = lambda t: len(set(t)) == len(t)\n    tuple_sum = sum(len(t) for t in tuples)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return all(unique_elements(t) for t in tuples) and is_prime(tuple_sum) if prime_tuple_sum else True\n\ndef g(prime_tuple_sum=False):\n    tuples = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\n    return tuples if not prime_tuple_sum else sum(len(t) for t in tuples)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(words: tuple) -> bool:\n    sorted_chars = lambda word: ''.join(sorted(word))\n    return sorted_chars(words[0]) == sorted_chars(words[1])",
        "solution_func": "def g():\n    strings = (\"listen\", \"silent\")\n    return strings",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires checking if two words are anagrams of each other by sorting their characters and comparing the sorted strings."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks if two words are anagrams of each other by sorting their characters and comparing the sorted strings. The solution function provides a pair of words to be checked for anagrams.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 4, 6, 8, 10, 12]) -> bool:\n    total_sum = sum(numbers)\n    return total_sum % 2 == 0\n\ndef g(options=[2, 4, 6, 8, 10, 12]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total_sum = sum(c)\n            if total_sum % 2 == 0:\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the total sum of a list of numbers is even. It also uses itertools for generating combinations of options.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            product = 1\n            for num in p:\n                product *= num\n            if product % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 4, 6, 8, 10, 12]) -> bool:\n    total_sum = sum(numbers)\n    return total_sum % 2 == 0",
        "solution_func": "def g(options=[2, 4, 6, 8, 10, 12]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total_sum = sum(c)\n            if total_sum % 2 == 0:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of numbers from a given set that results in an even sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function that checks if the sum of a given list of numbers is even, and another function that generates combinations of numbers from a predefined set to find a combination with an even sum.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import permutations\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    max_value = max(numbers)\n    return is_prime(max_value)\n\ndef g(options=[2, 3, 5, 7, 11, 13, 17, 19]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            max_value = max(p)\n            if is_prime(max_value):\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and using permutations from itertools. It also includes list manipulation and iteration.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            product = 1\n            for num in p:\n                product *= num\n            if product % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import permutations\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    max_value = max(numbers)\n    return is_prime(max_value)",
        "solution_func": "def g(options=[2, 3, 5, 7, 11, 13, 17, 19]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            max_value = max(p)\n            if is_prime(max_value):\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a list of numbers from a given set of options such that the maximum value in the list is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand prime numbers, permutations, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g(text=\"radar\"):\n    return text + text[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \n\ndef f(seq: List[int]) -> bool:\n    return seq == seq[::-1]\n\ndef g(seq=[1, 2, 3, 4, 3, 2, 1]):\n    return seq + seq[-2::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g(text=\"radar\"):\n    return text + text[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given text is a palindrome and g generates a palindrome by concatenating a text with its reverse. The puzzle tests whether the generated palindrome is correctly identified as a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, palindrome checking, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers)\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    return numbers + [max(numbers)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering",
        "idx_generation": 51,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \n\ndef f(seq: List[int]) -> bool:\n    return seq == seq[::-1]\n\ndef g(seq=[1, 2, 3, 4, 3, 2, 1]):\n    return seq + seq[-2::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return numbers == sorted(numbers)",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5]):\n    return numbers + [max(numbers)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list of numbers is sorted in ascending order and then appends the maximum number in the list to the end. The solution function returns the input list with the maximum number appended to it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list is sorted and then modifying it by adding the maximum number. The solution function achieves this by appending the maximum number to the input list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(n: int, x=3, y=7) -> bool:\n    for i in range(n):\n        x *= 2\n        y -= 3\n    return sympy.isprime(x + y)\n\ndef g(x=3, y=7):\n    i = 0\n    while not sympy.isprime(x + y):\n        x *= 2\n        y -= 3\n        i += 1\n    return i\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, importing modules (Sympy), and number theory (prime numbers).",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int, x=5, y=10) -> bool:\n    for i in range(n):\n        x += 2\n        y -= 1\n    return x > y\ndef g(x=5, y=10):\n    i = 0\n    while x < y:\n        x += 2\n        y -= 1\n        i += 1\n    return i\nassert f(g()) == True\n"
        ],
        "problem_func": "import sympy\n\ndef f(n: int, x=3, y=7) -> bool:\n    for i in range(n):\n        x *= 2\n        y -= 3\n    return sympy.isprime(x + y)",
        "solution_func": "def g(x=3, y=7):\n    i = 0\n    while not sympy.isprime(x + y):\n        x *= 2\n        y -= 3\n        i += 1\n    return i",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(n) that performs a series of operations on two variables x and y based on the input n, and then checks if the sum of x and y is a prime number. The solution function g() iterates through operations on x and y until the sum is a prime number, and returns the number of iterations taken to reach a prime sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic arithmetic operations, iteration, and checking for prime numbers using the sympy library. It tests the student's understanding of loops, conditionals, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom math import isqrt\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return any(isqrt(num) ** 2 == num for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    squares = [num for num in nums if isqrt(num) ** 2 == num]\n    return squares\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation.",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom sympy import isprime\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(isprime(num) for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    primes = [num for num in nums if isprime(num)]\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom math import isqrt\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return any(isqrt(num) ** 2 == num for num in subsequence)",
        "solution_func": "def g(nums=[0]) -> List[int]:\n    squares = [num for num in nums if isqrt(num) ** 2 == num]\n    return squares",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if any number in a given subsequence is a perfect square."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand list comprehensions, the isqrt function from the math module, and how to check if a number is a perfect square.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom math import isqrt\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return sum(subsequence) == next(num for num in nums if isqrt(num) ** 3 == num)\n\ndef g(nums=[0]) -> List[int]:\n    cubes = [num for num in nums if isqrt(num) ** 3 == num]\n    return [sum(cubes)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, list manipulation, and importing modules (math). The puzzle requires finding a subsequence of numbers whose sum is equal to the cube of a number in the given list.",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom sympy import isprime\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(isprime(num) for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    primes = [num for num in nums if isprime(num)]\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom math import isqrt\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return sum(subsequence) == next(num for num in nums if isqrt(num) ** 3 == num)",
        "solution_func": "def g(nums=[0]) -> List[int]:\n    cubes = [num for num in nums if isqrt(num) ** 3 == num]\n    return [sum(cubes)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a subsequence of numbers whose sum is equal to the cube of a number in the given list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding list comprehensions, summing elements of a list, and using the isqrt function from the math module to check for cube numbers.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1] and word.islower()\n\ndef g(word_length=5):\n    import random\n    import string\n    word = ''.join(random.choice(string.ascii_lowercase) for _ in range(word_length))\n    return word + word[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(sequence: List[int], common_ratio=3, range_limit=100, options=[2, 6, 18, 54, 162]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] / sequence[i-1] == common_ratio\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_ratio=3, range_limit=100, options=[2, 6, 18, 54, 162]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] / c[i] == common_ratio for i in range(len(c)-1)):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1] and word.islower()",
        "solution_func": "def g(word_length=5):\n    import random\n    import string\n    word = ''.join(random.choice(string.ascii_lowercase) for _ in range(word_length))\n    return word + word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a random word of a specified length and check if it is a palindrome in lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random word, checking if it is a palindrome in lowercase, and comparing it to the generated word concatenated with its reverse. The solution function g() generates a random word of a specified length and returns the word concatenated with its reverse. The puzzle function f() checks if the input word is a palindrome in lowercase.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(words: List[str], keyword='python') -> bool:\n    return any(keyword in word for word in words) and all(len(word) % 2 == 0 for word in words)\n\ndef g(num_words=3, word_length=6, keyword='python'):\n    import random\n    import string\n    words = [''.join(random.choice(string.ascii_lowercase) for _ in range(word_length)) for _ in range(num_words)]\n    keyword_pos = random.randint(0, word_length-1)\n    words[random.randint(0, num_words-1)] = words[random.randint(0, num_words-1)][:keyword_pos] + keyword + words[random.randint(0, num_words-1)][keyword_pos:]\n    return words\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic, Randomization",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(sequence: List[int], common_ratio=3, range_limit=100, options=[2, 6, 18, 54, 162]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] / sequence[i-1] == common_ratio\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_ratio=3, range_limit=100, options=[2, 6, 18, 54, 162]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i+1] / c[i] == common_ratio for i in range(len(c)-1)):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(words: List[str], keyword='python') -> bool:\n    return any(keyword in word for word in words) and all(len(word) % 2 == 0 for word in words)",
        "solution_func": "def g(num_words=3, word_length=6, keyword='python'):\n    import random\n    import string\n    words = [''.join(random.choice(string.ascii_lowercase) for _ in range(word_length)) for _ in range(num_words)]\n    keyword_pos = random.randint(0, word_length-1)\n    words[random.randint(0, num_words-1)] = words[random.randint(0, num_words-1)][:keyword_pos] + keyword + words[random.randint(0, num_words-1)][keyword_pos:]\n    return words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of words and a keyword as input, and checks if the keyword is present in any word in the list and if all words have an even length. The solution function g generates a list of random words with a specified length and randomly inserts the keyword into one of the words. The puzzle is to implement f and g such that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, strings, random generation, and boolean conditions in Python. It tests the student's understanding of list comprehension, string manipulation, and logical operators in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list, sequence=[1, 0, 1]) -> bool:\n    assert len(sequence) >= 2 and any(numbers[i] % 2 == sequence[i % len(sequence)] for i in range(len(numbers)))\n    return True\n\ndef g(sequence=[1, 0, 1]):\n    numbers = [2, 3, 4, 5, 6, 7]\n\n    from itertools import cycle\n    return [(num - num % 2) + seq for num, seq in zip(numbers, cycle(sequence))]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic, list manipulation, and importing modules (Itertools).",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(string: str, sub='ab') -> bool:\n    assert len(sub) > 1 and sub in string and len(set(sub)) == len(sub)\n    return all(sub in string[i:i+len(sub)] for i in range(len(string) - len(sub) + 1))\ndef g(sub='ab'):\n    # brute force\n    string = 'abracadabra'\n\n    from itertools import permutations\n    for p in permutations(sub):\n        if all(char in sub for char in p) and len(p) == len(set(p)):\n            return ''.join(p)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers: list, sequence=[1, 0, 1]) -> bool:\n    assert len(sequence) >= 2 and any(numbers[i] % 2 == sequence[i % len(sequence)] for i in range(len(numbers)))\n    return True",
        "solution_func": "def g(sequence=[1, 0, 1]):\n    numbers = [2, 3, 4, 5, 6, 7]\n\n    from itertools import cycle\n    return [(num - num % 2) + seq for num, seq in zip(numbers, cycle(sequence))]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of numbers and a sequence, and checks if any number in the list is even and matches the corresponding element in the sequence. The solution function g generates a list of modified numbers based on the input sequence. The assertion at the end checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, cycling through a sequence, and checking conditions on numbers in a list. It can be used to teach Python programming concepts related to list manipulation and conditional statements.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target=3) -> bool:\n    for num in numbers:\n        if num % target == 0:\n            return True\n    return False\n\ndef g(size=5, target=3):\n    import random\n    numbers = [random.randint(1, 10) for _ in range(size)]\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(optimal_route: List[str], locations=[('A', 'B')]) -> bool:\n    for i in range(len(optimal_route) - 1):\n        assert (optimal_route[i], optimal_route[i + 1]) in locations\n    assert optimal_route[0] == 'A'\n    assert optimal_route[-1] == 'B'\n    return True\n\ndef g(locations=[('A', 'B')]):\n    route = [loc[0] for loc in locations] + [locations[-1][1]]\n    return route\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target=3) -> bool:\n    for num in numbers:\n        if num % target == 0:\n            return True\n    return False",
        "solution_func": "def g(size=5, target=3):\n    import random\n    numbers = [random.randint(1, 10) for _ in range(size)]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that checks if any number in a list generated by another function is divisible by a given target number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, loops, conditionals, and random number generation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    return \"level\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s: str) that checks if a string is a palindrome, write a function g() that returns the string 'level' and assert that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for palindromes in a string and creating a function that returns a specific palindrome string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime or not.",
        "idx_generation": 52,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g() that returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(binary_list: List[str], numbers=[12, 5, 8]) -> bool:\n    expected_binaries = [bin(num)[2:] for num in numbers]\n    return binary_list == expected_binaries\ndef g(numbers=[12, 5, 8]):\n    return [bin(num)[2:] for num in numbers]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and mathematical operations.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(binary_list: List[str], numbers=[12, 5, 8]) -> bool:\n    expected_binaries = [bin(num)[2:] for num in numbers]\n    return binary_list == expected_binaries",
        "solution_func": "def g(numbers=[12, 5, 8]):\n    return [bin(num)[2:] for num in numbers]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that compares a given list of binary strings with the binary representation of a list of numbers. The solution function g generates the binary representation of a list of numbers and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with binary representations of numbers and comparing lists of binary strings. The solution function g generates the expected binary representations of a list of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom math import isqrt\ndef f(count: int, string='PythonProgrammingChallenge') -> bool:\n    if count < 2:\n        return False\n    for i in range(2, isqrt(count) + 1):\n        if count % i == 0:\n            return False\n    return True\n\ndef g(string='PythonProgrammingChallenge'):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and importing modules (math). The solution involves string manipulation and conditional logic.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True"
        ],
        "problem_func": "from math import isqrt\ndef f(count: int, string='PythonProgrammingChallenge') -> bool:\n    if count < 2:\n        return False\n    for i in range(2, isqrt(count) + 1):\n        if count % i == 0:\n            return False\n    return True",
        "solution_func": "def g(string='PythonProgrammingChallenge'):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves counting the number of vowels in a given string and checking if the count is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function to count the number of vowels in a string and then check if the count is a prime number using a separate function.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int]) -> bool:\n    diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] != diff:\n            return False\n    return True\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to check if a given list of numbers forms an arithmetic sequence.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int]) -> bool:\n    diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] != diff:\n            return False\n    return True",
        "solution_func": "def g():\n    return [2, 4, 6, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers forms an arithmetic sequence, and a function g that returns a specific arithmetic sequence. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding arithmetic sequences and implementing a function to check for them. The solution function g provides an example of an arithmetic sequence to test the function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, chars=['a', 'b', 'c', 'd', 'e', 'f', 'g']) -> bool:\n    return all((c in s for c in chars))\ndef g(chars=['a', 'b', 'c', 'd', 'e', 'f', 'g']):\n    return ''.join(chars)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, chars=['a', 'b', 'c', 'd', 'e', 'f', 'g']) -> bool:\n    return all((c in s for c in chars))",
        "solution_func": "def g(chars=['a', 'b', 'c', 'd', 'e', 'f', 'g']):\n    return ''.join(chars)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all characters in a given string are present in a predefined list of characters. The solution function g returns a string composed of the predefined list of characters. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, string manipulation, and boolean logic in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, target_sum=42, nums=[5, 7, 8, 10, 12]) -> bool:\n    return sum(lst) == target_sum and all((num in lst for num in nums))\ndef g(target_sum=42, nums=[5, 7, 8, 10, 12]):\n    return [num for num in nums if num < target_sum]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and list manipulation.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, target_sum=42, nums=[5, 7, 8, 10, 12]) -> bool:\n    return sum(lst) == target_sum and all((num in lst for num in nums))",
        "solution_func": "def g(target_sum=42, nums=[5, 7, 8, 10, 12]):\n    return [num for num in nums if num < target_sum]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list, a target sum, and a list of numbers as parameters. The function checks if the sum of the list equals the target sum and if all numbers in the given list are present in the predefined list. The solution function g returns a list of numbers from the predefined list that are less than the target sum. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, comparison, and list comprehension in Python. It also tests the ability to define functions with default parameters and use them in assertions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list, row_sums=[7, 12, 15, 9, 11]) -> bool:\n    return [sum(row) for row in matrix] == row_sums\ndef g(row_sums=[7, 12, 15, 9, 11]):\n    return [[1, 2, 4], [3, 5, 4], [6, 3, 6], [2, 3, 4], [1, 2, 8]]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and comparison of row sums with predefined values.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(matrix: list, row_sums=[7, 12, 15, 9, 11]) -> bool:\n    return [sum(row) for row in matrix] == row_sums",
        "solution_func": "def g(row_sums=[7, 12, 15, 9, 11]):\n    return [[1, 2, 4], [3, 5, 4], [6, 3, 6], [2, 3, 4], [1, 2, 8]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a matrix and a list of row sums as input, and checks if the sum of each row in the matrix matches the corresponding value in the row sums list. The solution function g generates a specific matrix and checks if it satisfies the condition defined in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, matrix operations, and function definitions in Python. It also tests the ability to compare lists for equality. This puzzle can be used to teach Python programming concepts to master's students in CS.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)\n\ndef g(n=10):\n    return list(range(1, n+1))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves sorting and ordering of a list of integers.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return nums == sorted(nums)",
        "solution_func": "def g(n=10):\n    return list(range(1, n+1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that checks if a list of integers is sorted in ascending order. The solution function generates a list of integers in ascending order and checks if it is sorted."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in checking if a list is sorted and generating a sorted list. It can be used to teach basic list manipulation and comparison in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(numbers: list) -> bool:\n    return all(num % 2 == 0 for num in numbers)\n\ndef g(length=4):\n    return [random.randint(1, 100) * 2 for _ in range(length)]  # Generate a list with random even numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating a list of random even numbers and checking if all numbers in the list are even.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(string: str, pattern='ab') -> bool:\n    pattern_indices = {char: i for i, char in enumerate(pattern)}\n    current_index = 0\n\n    for char in string:\n        if char not in pattern_indices or pattern_indices[char] != current_index:\n            return False\n        current_index = (current_index + 1) % len(pattern)\n\n    return current_index == 0\n\ndef g(pattern='ab'):\n    return 'abab'  # Generate a string following the given pattern\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(numbers: list) -> bool:\n    return all(num % 2 == 0 for num in numbers)",
        "solution_func": "def g(length=4):\n    return [random.randint(1, 100) * 2 for _ in range(length)]  # Generate a list with random even numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random even numbers and check if all numbers in the list are even."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension and the all() function to check if all numbers in a list are even.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(numbers: list) -> bool:\n    return all(sympy.isprime(num) for num in numbers)\n\ndef g(length=4):\n    return [sympy.randprime(1, 100) for _ in range(length)]  # Generate a list with random prime numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list of numbers are prime numbers using the sympy library and generating random prime numbers using the sympy library.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(string: str, pattern='ab') -> bool:\n    pattern_indices = {char: i for i, char in enumerate(pattern)}\n    current_index = 0\n\n    for char in string:\n        if char not in pattern_indices or pattern_indices[char] != current_index:\n            return False\n        current_index = (current_index + 1) % len(pattern)\n\n    return current_index == 0\n\ndef g(pattern='ab'):\n    return 'abab'  # Generate a string following the given pattern\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import sympy\n\ndef f(numbers: list) -> bool:\n    return all(sympy.isprime(num) for num in numbers)",
        "solution_func": "def g(length=4):\n    return [sympy.randprime(1, 100) for _ in range(length)]  # Generate a list with random prime numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a list of random prime numbers and checking if all the numbers in the list are prime using the sympy library in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the students' understanding of generating random prime numbers and checking for primality using the sympy library in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict, List \ndef f(slices: Dict[str, List[str]], preferences={'Alice': ['cheese', 'mushrooms'], 'Bob': ['pepperoni', 'olives']}) -> bool:\n\n    def check_preferences(slices: Dict[str, List[str]], preferences: Dict[str, List[str]]) -> bool:\n        for friend, chosen_slices in slices.items():\n            if not all(topping in preferences[friend] for topping in chosen_slices):\n                return False\n        return True\n\n    return check_preferences(slices, preferences)\n\ndef g(preferences={'Alice': ['cheese', 'mushrooms'], 'Bob': ['pepperoni', 'olives']}):\n\n    slices = {'Alice': ['cheese', 'mushrooms'], 'Bob': ['olives', 'pepperoni']}\n\n    return slices\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and dictionary manipulation to check if the chosen pizza toppings match the preferences of each friend. It also includes a test case using assert statement for validation.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Dict, List \ndef f(slices: Dict[str, List[str]], preferences={'Alice': ['cheese', 'mushrooms'], 'Bob': ['pepperoni', 'olives']}) -> bool:\n\n    def check_preferences(slices: Dict[str, List[str]], preferences: Dict[str, List[str]]) -> bool:\n        for friend, chosen_slices in slices.items():\n            if not all(topping in preferences[friend] for topping in chosen_slices):\n                return False\n        return True\n\n    return check_preferences(slices, preferences)",
        "solution_func": "def g(preferences={'Alice': ['cheese', 'mushrooms'], 'Bob': ['pepperoni', 'olives']}):\n\n    slices = {'Alice': ['cheese', 'mushrooms'], 'Bob': ['olives', 'pepperoni']}\n\n    return slices",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if friends have chosen pizza toppings according to their preferences, and a function g that provides the chosen toppings for friends. The puzzle tests if the chosen toppings match the preferences."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if friends have chosen pizza toppings according to their preferences. The solution function g provides the chosen toppings for friends, and the puzzle function f checks if the chosen toppings match the preferences.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict, List \ndef f(study_plan: Dict[str, List[str]], topics=['math', 'history', 'science']) -> bool:\n\n    def check_coverage(study_plan: Dict[str, List[str]], topics: List[str]) -> bool:\n        covered_topics = set()\n        for student, topics_covered in study_plan.items():\n            covered_topics.update(topics_covered)\n        return set(topics) == covered_topics\n\n    return check_coverage(study_plan, topics)\n\ndef g(topics=['math', 'history', 'science']):\n\n    study_plan = {'Alice': ['math', 'science'], 'Bob': ['history', 'science'], 'Charlie': ['math', 'history']}\n\n    return study_plan\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Conditional Logic, and Function Definitions.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True"
        ],
        "problem_func": "from typing import Dict, List \ndef f(study_plan: Dict[str, List[str]], topics=['math', 'history', 'science']) -> bool:\n\n    def check_coverage(study_plan: Dict[str, List[str]], topics: List[str]) -> bool:\n        covered_topics = set()\n        for student, topics_covered in study_plan.items():\n            covered_topics.update(topics_covered)\n        return set(topics) == covered_topics\n\n    return check_coverage(study_plan, topics)",
        "solution_func": "def g(topics=['math', 'history', 'science']):\n\n    study_plan = {'Alice': ['math', 'science'], 'Bob': ['history', 'science'], 'Charlie': ['math', 'history']}\n\n    return study_plan",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given study plan covers all specified topics. The function g provides a sample study plan, and the goal is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function to check coverage of topics in a study plan and ensuring that the provided sample study plan covers all specified topics.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport numpy as np\n\ndef f(matrix: np.array) -> bool:\n    return np.array_equal(matrix, matrix.T)\n\ndef g() -> np.array:\n    size = np.random.randint(3, 6)\n    matrix = np.random.randint(1, 10, size=(size, size))\n    sym_matrix = (matrix + matrix.T) // 2\n    return sym_matrix\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to numpy arrays, matrix manipulation, symmetry, and random number generation.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g() -> list:\n    import random\n    length = random.randint(5, 10)\n    return [random.randint(1, 100) * 2 for _ in range(length)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import numpy as np\n\ndef f(matrix: np.array) -> bool:\n    return np.array_equal(matrix, matrix.T)",
        "solution_func": "def g() -> np.array:\n    size = np.random.randint(3, 6)\n    matrix = np.random.randint(1, 10, size=(size, size))\n    sym_matrix = (matrix + matrix.T) // 2\n    return sym_matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a random symmetric matrix and checking if it is equal to its transpose."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to generate random matrices, calculate the transpose of a matrix, and check for symmetry.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums) - 1))\n\ndef g() -> list:\n    import random\n    length = random.randint(5, 10)\n    return sorted(random.sample(range(1, 100), length))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves sorting a list of numbers and checking if the list is in ascending order. It also includes generating a random list of numbers within a specified range. The solution uses the `sorted` function and `random` module in Python.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g() -> list:\n    import random\n    length = random.randint(5, 10)\n    return [random.randint(1, 100) * 2 for _ in range(length)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return all(nums[i] <= nums[i+1] for i in range(len(nums) - 1))",
        "solution_func": "def g() -> list:\n    import random\n    length = random.randint(5, 10)\n    return sorted(random.sample(range(1, 100), length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that generates a list of random numbers, sorts the list, and then checks if the list is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random list of numbers, sorting the list, and then checking if the list is sorted in ascending order. The solution function g() generates a random list of numbers and sorts it, while the puzzle function f(nums) checks if the list is sorted in ascending order.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, char_counts={'a': 3, 'b': 2, 'c': 1}) -> bool:\n    return all((s.count(char) == count for char, count in char_counts.items()))\n\ndef g(char_counts={'a': 3, 'b': 2, 'c': 1}):\n    return ''.join([char * count for char, count in char_counts.items()])\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, char_counts={'a': 3, 'b': 2, 'c': 1}) -> bool:\n    return all((s.count(char) == count for char, count in char_counts.items()))",
        "solution_func": "def g(char_counts={'a': 3, 'b': 2, 'c': 1}):\n    return ''.join([char * count for char, count in char_counts.items()])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string can be constructed using a specific set of character counts, and a function g that constructs a string based on a given set of character counts. The puzzle tests the relationship between f and g by asserting that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define functions that manipulate strings and dictionaries in Python, as well as testing the relationship between the two functions using assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, numbers=[7, 13, 19, 23], target_sum=62) -> bool:\n    return sum(lst) == target_sum and all((num in lst for num in numbers))\n\ndef g(numbers=[7, 13, 19, 23], target_sum=62):\n    return [num for num in numbers] + [target_sum - sum(numbers)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 53,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list, numbers=[7, 13, 19, 23], target_sum=62) -> bool:\n    return sum(lst) == target_sum and all((num in lst for num in numbers))",
        "solution_func": "def g(numbers=[7, 13, 19, 23], target_sum=62):\n    return [num for num in numbers] + [target_sum - sum(numbers)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list of numbers equals a target sum and contains specific numbers. The solution function g generates a list of numbers that satisfy the conditions set by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of numbers equals a target sum and contains specific numbers. The solution function generates a list that meets these conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return any((num > 0 for num in lst)) and any((int(num**0.5) == num**0.5 for num in lst))\ndef g() -> list:\n    import random\n    random_int = random.randint(1, 10)\n    perfect_square = random_int**2\n    positive_nums = [random.randint(1, 10) for _ in range(5)]\n    positive_nums.append(perfect_square)\n    return positive_nums\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and importing modules (random). It also indirectly involves probability and statistics as it checks for perfect squares.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return any((num > 0 for num in lst)) and any((int(num**0.5) == num**0.5 for num in lst))",
        "solution_func": "def g() -> list:\n    import random\n    random_int = random.randint(1, 10)\n    perfect_square = random_int**2\n    positive_nums = [random.randint(1, 10) for _ in range(5)]\n    positive_nums.append(perfect_square)\n    return positive_nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 5 random positive numbers and one perfect square, and checking if the list contains at least one positive number and one perfect square."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random positive numbers and a perfect square, and then checking if the list contains at least one positive number and one perfect square.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return all((isinstance(key, str) for key in d.keys())) and all((isinstance(value, list) for value in d.values()))\ndef g() -> dict:\n    import random\n    keys = ['key1', 'key2', 'key3']\n    values = [[random.randint(1, 10) for _ in range(3)] for _ in range(3)]\n    return dict(zip(keys, values))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, type checking, list comprehension, and random module usage.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return all((isinstance(key, str) for key in d.keys())) and all((isinstance(value, list) for value in d.values()))",
        "solution_func": "def g() -> dict:\n    import random\n    keys = ['key1', 'key2', 'key3']\n    values = [[random.randint(1, 10) for _ in range(3)] for _ in range(3)]\n    return dict(zip(keys, values))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(d: dict) that checks if all keys in a dictionary are strings and all values are lists. The solution function g() generates a dictionary with random keys and values, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, checking data types, and generating random values. It can be used to teach students about dictionary manipulation and type checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(values: List[int]) -> bool:\n    max_value = max(values)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return is_prime(max_value)\n\ndef g():\n    values = [2, 3, 5, 7, 4]\n    return values\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to Mathematical Operations, Conditional Logic, and Number Theory.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int]], prime_tuple_sum=False) -> bool:\n    if len(tuples) < 1:\n        return False\n    unique_elements = lambda t: len(set(t)) == len(t)\n    tuple_sum = sum(len(t) for t in tuples)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return all(unique_elements(t) for t in tuples) and is_prime(tuple_sum) if prime_tuple_sum else True\n\ndef g(prime_tuple_sum=False):\n    tuples = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\n    return tuples if not prime_tuple_sum else sum(len(t) for t in tuples)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(values: List[int]) -> bool:\n    max_value = max(values)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return is_prime(max_value)",
        "solution_func": "def g():\n    values = [2, 3, 5, 7, 4]\n    return values",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the maximum value in a list and checking if it is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to determine if the maximum value in a list is a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str, word='radar') -> bool:\n    return palindrome == palindrome[::-1]\n\ndef g(word='radar') -> str:\n    return word[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(factorial: int, n=5) -> bool:\n    def factorial_recursive(n):\n        if n == 0:\n            return 1\n        return n * factorial_recursive(n-1)\n    return factorial == factorial_recursive(n)\n\ndef g(n=5) -> int:\n    def factorial_recursive(n):\n        if n == 0:\n            return 1\n        return n * factorial_recursive(n-1)\n    return factorial_recursive(n)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(palindrome: str, word='radar') -> bool:\n    return palindrome == palindrome[::-1]",
        "solution_func": "def g(word='radar') -> str:\n    return word[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function to check if a given string is a palindrome, and another function to reverse a string. The assertion checks if the reversed string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, checking for palindromes, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sorted_list: list, nums=[1, 2, 3, 4, 5]) -> bool:\n    return sorted_list == sorted(nums)\n\ndef g(nums=[1, 2, 3, 4, 5]) -> list:\n    return sorted(nums)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if it is equal to a predefined sorted list.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(factorial: int, n=5) -> bool:\n    def factorial_recursive(n):\n        if n == 0:\n            return 1\n        return n * factorial_recursive(n-1)\n    return factorial == factorial_recursive(n)\n\ndef g(n=5) -> int:\n    def factorial_recursive(n):\n        if n == 0:\n            return 1\n        return n * factorial_recursive(n-1)\n    return factorial_recursive(n)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(sorted_list: list, nums=[1, 2, 3, 4, 5]) -> bool:\n    return sorted_list == sorted(nums)",
        "solution_func": "def g(nums=[1, 2, 3, 4, 5]) -> list:\n    return sorted(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given list is sorted in ascending order and comparing it to a predefined list of numbers. The solution function g returns the predefined list of numbers sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check if a list is sorted and how to sort a list in Python using the sorted() function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(s: str) -> bool:\n    clean_str = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    return clean_str == clean_str[::-1]\n\ndef g(input_str=\"A man, a plan, a canal: Panama!\"):\n    return input_str\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.), Pattern Recognition",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\ndef f(subsets: List[List[int]], target_sum=5) -> bool:\n    return any(sum(subset) == target_sum for subset in subsets)\ndef g(int_list=[1, 2, 3]):\n    def powerset(s):\n        result = [[]]\n        for elem in s:\n            result += [x + [elem] for x in result]\n        return result\n\n    return [subset for subset in powerset(int_list) if subset != []]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import re\n\ndef f(s: str) -> bool:\n    clean_str = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    return clean_str == clean_str[::-1]",
        "solution_func": "def g(input_str=\"A man, a plan, a canal: Panama!\"):\n    return input_str",
        "quality": [
            null
        ],
        "description": [
            "Given a string, the puzzle checks if the string is a palindrome after removing all non-alphanumeric characters and ignoring case."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string is a palindrome after removing all non-alphanumeric characters and ignoring case.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(int_list: List[int]) -> bool:\n    return int_list == sorted(int_list)\n\ndef g(input_list=[3, 1, 4, 1, 5, 9, 2, 6]):\n    return sorted(input_list)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if it is sorted correctly.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\ndef f(subsets: List[List[int]], target_sum=5) -> bool:\n    return any(sum(subset) == target_sum for subset in subsets)\ndef g(int_list=[1, 2, 3]):\n    def powerset(s):\n        result = [[]]\n        for elem in s:\n            result += [x + [elem] for x in result]\n        return result\n\n    return [subset for subset in powerset(int_list) if subset != []]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(int_list: List[int]) -> bool:\n    return int_list == sorted(int_list)",
        "solution_func": "def g(input_list=[3, 1, 4, 1, 5, 9, 2, 6]):\n    return sorted(input_list)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that checks if a given list of integers is sorted in ascending order. The solution function sorts a given list of integers and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python to master's students in CS as it involves understanding list manipulation and sorting in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], keyword='python') -> bool:\n    return any(keyword in s for s in strings)\n\ndef g(input_strings=[\"I love programming\", \"Python is awesome\", \"Coding is fun\"]):\n    return [s + ' ' + 'python' for s in input_strings]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\ndef f(subsets: List[List[int]], target_sum=5) -> bool:\n    return any(sum(subset) == target_sum for subset in subsets)\ndef g(int_list=[1, 2, 3]):\n    def powerset(s):\n        result = [[]]\n        for elem in s:\n            result += [x + [elem] for x in result]\n        return result\n\n    return [subset for subset in powerset(int_list) if subset != []]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], keyword='python') -> bool:\n    return any(keyword in s for s in strings)",
        "solution_func": "def g(input_strings=[\"I love programming\", \"Python is awesome\", \"Coding is fun\"]):\n    return [s + ' ' + 'python' for s in input_strings]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given keyword is present in any of the strings in a list. The solution function g appends the keyword 'python' to each string in a default list of strings and returns the modified list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as list manipulation, string operations, and function calls with default arguments.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))\n\ndef g():\n    return [1, 2, 3, 4, 5, 5, 6]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for duplicate elements in a list, which falls under the topic of Set Operations.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return len(nums) != len(set(nums))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 5, 6]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and returns True if there are duplicate elements in the list, and a function g that returns a list with duplicate elements. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation and the use of set to identify duplicate elements in a list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sorted_list: List[int], nums=[9, 3, 5, 1, 7]) -> bool:\n    return sorted_list == sorted(nums)\n\ndef g(nums=[9, 3, 5, 1, 7]):\n    def custom_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        pivot = arr[0]\n        less = [x for x in arr[1:] if x <= pivot]\n        greater = [x for x in arr[1:] if x > pivot]\n        return custom_sort(less) + [pivot] + custom_sort(greater)\n    \n    return custom_sort(nums)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if it is equal to a predefined sorted list. The solution uses a custom sorting algorithm to sort the list of integers.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(sorted_list: List[int], nums=[9, 3, 5, 1, 7]) -> bool:\n    return sorted_list == sorted(nums)",
        "solution_func": "def g(nums=[9, 3, 5, 1, 7]):\n    def custom_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        pivot = arr[0]\n        less = [x for x in arr[1:] if x <= pivot]\n        greater = [x for x in arr[1:] if x > pivot]\n        return custom_sort(less) + [pivot] + custom_sort(greater)\n    \n    return custom_sort(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves sorting a list of numbers using a custom sorting algorithm and checking if the sorted list matches a predefined list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a custom sorting algorithm to sort a list of numbers and then compare the sorted list with a predefined list to check if they match.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(max_sum: int, nums=[-2, 1, -3, 4, -1, 2, 1, -5, 4]) -> bool:\n    return max_sum == max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1))\n\ndef g(nums=[-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding the maximum subarray sum using Kadane's algorithm.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(max_sum: int, nums=[-2, 1, -3, 4, -1, 2, 1, -5, 4]) -> bool:\n    return max_sum == max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1))",
        "solution_func": "def g(nums=[-2, 1, -3, 4, -1, 2, 1, -5, 4]):\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding the maximum sum of a subarray within a given list of integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of subarrays, dynamic programming, and comparison of maximum sums.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return sum(nums) / len(nums) > 25\n\ndef g():\n    import random\n    return [random.randint(10, 50) * 2 for _ in range(6)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 54,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list) -> bool:\n    return sum(nums) > 100\n\ndef g():\n    import random\n    return [random.randint(1, 50) for _ in range(5)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return sum(nums) / len(nums) > 25",
        "solution_func": "def g():\n    import random\n    return [random.randint(10, 50) * 2 for _ in range(6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the average of a list of numbers is greater than 25, and a function g that generates a list of 6 random numbers between 20 and 100. The assertion checks if f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation and comparison operations in Python. It tests the understanding of list comprehension, summing elements in a list, calculating averages, and comparison operators.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(is_palindrome: bool, s=\"radar\") -> bool:\n    return s == s[::-1] == is_palindrome\n\ndef g(s=\"radar\"):\n    return s[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, arr=[4, 9, 1, 3, 8, 7]) -> bool:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum\n\ndef g(arr=[4, 9, 1, 3, 8, 7]):\n    if len(arr) <= 2:\n        return sum(arr)\n    incl = arr[0]\n    excl = 0\n    for num in arr[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(is_palindrome: bool, s=\"radar\") -> bool:\n    return s == s[::-1] == is_palindrome",
        "solution_func": "def g(s=\"radar\"):\n    return s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given string is a palindrome, and another function g that returns the reverse of a given string. The assertion tests if the reverse of a string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], char='a') -> bool:\n    return any(char in string for string in strings)\n\ndef g(char='a') -> List[str]:\n    string_length = 5\n    return [char * string_length for _ in range(3)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    return any(target in row for row in matrix)\n\ndef g(target=0) -> List[List[int]]:\n    matrix_size = 3\n    return [[target] * matrix_size for _ in range(matrix_size)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], char='a') -> bool:\n    return any(char in string for string in strings)",
        "solution_func": "def g(char='a') -> List[str]:\n    string_length = 5\n    return [char * string_length for _ in range(3)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define a function that checks if a given character is present in any of the strings in a list. The solution function generates a list of strings with a specified character repeated multiple times, and the puzzle is solved if the character 'a' is present in any of these generated strings."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, string manipulation, and function calls in Python. It tests the students' ability to write a function that checks for a specific condition in a list of strings and generate a list of strings with a specific character repeated multiple times.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(dictionary: dict, key='a') -> bool:\n    return any(key in value for value in dictionary.values())\n\ndef g(key='a') -> dict:\n    num_values = 3\n    return {i: key * 3 for i in range(num_values)}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking for a specific key in the dictionary values.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    return any(target in row for row in matrix)\n\ndef g(target=0) -> List[List[int]]:\n    matrix_size = 3\n    return [[target] * matrix_size for _ in range(matrix_size)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(dictionary: dict, key='a') -> bool:\n    return any(key in value for value in dictionary.values())",
        "solution_func": "def g(key='a') -> dict:\n    num_values = 3\n    return {i: key * 3 for i in range(num_values)}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specified key is present in any of the values in a dictionary. The solution function g generates a dictionary with a specified key repeated multiple times as values, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, checking for key presence in dictionary values, and understanding how functions can be used together to solve a problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lists: List[List[int]], element=0) -> bool:\n    return any(element in sublist for sublist in lists)\n\ndef g(element=0) -> List[List[int]]:\n    sublist_length = 3\n    num_sublists = 3\n    return [[element] * sublist_length for _ in range(num_sublists)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for the presence of an element in sublists.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    return any(target in row for row in matrix)\n\ndef g(target=0) -> List[List[int]]:\n    matrix_size = 3\n    return [[target] * matrix_size for _ in range(matrix_size)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lists: List[List[int]], element=0) -> bool:\n    return any(element in sublist for sublist in lists)",
        "solution_func": "def g(element=0) -> List[List[int]]:\n    sublist_length = 3\n    num_sublists = 3\n    return [[element] * sublist_length for _ in range(num_sublists)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given element is present in any sublist of a list of lists. The solution function g generates a list of lists with a specified element repeated in each sublist. The assertion checks if the solution function g satisfies the condition of the puzzle function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a specific element is present in any sublist of a list of lists. The solution function generates a list of lists with the specified element, and the assertion confirms that the solution function satisfies the condition of the puzzle function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    diffs = [j - i for i, j in zip(nums, nums[1:])]\n    return any(all(nums[k] + diffs[k] == nums[k+1] for k in range(len(nums)-1)) for i in range(len(nums)) for j in range(i, len(nums)))\n\ndef g(length=5, max_num=100):\n    import random\n    nums = [random.randint(1, max_num) for _ in range(length)]\n    return nums\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, iteration, and random number generation.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    diffs = [j - i for i, j in zip(nums, nums[1:])]\n    return any(all(nums[k] + diffs[k] == nums[k+1] for k in range(len(nums)-1)) for i in range(len(nums)) for j in range(i, len(nums)))",
        "solution_func": "def g(length=5, max_num=100):\n    import random\n    nums = [random.randint(1, max_num) for _ in range(length)]\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and checks if the list follows a specific pattern. The solution function g generates a random list of integers and checks if it satisfies the pattern defined by function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random lists of integers and checking if they follow a specific pattern. It can be used to teach students about list manipulation and pattern checking in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    ratios = [j / i for i, j in zip(nums, nums[1:])]\n    return any(all(nums[k] * ratios[k] == nums[k+1] for k in range(len(nums)-1)) for i in range(len(nums)) for j in range(i, len(nums)))\n\ndef g(length=5, max_num=100):\n    import random\n    nums = [random.randint(1, max_num) for _ in range(length)]\n    return nums\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and random number generation using the random module.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    ratios = [j / i for i, j in zip(nums, nums[1:])]\n    return any(all(nums[k] * ratios[k] == nums[k+1] for k in range(len(nums)-1)) for i in range(len(nums)) for j in range(i, len(nums)))",
        "solution_func": "def g(length=5, max_num=100):\n    import random\n    nums = [random.randint(1, max_num) for _ in range(length)]\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and checks if a specific mathematical condition is satisfied. The solution function g generates a random list of integers and returns it. The puzzle is to determine if the condition in f is satisfied for the list generated by g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, zip function, and the any function in Python. It also requires understanding of mathematical ratios and checking if a specific condition is satisfied for a given list of integers.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    import random\n    num = random.randint(1, 100)\n    return num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to Number Theory, specifically checking for prime numbers.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(phrase: str) -> bool:\n    vowels = set(\"aeiou\")\n    has_vowels = any(char.lower() in vowels for char in phrase)\n    has_consonants = any(char.isalpha() and char.lower() not in vowels for char in phrase)\n    return has_vowels and has_consonants\n\ndef g():\n    import random\n    import string\n    phrase = ''.join(random.choices(string.ascii_lowercase, k=10))\n    return phrase\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import random\n    num = random.randint(1, 100)\n    return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number, and a function g() that generates a random number between 1 and 100. The puzzle requires finding a random prime number between 1 and 100."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a randomly generated number is a prime number. The student needs to understand the concept of prime numbers and how to generate random numbers in Python to solve this puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    has_positive = any(num > 0 for num in numbers)\n    has_negative = any(num < 0 for num in numbers)\n    return has_positive and has_negative\n\ndef g():\n    import random\n    numbers = random.sample(range(-10, 10), 5)\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Conditional Logic and Importing Modules (Itertools, etc.)",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(phrase: str) -> bool:\n    vowels = set(\"aeiou\")\n    has_vowels = any(char.lower() in vowels for char in phrase)\n    has_consonants = any(char.isalpha() and char.lower() not in vowels for char in phrase)\n    return has_vowels and has_consonants\n\ndef g():\n    import random\n    import string\n    phrase = ''.join(random.choices(string.ascii_lowercase, k=10))\n    return phrase\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    has_positive = any(num > 0 for num in numbers)\n    has_negative = any(num < 0 for num in numbers)\n    return has_positive and has_negative",
        "solution_func": "def g():\n    import random\n    numbers = random.sample(range(-10, 10), 5)\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 5 random numbers between -10 and 10, and checking if the list contains both positive and negative numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension to check for positive and negative numbers in a randomly generated list of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g():\n    import random\n    import string\n    word = ''.join(random.choices(string.ascii_lowercase, k=5))\n    palindrome = word + word[::-1]\n    return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(phrase: str) -> bool:\n    vowels = set(\"aeiou\")\n    has_vowels = any(char.lower() in vowels for char in phrase)\n    has_consonants = any(char.isalpha() and char.lower() not in vowels for char in phrase)\n    return has_vowels and has_consonants\n\ndef g():\n    import random\n    import string\n    phrase = ''.join(random.choices(string.ascii_lowercase, k=10))\n    return phrase\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    import random\n    import string\n    word = ''.join(random.choices(string.ascii_lowercase, k=5))\n    palindrome = word + word[::-1]\n    return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated word concatenated with its reverse is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random word, creating a palindrome by concatenating the word with its reverse, and then checking if the resulting string is a palindrome or not.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(words: list) -> bool:\n    return any(len(word) > 5 for word in words)\n\ndef g():\n    import random\n    import string\n    words = [''.join(random.choices(string.ascii_lowercase, k=random.randint(4, 8))) for _ in range(3)]\n    return words\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves String Manipulation, Importing Modules, and Conditional Logic.",
        "idx_generation": 55,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(phrase: str) -> bool:\n    vowels = set(\"aeiou\")\n    has_vowels = any(char.lower() in vowels for char in phrase)\n    has_consonants = any(char.isalpha() and char.lower() not in vowels for char in phrase)\n    return has_vowels and has_consonants\n\ndef g():\n    import random\n    import string\n    phrase = ''.join(random.choices(string.ascii_lowercase, k=10))\n    return phrase\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(words: list) -> bool:\n    return any(len(word) > 5 for word in words)",
        "solution_func": "def g():\n    import random\n    import string\n    words = [''.join(random.choices(string.ascii_lowercase, k=random.randint(4, 8))) for _ in range(3)]\n    return words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if any word in a list of words has a length greater than 5. The function g generates a list of random words and the assert statement checks if f returns True for the generated list of words."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with list comprehension, random module, string module, and assert statement in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], divisor=3, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    return sum(numbers) % divisor == 0\n\ndef g(divisor=3, options=[1, 2, 3, 4, 5, 6]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if sum(p) % divisor == 0:\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as list manipulation, itertools module, permutations, and conditional logic.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], threshold=15, options=[10, 12, 14, 16, 18, 20]) -> bool:\n    return max(numbers) > threshold\n\ndef g(threshold=15, options=[10, 12, 14, 16, 18, 20]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if max(c) > threshold:\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], divisor=3, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    return sum(numbers) % divisor == 0",
        "solution_func": "def g(divisor=3, options=[1, 2, 3, 4, 5, 6]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if sum(p) % divisor == 0:\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where the first function checks if the sum of a list of numbers is divisible by a given divisor, and the second function generates permutations of a list of options to find a combination that satisfies the divisibility condition. The assertion at the end checks if the second function returns a valid solution for the first function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, permutations, and conditional statements in Python. It also tests the understanding of function composition and assertion testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], threshold=100, options=[2, 3, 4, 5, 6, 7]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product < threshold\n\ndef g(threshold=100, options=[2, 3, 4, 5, 6, 7]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            product = 1\n            for num in c:\n                product *= num\n            if product < threshold:\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, importing modules (Itertools), and conditional logic.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], threshold=15, options=[10, 12, 14, 16, 18, 20]) -> bool:\n    return max(numbers) > threshold\n\ndef g(threshold=15, options=[10, 12, 14, 16, 18, 20]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if max(c) > threshold:\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], threshold=100, options=[2, 3, 4, 5, 6, 7]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product < threshold",
        "solution_func": "def g(threshold=100, options=[2, 3, 4, 5, 6, 7]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            product = 1\n            for num in c:\n                product *= num\n            if product < threshold:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of integers, a threshold value, and a list of options. The function calculates the product of the integers in the list and returns whether the product is less than the threshold. The solution function g generates combinations of options and returns a list of numbers whose product is less than the threshold."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation, iteration, and combination generation in Python. It tests the understanding of functions, loops, and itertools module. The solution function g must correctly generate combinations that satisfy the condition of the threshold.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target=29, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    sum_of_squares = sum([num**2 for num in numbers])\n    return sum_of_squares == target\n\ndef g(target=29, options=[1, 2, 3, 4, 5, 6]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            sum_of_squares = sum([num**2 for num in p])\n            if sum_of_squares == target:\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, permutations and combinations, and importing modules (Itertools).",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], threshold=15, options=[10, 12, 14, 16, 18, 20]) -> bool:\n    return max(numbers) > threshold\n\ndef g(threshold=15, options=[10, 12, 14, 16, 18, 20]):\n    from itertools import combinations\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            if max(c) > threshold:\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target=29, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    sum_of_squares = sum([num**2 for num in numbers])\n    return sum_of_squares == target",
        "solution_func": "def g(target=29, options=[1, 2, 3, 4, 5, 6]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            sum_of_squares = sum([num**2 for num in p])\n            if sum_of_squares == target:\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of numbers from a given set that when squared and summed up equals a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list comprehensions, permutations, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)\n\ndef g(length=5):\n    import string\n    import random\n    return ''.join(random.sample(string.ascii_lowercase, length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g(length=5):\n    import string\n    import random\n    return ''.join(random.sample(string.ascii_lowercase, length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to write a function that checks if a given string has all unique characters, and then generate a random string of a specified length to test the function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, set operations, and random generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str, substring=\"\") -> bool:\n    return substring in string\n\ndef g(substring=\"\"):\n    string = \"hello world\"  # Mutated string\n    return string + substring\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(words: List[str], letters=\"a\") -> bool:\n    letters_set = set(letters)\n    for word in words:\n        if not set(word).issubset(letters_set):\n            return False\n    return True\n\ndef g(letters=\"a\"):\n    words = [\"a\", \"aa\", \"aaa\"]  # Mutated word list\n    return max([word for word in words if set(word).issubset(set(letters))], key=len)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str, substring=\"\") -> bool:\n    return substring in string",
        "solution_func": "def g(substring=\"\"):\n    string = \"hello world\"  # Mutated string\n    return string + substring",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if a given substring is present in a string, and g returns a concatenated string with the given substring. The puzzle tests whether the substring can be found in the concatenated string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, string manipulation, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(arr: List[int], n=200, s=20000) -> bool:\n    return len(arr) == n and sum(arr) == s and all(x % 2 == 0 for x in arr)\n\ndef g(n=200, s=20000):\n    arr = []\n    num = 2\n    while len(arr) < n - 1:\n        arr.append(num)\n        num = -num\n        if num in arr:\n            num += 2\n\n    if s - sum(arr) in arr:\n        arr = [i for i in range(2, n + 1, 2)]\n\n    arr = arr + [s - sum(arr)]\n    return arr\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Mathematical Operations, Conditional Logic, List Manipulation, and Algorithm Optimization.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(x: List[int], n=150, s=11250) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 150, s = 11250):\n    a = 3\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 3\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(arr: List[int], n=200, s=20000) -> bool:\n    return len(arr) == n and sum(arr) == s and all(x % 2 == 0 for x in arr)",
        "solution_func": "def g(n=200, s=20000):\n    arr = []\n    num = 2\n    while len(arr) < n - 1:\n        arr.append(num)\n        num = -num\n        if num in arr:\n            num += 2\n\n    if s - sum(arr) in arr:\n        arr = [i for i in range(2, n + 1, 2)]\n\n    arr = arr + [s - sum(arr)]\n    return arr",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of even numbers that sum up to a specific value, with a specific length and sum. The solution generates such a list based on certain conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of even numbers meets certain criteria in terms of length, sum, and evenness. The solution generates a list that satisfies these criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], n=120, s=7200) -> bool:\n    return len(numbers) == n and sum(numbers) == s and all(x % 3 == 0 for x in numbers)\n\ndef g(n=120, s=7200):\n    numbers = []\n    val = 6\n    while len(numbers) < n - 1:\n        numbers.append(val)\n        val = -val\n        if val in numbers:\n            val += 6\n\n    if s - sum(numbers) in numbers:\n        numbers = [i for i in range(6, n * 6, 6)]\n\n    numbers = numbers + [s - sum(numbers)]\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(x: List[int], n=150, s=11250) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 150, s = 11250):\n    a = 3\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 3\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], n=120, s=7200) -> bool:\n    return len(numbers) == n and sum(numbers) == s and all(x % 3 == 0 for x in numbers)",
        "solution_func": "def g(n=120, s=7200):\n    numbers = []\n    val = 6\n    while len(numbers) < n - 1:\n        numbers.append(val)\n        val = -val\n        if val in numbers:\n            val += 6\n\n    if s - sum(numbers) in numbers:\n        numbers = [i for i in range(6, n * 6, 6)]\n\n    numbers = numbers + [s - sum(numbers)]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers meets certain conditions, and a function g that generates a list of numbers to satisfy those conditions. The goal is to find a list of numbers that meets the conditions specified in function f when passed to function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the length and sum of a list of numbers, as well as checking if all numbers in the list are divisible by 3. Function g generates a list of numbers to satisfy these conditions. The puzzle challenges students to understand the conditions and generate a valid list of numbers.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[int], n=100, s=5000) -> bool:\n    return len(lst) == n and sum(lst) == s and all(x % 5 == 0 for x in lst)\n\ndef g(n=100, s=5000):\n    lst = []\n    num = 5\n    while len(lst) < n - 1:\n        lst.append(num)\n        num = -num\n        if num in lst:\n            num += 5\n\n    if s - sum(lst) in lst:\n        lst = [i for i in range(5, n * 5, 5)]\n\n    lst = lst + [s - sum(lst)]\n    return lst\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and brute force search.",
        "idx_generation": 56,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(x: List[int], n=150, s=11250) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 150, s = 11250):\n    a = 3\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 3\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[int], n=100, s=5000) -> bool:\n    return len(lst) == n and sum(lst) == s and all(x % 5 == 0 for x in lst)",
        "solution_func": "def g(n=100, s=5000):\n    lst = []\n    num = 5\n    while len(lst) < n - 1:\n        lst.append(num)\n        num = -num\n        if num in lst:\n            num += 5\n\n    if s - sum(lst) in lst:\n        lst = [i for i in range(5, n * 5, 5)]\n\n    lst = lst + [s - sum(lst)]\n    return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of integers meets certain conditions, and a function g that generates a list of integers to satisfy those conditions. The goal is to find a list that satisfies the conditions of f when passed to it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the length and sum of a list of integers, as well as checking if all elements are divisible by 5. The solution function g generates a list of integers to meet these conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], letter: str = \"a\") -> bool:\n    return any(letter in s for s in strings)\n\ndef g(n: int = 5) -> List[str]:\n    import random\n    return [''.join(random.choices('abcdef', k=random.randint(1, 5))) for _ in range(n)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Randomization",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(floats: List[float], threshold: float = 0.5) -> bool:\n    return sum(floats) / len(floats) > threshold\n\ndef g(n: int = 5) -> List[float]:\n    import random\n    return [random.uniform(0, 1) for _ in range(n)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], letter: str = \"a\") -> bool:\n    return any(letter in s for s in strings)",
        "solution_func": "def g(n: int = 5) -> List[str]:\n    import random\n    return [''.join(random.choices('abcdef', k=random.randint(1, 5))) for _ in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given letter is present in any of the strings in a list, and a function g that generates a list of random strings. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic concepts of list comprehension, string manipulation, and random module in Python. It can be used to teach students how to work with lists, strings, and random generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], target_length=20) -> bool:\n    return sum(len(s) for s in strings) > target_length\n\ndef g():\n    return [\"hello\", \"world\", \"python\", \"programming\", \"puzzle\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, List Operations",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], target_length=20) -> bool:\n    return sum(len(s) for s in strings) > target_length",
        "solution_func": "def g():\n    return [\"hello\", \"world\", \"python\", \"programming\", \"puzzle\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and a target length as input, and returns True if the total length of all strings in the list is greater than the target length. The solution function g returns a list of strings, and the assertion checks if f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, summing lengths of strings in a list, and comparison operations in Python. It also tests the ability to define functions with default arguments and use of assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], divisor=3) -> bool:\n    return all(num % divisor == 0 for num in numbers)\n\ndef g():\n    return [i for i in range(3, 21, 3)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], divisor=3) -> bool:\n    return all(num % divisor == 0 for num in numbers)",
        "solution_func": "def g():\n    return [i for i in range(3, 21, 3)]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the function f checks if all numbers in the list are divisible by a specified divisor. The function g generates a list of numbers that are multiples of the specified divisor. The assert statement checks if the function f returns True when applied to the list generated by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, modulo operation, and function composition in Python. It tests the student's ability to generate a list of numbers meeting a specific condition and then check that condition using a function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \n\ndef f(words: List[str]) -> bool:\n    return all(sorted(word) == sorted(words[0]) for word in words)\n\ndef g(words=['listen', 'silent', 'enlist']):\n    return words\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and sorting and ordering topics.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \n\ndef f(words: List[str]) -> bool:\n    return all(sorted(word) == sorted(words[0]) for word in words)",
        "solution_func": "def g(words=['listen', 'silent', 'enlist']):\n    return words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that checks if all words in a list have the same characters when sorted. The solution function returns a list of words that meet this criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all words in a list have the same characters when sorted, and the solution function simply returns a list of words that satisfy this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return string == string[::-1]\n\ndef g(string='radar'):\n    return string\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g(string='radar'):\n    return string",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to write a function that checks if a given string is a palindrome (reads the same forwards and backwards). The solution function simply returns a predefined string 'radar'.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int, n=5) -> bool:\n    def calc_factorial(num):\n        if num == 0:\n            return 1\n        return num * calc_factorial(num - 1)\n    \n    return factorial == calc_factorial(n)\n\ndef g(n=5):\n    def calc_factorial(num):\n        if num == 0:\n            return 1\n        return num * calc_factorial(num - 1)\n    \n    return calc_factorial(n)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion and mathematical operations as it calculates the factorial of a number recursively. It also involves conditional logic as it checks if the calculated factorial is equal to the given factorial.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sorted_list: List[int], nums=[9, 3, 5, 1, 7]) -> bool:\n    return sorted_list == sorted(nums)\n\ndef g(nums=[9, 3, 5, 1, 7]):\n    def custom_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        pivot = arr[0]\n        less = [x for x in arr[1:] if x <= pivot]\n        greater = [x for x in arr[1:] if x > pivot]\n        return custom_sort(less) + [pivot] + custom_sort(greater)\n    \n    return custom_sort(nums)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(factorial: int, n=5) -> bool:\n    def calc_factorial(num):\n        if num == 0:\n            return 1\n        return num * calc_factorial(num - 1)\n    \n    return factorial == calc_factorial(n)",
        "solution_func": "def g(n=5):\n    def calc_factorial(num):\n        if num == 0:\n            return 1\n        return num * calc_factorial(num - 1)\n    \n    return calc_factorial(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the factorial of a given number matches a predefined value, and g calculates the factorial of a given number. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves recursion and factorial calculation in Python. It tests the understanding of function calls and comparison of values. It is suitable for teaching Python programming concepts related to functions and recursion.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sum_squares: int, nums=[2, 3, 4, 5]) -> bool:\n    return sum_squares == sum([x**2 for x in nums])\n\ndef g(nums=[2, 3, 4, 5]):\n    return sum([x**2 for x in nums])\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations and List Operations.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sorted_list: List[int], nums=[9, 3, 5, 1, 7]) -> bool:\n    return sorted_list == sorted(nums)\n\ndef g(nums=[9, 3, 5, 1, 7]):\n    def custom_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        pivot = arr[0]\n        less = [x for x in arr[1:] if x <= pivot]\n        greater = [x for x in arr[1:] if x > pivot]\n        return custom_sort(less) + [pivot] + custom_sort(greater)\n    \n    return custom_sort(nums)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(sum_squares: int, nums=[2, 3, 4, 5]) -> bool:\n    return sum_squares == sum([x**2 for x in nums])",
        "solution_func": "def g(nums=[2, 3, 4, 5]):\n    return sum([x**2 for x in nums])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of squares of a list of numbers is equal to a given integer, and a function g that calculates the sum of squares of a list of numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, list comprehension, and function invocation. It tests the student's ability to define functions and use them to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(fibonacci_seq: List[int], n=6) -> bool:\n    def generate_fibonacci(n):\n        if n <= 0:\n            return []\n        elif n == 1:\n            return [0]\n        elif n == 2:\n            return [0, 1]\n        else:\n            fib_seq = [0, 1]\n            for i in range(2, n):\n                fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n            return fib_seq\n    \n    return fibonacci_seq == generate_fibonacci(n)\n\ndef g(n=6):\n    def generate_fibonacci(n):\n        if n <= 0:\n            return []\n        elif n == 1:\n            return [0]\n        elif n == 2:\n            return [0, 1]\n        else:\n            fib_seq = [0, 1]\n            for i in range(2, n):\n                fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n            return fib_seq\n    \n    return generate_fibonacci(n)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion, Mathematical Operations",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sorted_list: List[int], nums=[9, 3, 5, 1, 7]) -> bool:\n    return sorted_list == sorted(nums)\n\ndef g(nums=[9, 3, 5, 1, 7]):\n    def custom_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        pivot = arr[0]\n        less = [x for x in arr[1:] if x <= pivot]\n        greater = [x for x in arr[1:] if x > pivot]\n        return custom_sort(less) + [pivot] + custom_sort(greater)\n    \n    return custom_sort(nums)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(fibonacci_seq: List[int], n=6) -> bool:\n    def generate_fibonacci(n):\n        if n <= 0:\n            return []\n        elif n == 1:\n            return [0]\n        elif n == 2:\n            return [0, 1]\n        else:\n            fib_seq = [0, 1]\n            for i in range(2, n):\n                fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n            return fib_seq\n    \n    return fibonacci_seq == generate_fibonacci(n)",
        "solution_func": "def g(n=6):\n    def generate_fibonacci(n):\n        if n <= 0:\n            return []\n        elif n == 1:\n            return [0]\n        elif n == 2:\n            return [0, 1]\n        else:\n            fib_seq = [0, 1]\n            for i in range(2, n):\n                fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n            return fib_seq\n    \n    return generate_fibonacci(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, one to generate a Fibonacci sequence up to a given number and another to check if a provided Fibonacci sequence matches the generated sequence. The solution function generates the Fibonacci sequence and the puzzle function checks if the input sequence matches the generated one."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to generate a Fibonacci sequence and comparing it with a given sequence. It tests the student's knowledge of functions, loops, and list manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(reversed_str: str, text=\"hello\") -> bool:\n    return reversed_str == text[::-1]\n\ndef g(text=\"hello\"):\n    return text[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sorted_list: List[int], nums=[9, 3, 5, 1, 7]) -> bool:\n    return sorted_list == sorted(nums)\n\ndef g(nums=[9, 3, 5, 1, 7]):\n    def custom_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        pivot = arr[0]\n        less = [x for x in arr[1:] if x <= pivot]\n        greater = [x for x in arr[1:] if x > pivot]\n        return custom_sort(less) + [pivot] + custom_sort(greater)\n    \n    return custom_sort(nums)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(reversed_str: str, text=\"hello\") -> bool:\n    return reversed_str == text[::-1]",
        "solution_func": "def g(text=\"hello\"):\n    return text[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given string is the reverse of a specified text and g returns the reverse of the specified text. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of function calls in Python. It tests the student's ability to define functions, manipulate strings, and understand function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    import random\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while True:\n        number = random.randint(10, 100)\n        if is_prime(number):\n            return number\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search algorithm.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import random\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while True:\n        number = random.randint(10, 100)\n        if is_prime(number):\n            return number",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given number is a prime number, and a function g() that generates a random number and checks if it is prime using the is_prime function. The assert statement checks if the generated random number is prime according to the function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, loops, and function definitions in Python. It requires students to implement a prime number checking function and use it in a random number generation function to find a prime number.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g():\n    import random\n\n    while True:\n        numbers = random.sample(range(1, 100), 5)\n        if all(numbers[i] <= numbers[i + 1] for i in range(len(numbers) - 1)):\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, random number generation, and checking if the list is sorted in ascending order.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    import random\n\n    while True:\n        numbers = random.sample(range(1, 100), 5)\n        if all(numbers[i] <= numbers[i + 1] for i in range(len(numbers) - 1)):\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 5 random numbers between 1 and 100 and checking if the numbers are in non-decreasing order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random numbers and checking if they are in non-decreasing order using the provided functions f and g. The solution g generates the list of numbers and f checks if they are in non-decreasing order.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sentence: str) -> bool:\n    cleaned_sentence = ''.join(char.lower() for char in sentence if char.isalpha())\n    return cleaned_sentence == cleaned_sentence[::-1]\n\ndef g():\n    import random\n    import string\n\n    while True:\n        word_length = random.randint(5, 10)\n        random_word = ''.join(random.choices(string.ascii_lowercase, k=word_length))\n        palindrome = random_word + random_word[::-1]\n        return palindrome\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.), Pattern Recognition",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(sentence: str) -> bool:\n    cleaned_sentence = ''.join(char.lower() for char in sentence if char.isalpha())\n    return cleaned_sentence == cleaned_sentence[::-1]",
        "solution_func": "def g():\n    import random\n    import string\n\n    while True:\n        word_length = random.randint(5, 10)\n        random_word = ''.join(random.choices(string.ascii_lowercase, k=word_length))\n        palindrome = random_word + random_word[::-1]\n        return palindrome",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given sentence is a palindrome after removing non-alphabetic characters, and a function g that generates random palindromic words for testing f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, palindrome checking, and random word generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums)\n\ndef g():\n    import random\n\n    while True:\n        numbers = random.sample(range(1, 20), 5)\n        if any(num % 2 == 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, random number generation, and checking for even numbers in a list.",
        "idx_generation": 57,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums)",
        "solution_func": "def g():\n    import random\n\n    while True:\n        numbers = random.sample(range(1, 20), 5)\n        if any(num % 2 == 0 for num in numbers):\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 5 random numbers between 1 and 20, and checking if any of the numbers in the list is even."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension and the 'any' function to check if any number in a randomly generated list is even.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(input_str: str, is_palindrome=True) -> bool:\n    return input_str == input_str[::-1]\n\ndef g(input_str=\"radar\") -> str:\n    return input_str[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to String Manipulation and Conditional Logic.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, numbers=[1, 2, 3, 1]) -> bool:\n    assert max_sum == max(numbers[0] + numbers[2], numbers[1])\n    return True\n\ndef g(numbers=[1, 2, 3, 1]):\n    if len(numbers) <= 2:\n        return sum(numbers)\n    inclusive = numbers[0]\n    exclusive = 0\n    for num in numbers[1:]:\n        temp = inclusive\n        inclusive = max(inclusive, exclusive + num)\n        exclusive = temp\n    return max(inclusive, exclusive)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(input_str: str, is_palindrome=True) -> bool:\n    return input_str == input_str[::-1]",
        "solution_func": "def g(input_str=\"radar\") -> str:\n    return input_str[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f that checks if a string is a palindrome and a function g that returns the reverse of a string, the puzzle requires finding a string for which the reverse is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python, specifically reversing a string and checking for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(number: int, is_prime=True) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef g(number=7) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    next_num = number + 1\n    while not is_prime(next_num):\n        next_num += 1\n    return next_num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and finding the next prime number after a given number.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, numbers=[1, 2, 3, 1]) -> bool:\n    assert max_sum == max(numbers[0] + numbers[2], numbers[1])\n    return True\n\ndef g(numbers=[1, 2, 3, 1]):\n    if len(numbers) <= 2:\n        return sum(numbers)\n    inclusive = numbers[0]\n    exclusive = 0\n    for num in numbers[1:]:\n        temp = inclusive\n        inclusive = max(inclusive, exclusive + num)\n        exclusive = temp\n    return max(inclusive, exclusive)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(number: int, is_prime=True) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True",
        "solution_func": "def g(number=7) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    next_num = number + 1\n    while not is_prime(next_num):\n        next_num += 1\n    return next_num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions: f(number: int, is_prime=True) -> bool checks if a given number is prime or not, and g(number=7) -> int finds the next prime number after the input number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    original = ''.join(random.choices(letters, k=5))\n    return original + original[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\nimport itertools\n\ndef f(word: str, s='programmingpuzzle') -> bool:\n    return all(word.count(char) <= s.count(char) for char in word)\n\ndef g(s='programmingpuzzle', word='program'):\n    permutations = itertools.permutations(s)\n    for perm in permutations:\n        if ''.join(perm).startswith(word):\n            return ''.join(perm)\n    return ''\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    original = ''.join(random.choices(letters, k=5))\n    return original + original[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated string concatenated with its reverse is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a string is a palindrome by comparing it with its reverse. The solution generates a random string and concatenates it with its reverse to test for palindromicity.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, sub='world') -> bool:\n    return sub in s\n\ndef g(sub='world'):\n    return \"Hello, \" + sub + \"!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=750000, n=375) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=750000, n=375):\n    return [4] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, sub='world') -> bool:\n    return sub in s",
        "solution_func": "def g(sub='world'):\n    return \"Hello, \" + sub + \"!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions: f(s: str, sub='world') -> bool, which checks if a given substring is present in a string, and g(sub='world'), which returns a specific string. The goal is to ensure that calling f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, parameter passing, string manipulation, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='age') -> bool:\n    return key in d\n\ndef g(key='age'):\n    return {'name': 'Alice', 'age': 30}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking if a key exists in a dictionary.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=750000, n=375) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=750000, n=375):\n    return [4] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict, key='age') -> bool:\n    return key in d",
        "solution_func": "def g(key='age'):\n    return {'name': 'Alice', 'age': 30}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specified key exists in a dictionary, and a function g that returns a dictionary with a specific key-value pair. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of dictionary operations and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    for word in words:\n        if word == word[::-1]:\n            return True\n    return False\n\ndef g() -> List[str]:\n    return ['level', 'hello', 'radar']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10) -> List[int]:\n    return [2, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    for word in words:\n        if word == word[::-1]:\n            return True\n    return False",
        "solution_func": "def g() -> List[str]:\n    return ['level', 'hello', 'radar']",
        "quality": [
            null
        ],
        "description": [
            "Given a list of words, the puzzle function f checks if any word in the list is a palindrome. The solution function g returns a list of words to be checked for palindromes."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list iteration, string manipulation, and palindrome checking. The solution function returns a list of words that includes a palindrome for the puzzle function to return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(students: dict) -> bool:\n    for student, age in students.items():\n        if age > 18:\n            return True\n    return False\n\ndef g() -> dict:\n    return {'Alice': 20, 'Bob': 22, 'Charlie': 18}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and dictionary manipulation.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10) -> List[int]:\n    return [2, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(students: dict) -> bool:\n    for student, age in students.items():\n        if age > 18:\n            return True\n    return False",
        "solution_func": "def g() -> dict:\n    return {'Alice': 20, 'Bob': 22, 'Charlie': 18}",
        "quality": [
            null
        ],
        "description": [
            "Given a dictionary of students and their ages, the function f checks if any student is above 18 years old. The function g returns a dictionary of students with their ages. The assert statement checks if there is at least one student above 18 in the dictionary."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves iterating over a dictionary and checking a condition. It is a simple puzzle that tests basic understanding of dictionaries and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(points: List[Tuple[int, int]]) -> bool:\n    x_coords = set()\n    for point in points:\n        if point[0] in x_coords:\n            return True\n        x_coords.add(point[0])\n    return False\n\ndef g() -> List[Tuple[int, int]]:\n    return [(1, 2), (3, 4), (1, 5)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and conditional logic to check for duplicate x-coordinates in a list of points. It does not involve any other topics from the list provided.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], target=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10) -> List[int]:\n    return [2, 8]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(points: List[Tuple[int, int]]) -> bool:\n    x_coords = set()\n    for point in points:\n        if point[0] in x_coords:\n            return True\n        x_coords.add(point[0])\n    return False",
        "solution_func": "def g() -> List[Tuple[int, int]]:\n    return [(1, 2), (3, 4), (1, 5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires checking if there are any duplicate x-coordinates in a list of points."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for duplicates in a list of tuples representing points based on their x-coordinates.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list contains only unique elements by comparing its length with the length of a set created from the list. This relates to the topic of Set Operations.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list contains only unique elements, and then defining a function g() that returns a list with unique elements. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, set operations, and function definitions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)\n\ndef g():\n    return [5, 4, 3, 2, 1]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves sorting and ordering of a list.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)",
        "solution_func": "def g():\n    return [5, 4, 3, 2, 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list is sorted in descending order, and a function g() that returns a specific list. The puzzle tests whether the list returned by g() is sorted in descending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting in Python and implementing a function to check if a list is sorted in descending order.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 5 == 0 for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 5 == 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are divisible by 5 using list comprehension and random number generation.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if any(num <= 1 or all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)) for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 5 == 0 for num in numbers)",
        "solution_func": "def g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 5 == 0 for num in numbers):\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of 5 random numbers between 1 and 100, and check if all the numbers are divisible by 5."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random numbers and checking for divisibility by 5. The solution function g() generates a list of 5 random numbers and returns it if all numbers are divisible by 5. The puzzle function f(numbers) checks if all numbers in the input list are divisible by 5.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 != 0 for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 2 != 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating a list of random numbers and checking if all numbers are odd.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if any(num <= 1 or all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)) for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 != 0 for num in numbers)",
        "solution_func": "def g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 2 != 0 for num in numbers):\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of 5 random numbers between 1 and 100, and check if all numbers in the list are odd."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, random number generation, and checking for odd numbers in a list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(num == int(num ** 0.5) ** 2 for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if any(num == int(num ** 0.5) ** 2 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if a number is a perfect square.",
        "idx_generation": 58,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if any(num <= 1 or all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)) for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(num == int(num ** 0.5) ** 2 for num in numbers)",
        "solution_func": "def g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if any(num == int(num ** 0.5) ** 2 for num in numbers):\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a list of 5 random numbers between 1 and 100, and checking if any of the numbers is a perfect square."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand list comprehension, random number generation, and checking for perfect squares.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, target_value=12) -> bool:\n    return any((sum(lst[i:j]) == target_value) for i in range(len(lst)) for j in range(i + 1, len(lst) + 1))\ndef g(target_value=12):\n    import random\n    return random.choices(range(1, target_value), k=5)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for a specific target value.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, target_value=12) -> bool:\n    return any((sum(lst[i:j]) == target_value) for i in range(len(lst)) for j in range(i + 1, len(lst) + 1))",
        "solution_func": "def g(target_value=12):\n    import random\n    return random.choices(range(1, target_value), k=5)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if any subsequence of a given list sums up to a target value. The solution function g generates a random list of numbers and returns it. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, subsequence sums, random number generation, and function assertions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sys\n\ndef f(min_jumps: int, arr=[2, 3, 1, 1, 2, 4, 2, 0, 1]) -> bool:\n    n = len(arr)\n    if n <= 1:\n        return True\n    if arr[0] == 0:\n        return False\n\n    jumps = 1\n    furthest = arr[0]\n    current = arr[0]\n\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps <= min_jumps\n        furthest = max(furthest, i + arr[i])\n        if i == current:\n            jumps += 1\n            current = furthest\n\n    return False\n\ndef g(arr=[2, 3, 1, 1, 2, 4, 2, 0, 1]):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    jumps = 1\n    furthest = arr[0]\n    current = arr[0]\n\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        furthest = max(furthest, i + arr[i])\n        if i == current:\n            jumps += 1\n            current = furthest\n\n    return sys.maxsize\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dynamic programming to solve a problem related to jumps and arrays.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, arr=[4, 9, 1, 3, 8, 7]) -> bool:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum\n\ndef g(arr=[4, 9, 1, 3, 8, 7]):\n    if len(arr) <= 2:\n        return sum(arr)\n    incl = arr[0]\n    excl = 0\n    for num in arr[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import sys\n\ndef f(min_jumps: int, arr=[2, 3, 1, 1, 2, 4, 2, 0, 1]) -> bool:\n    n = len(arr)\n    if n <= 1:\n        return True\n    if arr[0] == 0:\n        return False\n\n    jumps = 1\n    furthest = arr[0]\n    current = arr[0]\n\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps <= min_jumps\n        furthest = max(furthest, i + arr[i])\n        if i == current:\n            jumps += 1\n            current = furthest\n\n    return False",
        "solution_func": "def g(arr=[2, 3, 1, 1, 2, 4, 2, 0, 1]):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    jumps = 1\n    furthest = arr[0]\n    current = arr[0]\n\n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        furthest = max(furthest, i + arr[i])\n        if i == current:\n            jumps += 1\n            current = furthest\n\n    return sys.maxsize",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given list of integers can be traversed with a limited number of jumps, and g calculates the minimum number of jumps needed to traverse the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the minimum number of jumps needed to traverse a list of integers efficiently.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(sentence: str, keyword='python') -> bool:\n    return keyword in sentence\n\ndef g(keyword='python'):\n    variations = ['python', 'PYTHON', 'PyThOn', 'pYtHoN']\n    for var in variations:\n        if var.lower() in keyword.lower():\n            return var\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(chars: str, word='python') -> bool:\n    from itertools import permutations\n    return any(''.join(perm) == word for perm in permutations(chars))\n\ndef g(word='python'):\n    chars = 'ptnohy'\n    from itertools import permutations\n    for perm in permutations(chars):\n        if ''.join(perm) == word:\n            return perm\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(sentence: str, keyword='python') -> bool:\n    return keyword in sentence",
        "solution_func": "def g(keyword='python'):\n    variations = ['python', 'PYTHON', 'PyThOn', 'pYtHoN']\n    for var in variations:\n        if var.lower() in keyword.lower():\n            return var",
        "quality": [
            null
        ],
        "description": [
            "Given a sentence and a keyword, the function f checks if the keyword is present in the sentence. The function g iterates through variations of the keyword and returns the first variation that is present in the sentence when case is ignored. The assert statement checks if the keyword is present in the sentence when using the variation returned by g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for the presence of a keyword in a sentence while ignoring case sensitivity. The solution function g returns a variation of the keyword that is present in the sentence when case is ignored.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], target=\"python\") -> bool:\n    return target in words\n\ndef g(target=\"python\"):\n    from itertools import permutations\n    perms = [''.join(p) for p in permutations(target)]\n    return perms\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and permutations and combinations.",
        "idx_generation": 59,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], divisor=3, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    return sum(numbers) % divisor == 0\n\ndef g(divisor=3, options=[1, 2, 3, 4, 5, 6]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if sum(p) % divisor == 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], target=\"python\") -> bool:\n    return target in words",
        "solution_func": "def g(target=\"python\"):\n    from itertools import permutations\n    perms = [''.join(p) for p in permutations(target)]\n    return perms",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a target word is in a list of words, and a function g that generates permutations of the target word. The goal is to ensure that the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use permutations to generate all possible arrangements of a word and then checking if a specific word is in a list of words. It tests the student's knowledge of list manipulation and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[float], thresh=5) -> bool:\n    return sum(lst) / len(lst) > thresh\n\ndef g(thresh=5):\n    return [3.0, 4.5, 6.2, 7.8]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[float], thresh=5) -> bool:\n    return sum(lst) / len(lst) > thresh",
        "solution_func": "def g(thresh=5):\n    return [3.0, 4.5, 6.2, 7.8]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of floats, the function f checks if the average of the list is greater than a given threshold. The function g returns a list of floats. The puzzle is to determine if the average of the list returned by g is greater than the default threshold of 5."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the average of a list of floats and compare it to a threshold value. The solution function g returns a list of floats that meets the condition for the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name') -> bool:\n    return key in d\n\ndef g(key='name'):\n    return {'name': 'Alice', 'age': 25, 'city': 'New York'}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and checking for the existence of a key in a dictionary.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=1000000, n=500) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=1000000, n=500):\n    return [2] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict, key='name') -> bool:\n    return key in d",
        "solution_func": "def g(key='name'):\n    return {'name': 'Alice', 'age': 25, 'city': 'New York'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary and a key as input and checks if the key exists in the dictionary. The solution function g returns a dictionary with a specific key-value pair. The assertion checks if calling f with the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if a specific key exists in a dictionary. The solution function provides a dictionary with the required key-value pair to satisfy the condition in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(4):\n        assert n % 4 == 3\n        n -= 3 + (n - 3) // 4\n    return n > 0 and n % 4 == 3\n\ndef g():\n    m = 3\n    while True:\n        n = m\n        for i in range(4):\n            if n % 4 != 3:\n                break\n            n -= 3 + (n - 3) // 4\n        if n > 0 and n % 4 == 3:\n            return m\n        m += 4\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic, loops, and mathematical operations.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(4):\n        assert n % 4 == 3\n        n -= 3 + (n - 3) // 4\n    return n > 0 and n % 4 == 3",
        "solution_func": "def g():\n    m = 3\n    while True:\n        n = m\n        for i in range(4):\n            if n % 4 != 3:\n                break\n            n -= 3 + (n - 3) // 4\n        if n > 0 and n % 4 == 3:\n            return m\n        m += 4",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) and g(), where f(n) checks a specific condition on an input integer n and g() iterates over integers to find a value that satisfies the condition checked by f(n). The goal is to find an integer that meets the condition specified in f(n) after applying the operations in g()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop structure and arithmetic operations to check a specific condition on an integer. It requires understanding of loops, arithmetic operations, and condition checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 4\n        n -= 4 + (n - 4) // 5\n    return n > 0 and n % 5 == 4\n\ndef g():\n    m = 4\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 4:\n                break\n            n -= 4 + (n - 4) // 5\n        if n > 0 and n % 5 == 4:\n            return m\n        m += 5\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Backtracking, Mathematical Operations",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 4\n        n -= 4 + (n - 4) // 5\n    return n > 0 and n % 5 == 4",
        "solution_func": "def g():\n    m = 4\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 4:\n                break\n            n -= 4 + (n - 4) // 5\n        if n > 0 and n % 5 == 4:\n            return m\n        m += 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) and g(), where f(n) checks a specific condition on an input integer n and g() iterates through integers to find a value that satisfies the condition checked by f(n). The goal is to find an integer that meets the condition specified in f(n) after a series of calculations in g()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop that performs calculations on an integer to check if it meets a specific condition. The solution function g() iterates through integers to find one that satisfies the condition. The puzzle provides a good exercise in understanding loops, conditions, and algorithmic thinking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 5\n        n -= 5 + (n - 5) // 6\n    return n > 0 and n % 6 == 5\n\ndef g():\n    m = 5\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 5:\n                break\n            n -= 5 + (n - 5) // 6\n        if n > 0 and n % 6 == 5:\n            return m\n        m += 6\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as Backtracking, Conditional Logic, and Mathematical Operations.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(3):\n        assert n % 3 == 2\n        n -= 2 + (n - 2) // 3\n    return n > 0 and n % 3 == 2\ndef g():\n    m = 2\n    while True:\n        n = m\n        for i in range(3):\n            if n % 3 != 2:\n                break\n            n -= 2 + (n - 2) // 3\n        if n > 0 and n % 3 == 2:\n            return m\n        m += 3\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 5\n        n -= 5 + (n - 5) // 6\n    return n > 0 and n % 6 == 5",
        "solution_func": "def g():\n    m = 5\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 5:\n                break\n            n -= 5 + (n - 5) // 6\n        if n > 0 and n % 6 == 5:\n            return m\n        m += 6",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) and g(), where f(n) checks a specific condition on an input integer n and g() iterates over integers to find a value that satisfies the condition checked by f(n). The goal is to find an integer that meets the condition specified in f(n) after applying the operations in g()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop that iterates over integers and performs calculations to check a specific condition. It requires understanding of loops, arithmetic operations, and condition checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given text is a palindrome.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median == target\n\ndef g(target=5):\n    return [3, 4, 5, 6, 7]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns the text 'radar'. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median == target\n\ndef g(target=5):\n    return [3, 4, 5, 6, 7]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome and a function g that returns the text 'level'. The assertion tests if the function f returns True when applied to the output of function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g():\n    return \"madam\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median == target\n\ndef g(target=5):\n    return [3, 4, 5, 6, 7]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    return \"madam\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns a specific text 'madam'. The assertion tests if the function f applied to the output of function g returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sequence: List[int], pattern=lambda x: x % 2 == 0, target_sum=20, max_elements=5) -> bool:\n    return sum(sequence) == target_sum and all(pattern(num) for num in sequence) and len(sequence) <= max_elements\n\ndef g(pattern=lambda x: x % 2 == 0, target_sum=20, max_elements=5):\n    \"\"\"\n    This solution iterates through possible sequences of numbers to find one that meets the specified conditions.\n    \"\"\"\n    def generate_sequence(curr_seq, curr_sum):\n        if len(curr_seq) == max_elements:\n            return curr_seq if curr_sum == target_sum else None\n        for num in range(1, target_sum + 1):\n            if pattern(num):\n                result = generate_sequence(curr_seq + [num], curr_sum + num)\n                if result:\n                    return result\n        return None\n    \n    return generate_sequence([], 0)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as recursion, conditional logic, and brute force search.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], criteria=lambda x: x % 3 == 0, target_sum=27, max_len=6) -> bool:\n    return sum(numbers) == target_sum and all(criteria(num) for num in numbers) and len(numbers) <= max_len\n\ndef g(criteria=lambda x: x % 3 == 0, target_sum=27, max_len=6):\n    \"\"\"\n    This solution utilizes recursion to generate a list of numbers that satisfy the given criteria and sum up to the target_sum.\n    \"\"\"\n    def generate_numbers(idx, curr_list, curr_sum):\n        if idx == max_len:\n            return curr_list if curr_sum == target_sum else None\n        for num in range(1, target_sum + 1):\n            if criteria(num):\n                new_list = curr_list + [num]\n                new_sum = curr_sum + num\n                result = generate_numbers(idx + 1, new_list, new_sum)\n                if result:\n                    return result\n        return None\n    \n    return generate_numbers(0, [], 0)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(sequence: List[int], pattern=lambda x: x % 2 == 0, target_sum=20, max_elements=5) -> bool:\n    return sum(sequence) == target_sum and all(pattern(num) for num in sequence) and len(sequence) <= max_elements",
        "solution_func": "def g(pattern=lambda x: x % 2 == 0, target_sum=20, max_elements=5):\n    \"\"\"\n    This solution iterates through possible sequences of numbers to find one that meets the specified conditions.\n    \"\"\"\n    def generate_sequence(curr_seq, curr_sum):\n        if len(curr_seq) == max_elements:\n            return curr_seq if curr_sum == target_sum else None\n        for num in range(1, target_sum + 1):\n            if pattern(num):\n                result = generate_sequence(curr_seq + [num], curr_sum + num)\n                if result:\n                    return result\n        return None\n    \n    return generate_sequence([], 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of integers and checks if the sum of the list is equal to a target sum, all elements in the list satisfy a given pattern, and the length of the list is less than or equal to a specified maximum. The solution function g iterates through possible sequences of numbers to find one that meets the specified conditions."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle involves a combination of list manipulation, condition checking, and recursion, which may be challenging for master's students in CS who are learning Python programming. It requires understanding of list comprehension, lambda functions, and recursion. The puzzle may be suitable for students who have a good grasp of Python basics and are looking to improve their problem-solving skills.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(combination: List[int], target=10) -> bool:\n    return any(sum(comb) == target for comb in combination)\n\ndef g(integers=[4, 5, 6, 7]):\n    return [list(comb) for r in range(1, len(integers)+1) for comb in combinations(integers, r)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating combinations of integers and checking if the sum of any combination equals a target value. The solution uses itertools for generating combinations and checks if any combination satisfies the condition.",
        "idx_generation": 60,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\ndef f(subsets: List[List[int]], target_sum=5) -> bool:\n    return any(sum(subset) == target_sum for subset in subsets)\ndef g(int_list=[1, 2, 3]):\n    def powerset(s):\n        result = [[]]\n        for elem in s:\n            result += [x + [elem] for x in result]\n        return result\n\n    return [subset for subset in powerset(int_list) if subset != []]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import combinations\n\ndef f(combination: List[int], target=10) -> bool:\n    return any(sum(comb) == target for comb in combination)",
        "solution_func": "def g(integers=[4, 5, 6, 7]):\n    return [list(comb) for r in range(1, len(integers)+1) for comb in combinations(integers, r)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding combinations of integers from a given list that sum up to a target value of 10."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to generate all possible combinations of integers from a list and check if any of these combinations sum up to a target value of 10.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 4, 6, 8, 10, 12]) -> bool:\n    total_sum = sum(numbers)\n    return total_sum % 2 == 0\n\ndef g(options=[2, 4, 6, 8, 10, 12]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total_sum = sum(c)\n            if total_sum % 2 == 0:\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and importing modules (Itertools).",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            product = 1\n            for num in p:\n                product *= num\n            if product % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 4, 6, 8, 10, 12]) -> bool:\n    total_sum = sum(numbers)\n    return total_sum % 2 == 0",
        "solution_func": "def g(options=[2, 4, 6, 8, 10, 12]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total_sum = sum(c)\n            if total_sum % 2 == 0:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of numbers from a given set that results in an even sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to use combinations and sum of elements in a list to find a solution where the total sum is even.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    max_value = max(numbers)\n    return max_value % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            max_value = max(p)\n            if max_value % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Permutations and Combinations, Importing Modules (Itertools, etc.), Conditional Logic",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            product = 1\n            for num in p:\n                product *= num\n            if product % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    max_value = max(numbers)\n    return max_value % 2 != 0",
        "solution_func": "def g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            max_value = max(p)\n            if max_value % 2 != 0:\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a list of numbers from a given set of options such that the maximum value in the list is an odd number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to use permutations and find the maximum value in a list of numbers to satisfy the condition of the function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 4, 6, 8, 10, 12]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return avg.is_integer()\n\ndef g(options=[2, 4, 6, 8, 10, 12]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            avg = sum(c) / len(c)\n            if avg.is_integer():\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, importing modules (Itertools), and permutations and combinations.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            product = 1\n            for num in p:\n                product *= num\n            if product % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 4, 6, 8, 10, 12]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return avg.is_integer()",
        "solution_func": "def g(options=[2, 4, 6, 8, 10, 12]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            avg = sum(c) / len(c)\n            if avg.is_integer():\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of numbers from a given list of options such that the average of the selected numbers is an integer."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to calculate averages, work with combinations of numbers, and check if a number is an integer in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import permutations\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    min_value = min(numbers)\n    return is_prime(min_value)\n\ndef g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            min_value = min(p)\n            if is_prime(min_value):\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as prime numbers, permutations, and list manipulation.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            product = 1\n            for num in p:\n                product *= num\n            if product % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import permutations\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    min_value = min(numbers)\n    return is_prime(min_value)",
        "solution_func": "def g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            min_value = min(p)\n            if is_prime(min_value):\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a list of prime numbers from a given set of options by generating permutations and checking the minimum value in each permutation for primality."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of prime numbers, permutations, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)\n\ndef g():\n    import random\n    lst = random.sample(range(1, 100), 5)\n    return sorted(lst, reverse=True)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in reverse order using the `sorted` function and comparing it with the original list. The solution generates a random list of numbers and sorts it in reverse order to satisfy the condition of the puzzle.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    import random\n    import string\n    word = ''.join(random.choices(string.ascii_lowercase, k=5))\n    return word + word[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)",
        "solution_func": "def g():\n    import random\n    lst = random.sample(range(1, 100), 5)\n    return sorted(lst, reverse=True)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a given list is sorted in descending order, and a function g() that generates a random list of 5 numbers and returns it sorted in descending order. The puzzle tests whether function g() correctly generates a list sorted in descending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting in Python and generating random lists. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(lst: list, threshold=50) -> bool:\n    return any(num > threshold for num in lst)\n\ndef g(threshold=50):\n    # generate random lists of integers\n    while True:\n        lst = [random.randint(1, 100) for _ in range(random.randint(1, 10))]\n        if any(num > threshold for num in lst):\n            return lst\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves random number generation, list comprehension, and conditional logic to check if any number in the generated list is greater than a threshold value. It also includes an assertion to validate the solution. The topics used in this puzzle are: Importing Modules, Conditional Logic, Random Number Generation, List Comprehension",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(dictionary: dict, value=42) -> bool:\n    return any(val == value for val in dictionary.values())\n\ndef g(value=42):\n    # generate random dictionaries\n    while True:\n        dictionary = {key: random.randint(1, 100) for key in range(1, random.randint(1, 10))}\n        if any(val == value for val in dictionary.values()):\n            return dictionary\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(lst: list, threshold=50) -> bool:\n    return any(num > threshold for num in lst)",
        "solution_func": "def g(threshold=50):\n    # generate random lists of integers\n    while True:\n        lst = [random.randint(1, 100) for _ in range(random.randint(1, 10))]\n        if any(num > threshold for num in lst):\n            return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that generates random lists of integers and checks if any number in the list is greater than a given threshold value. The solution function generates random lists and returns the list if any number in it is greater than the threshold value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, random number generation, and boolean checks. The solution function generates random lists and checks if any number in the list is greater than the threshold value, satisfying the condition of the puzzle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(matrix: list, target=100) -> bool:\n    return any(sum(row) == target for row in matrix)\n\ndef g(target=100):\n    # generate random matrices of integers\n    while True:\n        rows = random.randint(1, 5)\n        cols = random.randint(1, 5)\n        matrix = [[random.randint(1, 50) for _ in range(cols)] for _ in range(rows)]\n        if any(sum(row) == target for row in matrix):\n            return matrix\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves matrix manipulation and random number generation to find rows that sum up to a target value.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(dictionary: dict, value=42) -> bool:\n    return any(val == value for val in dictionary.values())\n\ndef g(value=42):\n    # generate random dictionaries\n    while True:\n        dictionary = {key: random.randint(1, 100) for key in range(1, random.randint(1, 10))}\n        if any(val == value for val in dictionary.values()):\n            return dictionary\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(matrix: list, target=100) -> bool:\n    return any(sum(row) == target for row in matrix)",
        "solution_func": "def g(target=100):\n    # generate random matrices of integers\n    while True:\n        rows = random.randint(1, 5)\n        cols = random.randint(1, 5)\n        matrix = [[random.randint(1, 50) for _ in range(cols)] for _ in range(rows)]\n        if any(sum(row) == target for row in matrix):\n            return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if any row in a matrix sums up to a target value. The solution function g generates random matrices and returns one if any row in the matrix sums up to the target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves matrix manipulation and random number generation in Python. It tests the understanding of list comprehensions, loops, and conditional statements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\n# Puzzle 2:\n# Puzzle description: The puzzle involves finding the sum of a list of numbers from a given set of options such that the sum is a perfect square.\nimport math\n\nfrom typing import List\nfrom itertools import combinations\n\ndef is_perfect_square(num: int) -> bool:\n    return math.isqrt(num) ** 2 == num\n\ndef f(numbers: List[int], options=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) -> bool:\n    total_sum = sum(numbers)\n    return is_perfect_square(total_sum)\n\ndef g(options=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, n):\n            if is_perfect_square(sum(c)):\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding the sum of a list of numbers from a given set of options such that the sum is a perfect square.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import permutations\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    max_value = max(numbers)\n    return is_prime(max_value)\n\ndef g(options=[2, 3, 5, 7, 11, 13, 17, 19]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            max_value = max(p)\n            if is_prime(max_value):\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "# Puzzle 2:\n# Puzzle description: The puzzle involves finding the sum of a list of numbers from a given set of options such that the sum is a perfect square.\nimport math\n\nfrom typing import List\nfrom itertools import combinations\n\ndef is_perfect_square(num: int) -> bool:\n    return math.isqrt(num) ** 2 == num\n\ndef f(numbers: List[int], options=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) -> bool:\n    total_sum = sum(numbers)\n    return is_perfect_square(total_sum)",
        "solution_func": "def g(options=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, n):\n            if is_perfect_square(sum(c)):\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding the sum of a list of numbers from a given set of options such that the sum is a perfect square."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to find a combination of numbers from a given set of options whose sum is a perfect square.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\n# Puzzle 3:\n# Puzzle description: The puzzle involves finding a string that can be created by combining characters from a given set, such that the string is a palindrome.\nfrom itertools import product\n\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n\ndef f(text: str, char_set='abcde') -> bool:\n    return is_palindrome(text)\n\ndef g(char_set='abcde'):\n    for n in range(1, len(char_set)+1):\n        for p in product(char_set, repeat=n):\n            if is_palindrome(''.join(p)):\n                return ''.join(p)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.), Permutations and Combinations",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import permutations\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    max_value = max(numbers)\n    return is_prime(max_value)\n\ndef g(options=[2, 3, 5, 7, 11, 13, 17, 19]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            max_value = max(p)\n            if is_prime(max_value):\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "# Puzzle 3:\n# Puzzle description: The puzzle involves finding a string that can be created by combining characters from a given set, such that the string is a palindrome.\nfrom itertools import product\n\ndef is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n\ndef f(text: str, char_set='abcde') -> bool:\n    return is_palindrome(text)",
        "solution_func": "def g(char_set='abcde'):\n    for n in range(1, len(char_set)+1):\n        for p in product(char_set, repeat=n):\n            if is_palindrome(''.join(p)):\n                return ''.join(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a string that can be created by combining characters from a given set, such that the string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to generate a palindrome string using characters from a given set and check if the generated string is indeed a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n# Puzzle 4:\n# Puzzle description: The puzzle involves finding a pair of numbers from a given set of options such that their product is a perfect cube.\nimport math\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_perfect_cube(num: int) -> bool:\n    return round(num ** (1/3)) ** 3 == num\n\ndef f(numbers: Tuple[int, int], options=[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]) -> bool:\n    product_result = numbers[0] * numbers[1]\n    return is_perfect_cube(product_result)\n\ndef g(options=[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_perfect_cube(c[0] * c[1]):\n                return c\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves finding a pair of numbers from a given set of options such that their product is a perfect cube.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import permutations\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13, 17, 19]) -> bool:\n    max_value = max(numbers)\n    return is_prime(max_value)\n\ndef g(options=[2, 3, 5, 7, 11, 13, 17, 19]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            max_value = max(p)\n            if is_prime(max_value):\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "# Puzzle 4:\n# Puzzle description: The puzzle involves finding a pair of numbers from a given set of options such that their product is a perfect cube.\nimport math\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_perfect_cube(num: int) -> bool:\n    return round(num ** (1/3)) ** 3 == num\n\ndef f(numbers: Tuple[int, int], options=[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]) -> bool:\n    product_result = numbers[0] * numbers[1]\n    return is_perfect_cube(product_result)",
        "solution_func": "def g(options=[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_perfect_cube(c[0] * c[1]):\n                return c",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a pair of numbers from a given set of options such that their product is a perfect cube."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of perfect cubes and how to find pairs of numbers whose product is a perfect cube.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: list) -> bool:\n    return result == [x**2 for x in range(1, 11) if x % 2 == 0]\ndef g():\n    return [x**2 for x in range(1, 11) if x % 2 == 0]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list comprehension, conditional logic, and mathematical operations.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: list) -> bool:\n    return result == [x**2 for x in range(1, 11) if x % 2 == 0]",
        "solution_func": "def g():\n    return [x**2 for x in range(1, 11) if x % 2 == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that generates a list of squares of even numbers from 1 to 10 and then check if the function correctly generates this list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, filtering even numbers, and comparing lists for equality.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int) -> bool:\n    return result == 1*2*3*4*5*6*7*8*9*10\ndef g():\n    return 1*2*3*4*5*6*7*8*9*10\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int) -> bool:\n    return result == 1*2*3*4*5*6*7*8*9*10",
        "solution_func": "def g():\n    return 1*2*3*4*5*6*7*8*9*10",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g() that returns the product of numbers from 1 to 10, and then check if the function f(result) returns True when called with the result of g()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, function calls, and comparison operations in Python. It tests the student's ability to define a function that calculates a specific result and then verify if another function correctly computes and returns that result.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int) -> bool:\n    return result == 2 + 3 + 5 + 7\ndef g():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return sum(filter(lambda x: x in primes, num_list))\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and number theory (primes). The solution uses filtering and summing elements from a list based on a condition.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(result: int) -> bool:\n    return result == 2 + 3 + 5 + 7",
        "solution_func": "def g():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return sum(filter(lambda x: x in primes, num_list))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g() that calculates the sum of prime numbers from a given list and then check if the sum is equal to a specific value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, filtering elements based on a condition, and performing arithmetic operations to check for equality.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return digit_sum == digit_product\n\ndef g():\n    for n in range(1, 1000):\n        if sum(int(d) for d in str(n)) == 1:\n            return n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Mathematical Operations, Conditional Logic",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return digit_sum == digit_product",
        "solution_func": "def g():\n    for n in range(1, 1000):\n        if sum(int(d) for d in str(n)) == 1:\n            return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a number between 1 and 999 where the sum of its digits is equal to the product of its digits."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves calculating the sum and product of the digits of a number and checking if they are equal. The solution function iterates through numbers from 1 to 999 to find the desired number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for d in str(n):\n        if int(d) == 0 or n % int(d) != 0:\n            return False\n    return True\n\ndef g():\n    for n in range(1, 1000):\n        if all(int(d) != 0 and n % int(d) == 0 for d in str(n)):\n            return n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations to check if a number satisfies a certain condition.",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for d in str(n):\n        if int(d) == 0 or n % int(d) != 0:\n            return False\n    return True",
        "solution_func": "def g():\n    for n in range(1, 1000):\n        if all(int(d) != 0 and n % int(d) == 0 for d in str(n)):\n            return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given number n satisfies a specific condition, and then finding a number that satisfies this condition using function g()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of iterating over digits of a number, checking conditions, and using list comprehensions in Python. It also requires understanding of function composition and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if str(n) != str(n)[::-1]:\n        return False\n    digit_sum = sum(int(d) for d in str(n))\n    return is_prime(digit_sum)\n\ndef g():\n    for n in range(1, 1000):\n        if str(n) == str(n)[::-1] and is_prime(sum(int(d) for d in str(n))):\n            return n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, conditional logic, recursion, and number theory (primes).",
        "idx_generation": 61,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if str(n) != str(n)[::-1]:\n        return False\n    digit_sum = sum(int(d) for d in str(n))\n    return is_prime(digit_sum)",
        "solution_func": "def g():\n    for n in range(1, 1000):\n        if str(n) == str(n)[::-1] and is_prime(sum(int(d) for d in str(n))):\n            return n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a number between 1 and 999 that is a palindrome and has a prime digit sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of palindrome numbers, prime numbers, and basic looping in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom math import isqrt\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return isqrt(sum(subsequence))**2 == sum(subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    perfect_squares = [num for num in nums if isqrt(num)**2 == num]\n    return perfect_squares\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and importing modules (math). The solution involves list comprehension and mathematical operations.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom sympy import isprime\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(isprime(num) for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    primes = [num for num in nums if isprime(num)]\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom math import isqrt\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return isqrt(sum(subsequence))**2 == sum(subsequence)",
        "solution_func": "def g(nums=[0]) -> List[int]:\n    perfect_squares = [num for num in nums if isqrt(num)**2 == num]\n    return perfect_squares",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the sum of a subsequence of integers is a perfect square, and a function g that returns a list of perfect squares from a given list of numbers. The assertion at the end checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for perfect squares and manipulate lists in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(num % 2 == 0 for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    evens = [num for num in nums if num % 2 == 0]\n    return evens\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a subsequence are even and filtering out even numbers from a list.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom sympy import isprime\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(isprime(num) for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    primes = [num for num in nums if isprime(num)]\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(num % 2 == 0 for num in subsequence)",
        "solution_func": "def g(nums=[0]) -> List[int]:\n    evens = [num for num in nums if num % 2 == 0]\n    return evens",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions in Python, f and g. Function f checks if all numbers in a given list are even, while function g returns a list of even numbers from a given list. The puzzle tests if function g correctly solves the challenge defined in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, checking for even numbers, and using the all() function in Python. It is a suitable puzzle for teaching Python programming concepts related to list manipulation and boolean expressions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], words=[\"apple\", \"banana\", \"cherry\", \"date\"]) -> bool:\n    return any(\"a\" in s for s in strings)\n\ndef g(words=[\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return [word for word in words if \"a\" in word]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 4, 6, 8, 10, 12]) -> bool:\n    total_sum = sum(numbers)\n    return total_sum % 2 == 0\n\ndef g(options=[2, 4, 6, 8, 10, 12]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total_sum = sum(c)\n            if total_sum % 2 == 0:\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], words=[\"apple\", \"banana\", \"cherry\", \"date\"]) -> bool:\n    return any(\"a\" in s for s in strings)",
        "solution_func": "def g(words=[\"apple\", \"banana\", \"cherry\", \"date\"]):\n    return [word for word in words if \"a\" in word]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if any string in a list contains the letter 'a', and a function g that returns a list of words containing the letter 'a'. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the 'any' function, and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], values=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) -> bool:\n    return any(num in values for num in numbers)\n\ndef g(values=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]):\n    return [num for num in values if num in values]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for values in a list.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 4, 6, 8, 10, 12]) -> bool:\n    total_sum = sum(numbers)\n    return total_sum % 2 == 0\n\ndef g(options=[2, 4, 6, 8, 10, 12]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total_sum = sum(c)\n            if total_sum % 2 == 0:\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], values=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) -> bool:\n    return any(num in values for num in numbers)",
        "solution_func": "def g(values=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]):\n    return [num for num in values if num in values]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if any number in a given list is present in a predefined list of values."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if any number in a given list is present in a predefined list of values. The solution function g returns a list of numbers that are present in the predefined list of values. The assertion at the end checks if the puzzle condition is satisfied.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    return any((n1 + n2) in primes for n1 in numbers for n2 in numbers if n1 != n2)\n\ndef g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return [num for num in primes if num in primes]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 4, 6, 8, 10, 12]) -> bool:\n    total_sum = sum(numbers)\n    return total_sum % 2 == 0\n\ndef g(options=[2, 4, 6, 8, 10, 12]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total_sum = sum(c)\n            if total_sum % 2 == 0:\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    return any((n1 + n2) in primes for n1 in numbers for n2 in numbers if n1 != n2)",
        "solution_func": "def g(primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    return [num for num in primes if num in primes]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the sum of any two numbers in a given list is a prime number from a predefined list of primes. The solution function returns a list of prime numbers from the predefined list."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle is not suitable for teaching Python as the solution function g() simply returns the predefined list of primes without any computation or logic. This does not demonstrate problem-solving skills or understanding of the puzzle's challenge.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(elements: List[int], perfect_square_product=False) -> bool:\n    if len(elements) < 1:\n        return False\n    product = lambda lst: eval('*'.join(map(str, lst)))\n    is_perfect_square = lambda n: n >= 0 and int(n**0.5)**2 == n\n    return is_perfect_square(product(elements)) if perfect_square_product else all(e % 2 == 0 for e in elements)\n\ndef g(perfect_square_product=False):\n    elements = [2, 4, 6, 8]\n    return elements if not perfect_square_product else eval('*'.join(map(str, elements)))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, and List Operations.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int]], prime_tuple_sum=False) -> bool:\n    if len(tuples) < 1:\n        return False\n    unique_elements = lambda t: len(set(t)) == len(t)\n    tuple_sum = sum(len(t) for t in tuples)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return all(unique_elements(t) for t in tuples) and is_prime(tuple_sum) if prime_tuple_sum else True\n\ndef g(prime_tuple_sum=False):\n    tuples = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\n    return tuples if not prime_tuple_sum else sum(len(t) for t in tuples)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(elements: List[int], perfect_square_product=False) -> bool:\n    if len(elements) < 1:\n        return False\n    product = lambda lst: eval('*'.join(map(str, lst)))\n    is_perfect_square = lambda n: n >= 0 and int(n**0.5)**2 == n\n    return is_perfect_square(product(elements)) if perfect_square_product else all(e % 2 == 0 for e in elements)",
        "solution_func": "def g(perfect_square_product=False):\n    elements = [2, 4, 6, 8]\n    return elements if not perfect_square_product else eval('*'.join(map(str, elements)))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and an optional flag to check if the product of the integers is a perfect square or if all integers are even. The solution function g returns a list of integers based on the flag provided. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of lambda functions, list manipulation, and conditional statements in Python. It also requires understanding of perfect squares and modulo operations.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(elements: List[int], check_common_difference=False) -> bool:\n    if len(elements) < 2:\n        return False\n    common_difference = elements[1] - elements[0]\n    is_arithmetic_progression = all(elements[i] - elements[i-1] == common_difference for i in range(2, len(elements)))\n    return is_arithmetic_progression if check_common_difference else all(e % 2 == 0 for e in elements)\n\ndef g(check_common_difference=False):\n    elements = [2, 4, 6, 8]\n    return elements if not check_common_difference else elements[1] - elements[0]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics such as Conditional Logic, List Operations, and Mathematical Operations.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int]], prime_tuple_sum=False) -> bool:\n    if len(tuples) < 1:\n        return False\n    unique_elements = lambda t: len(set(t)) == len(t)\n    tuple_sum = sum(len(t) for t in tuples)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return all(unique_elements(t) for t in tuples) and is_prime(tuple_sum) if prime_tuple_sum else True\n\ndef g(prime_tuple_sum=False):\n    tuples = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\n    return tuples if not prime_tuple_sum else sum(len(t) for t in tuples)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(elements: List[int], check_common_difference=False) -> bool:\n    if len(elements) < 2:\n        return False\n    common_difference = elements[1] - elements[0]\n    is_arithmetic_progression = all(elements[i] - elements[i-1] == common_difference for i in range(2, len(elements)))\n    return is_arithmetic_progression if check_common_difference else all(e % 2 == 0 for e in elements)",
        "solution_func": "def g(check_common_difference=False):\n    elements = [2, 4, 6, 8]\n    return elements if not check_common_difference else elements[1] - elements[0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of integers forms an arithmetic progression or if all elements are even numbers, based on a specified condition. The solution function returns a list of integers and an optional common difference if specified."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, arithmetic progression, and conditional statements in Python. It can be used to teach students about list manipulation and conditional checks in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(elements: List[int], check_common_ratio=False) -> bool:\n    if len(elements) < 2:\n        return False\n    common_ratio = elements[1] / elements[0]\n    is_geometric_progression = all(elements[i] / elements[i-1] == common_ratio for i in range(2, len(elements)))\n    return is_geometric_progression if check_common_ratio else all(e % 2 == 0 for e in elements)\n\ndef g(check_common_ratio=False):\n    elements = [2, 4, 8, 16]\n    return elements if not check_common_ratio else elements[1] / elements[0]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given list of integers forms a geometric progression with a common ratio or if all elements are even numbers. The solution function generates a list of integers and calculates the common ratio if required. The puzzle and solution involve topics such as list manipulation, mathematical operations, conditional logic, and recursion.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int]], prime_tuple_sum=False) -> bool:\n    if len(tuples) < 1:\n        return False\n    unique_elements = lambda t: len(set(t)) == len(t)\n    tuple_sum = sum(len(t) for t in tuples)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return all(unique_elements(t) for t in tuples) and is_prime(tuple_sum) if prime_tuple_sum else True\n\ndef g(prime_tuple_sum=False):\n    tuples = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\n    return tuples if not prime_tuple_sum else sum(len(t) for t in tuples)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(elements: List[int], check_common_ratio=False) -> bool:\n    if len(elements) < 2:\n        return False\n    common_ratio = elements[1] / elements[0]\n    is_geometric_progression = all(elements[i] / elements[i-1] == common_ratio for i in range(2, len(elements)))\n    return is_geometric_progression if check_common_ratio else all(e % 2 == 0 for e in elements)",
        "solution_func": "def g(check_common_ratio=False):\n    elements = [2, 4, 8, 16]\n    return elements if not check_common_ratio else elements[1] / elements[0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of integers forms a geometric progression or if all elements are even, based on a specified condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list operations, iteration, and conditional statements in Python. It also involves checking for geometric progression and even numbers in a list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    return all(num % 2 == 0 for num in numbers)\n\ndef g():\n    import random\n    numbers = random.sample(range(1, 100), 5)\n    numbers = [num if num % 2 == 0 else num + 1 for num in numbers]\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic to generate a list of numbers and check if all numbers are even.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(numbers: list) -> bool:\n    return any(num > 0 for num in numbers) and any(num < 0 for num in numbers)\n\ndef g():\n    import random\n    numbers = random.sample(range(-10, 10), 8)\n    return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    return all(num % 2 == 0 for num in numbers)",
        "solution_func": "def g():\n    import random\n    numbers = random.sample(range(1, 100), 5)\n    numbers = [num if num % 2 == 0 else num + 1 for num in numbers]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of 5 random numbers between 1 and 100, then modify the list by making all odd numbers even, and finally check if all numbers in the modified list are even."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension and the all() function to check if all numbers in a list are even after a specific modification.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(strings: list) -> bool:\n    return any('a' in s for s in strings)\n\ndef g():\n    import random\n    import string\n    strings = [''.join(random.choices(string.ascii_lowercase, k=5)) for _ in range(6)]\n    strings[random.randint(0, 5)] += 'a'\n    return strings\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(numbers: list) -> bool:\n    return any(num > 0 for num in numbers) and any(num < 0 for num in numbers)\n\ndef g():\n    import random\n    numbers = random.sample(range(-10, 10), 8)\n    return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(strings: list) -> bool:\n    return any('a' in s for s in strings)",
        "solution_func": "def g():\n    import random\n    import string\n    strings = [''.join(random.choices(string.ascii_lowercase, k=5)) for _ in range(6)]\n    strings[random.randint(0, 5)] += 'a'\n    return strings",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that checks if any string in a list contains the character 'a'. The solution generates a list of random strings and adds 'a' to one of the strings before checking if the function returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, strings, random module, and boolean expressions in Python. It tests the students' understanding of list comprehension, string manipulation, and boolean logic.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict) -> bool:\n    return len(set(data.values())) == len(data)\n\ndef g():\n    import random\n    keys = ['A', 'B', 'C', 'D']\n    values = random.sample(range(1, 10), 4)\n    data = dict(zip(keys, values))\n    return data\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Set Operations and Dictionary Manipulation.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(numbers: list) -> bool:\n    return any(num > 0 for num in numbers) and any(num < 0 for num in numbers)\n\ndef g():\n    import random\n    numbers = random.sample(range(-10, 10), 8)\n    return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(data: dict) -> bool:\n    return len(set(data.values())) == len(data)",
        "solution_func": "def g():\n    import random\n    keys = ['A', 'B', 'C', 'D']\n    values = random.sample(range(1, 10), 4)\n    data = dict(zip(keys, values))\n    return data",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that generates a dictionary with unique values and then checks if all values in the dictionary are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a dictionary with unique values using random sampling and then checking if all values in the dictionary are unique. The solution function should return a dictionary with unique values to pass the test assertion.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(sorted_list: list) -> bool:\n    return sorted_list == sorted(sorted_list)\n\ndef g():\n    numbers = [random.randint(1, 50) for _ in range(5)]\n    return sorted(numbers)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and checking if it is sorted correctly. It also includes generating random numbers within a range. ",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nimport sympy\n\ndef f(n: int) -> bool:\n    return sympy.isprime(n)\n\ndef g():\n    import random\n    while True:\n        number = random.randint(10, 100)\n        if sympy.isprime(number):\n            return number\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(sorted_list: list) -> bool:\n    return sorted_list == sorted(sorted_list)",
        "solution_func": "def g():\n    numbers = [random.randint(1, 50) for _ in range(5)]\n    return sorted(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of random numbers, sort the list, and check if the sorted list is equal to the original list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting in Python and checking for equality between lists.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return 'Python' in lst\n\ndef g() -> list:\n    return ['Java', 'C++', 'Python']\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    return s.islower()\n\ndef g() -> str:\n    return \"hello\"\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return 'Python' in lst",
        "solution_func": "def g() -> list:\n    return ['Java', 'C++', 'Python']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires checking if the string 'Python' is present in a given list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks for the presence of a specific string in a list and then asserting that the function returns True when applied to a specific list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a word is a palindrome.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that returns True if the word is a palindrome (reads the same forwards and backwards), and a function g() that returns the word 'radar'. The assertion checks if f(g()) returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product > 1000\n\ndef g():\n    return [20, 30, 25, 10, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product > 1000",
        "solution_func": "def g():\n    return [20, 30, 25, 10, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers as input, calculates the product of all the numbers in the list, and returns True if the product is greater than 1000. The solution function g returns a specific list of integers that satisfies the condition set by function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate the product of numbers in a list and compare it to a specific value. It also requires implementing a function that returns a list of integers that meets the condition set by function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] >= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] < nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] > nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Dynamic Programming, Sorting and Ordering",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] >= subsequence[i - 1]:\n            return False\n    return True",
        "solution_func": "def g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] < nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] > nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given subsequence is in decreasing order and g finds the longest decreasing subsequence in a list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function f checks if a given subsequence is in decreasing order, while the function g finds the longest decreasing subsequence in a list of numbers. The assertion at the end checks if the output of g satisfies the condition of f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return subsequence == subsequence[::-1]\n\ndef g(nums=[0]):\n    def longest_palindrome_subsequence(s):\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n\n        for cl in range(2, n + 1):\n            for i in range(n - cl + 1):\n                j = i + cl - 1\n                if s[i] == s[j] and cl == 2:\n                    dp[i][j] = 2\n                elif s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n        res = []\n        i, j = 0, n - 1\n        while i < n and j >= 0:\n            if s[i] == s[j]:\n                res.append(s[i])\n                if i == j:\n                    break\n                i += 1\n                j -= 1\n            else:\n                if dp[i][j - 1] > dp[i + 1][j]:\n                    j -= 1\n                else:\n                    i += 1\n        return res\n\n    return longest_palindrome_subsequence(nums)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to find the longest palindrome subsequence in a given list of integers.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return subsequence == subsequence[::-1]",
        "solution_func": "def g(nums=[0]):\n    def longest_palindrome_subsequence(s):\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n\n        for cl in range(2, n + 1):\n            for i in range(n - cl + 1):\n                j = i + cl - 1\n                if s[i] == s[j] and cl == 2:\n                    dp[i][j] = 2\n                elif s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n        res = []\n        i, j = 0, n - 1\n        while i < n and j >= 0:\n            if s[i] == s[j]:\n                res.append(s[i])\n                if i == j:\n                    break\n                i += 1\n                j -= 1\n            else:\n                if dp[i][j - 1] > dp[i + 1][j]:\n                    j -= 1\n                else:\n                    i += 1\n        return res\n\n    return longest_palindrome_subsequence(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of integers is a palindrome subsequence. The solution function g finds the longest palindrome subsequence in a given list of integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for palindrome subsequences and finding the longest palindrome subsequence in a list of integers using dynamic programming. It requires knowledge of list manipulation and dynamic programming concepts in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(is_prime(num) for num in subsequence)\n\ndef g(nums=[0]):\n    primes = [num for num in nums if is_prime(num)]\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers in a list and filtering out the prime numbers from the list.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(is_prime(num) for num in subsequence)",
        "solution_func": "def g(nums=[0]):\n    primes = [num for num in nums if is_prime(num)]\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if all numbers in a given subsequence are prime numbers using a function f, and finding all prime numbers in a list using a function g. The solution g returns a list of prime numbers from the input list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and list comprehension in Python. The functions f and g work together to check for prime numbers in a subsequence and extract prime numbers from a list, respectively.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target=24) -> bool:\n    return target in [x * y for x in numbers for y in numbers]\n\ndef g(target=24) -> List[int]:\n    return [1, 2, 3, 4, 6]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, and Conditional Logic.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target=10) -> bool:\n    return all(sum(t) == target for t in tuples)\n\ndef g(target=10) -> List[Tuple[int, int]]:\n    return [(3, 7), (2, 8), (1, 9)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target=24) -> bool:\n    return target in [x * y for x in numbers for y in numbers]",
        "solution_func": "def g(target=24) -> List[int]:\n    return [1, 2, 3, 4, 6]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the puzzle is to determine if it is possible to obtain the target number 24 by multiplying any two numbers from the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the target number 24 can be obtained by multiplying any two numbers from a given list of numbers. The solution function returns a list of numbers that can be multiplied to obtain the target number.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    return max(numbers) > target\n\ndef g(target=10) -> List[int]:\n    return [5, 7, 9, 11]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 62,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target=10) -> bool:\n    return all(sum(t) == target for t in tuples)\n\ndef g(target=10) -> List[Tuple[int, int]]:\n    return [(3, 7), (2, 8), (1, 9)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    return max(numbers) > target",
        "solution_func": "def g(target=10) -> List[int]:\n    return [5, 7, 9, 11]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the puzzle function f checks if the maximum number in the list is greater than a target value. The solution function g returns a list of numbers. The puzzle is solved if the maximum number in the list returned by g is greater than the target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, comparison operations, and function calls in Python. It is suitable for teaching Python concepts to master's students in CS.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int, n=5) -> bool:\n    assert factorial == 120\n    return True\n\ndef g(n=5):\n    if n == 0:\n        return 1\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    \n    return result\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and recursion.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(target_value: int, prices=[7, 1, 5, 3, 6, 4]) -> bool:\n    assert target_value == max(prices[1] - prices[0], prices[2])\n    return True\n\ndef g(prices=[7, 1, 5, 3, 6, 4]):\n    if len(prices) <= 1:\n        return 0\n    \n    max_profit = 0\n    min_price = prices[0]\n    \n    for price in prices[1:]:\n        max_profit = max(max_profit, price - min_price)\n        min_price = min(min_price, price)\n    \n    return max_profit\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(factorial: int, n=5) -> bool:\n    assert factorial == 120\n    return True",
        "solution_func": "def g(n=5):\n    if n == 0:\n        return 1\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    \n    return result",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that calculates the factorial of a given number and then use this function to check if the factorial of 5 is equal to 120."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate factorials in Python and ensuring that the factorial function returns the correct result for a specific input.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return len(numbers) == len(set(numbers))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that returns True if the word is a palindrome (reads the same forwards and backwards). The solution function g() returns the word 'level', and the assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return len(numbers) == len(set(numbers))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns the number 17 and assert that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f(num) that checks if a number is prime, and then defining a function g() that returns the number 17. The puzzle requires students to understand prime numbers and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return len(words) == len(set(words))\n\ndef g():\n    return [\"apple\", \"banana\", \"orange\", \"kiwi\"]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for uniqueness in a list of words using sets.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return len(numbers) == len(set(numbers))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return len(words) == len(set(words))",
        "solution_func": "def g():\n    return [\"apple\", \"banana\", \"orange\", \"kiwi\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a list of words contains only unique elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that takes a list of words as input and returns True if all words in the list are unique. The solution function g returns a list of words, and the assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, sorted_lst=[1, 2, 3, 4, 5]) -> bool:\n    return lst == sorted_lst\n\ndef g(lst=[5, 3, 2, 4, 1]):\n    n = len(lst)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list using a specific algorithm and checking if the sorted list matches a predefined sorted list. This involves concepts of sorting and list manipulation.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, rev='racecar') -> bool:\n    return s == rev\n    \ndef g(s='racecar'):\n    if len(s) <= 1:\n        return s\n    return g(s[1:]) + s[0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, sorted_lst=[1, 2, 3, 4, 5]) -> bool:\n    return lst == sorted_lst",
        "solution_func": "def g(lst=[5, 3, 2, 4, 1]):\n    n = len(lst)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that sorts a given list of numbers and then check if the sorted list matches a predefined sorted list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves implementing a sorting algorithm and checking if the sorted list matches a predefined list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, is_fibonacci=True) -> bool:\n    if len(lst) < 3:\n        return False\n    for i in range(2, len(lst)):\n        if lst[i] != lst[i-1] + lst[i-2]:\n            return False\n    return True\n\ndef g(limit=10):\n    fib = [0, 1]\n    while fib[-1] + fib[-2] <= limit:\n        fib.append(fib[-1] + fib[-2])\n    return fib\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a given list of numbers forms a Fibonacci sequence. It also includes generating Fibonacci numbers up to a certain limit using a function. The topics involved in this puzzle are list manipulation, loops, conditionals, and mathematical operations.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, rev='racecar') -> bool:\n    return s == rev\n    \ndef g(s='racecar'):\n    if len(s) <= 1:\n        return s\n    return g(s[1:]) + s[0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, is_fibonacci=True) -> bool:\n    if len(lst) < 3:\n        return False\n    for i in range(2, len(lst)):\n        if lst[i] != lst[i-1] + lst[i-2]:\n            return False\n    return True",
        "solution_func": "def g(limit=10):\n    fib = [0, 1]\n    while fib[-1] + fib[-2] <= limit:\n        fib.append(fib[-1] + fib[-2])\n    return fib",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of numbers forms a Fibonacci sequence or not. The function f(lst) checks if the input list is a Fibonacci sequence, and the function g(limit) generates a list of Fibonacci numbers up to a specified limit. The assert statement checks if the output of g() satisfies the condition of f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding Fibonacci sequences and implementing a function to generate Fibonacci numbers. It also requires knowledge of list manipulation and iteration in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(letters: List[str]) -> bool:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return all(letter in vowels for letter in letters)\n\ndef g():\n    import random\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    while True:\n        letters = [random.choice('aeiou') for _ in range(3)]\n        if all(letter in vowels for letter in letters):\n            return letters\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic. It also uses random module for generating random letters.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 != 0 for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 2 != 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(letters: List[str]) -> bool:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return all(letter in vowels for letter in letters)",
        "solution_func": "def g():\n    import random\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    while True:\n        letters = [random.choice('aeiou') for _ in range(3)]\n        if all(letter in vowels for letter in letters):\n            return letters",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 3 random vowels and checking if all the letters in the list are vowels."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of 3 random vowels and checking if all the letters in the list are vowels using the function f. The solution function g generates the list of vowels and returns it if all the letters are vowels.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return sum(numbers) < 0\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(-50, 50) for _ in range(4)]\n        if sum(numbers) < 0:\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic and random number generation. It also includes list manipulation and comparison operations.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 != 0 for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 2 != 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return sum(numbers) < 0",
        "solution_func": "def g():\n    import random\n    while True:\n        numbers = [random.randint(-50, 50) for _ in range(4)]\n        if sum(numbers) < 0:\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 4 random integers between -50 and 50, and checking if the sum of the numbers in the list is less than 0."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if the sum of a list of integers is less than 0, and a function g that generates a list of random integers and returns it if the sum is less than 0. The assert statement at the end verifies that the solution g satisfies the condition of function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[float]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return 0.4 <= avg <= 0.6\n\ndef g():\n    import random\n    while True:\n        numbers = [random.uniform(0, 1) for _ in range(6)]\n        if 0.4 <= sum(numbers) / len(numbers) <= 0.6:\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, random number generation, and conditional logic.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 != 0 for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if all(num % 2 != 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[float]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return 0.4 <= avg <= 0.6",
        "solution_func": "def g():\n    import random\n    while True:\n        numbers = [random.uniform(0, 1) for _ in range(6)]\n        if 0.4 <= sum(numbers) / len(numbers) <= 0.6:\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of 6 random float numbers between 0 and 1, calculating the average of the numbers, and checking if the average falls within the range of 0.4 to 0.6."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random numbers and calculating their average to check if it falls within a specific range. It tests the understanding of list comprehension, random number generation, and comparison operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name') -> bool:\n    assert key in d\n\n    return True\n\ndef g(key='name'):\n    d = {'name': 'Alice', 'age': 30, 'city': 'New York'}\n    return d\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and assertion checking.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import Set\n\ndef f(s: Set[int], n=3) -> bool:\n    assert len(s) > 0 and all(num % n == 0 for num in s)\n\n    return sum(s) % n == 0\n\ndef g(n=3):\n    s = {3, 6, 9, 12, 15}\n    return s\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict, key='name') -> bool:\n    assert key in d\n\n    return True",
        "solution_func": "def g(key='name'):\n    d = {'name': 'Alice', 'age': 30, 'city': 'New York'}\n    return d",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary and a key as input, and checks if the key exists in the dictionary. Another function g creates a dictionary and returns it. The puzzle tests if function f returns True when called with the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to define a function that checks for the existence of a key in a dictionary and then calling this function with the output of another function that creates a dictionary.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(tuples: list, element=5) -> bool:\n    assert any(element in t for t in tuples)\n\n    return True\n\ndef g(element=5):\n    tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    return tuples\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a specific element is present in any of the tuples in a list.",
        "idx_generation": 63,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import Set\n\ndef f(s: Set[int], n=3) -> bool:\n    assert len(s) > 0 and all(num % n == 0 for num in s)\n\n    return sum(s) % n == 0\n\ndef g(n=3):\n    s = {3, 6, 9, 12, 15}\n    return s\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(tuples: list, element=5) -> bool:\n    assert any(element in t for t in tuples)\n\n    return True",
        "solution_func": "def g(element=5):\n    tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    return tuples",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples and an element as input, and checks if the element is present in any of the tuples. The solution function g returns a list of tuples, and the puzzle is solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming as it involves working with lists, tuples, functions, and assertions to check for the presence of an element in tuples.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(xy_coords: List[Tuple[int, int]]) -> bool:\n    total_sum = sum(x + y for x, y in xy_coords)\n    assert total_sum % 2 == 0\n    return all(x * y % 2 == 0 for x, y in xy_coords)\n\ndef g():\n    return [(2, 4), (6, 8), (10, 12), (14, 16), (18, 20)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and list manipulation.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(xy_coords: List[Tuple[int, int]]) -> bool:\n    total_sum = sum(x + y for x, y in xy_coords)\n    assert total_sum % 2 == 0\n    return all(x * y % 2 == 0 for x, y in xy_coords)",
        "solution_func": "def g():\n    return [(2, 4), (6, 8), (10, 12), (14, 16), (18, 20)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of tuples of integers as input, calculates the sum of x + y for each tuple, ensures the total sum is even, and checks if the product of x and y is even for all tuples. The solution function g returns a specific list of tuples that satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list comprehension, sum calculation, assertion, and checking conditions on integers. It can be used to teach students about list operations, assertions, and condition checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    total_len = sum(len(word) for word in words)\n    assert total_len > 0\n    return all(word.isalpha() for word in words)\n\ndef g():\n    return [\"hello\", \"world\", \"python\", \"program\", \"code\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation is used to manipulate strings in the puzzle.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    total_len = sum(len(word) for word in words)\n    assert total_len > 0\n    return all(word.isalpha() for word in words)",
        "solution_func": "def g():\n    return [\"hello\", \"world\", \"python\", \"program\", \"code\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f that takes a list of strings as input, calculates the total length of all the strings in the list, and checks if all the strings are alphabetic. The solution function g returns a list of strings and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the total length of strings in a list and verifying if all strings are alphabetic. The solution function returns a list of strings that satisfy the conditions of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    max_num = max(numbers)\n    min_num = min(numbers)\n    return max_num % min_num == 0 and all(num > 0 for num in numbers)\n\ndef g():\n    return [2, 4, 8, 16, 32, 64]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    max_num = max(numbers)\n    min_num = min(numbers)\n    return max_num % min_num == 0 and all(num > 0 for num in numbers)",
        "solution_func": "def g():\n    return [2, 4, 8, 16, 32, 64]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers, finds the maximum and minimum numbers in the list, and checks if the maximum number is divisible by the minimum number and if all numbers in the list are positive. The solution function g returns a specific list of integers that satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation, finding maximum and minimum values, and checking conditions on the list elements. The solution function g returns a list that meets the conditions of function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(subsets: List[List[int]], nums=[1, 2, 3], target=5) -> bool:\n    return any(sum(subset) == target for subset in subsets)\ndef g(nums=[1, 2, 3], target=5):\n    from itertools import combinations\n    return [list(comb) for r in range(len(nums)+1) for comb in combinations(nums, r)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, Itertools, Combinations, and Assertion Testing.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(permutations: List[str], char_list=['a', 'b', 'c'], length=3) -> bool:\n    return len(permutations) == len(set(permutations)) >= len(char_list) and all((len(perm) == length for perm in permutations))\ndef g(char_list=['a', 'b', 'c'], length=3):\n    from itertools import permutations\n    return [''.join(perm) for perm in permutations(char_list, length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List \ndef f(subsets: List[List[int]], nums=[1, 2, 3], target=5) -> bool:\n    return any(sum(subset) == target for subset in subsets)",
        "solution_func": "def g(nums=[1, 2, 3], target=5):\n    from itertools import combinations\n    return [list(comb) for r in range(len(nums)+1) for comb in combinations(nums, r)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if any subset of a list of numbers sums up to a target value. The solution function g generates all possible subsets of the given list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, subsets, and combinations in Python to check for a specific sum. It also requires understanding how to use itertools combinations to generate all possible subsets.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(combinations: List[List[str]], colors=['red', 'blue', 'green'], target_color='red') -> bool:\n    return any(target_color in comb for comb in combinations)\ndef g(colors=['red', 'blue', 'green'], target_color='red'):\n    from itertools import combinations\n    return [list(comb) for r in range(1, len(colors)+1) for comb in combinations(colors, r)]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves permutations and combinations to generate all possible combinations of colors and then checks if the target color is present in any of the combinations. It also uses the itertools module for generating combinations.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(permutations: List[str], char_list=['a', 'b', 'c'], length=3) -> bool:\n    return len(permutations) == len(set(permutations)) >= len(char_list) and all((len(perm) == length for perm in permutations))\ndef g(char_list=['a', 'b', 'c'], length=3):\n    from itertools import permutations\n    return [''.join(perm) for perm in permutations(char_list, length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List \ndef f(combinations: List[List[str]], colors=['red', 'blue', 'green'], target_color='red') -> bool:\n    return any(target_color in comb for comb in combinations)",
        "solution_func": "def g(colors=['red', 'blue', 'green'], target_color='red'):\n    from itertools import combinations\n    return [list(comb) for r in range(1, len(colors)+1) for comb in combinations(colors, r)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a target color is present in any combination of colors provided in a list. The solution function g generates all possible combinations of colors and checks if the target color is present in any of them."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if a target color is present in any combination of colors. The solution function generates all possible combinations of colors and checks if the target color is present in any of them.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subset: List[int], target_sum=10) -> bool:\n    return any(sum(sub) == target_sum for sub in subset)\n\ndef g(int_list=[2, 4, 6, 8]):\n    def generate_subsets(nums):\n        result = [[]]\n        for num in nums:\n            result += [x + [num] for x in result]\n        return result\n\n    return [sub for sub in generate_subsets(int_list) if sub]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as list manipulation, recursion, and brute force search.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\ndef f(subsets: List[List[int]], target_sum=5) -> bool:\n    return any(sum(subset) == target_sum for subset in subsets)\ndef g(int_list=[1, 2, 3]):\n    def powerset(s):\n        result = [[]]\n        for elem in s:\n            result += [x + [elem] for x in result]\n        return result\n\n    return [subset for subset in powerset(int_list) if subset != []]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subset: List[int], target_sum=10) -> bool:\n    return any(sum(sub) == target_sum for sub in subset)",
        "solution_func": "def g(int_list=[2, 4, 6, 8]):\n    def generate_subsets(nums):\n        result = [[]]\n        for num in nums:\n            result += [x + [num] for x in result]\n        return result\n\n    return [sub for sub in generate_subsets(int_list) if sub]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if any subset of a given list of integers sums up to a target sum. The solution function g generates all possible subsets of a given list of integers and checks if any of them satisfy the condition defined in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, nested functions, and list manipulation in Python. It also requires knowledge of how to check conditions on subsets of a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(combinations: List[str], target_str='hello') -> bool:\n    return any(''.join(comb) == target_str for comb in combinations)\n\ndef g(str_list=['he', 'll', 'o']):\n    def generate_combinations(strings):\n        result = ['']\n        for string in strings:\n            result += [x + string for x in result]\n        return result\n\n    return [comb for comb in generate_combinations(str_list) if comb]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves permutations and combinations to generate all possible combinations of strings and check if any combination equals the target string 'hello'. The solution uses a recursive function to generate combinations.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\ndef f(subsets: List[List[int]], target_sum=5) -> bool:\n    return any(sum(subset) == target_sum for subset in subsets)\ndef g(int_list=[1, 2, 3]):\n    def powerset(s):\n        result = [[]]\n        for elem in s:\n            result += [x + [elem] for x in result]\n        return result\n\n    return [subset for subset in powerset(int_list) if subset != []]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(combinations: List[str], target_str='hello') -> bool:\n    return any(''.join(comb) == target_str for comb in combinations)",
        "solution_func": "def g(str_list=['he', 'll', 'o']):\n    def generate_combinations(strings):\n        result = ['']\n        for string in strings:\n            result += [x + string for x in result]\n        return result\n\n    return [comb for comb in generate_combinations(str_list) if comb]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that generates combinations of strings and checks if any combination equals a target string. The solution function generates all possible combinations of the given strings and returns those combinations that are not empty."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and list comprehension in Python. It tests the student's understanding of generating combinations of strings and checking for a specific target string.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subset: List[bool], operation='OR') -> bool:\n    if operation == 'OR':\n        return any(sub for sub in subset)\n    elif operation == 'AND':\n        return all(sub for sub in subset)\n    elif operation == 'XOR':\n        return sum(sub for sub in subset) % 2 == 1\n\ndef g(bool_list=[True, False, True]):\n    def generate_subsets(bools):\n        result = [[]]\n        for bool_val in bools:\n            result += [x + [bool_val] for x in result]\n        return result\n\n    return [sub for sub in generate_subsets(bool_list) if sub]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation to generate subsets. It also uses logical operations such as OR, AND, and XOR. The solution function g() generates subsets of a given list of boolean values and checks if any of the subsets satisfy the condition defined by function f().",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\ndef f(subsets: List[List[int]], target_sum=5) -> bool:\n    return any(sum(subset) == target_sum for subset in subsets)\ndef g(int_list=[1, 2, 3]):\n    def powerset(s):\n        result = [[]]\n        for elem in s:\n            result += [x + [elem] for x in result]\n        return result\n\n    return [subset for subset in powerset(int_list) if subset != []]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subset: List[bool], operation='OR') -> bool:\n    if operation == 'OR':\n        return any(sub for sub in subset)\n    elif operation == 'AND':\n        return all(sub for sub in subset)\n    elif operation == 'XOR':\n        return sum(sub for sub in subset) % 2 == 1",
        "solution_func": "def g(bool_list=[True, False, True]):\n    def generate_subsets(bools):\n        result = [[]]\n        for bool_val in bools:\n            result += [x + [bool_val] for x in result]\n        return result\n\n    return [sub for sub in generate_subsets(bool_list) if sub]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that performs logical operations (OR, AND, XOR) on a list of boolean values. The solution function g generates all possible subsets of a given list of boolean values and returns the subset that evaluates to True according to the specified operation."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding logical operations and generating subsets of boolean values to find the subset that satisfies the given operation. It requires knowledge of list comprehension and logical operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(vowel_count: int) -> bool:\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return is_prime(vowel_count)\n\ndef g():\n    string = \"hello world\"\n    vowels = \"aeiou\"\n    vowel_count = sum(1 for char in string if char.lower() in vowels)\n    return vowel_count\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to count the number of vowels in a given string and then check if the count is a prime number.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(values: List[int]) -> bool:\n    max_value = max(values)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return is_prime(max_value)\n\ndef g():\n    values = [2, 3, 5, 7, 4]\n    return values\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(vowel_count: int) -> bool:\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return is_prime(vowel_count)",
        "solution_func": "def g():\n    string = \"hello world\"\n    vowels = \"aeiou\"\n    vowel_count = sum(1 for char in string if char.lower() in vowels)\n    return vowel_count",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires counting the number of vowels in a given string and checking if the count is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using a lambda function to check for prime numbers and a function to count vowels in a string. The solution function calculates the vowel count in the string 'hello world' and the puzzle function checks if this count is a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(number: int) -> bool:\n    is_palindrome = lambda n: str(n) == str(n)[::-1]\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return is_palindrome(number) and is_prime(number)\n\ndef g():\n    number = 131\n    return number\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check for palindrome, mathematical operations to check for prime numbers, and conditional logic to combine the checks. It also includes lambda functions and assertion for testing the solution.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(values: List[int]) -> bool:\n    max_value = max(values)\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return is_prime(max_value)\n\ndef g():\n    values = [2, 3, 5, 7, 4]\n    return values\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(number: int) -> bool:\n    is_palindrome = lambda n: str(n) == str(n)[::-1]\n    is_prime = lambda n: n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))\n    return is_palindrome(number) and is_prime(number)",
        "solution_func": "def g():\n    number = 131\n    return number",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a number that is both a palindrome and a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a palindrome and a prime number. The solution function returns the number 131, which is a palindrome and a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: str, input_str='radar') -> bool:\n    return result == result[::-1]\n\ndef g(input_str='radar'):\n    return input_str + input_str[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(result: int, num=5) -> bool:\n    factorial = 1\n    for i in range(1, num+1):\n        factorial *= i\n    return result == factorial\n\ndef g(num=5):\n    return num * g(num-1) if num > 1 else 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(result: str, input_str='radar') -> bool:\n    return result == result[::-1]",
        "solution_func": "def g(input_str='radar'):\n    return input_str + input_str[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f that checks if a string is a palindrome and a function g that creates a palindrome by appending the reverse of a string to itself, the puzzle requires students to ensure that the output of g is a palindrome according to f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding palindrome strings and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int, num=17) -> bool:\n    if result < 2:\n        return False\n    for i in range(2, int(result**0.5) + 1):\n        if result % i == 0:\n            return False\n    return True\n\ndef g(num=17):\n    while True:\n        num += 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                break\n        else:\n            return num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(result: int, num=5) -> bool:\n    factorial = 1\n    for i in range(1, num+1):\n        factorial *= i\n    return result == factorial\n\ndef g(num=5):\n    return num * g(num-1) if num > 1 else 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(result: int, num=17) -> bool:\n    if result < 2:\n        return False\n    for i in range(2, int(result**0.5) + 1):\n        if result % i == 0:\n            return False\n    return True",
        "solution_func": "def g(num=17):\n    while True:\n        num += 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                break\n        else:\n            return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding the next prime number after a given number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of prime numbers and how to check for primality in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(s: str) -> bool:\n    if s != s[::-1]:\n        return False\n    length = len(s)\n    return is_prime(length)\n\ndef g():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for prime in primes:\n        if prime > 1 and prime <= 100:\n            palindrome = str(prime) + str(prime)[::-1]\n            return palindrome\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, conditional logic, and number theory (primality check).",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    if str(n) != str(n)[::-1]:\n        return False\n    digit_sum = sum(int(d) for d in str(n))\n    return is_prime(digit_sum)\n\ndef g():\n    for n in range(1, 1000):\n        if str(n) == str(n)[::-1] and is_prime(sum(int(d) for d in str(n))):\n            return n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(s: str) -> bool:\n    if s != s[::-1]:\n        return False\n    length = len(s)\n    return is_prime(length)",
        "solution_func": "def g():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for prime in primes:\n        if prime > 1 and prime <= 100:\n            palindrome = str(prime) + str(prime)[::-1]\n            return palindrome\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a number generated by the function g() is a palindrome and has a length that is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a number generated by the function g() is a palindrome and then checking if the length of that number is a prime number using the is_prime function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(n: int) -> bool:\n    if str(n) != str(n)[::-1]:\n        return False\n    return is_prime(n)\n\ndef g():\n    for n in range(1000, 1, -1):\n        if str(n) == str(n)[::-1] and is_prime(n):\n            return n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a number is a palindrome, as well as number theory to check if the number is prime.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    if str(n) != str(n)[::-1]:\n        return False\n    digit_sum = sum(int(d) for d in str(n))\n    return is_prime(digit_sum)\n\ndef g():\n    for n in range(1, 1000):\n        if str(n) == str(n)[::-1] and is_prime(sum(int(d) for d in str(n))):\n            return n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(n: int) -> bool:\n    if str(n) != str(n)[::-1]:\n        return False\n    return is_prime(n)",
        "solution_func": "def g():\n    for n in range(1000, 1, -1):\n        if str(n) == str(n)[::-1] and is_prime(n):\n            return n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the largest palindrome prime number less than 1000."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for palindrome numbers and prime numbers within a specific range to find the largest palindrome prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(7):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(7):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic, loops, and mathematical operations.",
        "idx_generation": 64,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(7):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1",
        "solution_func": "def g():\n    m = 1\n    while True:\n        n = m\n        for i in range(7):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(n) and g(), where f checks a specific condition on an input integer n after a series of operations, and g iterates through integers to find the first one that satisfies the condition checked by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of loops, conditions, and arithmetic operations in Python to solve the algorithmic challenge.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], options=['a', 'b', 'c', 'd']) -> bool:\n    concatenated = ''.join(strings)\n    return concatenated == concatenated[::-1]\n\ndef g(options=['a', 'b', 'c', 'd']):\n    from itertools import product\n    for n in range(1, len(options)+1):\n        for p in product(options, repeat=n):\n            if ''.join(p) == ''.join(p)[::-1]:\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.), Permutations and Combinations",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], divisor=3, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    return sum(numbers) % divisor == 0\n\ndef g(divisor=3, options=[1, 2, 3, 4, 5, 6]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if sum(p) % divisor == 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], options=['a', 'b', 'c', 'd']) -> bool:\n    concatenated = ''.join(strings)\n    return concatenated == concatenated[::-1]",
        "solution_func": "def g(options=['a', 'b', 'c', 'd']):\n    from itertools import product\n    for n in range(1, len(options)+1):\n        for p in product(options, repeat=n):\n            if ''.join(p) == ''.join(p)[::-1]:\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of elements from a given set of options that can be concatenated to form a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating all possible combinations of elements from a given set and checking if any combination forms a palindrome when concatenated. The solution function returns the first palindrome combination found.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, substrings=['a', 'b', 'c', 'd', 'e']) -> bool:\n    return s == s[::-1]\n\ndef g(substrings=['a', 'b', 'c', 'd', 'e']):\n    from itertools import combinations\n    for n in range(1, len(substrings)+1):\n        for c in combinations(substrings, n):\n            if ''.join(c) == ''.join(c)[::-1]:\n                return ''.join(c)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and importing modules (Itertools). It also includes conditional logic and a bit of brute force search to find a palindrome substring.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], divisor=3, options=[1, 2, 3, 4, 5, 6]) -> bool:\n    return sum(numbers) % divisor == 0\n\ndef g(divisor=3, options=[1, 2, 3, 4, 5, 6]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if sum(p) % divisor == 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, substrings=['a', 'b', 'c', 'd', 'e']) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(substrings=['a', 'b', 'c', 'd', 'e']):\n    from itertools import combinations\n    for n in range(1, len(substrings)+1):\n        for c in combinations(substrings, n):\n            if ''.join(c) == ''.join(c)[::-1]:\n                return ''.join(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a palindrome substring from a given list of substrings."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string is a palindrome and finding a palindrome substring from a list of substrings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n\ndef f(sentence: str) -> bool:\n    processed_sentence = ''.join(char.lower() for char in sentence if char.isalnum())\n    return processed_sentence == processed_sentence[::-1]\n\ndef g():\n    sentence = \"A man, a plan, a canal, Panama!\"\n    return sentence[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(arr: list) -> bool:\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1) if arr[i] % 2 == 0)\ndef g():\n    arr = [5, 3, 8, 2, 10, 4, 7]\n    arr.sort()\n    return arr\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(sentence: str) -> bool:\n    processed_sentence = ''.join(char.lower() for char in sentence if char.isalnum())\n    return processed_sentence == processed_sentence[::-1]",
        "solution_func": "def g():\n    sentence = \"A man, a plan, a canal, Panama!\"\n    return sentence[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f that checks if a sentence is a palindrome after removing non-alphanumeric characters, and a function g that returns a specific sentence in reverse, the puzzle requires g to be modified to return a palindrome sentence."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a specific sentence can be modified to be a palindrome by removing non-alphanumeric characters and reversing it. The solution function g needs to be adjusted to return a palindrome sentence.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport itertools\n\ndef f(nums: list) -> bool:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    pairs = itertools.combinations(nums, 2)\n    return any(is_prime(sum(pair)) for pair in pairs)\n\ndef g():\n    return [2, 3, 5, 7, 11]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.), Importing Modules (Itertools, etc.)",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(arr: list) -> bool:\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1) if arr[i] % 2 == 0)\ndef g():\n    arr = [5, 3, 8, 2, 10, 4, 7]\n    arr.sort()\n    return arr\nassert f(g()) == True\n"
        ],
        "problem_func": "import itertools\n\ndef f(nums: list) -> bool:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    pairs = itertools.combinations(nums, 2)\n    return any(is_prime(sum(pair)) for pair in pairs)",
        "solution_func": "def g():\n    return [2, 3, 5, 7, 11]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding if there exists a pair of numbers in a given list whose sum is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for prime numbers and using itertools to generate pairs of numbers from a list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sentence: str, word='python') -> bool:\n    assert len(word) > 1 and word in sentence and len(set(word)) == len(word)\n    return all(word in sentence[i:i+len(word)] for i in range(len(sentence) - len(word) + 1))\ndef g(word='python'):\n    # brute force\n    sentence = 'I love python programming'\n\n    from itertools import permutations\n    for p in permutations(word):\n        if all(char in word for char in p) and len(p) == len(set(p)):\n            return ''.join(p)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Brute Force Search, Permutations and Combinations",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(string: str, sub='ab') -> bool:\n    assert len(sub) > 1 and sub in string and len(set(sub)) == len(sub)\n    return all(sub in string[i:i+len(sub)] for i in range(len(string) - len(sub) + 1))\ndef g(sub='ab'):\n    # brute force\n    string = 'abracadabra'\n\n    from itertools import permutations\n    for p in permutations(sub):\n        if all(char in sub for char in p) and len(p) == len(set(p)):\n            return ''.join(p)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(sentence: str, word='python') -> bool:\n    assert len(word) > 1 and word in sentence and len(set(word)) == len(word)\n    return all(word in sentence[i:i+len(word)] for i in range(len(sentence) - len(word) + 1))",
        "solution_func": "def g(word='python'):\n    # brute force\n    sentence = 'I love python programming'\n\n    from itertools import permutations\n    for p in permutations(word):\n        if all(char in word for char in p) and len(p) == len(set(p)):\n            return ''.join(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given word is present in a sentence and meets certain conditions, and a function g that generates permutations of the word until a valid permutation is found. The solution g returns the valid permutation of the word that satisfies the conditions of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, iteration, and checking conditions on permutations. It can be used to teach students about string operations, iteration, and algorithmic thinking in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(strings, substring='py', max_length=10) -> bool:\n    return any(substring in s for s in strings) and all(len(s) <= max_length for s in strings)\n\ndef g(substring='py', max_length=10):\n    from itertools import permutations\n    words = ['python', 'programming', 'spy', 'happy']\n    for n in range(1, len(words)+1):\n        for p in permutations(words, n):\n            if all(substring in w for w in p):\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.), Permutations and Combinations",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(strings, substring='py', max_length=10) -> bool:\n    return any(substring in s for s in strings) and all(len(s) <= max_length for s in strings)",
        "solution_func": "def g(substring='py', max_length=10):\n    from itertools import permutations\n    words = ['python', 'programming', 'spy', 'happy']\n    for n in range(1, len(words)+1):\n        for p in permutations(words, n):\n            if all(substring in w for w in p):\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given list of strings contains a specific substring and if all strings have a length less than or equal to a specified maximum length. The solution function g generates permutations of a list of words and returns the first permutation that satisfies the conditions set by function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation, list comprehension, and iteration over permutations. It tests the student's understanding of functions, conditions, and iteration in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(dicts, key='name', value='Alice') -> bool:\n    return any(d.get(key) == value for d in dicts)\n\ndef g(key='name', value='Alice'):\n    from itertools import permutations\n    data = [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}, {'name': 'Alice', 'age': 22}]\n    for n in range(1, len(data)+1):\n        for p in permutations(data, n):\n            if all(d.get(key) == value for d in p):\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, conditional logic, importing modules (Itertools), and permutations and combinations.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(dicts, key='name', value='Alice') -> bool:\n    return any(d.get(key) == value for d in dicts)",
        "solution_func": "def g(key='name', value='Alice'):\n    from itertools import permutations\n    data = [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}, {'name': 'Alice', 'age': 22}]\n    for n in range(1, len(data)+1):\n        for p in permutations(data, n):\n            if all(d.get(key) == value for d in p):\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g. Function f takes a list of dictionaries, a key, and a value as input and checks if any dictionary in the list has the specified key-value pair. Function g generates permutations of a given list of dictionaries and returns the first permutation that satisfies the key-value pair condition. The assert statement checks if function f returns True when called with the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, permutations, and list comprehension in Python. It tests the understanding of iterating over dictionaries and checking key-value pairs. The assert statement ensures that the solution function g returns the correct output for the given input.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g() -> list:\n    return [4, 6, 8, 10, 12]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even, which falls under Mathematical Operations and Conditional Logic.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g() -> list:\n    return [4, 6, 8, 10, 12]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all numbers in a list are even, and a function g() that returns a list of even numbers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and defining functions in Python. It also tests the student's ability to write functions that work together to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"madam\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"madam\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a given string is a palindrome by comparing it with its reverse. The solution function g() returns the string 'madam', which is a palindrome, and the assertion confirms that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return all(isinstance(val, int) and val > 0 for val in d.values())\n\ndef g() -> dict:\n    return {'a': 5, 'b': 10, 'c': 3}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking the values in a dictionary for certain conditions.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g() -> int:\n    return 17\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return all(isinstance(val, int) and val > 0 for val in d.values())",
        "solution_func": "def g() -> dict:\n    return {'a': 5, 'b': 10, 'c': 3}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(d: dict) that checks if all values in a dictionary are integers greater than 0, and a function g() that returns a dictionary with integer values. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the values in a dictionary and understanding how to define functions in Python. It also requires understanding the 'all' function and list comprehensions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, substring='abc') -> bool:\n    return sorted(text) == sorted(substring)\ndef g(substring = 'abc'):\n    return ''.join(sorted(substring))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Sorting and Ordering",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, substring='abc') -> bool:\n    return sorted(text) == sorted(substring)",
        "solution_func": "def g(substring = 'abc'):\n    return ''.join(sorted(substring))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the characters in a given text can be rearranged to match a given substring. The solution function g generates the substring in sorted order and checks if f returns True for this substring."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, sorting, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str, words=['radar', 'level', 'deified']) -> bool:\n    return string == string[::-1]\n\ndef g(words=['radar', 'level', 'deified']):\n    for word in words:\n        if len(word) > 1 and word == word[::-1]:\n            return word\n    return ''\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    diff = sequence[1] - sequence[0]\n    for i in range(1, len(sequence)):\n        if sequence[i] - sequence[i - 1] != diff:\n            return False\n    return True\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            seq = [nums[i], nums[j]]\n            diff = seq[1] - seq[0]\n            for k in range(j + 1, len(nums)):\n                if nums[k] - seq[-1] == diff:\n                    seq.append(nums[k])\n                if len(seq) >= 3:\n                    return seq\n    return []\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str, words=['radar', 'level', 'deified']) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g(words=['radar', 'level', 'deified']):\n    for word in words:\n        if len(word) > 1 and word == word[::-1]:\n            return word\n    return ''",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a palindrome word from a list of words and checking if it is a palindrome itself."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a given string is a palindrome and another function to find a palindrome word from a list of words. The solution function returns the first palindrome word found in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str], required_char='a', max_length=10, min_count=2) -> bool:\n    return all(required_char in s for s in strings) and all(len(s) <= max_length for s in strings) and sum(s.count(required_char) for s in strings) >= min_count\n\ndef g(required_char='a', max_length=10, min_count=2, options=['apple', 'banana', 'cherry', 'date']):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(required_char in s for s in c) and all(len(s) <= max_length for s in c) and sum(s.count(required_char) for s in c) >= min_count:\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Importing Modules (Itertools, etc.), Permutations and Combinations",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str], required_char='a', max_length=10, min_count=2) -> bool:\n    return all(required_char in s for s in strings) and all(len(s) <= max_length for s in strings) and sum(s.count(required_char) for s in strings) >= min_count",
        "solution_func": "def g(required_char='a', max_length=10, min_count=2, options=['apple', 'banana', 'cherry', 'date']):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(required_char in s for s in c) and all(len(s) <= max_length for s in c) and sum(s.count(required_char) for s in c) >= min_count:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a combination of strings from a given list that meet certain criteria such as containing a required character, having a maximum length, and meeting a minimum count of the required character."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list of strings contains a combination that satisfies specific conditions. The solution function g generates combinations of strings and the function f checks if these combinations meet the required criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target_sum=10, max_product=50) -> bool:\n    return all(sum(t) == target_sum for t in tuples) and all(t[0] * t[1] <= max_product for t in tuples)\n\ndef g(target_sum=10, max_product=50, options=[(1, 9), (2, 8), (3, 7), (4, 6), (5, 5)]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(sum(t) == target_sum for t in c) and all(t[0] * t[1] <= max_product for t in c):\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, itertools module, and list manipulation.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target_sum=10, max_product=50) -> bool:\n    return all(sum(t) == target_sum for t in tuples) and all(t[0] * t[1] <= max_product for t in tuples)",
        "solution_func": "def g(target_sum=10, max_product=50, options=[(1, 9), (2, 8), (3, 7), (4, 6), (5, 5)]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(sum(t) == target_sum for t in c) and all(t[0] * t[1] <= max_product for t in c):\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of tuples from a given list that satisfy certain conditions of target sum and maximum product."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list manipulation, combinations, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lists: List[List[int]], target_sum=10, min_length=2) -> bool:\n    return all(sum(l) == target_sum for l in lists) and all(len(l) >= min_length for l in lists)\n\ndef g(target_sum=10, min_length=2, options=[[1, 2, 7], [3, 4, 3], [2, 5, 3], [1, 6, 3]]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(sum(l) == target_sum for l in c) and all(len(l) >= min_length for l in c):\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, iteration, and combinations using itertools module. It also includes conditional logic and assertion for testing the solution.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] % sequence[i-1] == 0 and sequence[i] / sequence[i-1] == common_factor\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_factor=2, range_limit=100, options=[4, 8, 16, 32, 64]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] % c[i-1] == 0 and c[i] / c[i-1] == common_factor for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lists: List[List[int]], target_sum=10, min_length=2) -> bool:\n    return all(sum(l) == target_sum for l in lists) and all(len(l) >= min_length for l in lists)",
        "solution_func": "def g(target_sum=10, min_length=2, options=[[1, 2, 7], [3, 4, 3], [2, 5, 3], [1, 6, 3]]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(sum(l) == target_sum for l in c) and all(len(l) >= min_length for l in c):\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of lists meets certain criteria, and a function g that generates combinations of lists to satisfy the criteria defined in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, itertools combinations, and assertions in Python. It tests the understanding of list manipulation and iteration in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10, min_count=2) -> bool:\n    return sum(numbers) == target_sum and len(numbers) >= min_count and all((num > 0 for num in numbers))\n\ndef g(target_sum=10, min_count=2):\n    \"\"\"\n    This solution generates a list of positive integers that sum up to the target_sum.\n    \"\"\"\n    numbers = [1] * min_count\n    remaining_sum = target_sum - min_count\n\n    for i in range(min_count, target_sum):\n        if remaining_sum <= 0:\n            break\n        numbers.append(1)\n        remaining_sum -= 1\n\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to Mathematical Operations, Conditional Logic, and List Manipulation.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target_sum=10, min_count=2) -> bool:\n    return sum(numbers) == target_sum and len(numbers) >= min_count and all((num > 0 for num in numbers))",
        "solution_func": "def g(target_sum=10, min_count=2):\n    \"\"\"\n    This solution generates a list of positive integers that sum up to the target_sum.\n    \"\"\"\n    numbers = [1] * min_count\n    remaining_sum = target_sum - min_count\n\n    for i in range(min_count, target_sum):\n        if remaining_sum <= 0:\n            break\n        numbers.append(1)\n        remaining_sum -= 1\n\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of positive integers that sum up to a target sum, with a minimum count of integers. The solution function g() creates such a list and the puzzle function f() checks if the list meets the specified conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation and condition checking in Python, making it suitable for teaching Python concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(boolean_values: List[bool], target_count=3, require_all=True) -> bool:\n    return boolean_values.count(True) == target_count if require_all else boolean_values.count(True) >= target_count\n\ndef g(target_count=3, require_all=True):\n    \"\"\"\n    This solution generates a list of boolean values with the specified target_count of True values.\n    \"\"\"\n    boolean_values = [True] * target_count + [False] * (5 - target_count)\n\n    return boolean_values\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves working with lists, counting elements, and boolean operations.",
        "idx_generation": 65,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(boolean_values: List[bool], target_count=3, require_all=True) -> bool:\n    return boolean_values.count(True) == target_count if require_all else boolean_values.count(True) >= target_count",
        "solution_func": "def g(target_count=3, require_all=True):\n    \"\"\"\n    This solution generates a list of boolean values with the specified target_count of True values.\n    \"\"\"\n    boolean_values = [True] * target_count + [False] * (5 - target_count)\n\n    return boolean_values",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that checks if a list of boolean values contains a specific number of True values based on the parameters target_count and require_all. The solution function g generates a list of boolean values with the specified target_count of True values."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, boolean values, and conditional statements in Python. It tests the student's understanding of list manipulation and boolean operations.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(li: List[int]) -> bool:\n    return all([num > 5 for num in li]) and len(set(li)) == 4\ndef g():\n    return [6, 7, 8, 9]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and set operations to check if all numbers in the list are greater than 5 and if the list has exactly 4 unique elements.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([num > 5 for num in li]) and len(set(li)) == 4",
        "solution_func": "def g():\n    return [6, 7, 8, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers as input and returns True if all elements in the list are greater than 5 and the list contains exactly 4 unique elements. The solution function g returns a specific list that satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for element values and uniqueness in a list, which can be a good exercise for students to practice list comprehension and set operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(li: List[int]) -> bool:\n    return li == sorted(li) and len(set(li)) >= 5\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering, Set Operations",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(li: List[int]) -> bool:\n    return li == sorted(li) and len(set(li)) >= 5",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5, 6, 7]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a list of integers as input and returns True if the list is sorted in ascending order and contains at least 5 unique elements. The solution function returns a specific list that meets these criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list is sorted and has at least 5 unique elements. The solution function returns a list that satisfies these conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(lst: List[str], char='z') -> bool:\n    return any(char in word for word in lst)\n\ndef g(char='z') -> List[str]:\n    return [char * i for i in range(1, 6)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves String Manipulation and List Operations.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(x: List[int], n=175, s=30000000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 175, s = 30000000):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(lst: List[str], char='z') -> bool:\n    return any(char in word for word in lst)",
        "solution_func": "def g(char='z') -> List[str]:\n    return [char * i for i in range(1, 6)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where the first function checks if a given character is present in any word in a list of strings, and the second function generates a list of strings containing the character repeated a certain number of times. The assertion at the end checks if the first function returns True when called with the output of the second function as input."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list comprehension, string manipulation, and function calling in Python. It tests the understanding of list comprehension and function composition in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target_sum=10):\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to Set Operations and Brute Force Search.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], pattern='AB') -> bool:\n    return all((pattern[i % len(pattern)] == 'A' and strings[i].isupper()) or (pattern[i % len(pattern)] == 'B' and strings[i].islower()) for i in range(len(strings)))\n\ndef g(pattern='AB'):\n    return ['HELLO', 'world', 'PYTHON', 'programming'] * 2\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int], target_sum=10) -> bool:\n    seen = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target_sum=10):\n    return [2, 4, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of integers, the function f checks if there are two numbers in the list that add up to a target sum. The function g returns a list of integers. The puzzle is to find a list of integers that add up to the target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use a set to efficiently check for the presence of a complement in a list of numbers. The solution function g returns a list of integers that add up to the target sum.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: int) -> bool:\n    return result == 120\n\ndef g(n=5):\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations (calculating factorial) and conditional logic (checking if result is equal to 120).",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    n = [1, 2, 3, 4]\n    while True:\n        if len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(result: int) -> bool:\n    return result == 120",
        "solution_func": "def g(n=5):\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that calculates the factorial of a given number and then check if the factorial is equal to 120."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to calculate factorials in Python and comparing the result to a specific value.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 != 0 for num in nums)\n\ndef g():\n    return [2*i + 1 for i in range(500)]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are odd, and generating a list of odd numbers using list comprehension. This involves topics such as List Manipulation, List Comprehension, and Mathematical Operations.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] > nums[i + 1] for i in range(len(nums) - 1)) and len(nums) == len(set(nums))\ndef g():\n    return [2*i for i in range(999, 0, -1)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 != 0 for num in nums)",
        "solution_func": "def g():\n    return [2*i + 1 for i in range(500)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define a function that checks if all numbers in a list are odd, and then generate a list of odd numbers using a specific formula. The solution function generates a list of odd numbers and checks if the defined function returns True for that list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and modulo operator in Python. It also tests the students' ability to define functions and use them in conjunction with list operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num > 0 for num in nums) and any(num < 0 for num in nums)\n\ndef g():\n    return [i if i % 2 == 0 else -i for i in range(-500, 501)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] > nums[i + 1] for i in range(len(nums) - 1)) and len(nums) == len(set(nums))\ndef g():\n    return [2*i for i in range(999, 0, -1)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num > 0 for num in nums) and any(num < 0 for num in nums)",
        "solution_func": "def g():\n    return [i if i % 2 == 0 else -i for i in range(-500, 501)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a list of numbers from -500 to 500 where even numbers are positive and odd numbers are negative, and then check if the list contains both positive and negative numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves list comprehension and the use of the any() function to check for the presence of positive and negative numbers in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(nums: List[int]) -> bool:\n    return all(is_prime(num) for num in nums)\n\ndef g():\n    return [num for num in range(2, 100) if is_prime(num)]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] > nums[i + 1] for i in range(len(nums) - 1)) and len(nums) == len(set(nums))\ndef g():\n    return [2*i for i in range(999, 0, -1)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(nums: List[int]) -> bool:\n    return all(is_prime(num) for num in nums)",
        "solution_func": "def g():\n    return [num for num in range(2, 100) if is_prime(num)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if all numbers in a given list are prime numbers using a provided is_prime function. The solution generates a list of prime numbers between 2 and 100 and checks if all of them are prime."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and list comprehension in Python. It requires implementing a function to check for prime numbers and using list comprehension to generate a list of prime numbers within a specific range.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], threshold=50) -> bool:\n    return all(num > 0 for num in numbers) and sum(numbers) > threshold\n\ndef g(range_start=1, range_end=100, list_length=5):\n    import random\n    return [random.randint(range_start, range_end) for _ in range(list_length)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(combinations: List[str], char_list=['x', 'y', 'z'], length=2) -> bool:\n    return len(combinations) == len(set(combinations)) >= len(char_list) and all((len(comb) == length for comb in combinations))\n\ndef g(char_list=['x', 'y', 'z'], length=2):\n    from itertools import combinations\n    return [''.join(comb) for comb in combinations(char_list, length)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], threshold=50) -> bool:\n    return all(num > 0 for num in numbers) and sum(numbers) > threshold",
        "solution_func": "def g(range_start=1, range_end=100, list_length=5):\n    import random\n    return [random.randint(range_start, range_end) for _ in range(list_length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random numbers within a specified range and length, and then check if all numbers in the list are positive and the sum of the numbers is greater than a threshold value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random numbers and checking if they meet certain conditions. Students need to understand list comprehension, random number generation, and boolean conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 5
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    palindromes = [string for string in strings if string == string[::-1]]\n    return any(string[::-1] in strings for string in palindromes)\n\ndef g(length=5):\n    palindromes = [str(num) for num in range(10**length) if str(num) == str(num)[::-1]]\n    return palindromes\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) <= 3:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=25):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    palindromes = [string for string in strings if string == string[::-1]]\n    return any(string[::-1] in strings for string in palindromes)",
        "solution_func": "def g(length=5):\n    palindromes = [str(num) for num in range(10**length) if str(num) == str(num)[::-1]]\n    return palindromes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of strings contains palindromes, and a function g that generates a list of palindromic numbers up to a specified length. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of list comprehension, string manipulation, and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return sum(subsequence) % 2 == 0\n\ndef g(nums=[0]) -> List[int]:\n    evens = [num for num in nums if num % 2 == 0]\n    return evens\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking for even numbers.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom sympy import isprime\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(isprime(num) for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    primes = [num for num in nums if isprime(num)]\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return sum(subsequence) % 2 == 0",
        "solution_func": "def g(nums=[0]) -> List[int]:\n    evens = [num for num in nums if num % 2 == 0]\n    return evens",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where function f checks if the sum of a given subsequence of integers is even, and function g returns a list of even numbers from a given list of numbers. The puzzle requires ensuring that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list comprehension and modulo operations in Python to filter even numbers and check for even sum. It can be used to teach students about list manipulation and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return subsequence == sorted(subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    return sorted(nums)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if it is sorted correctly. This falls under the topic of Sorting and Ordering.",
        "idx_generation": 66,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom sympy import isprime\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return all(isprime(num) for num in subsequence)\n\ndef g(nums=[0]) -> List[int]:\n    primes = [num for num in nums if isprime(num)]\n    return primes\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return subsequence == sorted(subsequence)",
        "solution_func": "def g(nums=[0]) -> List[int]:\n    return sorted(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if a given list of integers is sorted in ascending order. The solution function returns the sorted list of integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python to master's students in CS as it involves sorting a list of integers and checking if it is sorted.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(nums: list) -> bool:\n    return any(num > 0.5 for num in nums)\n\ndef g():\n    return [random.random() for _ in range(5)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, random number generation, and boolean operations.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(nums: list) -> bool:\n    return sum(nums) > 3\n\ndef g():\n    return [random.random() for _ in range(7)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(nums: list) -> bool:\n    return any(num > 0.5 for num in nums)",
        "solution_func": "def g():\n    return [random.random() for _ in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random numbers and check if any number in the list is greater than 0.5."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, generating random numbers, and checking a condition using the 'any' function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    return nums == sorted(nums, reverse=True)\n\ndef g():\n    import random\n    nums = [random.randint(1, 100) for _ in range(random.randint(5, 10))]\n    return sorted(nums, reverse=True)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers in descending order using the `sorted` function. It also includes generating random numbers using the `random` module. The solution function `g` creates a list of random numbers and sorts them in descending order. The puzzle tests the understanding of sorting algorithms and random number generation in Python.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\n\ndef f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\n\ndef g():\n    import random\n    n = random.randint(2, 5)\n    matrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            matrix[j][i] = matrix[i][j]\n    return matrix\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    return nums == sorted(nums, reverse=True)",
        "solution_func": "def g():\n    import random\n    nums = [random.randint(1, 100) for _ in range(random.randint(5, 10))]\n    return sorted(nums, reverse=True)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(nums: list) that checks if a list of numbers is sorted in descending order. The solution function g() generates a random list of numbers and returns it sorted in descending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting in descending order and generating random lists of numbers. The solution function g() demonstrates how to generate and sort a random list of numbers.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    text = ''.join(random.choice(letters) for _ in range(random.randint(5, 10)))\n    return text + text[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Randomization",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\n\ndef f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\n\ndef g():\n    import random\n    n = random.randint(2, 5)\n    matrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            matrix[j][i] = matrix[i][j]\n    return matrix\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    import random\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    text = ''.join(random.choice(letters) for _ in range(random.randint(5, 10)))\n    return text + text[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a randomly generated string concatenated with its reverse is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random string and checking if the concatenated string with its reverse is a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median == target\n\ndef g(target=5):\n    return [3, 4, 5, 6, 7]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome and a function g() that returns the string 'racecar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int, target=120) -> bool:\n    def factorial(num):\n        if num == 0:\n            return 1\n        return num * factorial(num - 1)\n    \n    return factorial(n) == target\n\ndef g(target=120):\n    return 5\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations (factorial), recursion, and conditional logic.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median == target\n\ndef g(target=5):\n    return [3, 4, 5, 6, 7]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int, target=120) -> bool:\n    def factorial(num):\n        if num == 0:\n            return 1\n        return num * factorial(num - 1)\n    \n    return factorial(n) == target",
        "solution_func": "def g(target=120):\n    return 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the factorial of a given number and checking if it equals a target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to calculate the factorial of a number and then checking if the factorial matches a target value. The solution function returns a specific number, and the assertion checks if the solution satisfies the condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm. It does not involve any complex topics such as dynamic programming or graph theory.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=5) -> bool:\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median == target\n\ndef g(target=5):\n    return [3, 4, 5, 6, 7]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(num) that checks if a number is prime, write a function g() that returns the number 17. The puzzle is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves writing a function g() that returns a specific number (17) and ensuring that when this number is passed to the function f(num), the function correctly identifies it as a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(s: str) -> bool:\n    if s != s[::-1]:\n        return False\n    length = len(s)\n    return is_prime(length)\n\ndef g():\n    for i in range(1, 1000):\n        if str(i) == str(i)[::-1] and is_prime(len(str(i))):\n            return str(i)\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, conditional logic, and number theory (primality check).",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    if str(n) != str(n)[::-1]:\n        return False\n    digit_sum = sum(int(d) for d in str(n))\n    return is_prime(digit_sum)\n\ndef g():\n    for n in range(1, 1000):\n        if str(n) == str(n)[::-1] and is_prime(sum(int(d) for d in str(n))):\n            return n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(s: str) -> bool:\n    if s != s[::-1]:\n        return False\n    length = len(s)\n    return is_prime(length)",
        "solution_func": "def g():\n    for i in range(1, 1000):\n        if str(i) == str(i)[::-1] and is_prime(len(str(i))):\n            return str(i)\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a number is a palindrome and a prime number. The function f(s) checks if the length of a string is a prime number and if the string itself is a palindrome. The function g() iterates through numbers to find the first palindrome prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle combines concepts of string manipulation, palindrome checking, prime number checking, and iteration. It provides a practical application of these concepts in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return n > 1000 and n % 5 == 0\n\ndef g():\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        if a > 1000 and a % 5 == 0:\n            return a\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    if str(n) != str(n)[::-1]:\n        return False\n    digit_sum = sum(int(d) for d in str(n))\n    return is_prime(digit_sum)\n\ndef g():\n    for n in range(1, 1000):\n        if str(n) == str(n)[::-1] and is_prime(sum(int(d) for d in str(n))):\n            return n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return n > 1000 and n % 5 == 0",
        "solution_func": "def g():\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        if a > 1000 and a % 5 == 0:\n            return a",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the first Fibonacci number greater than 1000 and divisible by 5."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a number is greater than 1000 and divisible by 5, and then finding the first Fibonacci number meeting this condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(letters: List[str]) -> bool:\n    return letters == letters[::-1]\n\ndef g():\n    import random\n    import string\n\n    while True:\n        letters = [random.choice(string.ascii_uppercase) for _ in range(4)]\n        if letters == letters[::-1]:\n            return letters\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and random generation of letters.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums)\n\ndef g():\n    import random\n\n    while True:\n        numbers = random.sample(range(1, 20), 5)\n        if any(num % 2 == 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(letters: List[str]) -> bool:\n    return letters == letters[::-1]",
        "solution_func": "def g():\n    import random\n    import string\n\n    while True:\n        letters = [random.choice(string.ascii_uppercase) for _ in range(4)]\n        if letters == letters[::-1]:\n            return letters",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of 4 random uppercase letters and check if the list is a palindrome (reads the same forwards and backwards)."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random list of uppercase letters and checking if it is a palindrome. The solution function g() generates the list and returns it if it is a palindrome, satisfying the condition f(g()) == True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(chars: List[str]) -> bool:\n    return chars == chars[::-1]\n\ndef g():\n    import random\n    import string\n\n    while True:\n        chars = [random.choice(string.ascii_letters + string.digits) for _ in range(6)]\n        if chars == chars[::-1]:\n            return chars\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and random generation of characters. The solution checks if a randomly generated list of characters is a palindrome.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums)\n\ndef g():\n    import random\n\n    while True:\n        numbers = random.sample(range(1, 20), 5)\n        if any(num % 2 == 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(chars: List[str]) -> bool:\n    return chars == chars[::-1]",
        "solution_func": "def g():\n    import random\n    import string\n\n    while True:\n        chars = [random.choice(string.ascii_letters + string.digits) for _ in range(6)]\n        if chars == chars[::-1]:\n            return chars",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a random list of characters and checking if it is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a random list of characters and checking if it is a palindrome using the given functions f and g. The solution g generates a random list of characters and returns it if it is a palindrome, satisfying the condition f(g()) == True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return sum(nums) == 0\n\ndef g():\n    import random\n\n    while True:\n        numbers = random.sample(range(-10, 11), 3)\n        if sum(numbers) == 0:\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves generating a list of random numbers and checking if the sum of the numbers is equal to zero.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums)\n\ndef g():\n    import random\n\n    while True:\n        numbers = random.sample(range(1, 20), 5)\n        if any(num % 2 == 0 for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return sum(nums) == 0",
        "solution_func": "def g():\n    import random\n\n    while True:\n        numbers = random.sample(range(-10, 11), 3)\n        if sum(numbers) == 0:\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of three random numbers between -10 and 10, and checking if the sum of the numbers is equal to 0."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random numbers and checking if their sum is equal to 0.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, original='racecar') -> bool:\n    return text == text[::-1]\n\ndef g(original='racecar') -> str:\n    return original + original[::-1][1:]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    diff = sequence[1] - sequence[0]\n    for i in range(1, len(sequence)):\n        if sequence[i] - sequence[i - 1] != diff:\n            return False\n    return True\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            seq = [nums[i], nums[j]]\n            diff = seq[1] - seq[0]\n            for k in range(j + 1, len(nums)):\n                if nums[k] - seq[-1] == diff:\n                    seq.append(nums[k])\n                if len(seq) >= 3:\n                    return seq\n    return []\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str, original='racecar') -> bool:\n    return text == text[::-1]",
        "solution_func": "def g(original='racecar') -> str:\n    return original + original[::-1][1:]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f that checks if a text is a palindrome and a function g that generates a modified palindrome, the puzzle requires finding a modification to the original palindrome such that it still satisfies the palindrome condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding palindrome checking and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, original='python') -> bool:\n    return len(set(text)) == len(text)\n\ndef g(original='python') -> str:\n    return ''.join(sorted(set(original), key=original.index))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], nums=[1, 2, 3, 4, 5, 6]) -> bool:\n    diff = sequence[1] - sequence[0]\n    for i in range(1, len(sequence)):\n        if sequence[i] - sequence[i - 1] != diff:\n            return False\n    return True\n\ndef g(nums=[1, 2, 3, 4, 5, 6]):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            seq = [nums[i], nums[j]]\n            diff = seq[1] - seq[0]\n            for k in range(j + 1, len(nums)):\n                if nums[k] - seq[-1] == diff:\n                    seq.append(nums[k])\n                if len(seq) >= 3:\n                    return seq\n    return []\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str, original='python') -> bool:\n    return len(set(text)) == len(text)",
        "solution_func": "def g(original='python') -> str:\n    return ''.join(sorted(set(original), key=original.index))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a function that returns a sorted string of unique characters from a given string, and then check if the length of the unique characters string is equal to the length of the original string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, sorting, and checking for uniqueness of characters in a string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    num_set = set(numbers)\n    assert len(num_set) == len(numbers) > 1\n    for num in numbers:\n        assert isinstance(num, int) and num > 0\n    return all(num > 0 for num in numbers)\n\ndef g():\n    return [10, 20, 30, 40, 50]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations, list manipulation, and assertion checks.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    word_set = set(words)\n    assert len(word_set) == len(words) > 1\n    for word in words:\n        assert word.isalpha()\n    return all(word.endswith('y') for word in words)\n\ndef g():\n    return ['happy', 'lucky', 'sunny', 'angry', 'funny', 'windy']\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    num_set = set(numbers)\n    assert len(num_set) == len(numbers) > 1\n    for num in numbers:\n        assert isinstance(num, int) and num > 0\n    return all(num > 0 for num in numbers)",
        "solution_func": "def g():\n    return [10, 20, 30, 40, 50]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers as input, checks if all elements are positive and unique, and returns True if all conditions are met. The solution function g returns a specific list of integers that satisfies the conditions of function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for unique and positive integers in a list, which is a fundamental concept in Python programming. It also requires understanding assertions and list comprehension. This puzzle can be used to teach Python programming concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    word = word.lower()\n    assert word.isalnum()\n    return word == word[::-1]\n\ndef g():\n    return \"Anna\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    word_set = set(words)\n    assert len(word_set) == len(words) > 1\n    for word in words:\n        assert word.isalpha()\n    return all(word.endswith('y') for word in words)\n\ndef g():\n    return ['happy', 'lucky', 'sunny', 'angry', 'funny', 'windy']\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    word = word.lower()\n    assert word.isalnum()\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"Anna\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f(word: str) that checks if a given word is a palindrome (reads the same forwards and backwards) after converting it to lowercase. The function g() returns the word 'Anna', and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, palindrome checking, and function calling in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[float]) -> bool:\n    num_set = set(nums)\n    assert len(num_set) == len(nums) > 1\n    for i in range(len(nums) - 1):\n        assert nums[i] < nums[i+1]\n    return all(nums[i] < nums[i+1] for i in range(len(nums) - 1))\n\ndef g():\n    return [1.5, 2.0, 3.5, 4.2, 5.1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and checking if they are in strictly increasing order. It also uses sets to remove duplicates from the list. Additionally, it includes assertions to validate the input list and the sorted order. The solution function generates a list of numbers in increasing order and passes it to the puzzle function to return True.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    word_set = set(words)\n    assert len(word_set) == len(words) > 1\n    for word in words:\n        assert word.isalpha()\n    return all(word.endswith('y') for word in words)\n\ndef g():\n    return ['happy', 'lucky', 'sunny', 'angry', 'funny', 'windy']\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[float]) -> bool:\n    num_set = set(nums)\n    assert len(num_set) == len(nums) > 1\n    for i in range(len(nums) - 1):\n        assert nums[i] < nums[i+1]\n    return all(nums[i] < nums[i+1] for i in range(len(nums) - 1))",
        "solution_func": "def g():\n    return [1.5, 2.0, 3.5, 4.2, 5.1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f that takes a list of floats as input and checks if the list is sorted in ascending order with no duplicates. The solution function g returns a specific list of floats that is sorted in ascending order with no duplicates."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for uniqueness of elements in the input list, ensuring the list is sorted in ascending order, and comparing the input list with a specific sorted list to validate the solution.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(sorted_list: list) -> bool:\n    return sorted_list[0] > sorted_list[-1]\n\ndef g(size=5) -> list:\n    random_list = [random.randint(1, 100) for _ in range(size)]\n    return sorted(random_list, reverse=True)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in descending order and checking if the first element is greater than the last element.",
        "idx_generation": 68,
        "target_skills": [],
        "puzzle_history": [
            "\nimport numpy as np\n\ndef f(matrix: np.array) -> bool:\n    return np.array_equal(matrix, matrix.T)\n\ndef g() -> np.array:\n    size = np.random.randint(3, 6)\n    matrix = np.random.randint(1, 10, size=(size, size))\n    sym_matrix = (matrix + matrix.T) // 2\n    return sym_matrix\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(sorted_list: list) -> bool:\n    return sorted_list[0] > sorted_list[-1]",
        "solution_func": "def g(size=5) -> list:\n    random_list = [random.randint(1, 100) for _ in range(size)]\n    return sorted(random_list, reverse=True)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the first element of a sorted list is greater than the last element, and a function g that generates a sorted list in descending order. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting, indexing, and comparison in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    return sum(numbers) == target_sum\n\ndef g(target_sum=10):\n    numbers = [1, 2, 3, 4]\n    numbers.append(target_sum - sum(numbers))\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(optimal_route: List[str], locations=[('A', 'B')]) -> bool:\n    for i in range(len(optimal_route) - 1):\n        assert (optimal_route[i], optimal_route[i + 1]) in locations\n    assert optimal_route[0] == 'A'\n    assert optimal_route[-1] == 'B'\n    return True\n\ndef g(locations=[('A', 'B')]):\n    route = [loc[0] for loc in locations] + [locations[-1][1]]\n    return route\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target_sum=10) -> bool:\n    return sum(numbers) == target_sum",
        "solution_func": "def g(target_sum=10):\n    numbers = [1, 2, 3, 4]\n    numbers.append(target_sum - sum(numbers))\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the function f checks if the sum of the numbers is equal to a target sum. The function g generates a list of numbers such that the sum is equal to the target sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to manipulate a list of numbers to achieve a specific sum. The solution function g calculates the missing number to make the sum equal to the target sum.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g(input_str=\"racecar\"):\n    return input_str + input_str[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(optimal_route: List[str], locations=[('A', 'B')]) -> bool:\n    for i in range(len(optimal_route) - 1):\n        assert (optimal_route[i], optimal_route[i + 1]) in locations\n    assert optimal_route[0] == 'A'\n    assert optimal_route[-1] == 'B'\n    return True\n\ndef g(locations=[('A', 'B')]):\n    route = [loc[0] for loc in locations] + [locations[-1][1]]\n    return route\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g(input_str=\"racecar\"):\n    return input_str + input_str[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given text is a palindrome. The solution function g generates a palindrome by concatenating a string with its reverse. The assertion at the end verifies that the solution function g produces a palindrome that satisfies the condition of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef g(target=10):\n    numbers = [2, 4, 6, 8]\n    numbers.append(target - numbers[1])\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Brute Force Search, and Conditional Logic.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(optimal_route: List[str], locations=[('A', 'B')]) -> bool:\n    for i in range(len(optimal_route) - 1):\n        assert (optimal_route[i], optimal_route[i + 1]) in locations\n    assert optimal_route[0] == 'A'\n    assert optimal_route[-1] == 'B'\n    return True\n\ndef g(locations=[('A', 'B')]):\n    route = [loc[0] for loc in locations] + [locations[-1][1]]\n    return route\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], target=10) -> bool:\n    seen = set()\n    for num in numbers:\n        if target - num in seen:\n            return True\n        seen.add(num)\n    return False",
        "solution_func": "def g(target=10):\n    numbers = [2, 4, 6, 8]\n    numbers.append(target - numbers[1])\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the function f checks if there are two numbers in the list that add up to a target value. The function g generates a list of numbers and ensures that there are two numbers in the list that add up to the target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for a specific condition in a list of numbers and generating a list that satisfies that condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target_value: int, limit=10) -> bool:\n    assert target_value == sum([num for num in range(limit) if num % 3 == 0 or num % 5 == 0])\n    return True\n\ndef g(limit=10):\n    return sum([num for num in range(limit) if num % 3 == 0 or num % 5 == 0])\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to calculate the sum of numbers that are multiples of 3 or 5 within a given limit. It also includes assertion for validation. The solution function g() uses list comprehension to find the sum of such numbers within the specified limit.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(target_value: int, prices=[7, 1, 5, 3, 6, 4]) -> bool:\n    assert target_value == max(prices[1] - prices[0], prices[2])\n    return True\n\ndef g(prices=[7, 1, 5, 3, 6, 4]):\n    if len(prices) <= 1:\n        return 0\n    \n    max_profit = 0\n    min_price = prices[0]\n    \n    for price in prices[1:]:\n        max_profit = max(max_profit, price - min_price)\n        min_price = min(min_price, price)\n    \n    return max_profit\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(target_value: int, limit=10) -> bool:\n    assert target_value == sum([num for num in range(limit) if num % 3 == 0 or num % 5 == 0])\n    return True",
        "solution_func": "def g(limit=10):\n    return sum([num for num in range(limit) if num % 3 == 0 or num % 5 == 0])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if the sum of numbers divisible by 3 or 5 up to a given limit is equal to a target value, and g calculates the sum of numbers divisible by 3 or 5 up to a given limit. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, conditional statements, and function definitions in Python. It also tests the ability to use assert statements for validation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(target_value: int, n=5) -> bool:\n    assert target_value == 120\n    return True\n\ndef g(n=5):\n    if n == 0:\n        return 1\n    return n * g(n-1)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and recursion.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(target_value: int, prices=[7, 1, 5, 3, 6, 4]) -> bool:\n    assert target_value == max(prices[1] - prices[0], prices[2])\n    return True\n\ndef g(prices=[7, 1, 5, 3, 6, 4]):\n    if len(prices) <= 1:\n        return 0\n    \n    max_profit = 0\n    min_price = prices[0]\n    \n    for price in prices[1:]:\n        max_profit = max(max_profit, price - min_price)\n        min_price = min(min_price, price)\n    \n    return max_profit\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(target_value: int, n=5) -> bool:\n    assert target_value == 120\n    return True",
        "solution_func": "def g(n=5):\n    if n == 0:\n        return 1\n    return n * g(n-1)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a recursive function to calculate the factorial of a given number and check if it equals a specific target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding recursion and factorial calculation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst) and len(lst) == len(set(lst))\n\ndef g():\n    n = [2, 4, 6, 8]\n    while True:\n        if all(num % 2 == 0 for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 2)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and if the list has unique elements. It also involves generating a list of even numbers.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\nimport sympy\n\ndef f(lst: list) -> bool:\n    return all(sympy.isprime(num) for num in lst) and len(lst) == len(set(lst))\n\ndef g():\n    n = [2, 3, 5, 7]\n    while True:\n        if all(sympy.isprime(num) for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst) and len(lst) == len(set(lst))",
        "solution_func": "def g():\n    n = [2, 4, 6, 8]\n    while True:\n        if all(num % 2 == 0 for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 2)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of even numbers with unique elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list contains only even numbers and has unique elements. The solution generates a list of even numbers with unique elements until the condition is met.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 != 0 for num in lst) and len(lst) == len(set(lst))\n\ndef g():\n    n = [1, 3, 5, 7]\n    while True:\n        if all(num % 2 != 0 for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 2)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are odd and if the list has unique elements. The solution generates a list of odd numbers and checks the conditions until they are satisfied.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\nimport sympy\n\ndef f(lst: list) -> bool:\n    return all(sympy.isprime(num) for num in lst) and len(lst) == len(set(lst))\n\ndef g():\n    n = [2, 3, 5, 7]\n    while True:\n        if all(sympy.isprime(num) for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 != 0 for num in lst) and len(lst) == len(set(lst))",
        "solution_func": "def g():\n    n = [1, 3, 5, 7]\n    while True:\n        if all(num % 2 != 0 for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 2)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of odd numbers where all elements are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list contains only odd numbers and has no duplicates. The solution generates a list of odd numbers with unique elements until the condition is met.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(words, length=5) -> bool:\n    return any(len(word) == length for word in words)\n\ndef g(length=5):\n    word_list = ['apple', 'banana', 'orange', 'grape', 'kiwi']\n    return word_list\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(pattern, size=5) -> bool:\n    for i in range(len(pattern) - size + 1):\n        if all(pattern[i+j] for j in range(size)):\n            return True\n    return False\n\ndef g(size=5):\n    from itertools import product\n    for n in range(2, size+1):\n        for p in product([True, False], repeat=n):\n            if any(all(p[i+j] for j in range(size)) for i in range(n - size + 1)):\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(words, length=5) -> bool:\n    return any(len(word) == length for word in words)",
        "solution_func": "def g(length=5):\n    word_list = ['apple', 'banana', 'orange', 'grape', 'kiwi']\n    return word_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if any word in a given list has a specific length, and a function g that returns a list of words. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, function parameters, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g(length=5, max_num=100):\n    import random\n    nums = [random.randint(1, max_num) for _ in range(length)]\n    return nums\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and list manipulation.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    diffs = [j - i for i, j in zip(nums, nums[1:])]\n    return any(all(nums[k] + diffs[k] == nums[k+1] for k in range(len(nums)-1)) for i in range(len(nums)) for j in range(i, len(nums)))\n\ndef g(length=5, max_num=100):\n    import random\n    nums = [random.randint(1, max_num) for _ in range(length)]\n    return nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)",
        "solution_func": "def g(length=5, max_num=100):\n    import random\n    nums = [random.randint(1, max_num) for _ in range(length)]\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random numbers and check if the list contains both even and odd numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension and the any() function to check for the presence of both even and odd numbers in a randomly generated list of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(prime: int, start=100, end=1000) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return is_prime(prime) and prime >= start and prime <= end\n\ndef g(start=100, end=1000):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime = 0\n    for num in range(end, start - 1, -1):\n        if is_prime(num):\n            prime = num\n            break\n    \n    return prime\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers within a range and returning the largest prime number within that range.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(arr: List[int], n=200, s=20000) -> bool:\n    return len(arr) == n and sum(arr) == s and all(x % 2 == 0 for x in arr)\n\ndef g(n=200, s=20000):\n    arr = []\n    num = 2\n    while len(arr) < n - 1:\n        arr.append(num)\n        num = -num\n        if num in arr:\n            num += 2\n\n    if s - sum(arr) in arr:\n        arr = [i for i in range(2, n + 1, 2)]\n\n    arr = arr + [s - sum(arr)]\n    return arr\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(prime: int, start=100, end=1000) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return is_prime(prime) and prime >= start and prime <= end",
        "solution_func": "def g(start=100, end=1000):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime = 0\n    for num in range(end, start - 1, -1):\n        if is_prime(num):\n            prime = num\n            break\n    \n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, where the first function checks if a given number is a prime within a specified range, and the second function finds the largest prime number within the same range. The puzzle requires the second function to return the largest prime number within the specified range."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, function definitions, loops, and conditional statements in Python. It tests the ability to define functions, check for prime numbers, and find the largest prime number within a range.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(fib_num: int, value=1000) -> bool:\n    a, b = 0, 1\n    while True:\n        if b > value:\n            return b == fib_num\n        a, b = b, a + b\n\ndef g(value=1000):\n    a, b = 0, 1\n    while b <= value:\n        a, b = b, a + b\n    \n    return b\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and recursion.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(arr: List[int], n=200, s=20000) -> bool:\n    return len(arr) == n and sum(arr) == s and all(x % 2 == 0 for x in arr)\n\ndef g(n=200, s=20000):\n    arr = []\n    num = 2\n    while len(arr) < n - 1:\n        arr.append(num)\n        num = -num\n        if num in arr:\n            num += 2\n\n    if s - sum(arr) in arr:\n        arr = [i for i in range(2, n + 1, 2)]\n\n    arr = arr + [s - sum(arr)]\n    return arr\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(fib_num: int, value=1000) -> bool:\n    a, b = 0, 1\n    while True:\n        if b > value:\n            return b == fib_num\n        a, b = b, a + b",
        "solution_func": "def g(value=1000):\n    a, b = 0, 1\n    while b <= value:\n        a, b = b, a + b\n    \n    return b",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if a given Fibonacci number is equal to a specified value, and g generates the Fibonacci number less than or equal to a given value. The assert statement checks if the solution function g satisfies the condition of the puzzle function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a common programming concept of generating Fibonacci numbers and checking conditions. It can be used to teach students about algorithmic challenges and solution verification in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return string == string[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\n\ndef f(numbers: List[float], threshold=1000.0) -> bool:\n    assert all([num >= 0 for num in numbers])\n    return sum(numbers) > threshold\n\ndef g(threshold=1000.0):\n    return [5.5, 10.2, 15.3, 20.1, 25.7, threshold]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome (reads the same forwards and backwards) by comparing the string with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given string is a palindrome, and a function g that returns the string 'radar'. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(num % 2 == 0 for num in numbers) and any(num % 2 != 0 for num in numbers)\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic and list manipulation.",
        "idx_generation": 69,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\n\ndef f(numbers: List[float], threshold=1000.0) -> bool:\n    assert all([num >= 0 for num in numbers])\n    return sum(numbers) > threshold\n\ndef g(threshold=1000.0):\n    return [5.5, 10.2, 15.3, 20.1, 25.7, threshold]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return any(num % 2 == 0 for num in numbers) and any(num % 2 != 0 for num in numbers)",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers contains both even and odd numbers, and a function g that returns a specific list of numbers. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the any() function, and the concept of even and odd numbers in Python. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 == 0 for num in numbers)\n\ndef g():\n    import random\n    return [random.randint(1, 100) * 2 for _ in range(5)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic. The solution generates a list of random even numbers and checks if all numbers in the list are even.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if any(num <= 1 or all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)) for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 == 0 for num in numbers)",
        "solution_func": "def g():\n    import random\n    return [random.randint(1, 100) * 2 for _ in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function f that checks if all numbers in a list are even, and a function g that generates a list of 5 random even numbers. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and generating random numbers using the random module in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return any('a' in s for s in strings)\n\ndef g():\n    import random\n    return [''.join(random.choices('abcdef', k=5)) for _ in range(5)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and random generation of strings using the `random` module. The `f` function checks if any string in the input list contains the character 'a'. The `g` function generates a list of random strings of length 5 composed of characters 'a', 'b', 'c', 'd', 'e', and 'f'. The `assert` statement checks if the output of `g` satisfies the condition of `f`.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return any(is_prime(num) for num in numbers)\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(5)]\n        if any(num <= 1 or all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)) for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return any('a' in s for s in strings)",
        "solution_func": "def g():\n    import random\n    return [''.join(random.choices('abcdef', k=5)) for _ in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random strings and check if any of the strings contain the letter 'a'."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, random module, and the 'any' function to check for a specific condition in a list of strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sum_squares: int) -> bool:\n    return sum_squares > 100\n\ndef g(numbers=[2, 4, 6, 8]):\n    sum_squares = sum(num**2 for num in numbers)\n    return sum_squares\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_product: int) -> bool:\n    return max_product > 50\n\ndef g(numbers=[5, 10, 3, 8, 7]):\n    sorted_nums = sorted(numbers, reverse=True)\n    max_product = sorted_nums[0] * sorted_nums[1]\n    return max_product\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(sum_squares: int) -> bool:\n    return sum_squares > 100",
        "solution_func": "def g(numbers=[2, 4, 6, 8]):\n    sum_squares = sum(num**2 for num in numbers)\n    return sum_squares",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of squares of numbers in a list is greater than 100, and a function g that calculates the sum of squares of a given list of numbers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, list comprehension, and comparison operators in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(concatenated_string: str) -> bool:\n    return \"Python\" in concatenated_string\n\ndef g(strings=['Hello', 'Pythonista']):\n    concatenated_string = strings[0] + strings[1]\n    return concatenated_string\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_product: int) -> bool:\n    return max_product > 50\n\ndef g(numbers=[5, 10, 3, 8, 7]):\n    sorted_nums = sorted(numbers, reverse=True)\n    max_product = sorted_nums[0] * sorted_nums[1]\n    return max_product\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(concatenated_string: str) -> bool:\n    return \"Python\" in concatenated_string",
        "solution_func": "def g(strings=['Hello', 'Pythonista']):\n    concatenated_string = strings[0] + strings[1]\n    return concatenated_string",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to concatenate two strings and check if the word 'Python' is present in the concatenated string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string concatenation and checking for a specific substring in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sum_positive: int, numbers=[-2, 5, 3, 7, -4]) -> bool:\n    positive_sum = sum(num for num in numbers if num > 0)\n    assert sum_positive == positive_sum\n    return True\n\ndef g(numbers=[-2, 5, 3, 7, -4]):\n    return sum(num for num in numbers if num > 0)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to calculate the sum of positive numbers in a list and compare it with a given value.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_product: int, numbers=[2, 5, 3, 7, 4]) -> bool:\n    max_pair = max(numbers) * sorted(numbers)[-2]\n    assert max_product == max_pair\n    return True\n\ndef g(numbers=[2, 5, 3, 7, 4]):\n    sorted_nums = sorted(numbers)\n    return sorted_nums[-1] * sorted_nums[-2]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(sum_positive: int, numbers=[-2, 5, 3, 7, -4]) -> bool:\n    positive_sum = sum(num for num in numbers if num > 0)\n    assert sum_positive == positive_sum\n    return True",
        "solution_func": "def g(numbers=[-2, 5, 3, 7, -4]):\n    return sum(num for num in numbers if num > 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if the sum of positive numbers in a list matches a given value, and g calculates the sum of positive numbers in a list. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, summing positive numbers in a list, and using assert statements to validate the solution.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]\n\ndef g():\n    return \"A man a plan a canal Panama\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 != 0 for num in nums)\n\ndef g():\n    return [2*i + 1 for i in range(500)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]",
        "solution_func": "def g():\n    return \"A man a plan a canal Panama\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that checks if a given text is a palindrome after removing spaces and converting to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given text is a palindrome after removing spaces and converting to lowercase. The solution function should return the text 'A man a plan a canal Panama' to satisfy the palindrome condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    num = 17\n    while True:\n        num += 2\n        if all(num % i != 0 for i in range(3, int(num**0.5) + 1, 2)):\n            return num\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search algorithm.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 != 0 for num in nums)\n\ndef g():\n    return [2*i + 1 for i in range(500)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    num = 17\n    while True:\n        num += 2\n        if all(num % i != 0 for i in range(3, int(num**0.5) + 1, 2)):\n            return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g() that finds the next prime number after 17. The solution g() iterates through odd numbers starting from 17 until it finds the next prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of prime numbers, loops, and conditionals in Python. It provides a practical example of finding prime numbers using a loop and checking for divisibility. This puzzle can be used to teach Python programming to master's students in CS as it covers fundamental concepts and requires problem-solving skills.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport string\n\ndef f(sentence: str) -> bool:\n    alphabet = set(string.ascii_lowercase)\n    return set(sentence.lower().replace(\" \", \"\")) >= alphabet\n\ndef g():\n    return \"The quick brown fox jumps over the lazy dog\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(num % 2 != 0 for num in nums)\n\ndef g():\n    return [2*i + 1 for i in range(500)]\nassert f(g()) == True\n"
        ],
        "problem_func": "import string\n\ndef f(sentence: str) -> bool:\n    alphabet = set(string.ascii_lowercase)\n    return set(sentence.lower().replace(\" \", \"\")) >= alphabet",
        "solution_func": "def g():\n    return \"The quick brown fox jumps over the lazy dog\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function to check if a given sentence contains all the letters of the alphabet at least once, ignoring spaces."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using sets, string manipulation, and comparison operations to check for the presence of all alphabet letters in a sentence.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return str(n) == str(n)[::-1]\n\ndef g():\n    n = 11\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n += 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Brute Force Search",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return digit_sum == digit_product\n\ndef g():\n    n = 10\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        digit_product = 1\n        for d in str(n):\n            digit_product *= int(d)\n        if digit_sum == digit_product:\n            return n\n        n += 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return str(n) == str(n)[::-1]",
        "solution_func": "def g():\n    n = 11\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given integer is a palindrome, and a function g() that finds the smallest palindrome number greater than or equal to 11."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of palindrome numbers and looping in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(input_str=\"radar\"):\n    return input_str + input_str[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(seq: List[int]) -> bool:\n    return all(seq[i] == seq[i-1] + 1 for i in range(1, len(seq)))\n\ndef g(start=1, length=5):\n    return list(range(start, start + length))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(input_str=\"radar\"):\n    return input_str + input_str[::-1]",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s) that checks if a string is a palindrome, write a function g(input_str) that returns the input string concatenated with its reverse, and ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding palindrome strings and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(word.islower() for word in words)\n\ndef g(words=[\"python\", \"programming\", \"puzzle\"]):\n    return [word.lower() for word in words]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(seq: List[int]) -> bool:\n    return all(seq[i] == seq[i-1] + 1 for i in range(1, len(seq)))\n\ndef g(start=1, length=5):\n    return list(range(start, start + length))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(word.islower() for word in words)",
        "solution_func": "def g(words=[\"python\", \"programming\", \"puzzle\"]):\n    return [word.lower() for word in words]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if all words in a list are in lowercase, and a function g that converts all words in a list to lowercase. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, string methods, and the all() function in Python. It tests the student's ability to manipulate lists and strings in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(subsets: List[List[int]], num_list=[1, 2, 3], target_sum=5) -> bool:\n    return len(subsets) == len(set(map(tuple, subsets))) and all((sum(subset) == target_sum for subset in subsets))\ndef g(num_list=[1, 2, 3], target_sum=5):\n    from itertools import combinations\n    return [list(comb) for r in range(len(num_list) + 1) for comb in combinations(num_list, r) if sum(comb) == target_sum]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Set Operations, Permutations and Combinations, Importing Modules (Itertools), and Algorithm Optimization.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(permutations: List[str], char_list=['a', 'b', 'c'], length=3) -> bool:\n    return len(permutations) == len(set(permutations)) >= len(char_list) and all((len(perm) == length for perm in permutations))\ndef g(char_list=['a', 'b', 'c'], length=3):\n    from itertools import permutations\n    return [''.join(perm) for perm in permutations(char_list, length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List \ndef f(subsets: List[List[int]], num_list=[1, 2, 3], target_sum=5) -> bool:\n    return len(subsets) == len(set(map(tuple, subsets))) and all((sum(subset) == target_sum for subset in subsets))",
        "solution_func": "def g(num_list=[1, 2, 3], target_sum=5):\n    from itertools import combinations\n    return [list(comb) for r in range(len(num_list) + 1) for comb in combinations(num_list, r) if sum(comb) == target_sum]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding all possible subsets of a given list of numbers that sum up to a target sum, and checking if there are any duplicate subsets in the result."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list manipulation, combinations, and set operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"racecar\" + \"racecar\"[::-1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(nums: List[int]) -> bool:\n    return all(is_prime(num) for num in nums)\n\ndef g():\n    return [num for num in range(2, 100) if is_prime(num)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"racecar\" + \"racecar\"[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. The solution function g() returns a palindrome string 'racecar' concatenated with its reverse, and the assertion checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(word.isupper() for word in words)\n\ndef g():\n    return [\"PYTHON\", \"PROGRAMMING\", \"PUZZLES\"]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(nums: List[int]) -> bool:\n    return all(is_prime(num) for num in nums)\n\ndef g():\n    return [num for num in range(2, 100) if is_prime(num)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str]) -> bool:\n    return all(word.isupper() for word in words)",
        "solution_func": "def g():\n    return [\"PYTHON\", \"PROGRAMMING\", \"PUZZLES\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a list of strings as input and checks if all the strings are in uppercase. The solution function returns a list of uppercase strings and asserts that the puzzle function returns True for this list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all words in a list are in uppercase, and the solution provides a list of uppercase words to satisfy this condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(limit: int, condition=30) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_sum = sum(filter(is_prime, range(2, limit)))\n    return prime_sum > condition\n\ndef g(condition=30):\n    limit = 100\n    return limit\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to prime numbers, filtering, and summing elements in a range.",
        "idx_generation": 70,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(limit: int, condition=30) -> bool:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_sum = sum(filter(is_prime, range(2, limit)))\n    return prime_sum > condition",
        "solution_func": "def g(condition=30):\n    limit = 100\n    return limit",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of prime numbers up to a given limit is greater than a specified condition. The solution function g returns a limit value. The puzzle is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for prime numbers and summing them up to a given limit. The solution function g simply returns a limit value. The puzzle is to ensure that the sum of prime numbers up to the limit returned by g meets the specified condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, n=10) -> bool:\n    return len(s) == n\n\ndef g(n=10):\n    return \"hello\" + \"world\"[:n]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=500000, n=250) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=500000, n=250):\n    return [3] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, n=10) -> bool:\n    return len(s) == n",
        "solution_func": "def g(n=10):\n    return \"hello\" + \"world\"[:n]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f(s: str, n=10) which checks if the length of a given string is equal to a specified number, and g(n=10) which returns a substring of 'hello world' based on the given number. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, string manipulation, and function invocation. It tests the student's ability to define functions with parameters and return values, as well as their understanding of string slicing and function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[float], x=5) -> bool:\n    return sum(nums) < x**2\n\ndef g(x=5):\n    return [1.2, 3.4, 2.3, 0.5, 1.6, 2.5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=500000, n=250) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=500000, n=250):\n    return [3] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[float], x=5) -> bool:\n    return sum(nums) < x**2",
        "solution_func": "def g(x=5):\n    return [1.2, 3.4, 2.3, 0.5, 1.6, 2.5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define a function that takes a list of floats as input and checks if the sum of the numbers in the list is less than the square of a given number x. The solution function generates a list of floats and passes it to the function to return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, list manipulation, and comparison operations in Python. It also tests the students' ability to pass function outputs as arguments to another function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name') -> bool:\n    return key in d\n\ndef g(key='name'):\n    return {'name': 'Alice', 'age': 30, 'city': 'New York'}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=500000, n=250) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=500000, n=250):\n    return [3] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict, key='name') -> bool:\n    return key in d",
        "solution_func": "def g(key='name'):\n    return {'name': 'Alice', 'age': 30, 'city': 'New York'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a specified key exists in a dictionary, and a function g that returns a dictionary with a specific key. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in checking the existence of a key in a dictionary. The solution function g always returns a dictionary with the key 'name', so f(g()) will always return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(nums: list) -> bool:\n    max_prime = max(nums)\n    return max_prime > 30\n\ndef g():\n    import random\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    while len(primes) < 5:\n        num = random.randint(10, 50)\n        if is_prime(num):\n            primes.append(num)\n    \n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and finding the maximum prime number in a list. It also includes random number generation and assertion testing.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list) -> bool:\n    return sum(nums) > 100\n\ndef g():\n    import random\n    return [random.randint(1, 50) for _ in range(5)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(nums: list) -> bool:\n    max_prime = max(nums)\n    return max_prime > 30",
        "solution_func": "def g():\n    import random\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    while len(primes) < 5:\n        num = random.randint(10, 50)\n        if is_prime(num):\n            primes.append(num)\n    \n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(nums: list) that checks if the maximum number in a list is greater than 30. The solution function g() generates a list of 5 random prime numbers between 10 and 50 and returns it. The puzzle is considered solved if the maximum prime number in the generated list is greater than 30."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, prime numbers, and comparison operations. It tests the understanding of generating random prime numbers and checking conditions based on the generated list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(str(num) == str(num)[::-1] for num in nums)\n\ndef g(digits=2):\n    palindrome = int('1' + '0'*(digits-1) + '1')\n    return [palindrome]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check for palindromic numbers.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 4:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=30):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(str(num) == str(num)[::-1] for num in nums)",
        "solution_func": "def g(digits=2):\n    palindrome = int('1' + '0'*(digits-1) + '1')\n    return [palindrome]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if any number in a list is a palindrome, and a function g that generates a list of palindrome numbers with a specified number of digits. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension, string manipulation, and generating palindrome numbers in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(nums: List[int]) -> bool:\n    return all(is_prime(num) for num in [max(nums), min(nums)])\n\ndef g(limit=10):\n    primes = [2]\n    num = 3\n    while num <= limit:\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and using list comprehension in Python.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    if len(nums) < 4:\n        return False\n    a, b = 0, 1\n    while b < max(nums):\n        a, b = b, a + b\n    return all(num in nums for num in [a, b])\n\ndef g(limit=30):\n    fib_nums = [0, 1]\n    a, b = 0, 1\n    while b < limit:\n        a, b = b, a + b\n        fib_nums.append(b)\n    return fib_nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(nums: List[int]) -> bool:\n    return all(is_prime(num) for num in [max(nums), min(nums)])",
        "solution_func": "def g(limit=10):\n    primes = [2]\n    num = 3\n    while num <= limit:\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if all the numbers in a given list are prime numbers, with the list containing the maximum and minimum numbers from a generated list of prime numbers up to a specified limit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g():\n    import random\n    lst = [random.randint(1, 10) * 2 for _ in range(6)]\n    return lst\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even, generating a list of random even numbers, and then checking if all numbers in the generated list are even.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return len(d) == len(set(d.keys()))\ndef g():\n    import string\n    import random\n    keys = random.sample(string.ascii_lowercase, 5)\n    return {k: k.upper() for k in keys}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g():\n    import random\n    lst = [random.randint(1, 10) * 2 for _ in range(6)]\n    return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all numbers in a list are even, and a function g() that generates a list of random even numbers. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, random number generation, and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, target=\"level\") -> bool:\n    return s == s[::-1]\n\ndef g(target=\"level\"):\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(number: int, target=120) -> bool:\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n\n    return factorial(number) == target\n\ndef g(target=120):\n    return 5\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, target=\"level\") -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(target=\"level\"):\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given string is a palindrome, and a function g that returns a specific string. The assertion checks if the output of g satisfies the condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and checking for palindromes in Python. It is a simple and straightforward puzzle that can be used to introduce basic concepts in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, target=9) -> bool:\n    return sum(int(digit) for digit in str(num)) == target\n\ndef g(target=9):\n    return 27\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Mathematical Operations",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(number: int, target=120) -> bool:\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n\n    return factorial(number) == target\n\ndef g(target=120):\n    return 5\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int, target=9) -> bool:\n    return sum(int(digit) for digit in str(num)) == target",
        "solution_func": "def g(target=9):\n    return 27",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of the digits of a given number is equal to a target value. The solution function g returns a fixed value, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as function definition, string manipulation, and assertion testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dynamic programming to find the longest increasing subsequence in a given list of integers.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] >= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] < nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] > nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True",
        "solution_func": "def g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python. The first function f(subsequence: List[int], nums=[0]) checks if a given subsequence is strictly increasing. The second function g(nums=[0]) generates the longest increasing subsequence from a given list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for a strictly increasing subsequence and how to generate the longest increasing subsequence using dynamic programming. The solution function g() correctly generates the longest increasing subsequence and passes the test case in the assert statement.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] < subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] >= nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] <= nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Dynamic Programming, Sorting and Ordering",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] >= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] < nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] > nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] < subsequence[i - 1]:\n            return False\n    return True",
        "solution_func": "def g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] >= nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] <= nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given subsequence is in non-decreasing order and g finds the longest non-decreasing subsequence in a list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for a non-decreasing subsequence and finding the longest non-decreasing subsequence using dynamic programming in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] > subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] <= nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] >= nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Dynamic Programming, Sorting and Ordering",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] >= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] < nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] > nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] > subsequence[i - 1]:\n            return False\n    return True",
        "solution_func": "def g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] <= nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] >= nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g. Function f checks if a given subsequence is non-increasing. Function g finds the longest non-increasing subsequence in a list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for a non-increasing subsequence and finding the longest non-increasing subsequence using dynamic programming in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(dictionary: dict) -> bool:\n    return len(set(dictionary.values())) == len(dictionary)\n\ndef g(size=5):\n    # generate dictionary with unique values\n    random_dict = {key: random.randint(1, 100) for key in range(size)}\n    return random_dict\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking for uniqueness of values in the dictionary.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(seq: List[int], size=8) -> bool:\n    return all(seq[i] + seq[i + 1] == seq[i + 2] for i in range(len(seq) - 2))\n\ndef g(size=8):\n    # generate Fibonacci sequence\n    fib_seq = [0, 1]\n    for i in range(2, size):\n        fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n    return fib_seq\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(dictionary: dict) -> bool:\n    return len(set(dictionary.values())) == len(dictionary)",
        "solution_func": "def g(size=5):\n    # generate dictionary with unique values\n    random_dict = {key: random.randint(1, 100) for key in range(size)}\n    return random_dict",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function that checks if all values in a dictionary are unique, and a solution function that generates a random dictionary with unique values and returns it. The assertion checks if the function returns True for the generated dictionary."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding dictionary values uniqueness and generating a dictionary with unique values using random integers. It tests the student's knowledge of dictionaries and random number generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] >= numbers[i + 1] for i in range(len(numbers) - 1))\n\ndef g(size=5):\n    # generate list of numbers in descending order\n    descending_numbers = list(range(size, 0, -1))\n    return descending_numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting and ordering a list of numbers in descending order.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(seq: List[int], size=8) -> bool:\n    return all(seq[i] + seq[i + 1] == seq[i + 2] for i in range(len(seq) - 2))\n\ndef g(size=8):\n    # generate Fibonacci sequence\n    fib_seq = [0, 1]\n    for i in range(2, size):\n        fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n    return fib_seq\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] >= numbers[i + 1] for i in range(len(numbers) - 1))",
        "solution_func": "def g(size=5):\n    # generate list of numbers in descending order\n    descending_numbers = list(range(size, 0, -1))\n    return descending_numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of numbers in descending order and checking if all elements in the list are greater than or equal to the next element."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list generation and the all() function in Python to check a specific condition for all elements in the list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef is_perfect_square(num):\n    return math.isqrt(num) ** 2 == num\n\ndef f(lst: list) -> bool:\n    return any(is_perfect_square(elem) for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if any(is_perfect_square(elem) for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, importing modules (math), and randomization.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(lst: list) -> bool:\n    return all(is_prime(elem) for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(is_prime(elem) for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef is_perfect_square(num):\n    return math.isqrt(num) ** 2 == num\n\ndef f(lst: list) -> bool:\n    return any(is_perfect_square(elem) for elem in lst)",
        "solution_func": "def g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if any(is_perfect_square(elem) for elem in new_list):\n            return new_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if any element in a randomly generated list is a perfect square."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to generate random lists, check for perfect squares, and use the 'any' function in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef is_multiple_of_10(num):\n    return num % 10 == 0\n\ndef f(lst: list) -> bool:\n    return sum(lst) % 10 == 0\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if sum(new_list) % 10 == 0:\n            return new_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, random number generation, and conditional logic.",
        "idx_generation": 71,
        "target_skills": [],
        "puzzle_history": [
            "\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef f(lst: list) -> bool:\n    return all(is_prime(elem) for elem in lst)\n\ndef g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if all(is_prime(elem) for elem in new_list):\n            return new_list\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def is_multiple_of_10(num):\n    return num % 10 == 0\n\ndef f(lst: list) -> bool:\n    return sum(lst) % 10 == 0",
        "solution_func": "def g():\n    import random\n    while True:\n        new_list = random.sample(range(1, 100), random.randint(5, 10))\n        if sum(new_list) % 10 == 0:\n            return new_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a random list of numbers and check if the sum of the list is a multiple of 10."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a given list's sum is a multiple of 10 and generating random lists until a valid list is found. The solution function generates random lists and returns the first list that satisfies the condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(prime: int, limit=100) -> bool:\n    return sympy.isprime(prime)\n\ndef g(limit=100) -> int:\n    return sympy.prevprime(limit)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using the sympy library and finding the previous prime number.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pal=\"racecar\") -> bool:\n    return s == s[::-1]\n\ndef g(pal=\"racecar\") -> str:\n    def reverse(s):\n        if len(s) == 0:\n            return s\n        else:\n            return reverse(s[1:]) + s[0]\n    return reverse(pal)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import sympy\n\ndef f(prime: int, limit=100) -> bool:\n    return sympy.isprime(prime)",
        "solution_func": "def g(limit=100) -> int:\n    return sympy.prevprime(limit)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given number is a prime number using the sympy library in Python, and the solution involves finding the previous prime number within a specified limit."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and the sympy library in Python. The solution function uses sympy to find the previous prime number within a given limit.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(number: int) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef g():\n    import sympy\n\n    while True:\n        prime_number = sympy.randprime(10, 100)\n        return prime_number\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics related to Number Theory (factors, primes, etc.) and Importing Modules (Sympy).",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(sentence: str) -> bool:\n    cleaned_sentence = ''.join(char.lower() for char in sentence if char.isalpha())\n    return cleaned_sentence == cleaned_sentence[::-1]\n\ndef g():\n    import random\n    import string\n\n    while True:\n        word_length = random.randint(5, 10)\n        random_word = ''.join(random.choices(string.ascii_lowercase, k=word_length))\n        palindrome = random_word + random_word[::-1]\n        return palindrome\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(number: int) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import sympy\n\n    while True:\n        prime_number = sympy.randprime(10, 100)\n        return prime_number",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(number) that checks if a given number is a prime number. The function g() generates a random prime number between 10 and 100 using the sympy library, and the puzzle requires g() to return a prime number that satisfies the condition of f() returning True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and the sympy library in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return sum(numbers) > 100\n\ndef g():\n    import random\n    return [random.randint(1, 50) for _ in range(5)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, importing modules (random), and conditional logic.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return any('a' in s for s in strings)\n\ndef g():\n    import random\n    return [''.join(random.choices('abcdef', k=5)) for _ in range(5)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return sum(numbers) > 100",
        "solution_func": "def g():\n    import random\n    return [random.randint(1, 50) for _ in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of 5 random integers between 1 and 50, and then check if the sum of these integers is greater than 100."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension and the random module in Python to generate random integers. Students need to understand how to call the functions and compare the sum of the generated list with a threshold value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 == 0 for num in numbers)\n\ndef g():\n    import random\n    return [random.randint(1, 10) * 2 for _ in range(5)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even, generating random numbers, and using list comprehension.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return any('a' in s for s in strings)\n\ndef g():\n    import random\n    return [''.join(random.choices('abcdef', k=5)) for _ in range(5)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(num % 2 == 0 for num in numbers)",
        "solution_func": "def g():\n    import random\n    return [random.randint(1, 10) * 2 for _ in range(5)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to define a function that checks if all numbers in a list are even, and then generate a list of 5 random even numbers to test the function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehensions, the all() function, and generating random numbers in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations to check for uniqueness of elements in a list.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list contains only unique elements, and then calling function g() which returns a list to test if the function f() works correctly."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in checking for unique elements in a list. It involves understanding list operations and the set data structure in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function f(num: int) that checks if a given number is a prime number. The student also needs to define a function g() that returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers and implementing a function to check for primality. The solution function g() returns a specific number (17) to test the prime number function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)\n\ndef g():\n    return [10, 8, 5, 3, 1]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in reverse order.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return list(d.keys()) == sorted(d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)",
        "solution_func": "def g():\n    return [10, 8, 5, 3, 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list is sorted in descending order, and a function g() that returns a specific list. The puzzle tests whether the list returned by g() is sorted in descending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting in Python and implementing a function to check if a list is sorted in descending order.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(bool_values: List[bool], target_count=3, unique_value=True) -> bool:\n    return len(bool_values) == target_count and all((val == unique_value for val in bool_values))\n\ndef g(target_count=3, unique_value=True):\n    \"\"\"\n    This solution generates a list of boolean values with the specified target_count and unique_value.\n    \"\"\"\n    return [unique_value] * target_count\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(bool_values: List[bool], target_count=3, unique_value=True) -> bool:\n    return len(bool_values) == target_count and all((val == unique_value for val in bool_values))",
        "solution_func": "def g(target_count=3, unique_value=True):\n    \"\"\"\n    This solution generates a list of boolean values with the specified target_count and unique_value.\n    \"\"\"\n    return [unique_value] * target_count",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that generates a list of boolean values with a specified count and unique value, and then check if the generated list meets certain conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list generation, boolean values, and function implementation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, str]], target_sum=10, unique_strings=True) -> bool:\n    return sum(num for num, _ in tuples) == target_sum and all((s.isalpha() == unique_strings for _, s in tuples))\n\ndef g(target_sum=10, unique_strings=True):\n    \"\"\"\n    This solution generates a list of tuples with integer values that sum up to the target_sum and unique string values.\n    \"\"\"\n    tuples = []\n    remaining_sum = target_sum\n    current_num = 1\n    current_letter = 'a'\n\n    while remaining_sum > 0:\n        tuples.append((current_num, current_letter))\n        remaining_sum -= current_num\n        current_num += 1\n        current_letter = chr(ord(current_letter) + 1)\n\n    return tuples\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations to generate a list of tuples with specific properties. It also includes conditional logic to check if the generated list satisfies the conditions specified in the puzzle.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, str]], target_sum=10, unique_strings=True) -> bool:\n    return sum(num for num, _ in tuples) == target_sum and all((s.isalpha() == unique_strings for _, s in tuples))",
        "solution_func": "def g(target_sum=10, unique_strings=True):\n    \"\"\"\n    This solution generates a list of tuples with integer values that sum up to the target_sum and unique string values.\n    \"\"\"\n    tuples = []\n    remaining_sum = target_sum\n    current_num = 1\n    current_letter = 'a'\n\n    while remaining_sum > 0:\n        tuples.append((current_num, current_letter))\n        remaining_sum -= current_num\n        current_num += 1\n        current_letter = chr(ord(current_letter) + 1)\n\n    return tuples",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples with integer and string values, and checks if the sum of the integers in the tuples equals a target sum and if the strings are unique alphabetic characters. The solution function g generates a list of tuples that meet the criteria set by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the sum of integers in tuples and uniqueness of string values, along with generating tuples that satisfy these conditions. The solution function g creates tuples with increasing integer values and unique alphabetic characters to meet the criteria of function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(numbers: list, threshold=50) -> bool:\n    return any(num > threshold for num in numbers)\n\ndef g(threshold=50):\n    # generate random lists of numbers\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(random.randint(1, 10))]\n        if any(num > threshold for num in numbers):\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating random lists of numbers and checking if any number in the list is greater than a threshold value. The solution function generates random lists and returns the list if any number in it is greater than the threshold. The puzzle and solution involve concepts related to random number generation, list comprehension, and conditional logic.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(dictionary: dict, value=42) -> bool:\n    return any(val == value for val in dictionary.values())\n\ndef g(value=42):\n    # generate random dictionaries\n    while True:\n        dictionary = {key: random.randint(1, 100) for key in range(1, random.randint(1, 10))}\n        if any(val == value for val in dictionary.values()):\n            return dictionary\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(numbers: list, threshold=50) -> bool:\n    return any(num > threshold for num in numbers)",
        "solution_func": "def g(threshold=50):\n    # generate random lists of numbers\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(random.randint(1, 10))]\n        if any(num > threshold for num in numbers):\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if any number in a given list is greater than a specified threshold. The solution function g generates random lists of numbers and returns a list that satisfies the condition set by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, condition checking, and function interaction in Python. It provides a practical application of generating random data and checking conditions within a list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(strings: list, length=5) -> bool:\n    return any(len(s) > length for s in strings)\n\ndef g(length=5):\n    # generate random lists of strings\n    while True:\n        strings = [''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10))) for _ in range(random.randint(1, 5))]\n        if any(len(s) > length for s in strings):\n            return strings\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and random generation of strings. It also includes conditional logic and assertion testing.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(dictionary: dict, value=42) -> bool:\n    return any(val == value for val in dictionary.values())\n\ndef g(value=42):\n    # generate random dictionaries\n    while True:\n        dictionary = {key: random.randint(1, 100) for key in range(1, random.randint(1, 10))}\n        if any(val == value for val in dictionary.values()):\n            return dictionary\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(strings: list, length=5) -> bool:\n    return any(len(s) > length for s in strings)",
        "solution_func": "def g(length=5):\n    # generate random lists of strings\n    while True:\n        strings = [''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10))) for _ in range(random.randint(1, 5))]\n        if any(len(s) > length for s in strings):\n            return strings",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if any string in a list of strings has a length greater than a specified length. The solution function g generates random lists of strings and returns a list that satisfies the condition set by function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, strings, random generation, and function calls in Python. It tests the understanding of list comprehension, string manipulation, and function usage in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(matrix: list, target=0) -> bool:\n    return any(target in sublist for sublist in matrix)\n\ndef g(target=0):\n    # generate random matrices\n    while True:\n        matrix = [[random.randint(-10, 10) for _ in range(random.randint(1, 5))] for _ in range(random.randint(1, 5))]\n        if any(target in sublist for sublist in matrix):\n            return matrix\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves the topics of Randomization, List Comprehension, and Assertion Testing.",
        "idx_generation": 72,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(dictionary: dict, value=42) -> bool:\n    return any(val == value for val in dictionary.values())\n\ndef g(value=42):\n    # generate random dictionaries\n    while True:\n        dictionary = {key: random.randint(1, 100) for key in range(1, random.randint(1, 10))}\n        if any(val == value for val in dictionary.values()):\n            return dictionary\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(matrix: list, target=0) -> bool:\n    return any(target in sublist for sublist in matrix)",
        "solution_func": "def g(target=0):\n    # generate random matrices\n    while True:\n        matrix = [[random.randint(-10, 10) for _ in range(random.randint(1, 5))] for _ in range(random.randint(1, 5))]\n        if any(target in sublist for sublist in matrix):\n            return matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a target number is present in any sublist of a given matrix. The solution function g generates random matrices until it finds one where the target number is present in a sublist, and then returns that matrix."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with matrices, random number generation, and list comprehension in Python. It tests the understanding of list comprehensions and the any() function. The solution function g demonstrates how to generate random matrices and check for the target number in sublists.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that returns True if the word is a palindrome (reads the same forwards and backwards), and a function g() that returns the word 'radar'. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g() -> list:\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking if all numbers in the list are even.",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g() -> list:\n    return [2, 4, 6, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all numbers in a list are even, and a function g() that returns a list of even numbers. The puzzle tests whether function f correctly identifies all even numbers in the list returned by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and function definition in Python. It also tests the ability to write a function that meets a specific condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return any(char.isdigit() for char in s)\n\ndef g() -> str:\n    return \"Python2022\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef g():\n    return 17\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return any(char.isdigit() for char in s)",
        "solution_func": "def g() -> str:\n    return \"Python2022\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if a string contains any digit, and a function g() that returns a specific string 'Python2022'. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given string contains any digit using function f, and ensuring that function g returns a specific string that satisfies the condition of function f. The puzzle tests the understanding of string manipulation and boolean functions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], target=0) -> bool:\n    total = sum(nums)\n    if total % 2 != 0:\n        return False\n    target = total // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] |= dp[i - num]\n    return dp[target]\ndef g(nums=[2, 4, 5, 6, 7, 10]):\n    return nums\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Dynamic Programming, List Operations",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and edges.index([a, b]) < edges.index([b, c]) < edges.index([c, a])\ndef g(edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], target=0) -> bool:\n    total = sum(nums)\n    if total % 2 != 0:\n        return False\n    target = total // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] |= dp[i - num]\n    return dp[target]",
        "solution_func": "def g(nums=[2, 4, 5, 6, 7, 10]):\n    return nums",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and a target value, and checks if it is possible to divide the list into two equal parts such that the sum of each part is equal to the target value. The function g returns a default list of integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves dynamic programming to solve the subset sum problem. The function f checks if it is possible to divide the list into two equal parts with equal sum. The function g returns a default list of integers for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, sub='Python') -> bool:\n    return sub in text\n\ndef g(sub='Python'):\n    return 'Python Programming is fun!'\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(arr: list, threshold=100) -> bool:\n    return max(arr) > threshold\ndef g(threshold=100):\n    return [50, 75, 110, 90]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str, sub='Python') -> bool:\n    return sub in text",
        "solution_func": "def g(sub='Python'):\n    return 'Python Programming is fun!'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given substring is present in a given text, and another function g that returns a specific text. The goal is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function calls, parameter passing, and return values in Python. It also reinforces the concept of function composition and testing for a specific condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized approach to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise operations and a randomized approach to find a solution.",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # randomized approach\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4",
        "solution_func": "def g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized approach to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a certain condition is met based on a list of integers and a predefined list of vectors. The solution function g uses a randomized approach to find a solution that satisfies the condition set by f."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations and a randomized approach to find a solution. It may be challenging for master's students in CS who are familiar with Python programming and algorithms.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized solution generation\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise operations and randomization to solve a challenge related to finding a subset of indices that satisfy a specific condition in a list of vectors.",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # randomized approach\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4",
        "solution_func": "def g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized solution generation\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a certain condition is met based on a list of integers and a predefined list of integers. The solution function g generates a randomized solution to meet the condition set by f."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations, randomization, and checking if a condition is met. It requires understanding of bitwise manipulation and probability in generating a solution.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized approach for solution generation\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise operations and randomization for generating a solution. It also includes concepts of probability and optimization.",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # randomized approach\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4",
        "solution_func": "def g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized approach for solution generation\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a certain condition is met based on a list of integers and a predefined list of vectors. The solution function g generates a solution using a randomized approach and returns a list of indices. The assertion at the end checks if the solution satisfies the condition in function f."
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations, randomization, and checking if a condition is met. It requires understanding of bitwise manipulation and probability in generating a solution.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(data: dict, key='username', value='admin') -> bool:\n    assert key in data and data[key] == value\n    return True\n\ndef g(key='username', value='admin'):\n    # brute force\n    data = {'username': 'admin', 'password': '1234', 'email': 'admin@example.com'}\n\n    keys = ['username', 'email', 'password']\n    values = ['admin', 'user', 'guest']\n\n    for k in keys:\n        for v in values:\n            if k in data and data[k] == v:\n                return {k: v}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and brute force search to find the correct key-value pair in a dictionary.",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(string: str, sub='ab') -> bool:\n    assert len(sub) > 1 and sub in string and len(set(sub)) == len(sub)\n    return all(sub in string[i:i+len(sub)] for i in range(len(string) - len(sub) + 1))\ndef g(sub='ab'):\n    # brute force\n    string = 'abracadabra'\n\n    from itertools import permutations\n    for p in permutations(sub):\n        if all(char in sub for char in p) and len(p) == len(set(p)):\n            return ''.join(p)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(data: dict, key='username', value='admin') -> bool:\n    assert key in data and data[key] == value\n    return True",
        "solution_func": "def g(key='username', value='admin'):\n    # brute force\n    data = {'username': 'admin', 'password': '1234', 'email': 'admin@example.com'}\n\n    keys = ['username', 'email', 'password']\n    values = ['admin', 'user', 'guest']\n\n    for k in keys:\n        for v in values:\n            if k in data and data[k] == v:\n                return {k: v}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a key-value pair in a dictionary that satisfies a specific condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given key-value pair in a dictionary matches a specific condition defined in the function f. The solution function g iterates through possible key-value pairs to find the correct one.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(dictionary: Dict[str, int]) -> bool:\n    return len(set(dictionary.keys())) == len(dictionary)\n\ndef g(n: int = 5) -> Dict[str, int]:\n    import random\n    return {str(random.randint(1, 10)): random.randint(1, 100) for _ in range(n)}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking for uniqueness of keys in a dictionary.",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return len(set(tuples)) == len(tuples)\n\ndef g(n: int = 5) -> List[Tuple[int, int]]:\n    import random\n    return list(set((random.randint(1, 10), random.randint(1, 10)) for _ in range(n)))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Dict\n\ndef f(dictionary: Dict[str, int]) -> bool:\n    return len(set(dictionary.keys())) == len(dictionary)",
        "solution_func": "def g(n: int = 5) -> Dict[str, int]:\n    import random\n    return {str(random.randint(1, 10)): random.randint(1, 100) for _ in range(n)}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the keys in a dictionary are unique, and a function g that generates a dictionary with random keys and values. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of dictionaries, sets, and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1] and len(s) % 2 == 0\n\ndef g():\n    pal1 = \"radar\"\n    pal2 = pal1[::-1]\n    return pal1 + pal2\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    n = [1, 2, 3, 4]\n    while True:\n        if len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1] and len(s) % 2 == 0",
        "solution_func": "def g():\n    pal1 = \"radar\"\n    pal2 = pal1[::-1]\n    return pal1 + pal2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome with an even length."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that checks if a string is a palindrome with an even length. The solution function g() creates a palindrome string with an even length and tests it using f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    odd_count = sum(1 for count in char_count.values() if count % 2 != 0)\n    return odd_count <= 1\n\ndef g():\n    return \"civic\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic, Dictionary",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    n = [1, 2, 3, 4]\n    while True:\n        if len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    odd_count = sum(1 for count in char_count.values() if count % 2 != 0)\n    return odd_count <= 1",
        "solution_func": "def g():\n    return \"civic\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if a given string has at most one character with an odd count of occurrences, and a function g() that returns the string 'civic'. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves counting the occurrences of characters in a string and checking if at most one character has an odd count. The solution function g() returns a specific string 'civic' which satisfies the condition in function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport numpy as np\n\ndef f(matrix) -> bool:\n    return np.array_equal(matrix, matrix.T)\n\ndef g(n=3):\n    matrix = np.random.randint(0, 10, (n, n))\n    symmetric_matrix = np.tril(matrix) + np.tril(matrix, -1).T\n    return symmetric_matrix\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal by comparing it with its transpose. The solution generates a random matrix and constructs a symmetric matrix from it. The numpy library is used for matrix operations.",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g(size=5, start=1, step=2):\n    return list(range(start, start + size * step, step))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import numpy as np\n\ndef f(matrix) -> bool:\n    return np.array_equal(matrix, matrix.T)",
        "solution_func": "def g(n=3):\n    matrix = np.random.randint(0, 10, (n, n))\n    symmetric_matrix = np.tril(matrix) + np.tril(matrix, -1).T\n    return symmetric_matrix",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a randomly generated symmetric matrix is equal to its transpose using NumPy functions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of NumPy functions for matrix manipulation and comparison.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int) -> bool:\n    return total > 50\n\ndef g():\n    import random\n    numbers = [random.randint(1, 20) for _ in range(7)]\n    return sum(numbers)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves random number generation, list comprehension, summing elements in a list, and comparison operation.",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return len(d) == len(set(d.keys()))\ndef g():\n    import string\n    import random\n    keys = random.sample(string.ascii_lowercase, 5)\n    return {k: k.upper() for k in keys}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(total: int) -> bool:\n    return total > 50",
        "solution_func": "def g():\n    import random\n    numbers = [random.randint(1, 20) for _ in range(7)]\n    return sum(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a list of random numbers, calculate the sum of the numbers, and check if the sum is greater than 50."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using random number generation, list comprehension, and sum calculation in Python to meet the condition set by the function f().",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(colors: list) -> bool:\n    return 'blue' in colors\n\ndef g():\n    import random\n    colors = random.choices(['red', 'green', 'blue', 'yellow'], k=6)\n    return colors\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and importing modules (random).",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return len(d) == len(set(d.keys()))\ndef g():\n    import string\n    import random\n    keys = random.sample(string.ascii_lowercase, 5)\n    return {k: k.upper() for k in keys}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(colors: list) -> bool:\n    return 'blue' in colors",
        "solution_func": "def g():\n    import random\n    colors = random.choices(['red', 'green', 'blue', 'yellow'], k=6)\n    return colors",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if the color 'blue' is present in a list of colors, and a function g that generates a list of 6 random colors. The assertion checks if 'blue' is present in the list generated by g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python as it involves basic list manipulation and conditional checking. It also introduces the random module for generating random values.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return any(char.isdigit() for char in s)\n\ndef g():\n    import random\n    import string\n    alphanumeric = string.ascii_letters + string.digits\n    s = ''.join(random.choices(alphanumeric, k=10))\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and random generation of alphanumeric characters. The solution checks if the generated string contains any digits.",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return len(d) == len(set(d.keys()))\ndef g():\n    import string\n    import random\n    keys = random.sample(string.ascii_lowercase, 5)\n    return {k: k.upper() for k in keys}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return any(char.isdigit() for char in s)",
        "solution_func": "def g():\n    import random\n    import string\n    alphanumeric = string.ascii_letters + string.digits\n    s = ''.join(random.choices(alphanumeric, k=10))\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a random string of alphanumeric characters and check if the string contains any digits."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the random and string modules in Python to generate a random string of alphanumeric characters and then checking if the string contains any digits using the f function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    if digit_sum <= 1:\n        return False\n    for i in range(2, int(math.sqrt(digit_sum)) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 9876\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        if digit_sum <= 1:\n            n -= 1\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(digit_sum)) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n -= 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, loops, and importing modules (math). It also includes the concept of prime numbers and digit manipulation.",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return int(digit_product ** 0.5) ** 2 == digit_product\n\ndef g():\n    n = 9876\n    while True:\n        digit_product = 1\n        for d in str(n):\n            digit_product *= int(d)\n        if int(digit_product ** 0.5) ** 2 == digit_product:\n            return n\n        n -= 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    if digit_sum <= 1:\n        return False\n    for i in range(2, int(math.sqrt(digit_sum)) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    n = 9876\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        if digit_sum <= 1:\n            n -= 1\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(digit_sum)) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n -= 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(n) that checks if the digit sum of a number is a prime number, and a function g() that finds the largest number with a prime digit sum. The assert statement checks if the solution g() satisfies the condition of function f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a concept of finding the digit sum of a number and checking if it is a prime number. The solution function g() iterates through numbers to find the largest number with a prime digit sum. The assert statement ensures that the solution function g() correctly satisfies the condition of function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return str(n) == str(n)[::-1]\n\ndef g():\n    n = 9876\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n -= 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 74,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    digit_product = 1\n    for d in str(n):\n        digit_product *= int(d)\n    return int(digit_product ** 0.5) ** 2 == digit_product\n\ndef g():\n    n = 9876\n    while True:\n        digit_product = 1\n        for d in str(n):\n            digit_product *= int(d)\n        if int(digit_product ** 0.5) ** 2 == digit_product:\n            return n\n        n -= 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return str(n) == str(n)[::-1]",
        "solution_func": "def g():\n    n = 9876\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n -= 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given integer is a palindrome, and a function g() that iterates through integers in reverse order to find the largest palindrome number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of palindrome numbers and iteration in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(s='racecar') -> str:\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    return sum(numbers) == target\n\ndef g(target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if sum(p) == target:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s='racecar') -> str:\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given string is a palindrome by comparing it with its reverse. The solution function g returns a default string 'racecar'. The assertion checks if the solution function g returns a palindrome string.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(num=7) -> int:\n    return num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a simple algorithm. It does not directly relate to any specific topic from the list provided.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> bool:\n    return sum(numbers) == target\n\ndef g(target=15, options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    from itertools import permutations\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            if sum(p) == target:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(num=7) -> int:\n    return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(num) and g(num), where f checks if a given number is a prime number and g returns a specific number. The puzzle requires g to return a number such that f returns True when applied to that number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, sub=\"Python is\", n=3) -> bool:\n    return sub in s and s.count(sub) == n\ndef g(sub=\"Python is\", n=3):\n    return sub * n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str, sub=\"Python is\", n=3) -> bool:\n    return sub in s and s.count(sub) == n",
        "solution_func": "def g(sub=\"Python is\", n=3):\n    return sub * n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string contains a specified substring a certain number of times, and a function g that generates a string by repeating a specified substring a certain number of times. The assertion at the end checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, substring checking, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(lst: List[Tuple[int, str]], n=4, s=\"Python\") -> bool:\n    return len(lst) == n and all(isinstance(t[0], int) and isinstance(t[1], str) for t in lst) and all(s in t[1] for t in lst)\ndef g(n=4, s=\"Python\"):\n    return [(i, s + str(i)) for i in range(1, n+1)]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, type checking, and string manipulation.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(lst: List[Tuple[int, str]], n=4, s=\"Python\") -> bool:\n    return len(lst) == n and all(isinstance(t[0], int) and isinstance(t[1], str) for t in lst) and all(s in t[1] for t in lst)",
        "solution_func": "def g(n=4, s=\"Python\"):\n    return [(i, s + str(i)) for i in range(1, n+1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires creating a list of tuples where the first element is an integer and the second element is a string containing a specific substring. The function f checks if the list meets certain conditions, and the function g generates the list to satisfy those conditions."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves creating a list of tuples with specific properties and then checking if the generated list satisfies the conditions defined in function f. The solution function g generates the required list to pass the conditions in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(d: Dict[str, int], keys=[\"a\", \"b\", \"c\"], values=[1, 2, 3]) -> bool:\n    return set(d.keys()) == set(keys) and all(d[k] == v for k, v in zip(keys, values))\ndef g(keys=[\"a\", \"b\", \"c\"], values=[1, 2, 3]):\n    return dict(zip(keys, values))\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and comparison, as well as list manipulation and comparison. It also includes the concept of assertions for testing the solution. ",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Dict\n\ndef f(d: Dict[str, int], keys=[\"a\", \"b\", \"c\"], values=[1, 2, 3]) -> bool:\n    return set(d.keys()) == set(keys) and all(d[k] == v for k, v in zip(keys, values))",
        "solution_func": "def g(keys=[\"a\", \"b\", \"c\"], values=[1, 2, 3]):\n    return dict(zip(keys, values))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given dictionary has the specified keys with corresponding values, and another function g that creates a dictionary from given keys and values. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, sets, and list comprehensions in Python to check key-value pairs and create dictionaries. It tests the understanding of dictionary operations and list comprehensions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a given string is a palindrome. The solution function returns a specific palindrome string 'radar' to satisfy the condition of the puzzle.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\n\ndef g() -> list:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g() -> list:\n    return [1, 3, 5, 7, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list contains only unique elements.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(matrix: list) -> bool:\n    return all(row == list(col) for row, col in zip(matrix, zip(*matrix)))\n\ndef g() -> list:\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g() -> list:\n    return [1, 3, 5, 7, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list contains only unique elements, and a function g() that returns a list with unique elements. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list uniqueness and using set to check for duplicates in a list. The solution function g() returns a list with unique elements, satisfying the condition of function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    list_sum = sum(numbers)\n    if list_sum <= 1:\n        return False\n    for i in range(2, int(list_sum**0.5) + 1):\n        if list_sum % i == 0:\n            return False\n    return True\n\ndef g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            if sum(p) > 1:\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, importing modules (Itertools), permutations and combinations, and algorithm optimization.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    max_value = max(numbers)\n    return max_value % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            max_value = max(p)\n            if max_value % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    list_sum = sum(numbers)\n    if list_sum <= 1:\n        return False\n    for i in range(2, int(list_sum**0.5) + 1):\n        if list_sum % i == 0:\n            return False\n    return True",
        "solution_func": "def g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            if sum(p) > 1:\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a list of numbers from a given set of options such that the sum of the numbers is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires generating permutations of numbers from a given set and checking if the sum of the selected numbers is a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 10, 12]) -> bool:\n    contains_even = any(num % 2 == 0 for num in numbers)\n    contains_odd = any(num % 2 != 0 for num in numbers)\n    return contains_even and contains_odd\n\ndef g(options=[2, 3, 5, 7, 10, 12]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            if any(num % 2 == 0 for num in p) and any(num % 2 != 0 for num in p):\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves permutation, conditional logic, and list manipulation.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    max_value = max(numbers)\n    return max_value % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            max_value = max(p)\n            if max_value % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 10, 12]) -> bool:\n    contains_even = any(num % 2 == 0 for num in numbers)\n    contains_odd = any(num % 2 != 0 for num in numbers)\n    return contains_even and contains_odd",
        "solution_func": "def g(options=[2, 3, 5, 7, 10, 12]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            if any(num % 2 == 0 for num in p) and any(num % 2 != 0 for num in p):\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers contains both even and odd numbers, with the option to choose from a predefined set of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function that checks if a given list of numbers contains both even and odd numbers. The solution function generates permutations from a set of predefined options and returns the first valid permutation that satisfies the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 2, 3, 4, 5, 6]) -> bool:\n    return numbers == sorted(numbers)\n\ndef g(options=[1, 2, 3, 4, 5, 6]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            if list(p) == sorted(p):\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Permutations and Combinations, Sorting and Ordering",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    max_value = max(numbers)\n    return max_value % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            max_value = max(p)\n            if max_value % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 2, 3, 4, 5, 6]) -> bool:\n    return numbers == sorted(numbers)",
        "solution_func": "def g(options=[1, 2, 3, 4, 5, 6]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            if list(p) == sorted(p):\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a permutation of a given set of numbers that is sorted in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list of numbers is sorted in ascending order by finding a permutation of the numbers. The solution function generates permutations of the numbers and returns the first sorted permutation it finds.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list, threshold=50) -> bool:\n    return sum(numbers) > threshold\n\ndef g(threshold=50) -> list:\n    import random\n    length = 5\n    return [random.randint(1, 10) for _ in range(length)] + [threshold + 1]\n    \nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and importing modules (random).",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers: list, threshold=50) -> bool:\n    return sum(numbers) > threshold",
        "solution_func": "def g(threshold=50) -> list:\n    import random\n    length = 5\n    return [random.randint(1, 10) for _ in range(length)] + [threshold + 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement two functions: f(numbers: list, threshold=50) -> bool, which checks if the sum of a list of numbers is greater than a given threshold, and g(threshold=50) -> list, which generates a list of random numbers and appends a value greater than the threshold. The puzzle tests the students' understanding of function implementation and usage in Python."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves implementing two functions and ensuring that the solution function g generates a list that satisfies the condition of the check function f. This puzzle can be used to teach Python programming concepts related to functions, list manipulation, and conditional statements.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str, count=3) -> bool:\n    return len(s) == count\ndef g(count = 3):\n    # brute force\n    from itertools import permutations\n    for perm in permutations('abc', count):\n        if len(perm) == count:\n            return ''.join(perm)\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and brute force search using itertools.",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str, count=3) -> bool:\n    return len(s) == count",
        "solution_func": "def g(count = 3):\n    # brute force\n    from itertools import permutations\n    for perm in permutations('abc', count):\n        if len(perm) == count:\n            return ''.join(perm)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function g() that generates all permutations of a given string 'abc' with a specified count, and returns the first permutation that satisfies the count condition. The function f() checks if the length of the generated permutation is equal to the specified count."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string permutations and checking the length of the generated permutations. It also introduces the use of itertools module in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    s = ''.join(char.lower() for char in s if char.isalnum())\n    return s == s[::-1]\n\ndef g(s=\"A man, a plan, a canal, Panama!\"):\n    return s\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 75,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    s = ''.join(char.lower() for char in s if char.isalnum())\n    return s == s[::-1]",
        "solution_func": "def g(s=\"A man, a plan, a canal, Panama!\"):\n    return s",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string is a palindrome after removing non-alphanumeric characters and converting all characters to lowercase. The function g returns a specific string. The puzzle tests whether the function f correctly identifies the given string as a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python to master's students in CS as it involves string manipulation, checking for palindromes, and understanding function calls and assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)\n\ndef g():\n    return [i for i in range(10, 0, -1)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in reverse order and generating a list in reverse order using list comprehension.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(s: str) -> bool:\n    if s != s[::-1]:\n        return False\n    length = len(s)\n    return is_prime(length)\n\ndef g():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for prime in primes:\n        if prime > 1 and prime <= 100:\n            palindrome = str(prime) + str(prime)[::-1]\n            return palindrome\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == sorted(lst, reverse=True)",
        "solution_func": "def g():\n    return [i for i in range(10, 0, -1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list is sorted in descending order, and a function g() that generates a list of numbers in descending order. The assertion checks if function f applied to the output of function g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting in descending order and list comprehension in Python. It tests the student's ability to define functions and use them to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    vowels = set('aeiou')\n    return len([char for char in s if char.lower() in vowels]) % 2 == 0\n\ndef g():\n    current_str = 'hello'\n    while True:\n        if len([char for char in current_str if char.lower() in set('aeiou')]) % 2 == 0:\n            return current_str\n        current_str += 'o'\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Set Operations, Conditional Logic, Brute Force Search",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 5\n        n -= 5 + (n - 5) // 6\n    return n > 0 and n % 6 == 5\n\ndef g():\n    m = 5\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 5:\n                break\n            n -= 5 + (n - 5) // 6\n        if n > 0 and n % 6 == 5:\n            return m\n        m += 6\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    vowels = set('aeiou')\n    return len([char for char in s if char.lower() in vowels]) % 2 == 0",
        "solution_func": "def g():\n    current_str = 'hello'\n    while True:\n        if len([char for char in current_str if char.lower() in set('aeiou')]) % 2 == 0:\n            return current_str\n        current_str += 'o'",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(s) that checks if the number of vowels in a given string is even, and a function g() that generates strings until it finds one with an even number of vowels. The assert statement checks if the solution returned by g() satisfies the condition in f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of sets and list comprehensions in Python. It also requires understanding of the modulo operator and while loops. This puzzle can be used to teach Python programming concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    return num ** 2 % 7 == 2\n\ndef g():\n    current_num = 2\n    while True:\n        if current_num ** 2 % 7 == 2:\n            return current_num\n        current_num += 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 5\n        n -= 5 + (n - 5) // 6\n    return n > 0 and n % 6 == 5\n\ndef g():\n    m = 5\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 5:\n                break\n            n -= 5 + (n - 5) // 6\n        if n > 0 and n % 6 == 5:\n            return m\n        m += 6\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    return num ** 2 % 7 == 2",
        "solution_func": "def g():\n    current_num = 2\n    while True:\n        if current_num ** 2 % 7 == 2:\n            return current_num\n        current_num += 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if the square of a given number modulo 7 is equal to 2, and a function g() that iterates through numbers to find the first number whose square modulo 7 is equal to 2. The assertion checks if the solution function g() satisfies the condition of function f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple mathematical condition and requires understanding of modulo operation in Python. It can be used to teach students about function definitions, loops, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return sum(lst) % 3 == 0\n\ndef g():\n    current_list = [1, 2, 3]\n    while True:\n        if sum(current_list) % 3 == 0:\n            return current_list\n        current_list.append(3)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(6):\n        assert n % 6 == 5\n        n -= 5 + (n - 5) // 6\n    return n > 0 and n % 6 == 5\n\ndef g():\n    m = 5\n    while True:\n        n = m\n        for i in range(6):\n            if n % 6 != 5:\n                break\n            n -= 5 + (n - 5) // 6\n        if n > 0 and n % 6 == 5:\n            return m\n        m += 6\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return sum(lst) % 3 == 0",
        "solution_func": "def g():\n    current_list = [1, 2, 3]\n    while True:\n        if sum(current_list) % 3 == 0:\n            return current_list\n        current_list.append(3)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(lst) that checks if the sum of a list is divisible by 3, and a function g() that generates a list and keeps adding the number 3 to it until the sum of the list is divisible by 3. The assert statement checks if the solution g() satisfies the condition of function f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge related to divisibility by 3 and requires understanding of list manipulation and conditional statements in Python. It can be used to teach Python programming concepts to master's students in CS.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(vowel_count: int, sentence=\"Hello, how are you?\") -> bool:\n    return vowel_count == sum(1 for char in sentence if char.lower() in 'aeiou')\n\ndef g(sentence=\"Hello, how are you?\"):\n    return sum(1 for char in sentence if char.lower() in 'aeiou')\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 2, 3, 4, 5, 6]) -> bool:\n    return numbers == sorted(numbers)\n\ndef g(options=[1, 2, 3, 4, 5, 6]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            if list(p) == sorted(p):\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(vowel_count: int, sentence=\"Hello, how are you?\") -> bool:\n    return vowel_count == sum(1 for char in sentence if char.lower() in 'aeiou')",
        "solution_func": "def g(sentence=\"Hello, how are you?\"):\n    return sum(1 for char in sentence if char.lower() in 'aeiou')",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the number of vowels in a given sentence matches a specified count, and a function g that counts the vowels in a sentence. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, string manipulation, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"level\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"level\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. The solution function g() returns the string 'level', which is a palindrome. The assert statement confirms that f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g():\n    return [2, 4, 6, 8, 10]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g():\n    return [2, 4, 6, 8, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if all numbers in a list are even, and a function g() that returns a list of even numbers. The puzzle is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and the concept of even numbers in Python. It tests the student's ability to define functions and apply them correctly.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return all(isinstance(key, int) for key in d.keys())\n\ndef g():\n    return {1: 'one', 2: 'two', 3: 'three'}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and type checking.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, diff=3, start=1) -> bool:\n    sorted_lst = sorted(lst)\n    return all(sorted_lst[i] - sorted_lst[i-1] == diff for i in range(1, len(sorted_lst))) and sorted_lst[0] == start\ndef g(diff=3, start=1):\n    return [start + i * diff for i in range(5)]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return all(isinstance(key, int) for key in d.keys())",
        "solution_func": "def g():\n    return {1: 'one', 2: 'two', 3: 'three'}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary as input and checks if all keys in the dictionary are integers. The solution function g returns a dictionary with integer keys and string values, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking the data type of dictionary keys and understanding how to define a function that validates the keys. It also requires understanding how to create a dictionary with integer keys and string values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(words: str, target=\"Python\", sep=' ') -> bool:\n    return target in words.split(sep)\ndef g(target=\"Python\", sep=' '):\n    return f\"This puzzle involves solving problems using {target} programming language.\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(words: str, target=\"Python\", sep=' ') -> bool:\n    return target in words.split(sep)",
        "solution_func": "def g(target=\"Python\", sep=' '):\n    return f\"This puzzle involves solving problems using {target} programming language.\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the target word 'Python' is present in a string after splitting the string using a specified separator."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding how to use the split method in Python and checking for the presence of a specific word in the resulting list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(numbers: List[int], target=20) -> bool:\n    return sum(numbers) == target\ndef g(target=20):\n    return [2, 4, 6, 8]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations and List Operations.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(numbers: List[int], target=20) -> bool:\n    return sum(numbers) == target",
        "solution_func": "def g(target=20):\n    return [2, 4, 6, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and a target integer, and checks if the sum of the list equals the target. The solution function g returns a specific list of integers that sum up to the target."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as function definition, list manipulation, and conditional statements.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(strings: List[str], target=\"Python\") -> bool:\n    return target in strings\ndef g(target=\"Python\"):\n    return [\"Java\", \"Python\", \"C++\"]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(strings: List[str], target=\"Python\") -> bool:\n    return target in strings",
        "solution_func": "def g(target=\"Python\"):\n    return [\"Java\", \"Python\", \"C++\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a target string is present in a list of strings. The function g returns a list of strings, and the puzzle requires that the target string 'Python' is present in the list returned by g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise that tests the understanding of function calls and list operations in Python. It can be used to introduce students to basic concepts like function return values and list manipulation.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 1 / 4  # Changed condition to 1/4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized approach to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 1) // 4  # Adjusted target value\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 1 / 4:\n            return ans\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise operations and randomization to find a solution that satisfies a specific condition. It also includes concepts of probability and statistics.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized approach to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 1 / 4  # Changed condition to 1/4",
        "solution_func": "def g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized approach to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 1) // 4  # Adjusted target value\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 1 / 4:\n            return ans",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a certain condition is met based on a list of integers, and a function g that uses a randomized approach to find a solution to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations and randomization to find a solution that satisfies the condition in function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, pattern='ABC') -> bool:\n    return text.count(pattern) > 0\ndef g(pattern='ABC'):\n    return pattern * 3\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str, pattern='ABC') -> bool:\n    return text.count(pattern) > 0",
        "solution_func": "def g(pattern='ABC'):\n    return pattern * 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given pattern exists in a text, and a function g that generates the pattern. The goal is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of function composition and string manipulation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict, key='name', value='Alice') -> bool:\n    return key in d and d[key] == value\ndef g(key='name', value='Alice'):\n    return {key: value, 'age': 30}\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and conditional logic.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict, key='name', value='Alice') -> bool:\n    return key in d and d[key] == value",
        "solution_func": "def g(key='name', value='Alice'):\n    return {key: value, 'age': 30}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given key-value pair exists in a dictionary, and another function g that returns a dictionary with the specified key-value pair. The assertion tests if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding dictionary manipulation in Python and checking for key-value pairs. It also tests the concept of function composition and assertion testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(strings: List[str], substring='python') -> bool:\n    return any(substring in s for s in strings)\ndef g(substring='python'):\n    return ['python programming', 'data science', 'machine learning']\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(strings: List[str], substring='python') -> bool:\n    return any(substring in s for s in strings)",
        "solution_func": "def g(substring='python'):\n    return ['python programming', 'data science', 'machine learning']",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that checks if a given substring is present in any of the strings in a list. The solution provides a list of strings and checks if the specified substring is present in any of them."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension and string manipulation in Python. The solution function returns a list of strings and the puzzle function checks if a specific substring is present in any of these strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return lst == lst[::-1]\n\ndef g(string=\"racecar\") -> list:\n    return list(string)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, is_fibonacci=True) -> bool:\n    if len(lst) < 3:\n        return False\n    for i in range(2, len(lst)):\n        if lst[i] != lst[i-1] + lst[i-2]:\n            return False\n    return True\n\ndef g(limit=10):\n    fib = [0, 1]\n    while fib[-1] + fib[-2] <= limit:\n        fib.append(fib[-1] + fib[-2])\n    return fib\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return lst == lst[::-1]",
        "solution_func": "def g(string=\"racecar\") -> list:\n    return list(string)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by converting it to a list and comparing it with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a given list is a palindrome and then providing a solution function that converts a string to a list. The solution function is expected to return a palindrome list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(lst: list) -> bool:\n    return len(lst) != len(set(lst))\n\ndef g(size=10) -> list:\n    return [random.randint(1, size) for _ in range(size)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "The puzzle involves checking for duplicates in a list of numbers generated randomly.",
        "idx_generation": 76,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, is_fibonacci=True) -> bool:\n    if len(lst) < 3:\n        return False\n    for i in range(2, len(lst)):\n        if lst[i] != lst[i-1] + lst[i-2]:\n            return False\n    return True\n\ndef g(limit=10):\n    fib = [0, 1]\n    while fib[-1] + fib[-2] <= limit:\n        fib.append(fib[-1] + fib[-2])\n    return fib\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(lst: list) -> bool:\n    return len(lst) != len(set(lst))",
        "solution_func": "def g(size=10) -> list:\n    return [random.randint(1, size) for _ in range(size)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a list of random integers and checking if there are any duplicates in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand list manipulation, set operations, and random number generation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(numbers: list) -> bool:\n    return numbers == sorted(numbers)\n\ndef g():\n    # generate random lists of numbers\n    while True:\n        numbers = random.sample(range(1, 100), random.randint(1, 10))\n        if numbers == sorted(numbers):\n            return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers and generating random lists until a sorted list is obtained. This involves concepts of sorting and random number generation.",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(numbers: list, threshold=50) -> bool:\n    return any(num > threshold for num in numbers)\n\ndef g(threshold=50):\n    # generate random lists of numbers\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(random.randint(1, 10))]\n        if any(num > threshold for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(numbers: list) -> bool:\n    return numbers == sorted(numbers)",
        "solution_func": "def g():\n    # generate random lists of numbers\n    while True:\n        numbers = random.sample(range(1, 100), random.randint(1, 10))\n        if numbers == sorted(numbers):\n            return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating random lists of numbers and checking if the list is sorted. The solution function generates random lists until it finds a sorted list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a randomly generated list of numbers is sorted. The solution function generates random lists until it finds a sorted list, satisfying the condition of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g():\n    # generate random strings\n    while True:\n        text = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10)))\n        if text == text[::-1]:\n            return text\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and random generation of strings to check for palindromes.",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(numbers: list, threshold=50) -> bool:\n    return any(num > threshold for num in numbers)\n\ndef g(threshold=50):\n    # generate random lists of numbers\n    while True:\n        numbers = [random.randint(1, 100) for _ in range(random.randint(1, 10))]\n        if any(num > threshold for num in numbers):\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    # generate random strings\n    while True:\n        text = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10)))\n        if text == text[::-1]:\n            return text",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(text: str) that checks if a given text is a palindrome, and a function g() that generates random strings until it finds a palindrome. The assert statement checks if the generated palindrome string satisfies the condition of being a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for palindromes in Python using string manipulation and random string generation. It also tests the understanding of function definitions and assertions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], target=15) -> bool:\n    seen = set()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\n\ndef g(target=15) -> List[int]:\n    return [3, 5, 7]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assert statement checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g(nums=[4, 9, 2, 6, 1, 8, 5, 3, 7]):\n    return sorted(nums, reverse=True)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in reverse order and checking if the sorted list is in non-decreasing order. This involves concepts of sorting and ordering (14) and conditional logic (2).",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # simulated annealing\n    import random\n    import math\n\n    def fitness(individual, vecs):\n        return sum(sum(v[i] for i in individual) % 2 for v in vecs)\n\n    def neighbor(current, d):\n        new = current[:]\n        index = random.randint(0, d - 1)\n        if index in new:\n            new.remove(index)\n        else:\n            new.append(index)\n        return new\n\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    current_solution = [i for i in range(d) if random.random() > 0.5]\n    temperature = 1.0\n    cooling_rate = 0.0001\n\n    while temperature > 0.0001:\n        new_solution = neighbor(current_solution, d)\n        current_fitness = fitness(current_solution, vecs)\n        new_fitness = fitness(new_solution, vecs)\n\n        if new_fitness >= current_fitness or random.random() < math.exp((new_fitness - current_fitness) / temperature):\n            current_solution = new_solution\n\n        temperature *= 1 - cooling_rate\n\n    return current_solution\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g(nums=[4, 9, 2, 6, 1, 8, 5, 3, 7]):\n    return sorted(nums, reverse=True)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that checks if a list of numbers is sorted in non-increasing order. The solution function generates a sorted list in non-increasing order and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and comparison operations in Python. The solution function uses the sorted() function with reverse=True to sort the list in non-increasing order.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 4\n        n -= 4 + (n - 4) // 5\n    return n > 0 and n % 5 == 4\n\ndef g():\n    m = 4\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 4:\n                break\n            n -= 4 + (n - 4) // 5\n        if n > 0 and n % 5 == 4:\n            return m\n        m += 5\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Backtracking, Mathematical Operations",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(7):\n        assert n % 7 == 6\n        n -= 6 + (n - 6) // 7\n    return n > 0 and n % 7 == 6\n\ndef g():\n    m = 6\n    while True:\n        n = m\n        for i in range(7):\n            if n % 7 != 6:\n                break\n            n -= 6 + (n - 6) // 7\n        if n > 0 and n % 7 == 6:\n            return m\n        m += 7\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 4\n        n -= 4 + (n - 4) // 5\n    return n > 0 and n % 5 == 4",
        "solution_func": "def g():\n    m = 4\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 4:\n                break\n            n -= 4 + (n - 4) // 5\n        if n > 0 and n % 5 == 4:\n            return m\n        m += 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(n) and g(), where f checks a specific condition on an input integer n using a loop, and g generates integers until it finds one that satisfies the condition checked by f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop and condition checking to find an integer that meets a specific criteria. It can be used to teach students about loops, conditions, and function interactions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(x: int) -> bool:\n    for i in range(6):\n        assert x % 6 == 5\n        x -= 5 + (x - 5) // 6\n    return x > 0 and x % 6 == 5\n\ndef g():\n    y = 5\n    while True:\n        x = y\n        for i in range(6):\n            if x % 6 != 5:\n                break\n            x -= 5 + (x - 5) // 6\n        if x > 0 and x % 6 == 5:\n            return y\n        y += 6\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Backtracking, Number Theory",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(7):\n        assert n % 7 == 6\n        n -= 6 + (n - 6) // 7\n    return n > 0 and n % 7 == 6\n\ndef g():\n    m = 6\n    while True:\n        n = m\n        for i in range(7):\n            if n % 7 != 6:\n                break\n            n -= 6 + (n - 6) // 7\n        if n > 0 and n % 7 == 6:\n            return m\n        m += 7\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(x: int) -> bool:\n    for i in range(6):\n        assert x % 6 == 5\n        x -= 5 + (x - 5) // 6\n    return x > 0 and x % 6 == 5",
        "solution_func": "def g():\n    y = 5\n    while True:\n        x = y\n        for i in range(6):\n            if x % 6 != 5:\n                break\n            x -= 5 + (x - 5) // 6\n        if x > 0 and x % 6 == 5:\n            return y\n        y += 6",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(x) and g(), where f(x) checks a specific condition on an input integer x using a loop, and g() iterates through integers to find a value that satisfies the condition checked by f(x). The goal is to find an integer that meets the condition specified in f(x) after applying a series of calculations in g()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop and condition checking, which can be a good exercise for students to understand algorithmic challenges and iterative processes in Python. It also requires understanding of arithmetic operations and loop control.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(z: int) -> bool:\n    for i in range(8):\n        assert z % 8 == 7\n        z -= 7 + (z - 7) // 8\n    return z > 0 and z % 8 == 7\n\ndef g():\n    w = 7\n    while True:\n        z = w\n        for i in range(8):\n            if z % 8 != 7:\n                break\n            z -= 7 + (z - 7) // 8\n        if z > 0 and z % 8 == 7:\n            return w\n        w += 8\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic, loops, and mathematical operations.",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(n: int) -> bool:\n    for i in range(7):\n        assert n % 7 == 6\n        n -= 6 + (n - 6) // 7\n    return n > 0 and n % 7 == 6\n\ndef g():\n    m = 6\n    while True:\n        n = m\n        for i in range(7):\n            if n % 7 != 6:\n                break\n            n -= 6 + (n - 6) // 7\n        if n > 0 and n % 7 == 6:\n            return m\n        m += 7\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(z: int) -> bool:\n    for i in range(8):\n        assert z % 8 == 7\n        z -= 7 + (z - 7) // 8\n    return z > 0 and z % 8 == 7",
        "solution_func": "def g():\n    w = 7\n    while True:\n        z = w\n        for i in range(8):\n            if z % 8 != 7:\n                break\n            z -= 7 + (z - 7) // 8\n        if z > 0 and z % 8 == 7:\n            return w\n        w += 8",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(z) and g(), where f(z) checks a specific condition on an input integer z and g() iterates through integers to find one that satisfies the condition checked by f(z)."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a loop that iterates through integers and checks a specific condition on each integer. The solution function g() iterates through integers until it finds one that satisfies the condition checked by f(z).",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(max_product: int, nums=[0]) -> bool:\n    return max_product == max(nums) ** 2\n\ndef g(nums=[0]) -> int:\n    return max(nums) * max(nums)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom math import isqrt\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    return sum(subsequence) == next(num for num in nums if isqrt(num) ** 3 == num)\n\ndef g(nums=[0]) -> List[int]:\n    cubes = [num for num in nums if isqrt(num) ** 3 == num]\n    return [sum(cubes)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(max_product: int, nums=[0]) -> bool:\n    return max_product == max(nums) ** 2",
        "solution_func": "def g(nums=[0]) -> int:\n    return max(nums) * max(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f and g, where f checks if the maximum product of a list of numbers is equal to the square of the maximum number in the list, and g calculates the square of the maximum number in the list. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation and comparison operations in Python. It tests the understanding of functions, list operations, and comparison logic.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word) -> bool:\n    return word == word[::-1]\n\ndef g(word=\"radar\"):\n    return word\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation by checking if a word is a palindrome.",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(number=17):\n    return number\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g(word=\"radar\"):\n    return word",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that returns True if the word is a palindrome (reads the same forwards and backwards), and a function g(word) that returns the word 'radar' by default. The puzzle asserts that f(g()) should return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(n=5):\n    return \"a\" * n + \"b\" + \"a\" * n\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(x: List[int], n=100, s=5050) -> bool:\n    return len(x) == n and sum(x) == s and all(num > 0 for num in x)\ndef g(n=100, s=5050):\n    x = [i for i in range(1, n)]\n    x.append(s - sum(x))\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(n=5):\n    return \"a\" * n + \"b\" + \"a\" * n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a string generated by repeating 'a' n times, adding 'b', and then repeating 'a' n times is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a given string is a palindrome and another function to generate a specific string pattern. The assertion tests if the generated string satisfies the palindrome condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return str(n) == str(n)[::-1]\n\ndef g():\n    n = 999\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n -= 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 77,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    if digit_sum <= 1:\n        return False\n    for i in range(2, int(math.sqrt(digit_sum)) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 9876\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        if digit_sum <= 1:\n            n -= 1\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(digit_sum)) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n -= 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return str(n) == str(n)[::-1]",
        "solution_func": "def g():\n    n = 999\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n -= 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given integer is a palindrome, and a function g() that finds the largest palindrome number less than or equal to 999. The puzzle requires g() to return the largest palindrome number less than or equal to 999."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for palindromic numbers and implementing a loop to find the largest palindrome number. It tests the student's knowledge of string manipulation and looping in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return string == string[::-1]\n\ndef g(input_string=\"racecar\"):\n    return input_string[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subset: List[int], target_sum=10) -> bool:\n    return any(sum(sub) == target_sum for sub in subset)\n\ndef g(int_list=[2, 4, 6, 8]):\n    def generate_subsets(nums):\n        result = [[]]\n        for num in nums:\n            result += [x + [num] for x in result]\n        return result\n\n    return [sub for sub in generate_subsets(int_list) if sub]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return string == string[::-1]",
        "solution_func": "def g(input_string=\"racecar\"):\n    return input_string[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given input string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines two functions, f(string: str) -> bool which checks if a string is a palindrome, and g(input_string='racecar') which returns the reverse of the input string. The assert statement checks if the reverse of the default input string 'racecar' is a palindrome or not.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] < numbers[i+1] for i in range(len(numbers)-1))\n\ndef g(num_list=[1, 3, 5, 7, 9]):\n    return [(num_list[i], num_list[i+1]) for i in range(len(num_list)-1)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking if the elements are in ascending order.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subset: List[int], target_sum=10) -> bool:\n    return any(sum(sub) == target_sum for sub in subset)\n\ndef g(int_list=[2, 4, 6, 8]):\n    def generate_subsets(nums):\n        result = [[]]\n        for num in nums:\n            result += [x + [num] for x in result]\n        return result\n\n    return [sub for sub in generate_subsets(int_list) if sub]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return all(numbers[i] < numbers[i+1] for i in range(len(numbers)-1))",
        "solution_func": "def g(num_list=[1, 3, 5, 7, 9]):\n    return [(num_list[i], num_list[i+1]) for i in range(len(num_list)-1)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers is in strictly increasing order, and the solution involves generating pairs of adjacent numbers in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list comprehension and the all() function in Python. The solution uses list comprehension to generate pairs of adjacent numbers in the list.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check if a word is a palindrome.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(word) that checks if the input word is a palindrome. The solution function g() returns the word 'radar', and the puzzle asserts that f(g()) should return True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\ndef f(tuples_list: List[Tuple[int, str]]) -> bool:\n    return len(set(tuple[1] for tuple in tuples_list)) == len(tuples_list)\ndef g():\n    return [(1, 'apple'), (2, 'banana'), (3, 'orange'), (4, 'kiwi')]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves working with lists, tuples, sets, and checking for uniqueness of elements based on a specific index in the tuples. It also includes assertion testing for correctness.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List, Tuple\ndef f(tuples_list: List[Tuple[int, str]]) -> bool:\n    return len(set(tuple[1] for tuple in tuples_list)) == len(tuples_list)",
        "solution_func": "def g():\n    return [(1, 'apple'), (2, 'banana'), (3, 'orange'), (4, 'kiwi')]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of tuples as input and checks if the number of unique second elements in the tuples is equal to the total number of tuples in the list. The solution function g returns a list of tuples with unique second elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, set operations, and tuple manipulation in Python. It tests the student's ability to work with lists and tuples effectively.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(lst: list) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    length = len(lst)\n    return is_perfect_square(length)\n\ndef g():\n    perfect_squares = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    for num in perfect_squares:\n        unique_elements = [i for i in range(1, num+1)]\n        return unique_elements\n\ndef is_perfect_square(num):\n    return math.isqrt(num)**2 == num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Permutations and Combinations, Number Theory",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(s: str) -> bool:\n    if s != s[::-1]:\n        return False\n    length = len(s)\n    return is_prime(length)\n\ndef g():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for prime in primes:\n        if prime > 1 and prime <= 100:\n            palindrome = str(prime) + str(prime)[::-1]\n            return palindrome\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(lst: list) -> bool:\n    if len(lst) != len(set(lst)):\n        return False\n    length = len(lst)\n    return is_perfect_square(length)",
        "solution_func": "def g():\n    perfect_squares = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    for num in perfect_squares:\n        unique_elements = [i for i in range(1, num+1)]\n        return unique_elements\n\ndef is_perfect_square(num):\n    return math.isqrt(num)**2 == num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given list contains only unique elements and has a length that is a perfect square."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for unique elements in a list and then determining if the length of the list is a perfect square.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int, target=10) -> bool:\n    return sum(total) == target\n\ndef g(numbers=[2, 3, 5]):\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(word: str, anagram='silent') -> bool:\n    return sorted(word) == sorted(anagram)\n\ndef g(anagram='silent'):\n    return anagram\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(total: int, target=10) -> bool:\n    return sum(total) == target",
        "solution_func": "def g(numbers=[2, 3, 5]):\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the sum of a list of numbers is equal to a target value, and a function g that returns a list of numbers. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, default arguments, and function calls in Python. It also requires understanding how to use the sum function and compare values for equality.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(sentence: str, word='Python') -> bool:\n    return word in sentence\n\ndef g(sentence='I love Python'):\n    return sentence\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(word: str, anagram='silent') -> bool:\n    return sorted(word) == sorted(anagram)\n\ndef g(anagram='silent'):\n    return anagram\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(sentence: str, word='Python') -> bool:\n    return word in sentence",
        "solution_func": "def g(sentence='I love Python'):\n    return sentence",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a given word is present in a sentence, and a function g that returns a default sentence. The goal is to ensure that the word 'Python' is present in the sentence returned by function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in function definition and function call in Python. It tests the understanding of default function arguments and function return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(number: int) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef g(prime=17):\n    return prime\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves Number Theory (primality testing) and Mathematical Operations (square root calculation).",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(word: str, anagram='silent') -> bool:\n    return sorted(word) == sorted(anagram)\n\ndef g(anagram='silent'):\n    return anagram\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(number: int) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True",
        "solution_func": "def g(prime=17):\n    return prime",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(number) that checks if a given number is prime or not, and a function g(prime) that returns a specified prime number. The assertion checks if the output of f(g()) is True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(combinations: List[str], char_list=['x', 'y', 'z'], length=2) -> bool:\n    return all((len(comb) == length for comb in combinations))\ndef g(char_list=['x', 'y', 'z'], length=2):\n    from itertools import combinations\n    return [''.join(comb) for comb in combinations(char_list, length)]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves permutations and combinations using itertools module in Python.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(permutations: List[str], char_list=['a', 'b', 'c'], length=3) -> bool:\n    return len(permutations) == len(set(permutations)) >= len(char_list) and all((len(perm) == length for perm in permutations))\ndef g(char_list=['a', 'b', 'c'], length=3):\n    from itertools import permutations\n    return [''.join(perm) for perm in permutations(char_list, length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List \ndef f(combinations: List[str], char_list=['x', 'y', 'z'], length=2) -> bool:\n    return all((len(comb) == length for comb in combinations))",
        "solution_func": "def g(char_list=['x', 'y', 'z'], length=2):\n    from itertools import combinations\n    return [''.join(comb) for comb in combinations(char_list, length)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate all possible combinations of characters from a given list and check if each combination has a specific length."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the itertools module to generate combinations of characters and then checking if each combination has the specified length.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(subsets: List[List[int]], num_list=[1, 2, 3, 4], target=5) -> bool:\n    return any(sum(subset) == target for subset in subsets)\ndef g(num_list=[1, 2, 3, 4], target=5):\n    from itertools import chain, combinations\n    return [list(subset) for subset in chain.from_iterable(combinations(num_list, r) for r in range(len(num_list)+1))]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, Itertools, Combinations, and Assertion Testing.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(permutations: List[str], char_list=['a', 'b', 'c'], length=3) -> bool:\n    return len(permutations) == len(set(permutations)) >= len(char_list) and all((len(perm) == length for perm in permutations))\ndef g(char_list=['a', 'b', 'c'], length=3):\n    from itertools import permutations\n    return [''.join(perm) for perm in permutations(char_list, length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List \ndef f(subsets: List[List[int]], num_list=[1, 2, 3, 4], target=5) -> bool:\n    return any(sum(subset) == target for subset in subsets)",
        "solution_func": "def g(num_list=[1, 2, 3, 4], target=5):\n    from itertools import chain, combinations\n    return [list(subset) for subset in chain.from_iterable(combinations(num_list, r) for r in range(len(num_list)+1))]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if any subset of a given list of numbers sums up to a target value. The solution function g generates all possible subsets of the list of numbers and checks if any of them sum up to the target value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with list manipulation, itertools, and understanding how to check for subsets that sum up to a target value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(permutations: List[List[int]], num_list=[1, 2, 3]) -> bool:\n    return all(permutations[i] < permutations[i + 1] for i in range(len(permutations) - 1))\ndef g(num_list=[1, 2, 3]):\n    from itertools import permutations\n    return [list(perm) for perm in permutations(num_list)]\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Permutations and Combinations, Importing Modules (Itertools, etc.)",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(permutations: List[str], char_list=['a', 'b', 'c'], length=3) -> bool:\n    return len(permutations) == len(set(permutations)) >= len(char_list) and all((len(perm) == length for perm in permutations))\ndef g(char_list=['a', 'b', 'c'], length=3):\n    from itertools import permutations\n    return [''.join(perm) for perm in permutations(char_list, length)]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List \ndef f(permutations: List[List[int]], num_list=[1, 2, 3]) -> bool:\n    return all(permutations[i] < permutations[i + 1] for i in range(len(permutations) - 1))",
        "solution_func": "def g(num_list=[1, 2, 3]):\n    from itertools import permutations\n    return [list(perm) for perm in permutations(num_list)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate all permutations of a given list of numbers and check if each permutation is in ascending order."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the itertools module to generate permutations of a list of numbers and then checking if each permutation is in ascending order. The solution function g() generates all permutations of the given list and the puzzle function f() checks if each permutation is in ascending order.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return 'banana' in d\n\ndef g() -> dict:\n    return {'apple': 5, 'banana': 3, 'cherry': 2}\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation and checking for a specific key in the dictionary.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return 'apple' in d\n\ndef g() -> dict:\n    return {'apple': 5, 'banana': 3, 'cherry': 2}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return 'banana' in d",
        "solution_func": "def g() -> dict:\n    return {'apple': 5, 'banana': 3, 'cherry': 2}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if the key 'banana' exists in a dictionary returned by a function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks for the presence of a specific key in a dictionary and then asserting that the key exists in the dictionary returned by another function.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(d: dict) -> bool:\n    return 'cherry' in d\n\ndef g() -> dict:\n    return {'apple': 5, 'banana': 3, 'cherry': 2}\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and checking for a specific key in the dictionary.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(d: dict) -> bool:\n    return 'apple' in d\n\ndef g() -> dict:\n    return {'apple': 5, 'banana': 3, 'cherry': 2}\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(d: dict) -> bool:\n    return 'cherry' in d",
        "solution_func": "def g() -> dict:\n    return {'apple': 5, 'banana': 3, 'cherry': 2}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if the key 'cherry' exists in a dictionary returned by the function g()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for the presence of a specific key in a dictionary.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst) and len(lst) == len(set(lst))\n\ndef g():\n    n = [2, 4, 6, 8]\n    while True:\n        if all(num % 2 == 0 for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 2)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even and if the list has unique elements. It also involves generating a list of even numbers.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    n = [1, 2, 3, 4]\n    while True:\n        if len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst) and len(lst) == len(set(lst))",
        "solution_func": "def g():\n    n = [2, 4, 6, 8]\n    while True:\n        if all(num % 2 == 0 for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 2)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a list of even numbers that are unique, and the solution generates such a list iteratively."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list contains only even numbers that are unique. The solution iteratively generates a list of even numbers that meet these criteria.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return len(set(strings)) == len(strings)\n\ndef g(n: int = 5, length: int = 3) -> List[str]:\n    import random\n    import string\n    return [''.join(random.choices(string.ascii_lowercase, k=length)) for _ in range(n)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return len(set(tuples)) == len(tuples)\n\ndef g(n: int = 5) -> List[Tuple[int, int]]:\n    import random\n    return list(set((random.randint(1, 10), random.randint(1, 10)) for _ in range(n)))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return len(set(strings)) == len(strings)",
        "solution_func": "def g(n: int = 5, length: int = 3) -> List[str]:\n    import random\n    import string\n    return [''.join(random.choices(string.ascii_lowercase, k=length)) for _ in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a list of strings contains only unique elements, and a function g that generates a list of random strings. The assertion checks if f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of list manipulation, set operations, random generation, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[float], threshold: float = 10.0) -> bool:\n    return sum(numbers) > threshold\n\ndef g(n: int = 5) -> List[float]:\n    import random\n    return [random.uniform(1.0, 5.0) for _ in range(n)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, List Operations, Importing Modules, and Assertion Testing.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]]) -> bool:\n    return len(set(tuples)) == len(tuples)\n\ndef g(n: int = 5) -> List[Tuple[int, int]]:\n    import random\n    return list(set((random.randint(1, 10), random.randint(1, 10)) for _ in range(n)))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[float], threshold: float = 10.0) -> bool:\n    return sum(numbers) > threshold",
        "solution_func": "def g(n: int = 5) -> List[float]:\n    import random\n    return [random.uniform(1.0, 5.0) for _ in range(n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random floating-point numbers and check if the sum of these numbers is greater than a specified threshold."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, random number generation, and function calls to check a condition based on the generated list of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int, n=5) -> bool:\n    return factorial == 120\n\ndef g(n=5):\n    def recursive_factorial(n):\n        if n == 0:\n            return 1\n        return n * recursive_factorial(n - 1)\n\n    return recursive_factorial(n)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion and mathematical operations to calculate the factorial of a number.",
        "idx_generation": 78,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(factorial: int, n=5) -> bool:\n    return factorial == 120",
        "solution_func": "def g(n=5):\n    def recursive_factorial(n):\n        if n == 0:\n            return 1\n        return n * recursive_factorial(n - 1)\n\n    return recursive_factorial(n)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function to check if the factorial of a given number is equal to 120, and then providing a solution function that calculates the factorial recursively and checks it against 120."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of factorial calculation and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(lst: list, value=7) -> bool:\n    return value in lst\n\ndef g(value=7):\n    # generate random lists\n    while True:\n        lst = [random.randint(1, 10) for _ in range(random.randint(1, 10))]\n        if value in lst:\n            return lst\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves random list generation and checking for a specific value in the list.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(dictionary: dict, value=42) -> bool:\n    return any(val == value for val in dictionary.values())\n\ndef g(value=42):\n    # generate random dictionaries\n    while True:\n        dictionary = {key: random.randint(1, 100) for key in range(1, random.randint(1, 10))}\n        if any(val == value for val in dictionary.values()):\n            return dictionary\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(lst: list, value=7) -> bool:\n    return value in lst",
        "solution_func": "def g(value=7):\n    # generate random lists\n    while True:\n        lst = [random.randint(1, 10) for _ in range(random.randint(1, 10))]\n        if value in lst:\n            return lst",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that generates random lists of integers and checks if a specified value is present in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list generation, random number generation, and checking for a specific value in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(string: str, char=\"a\") -> bool:\n    return char in string\n\ndef g(char=\"a\"):\n    # generate random strings\n    while True:\n        length = random.randint(1, 10)\n        string = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(length))\n        if char in string:\n            return string\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and random generation of strings. It also includes conditional logic and assertion testing.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(dictionary: dict, value=42) -> bool:\n    return any(val == value for val in dictionary.values())\n\ndef g(value=42):\n    # generate random dictionaries\n    while True:\n        dictionary = {key: random.randint(1, 100) for key in range(1, random.randint(1, 10))}\n        if any(val == value for val in dictionary.values()):\n            return dictionary\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(string: str, char=\"a\") -> bool:\n    return char in string",
        "solution_func": "def g(char=\"a\"):\n    # generate random strings\n    while True:\n        length = random.randint(1, 10)\n        string = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(length))\n        if char in string:\n            return string",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to implement a function that generates random strings and checks if a specified character is present in the generated string. The solution function generates random strings until it finds a string that contains the specified character, and then returns that string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, random generation, and function implementation in Python. It also tests the concept of function composition and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(integers: List[int], target_sum=10) -> bool:\n    return any(sum(comb) == target_sum for r in range(len(integers) + 1) for comb in combinations(integers, r))\n\ndef g(int_list=[4, 5, 6]):\n    return int_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Permutations and Combinations, Importing Modules (Itertools, etc.)",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\ndef f(subsets: List[List[int]], target_sum=5) -> bool:\n    return any(sum(subset) == target_sum for subset in subsets)\ndef g(int_list=[1, 2, 3]):\n    def powerset(s):\n        result = [[]]\n        for elem in s:\n            result += [x + [elem] for x in result]\n        return result\n\n    return [subset for subset in powerset(int_list) if subset != []]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import combinations\n\ndef f(integers: List[int], target_sum=10) -> bool:\n    return any(sum(comb) == target_sum for r in range(len(integers) + 1) for comb in combinations(integers, r))",
        "solution_func": "def g(int_list=[4, 5, 6]):\n    return int_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a combination of integers from a given list that adds up to a target sum of 10."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the itertools module to generate combinations of integers from a list and checking if any combination sums up to the target sum of 10.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(integers: List[int], target_sum=15) -> bool:\n    return any(sum(comb) == target_sum for r in range(len(integers) + 1) for comb in combinations(integers, r))\n\ndef g(int_list=[3, 7, 8]):\n    return int_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Permutations and Combinations as it uses the itertools combinations function to generate all possible combinations of integers. It also involves Mathematical Operations as it checks if the sum of any combination of integers is equal to a target sum.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\ndef f(subsets: List[List[int]], target_sum=5) -> bool:\n    return any(sum(subset) == target_sum for subset in subsets)\ndef g(int_list=[1, 2, 3]):\n    def powerset(s):\n        result = [[]]\n        for elem in s:\n            result += [x + [elem] for x in result]\n        return result\n\n    return [subset for subset in powerset(int_list) if subset != []]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import combinations\n\ndef f(integers: List[int], target_sum=15) -> bool:\n    return any(sum(comb) == target_sum for r in range(len(integers) + 1) for comb in combinations(integers, r))",
        "solution_func": "def g(int_list=[3, 7, 8]):\n    return int_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a combination of integers from a given list that adds up to a target sum of 15."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the itertools combinations function to generate all possible combinations of integers from the input list and checking if any of these combinations sum up to the target sum of 15.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(arr: List[int], d=3) -> bool:\n    return all(arr[i] - arr[i-1] == d for i in range(2, len(arr)))\n\ndef g(d=3):\n    arr = [1, 2]\n    for i in range(2, 10):\n        arr.append(arr[i-1] + d)\n    return arr\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list manipulation, and conditional logic.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(x: List[int], n=175, s=30000000) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 175, s = 30000000):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(arr: List[int], d=3) -> bool:\n    return all(arr[i] - arr[i-1] == d for i in range(2, len(arr)))",
        "solution_func": "def g(d=3):\n    arr = [1, 2]\n    for i in range(2, 10):\n        arr.append(arr[i-1] + d)\n    return arr",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the elements in a list follow a specific arithmetic progression with a given difference. The solution function g generates a list based on a specified difference value and checks if it satisfies the arithmetic progression condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, arithmetic progression, and function definition in Python. It provides a practical application of these concepts in a programming challenge.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_sum: int, nums=[3, 2, 7, 10, 4, 5]) -> bool:\n    n = len(nums)\n    incl = 0\n    excl = 0\n\n    for i in range(n):\n        new_excl = max(incl, excl)\n        incl = excl + nums[i]\n        excl = new_excl\n\n    return max(incl, excl) == max_sum\n\ndef g(nums=[3, 2, 7, 10, 4, 5]):\n    def max_sum_non_adjacent(nums):\n        incl = 0\n        excl = 0\n\n        for n in nums:\n            new_excl = max(incl, excl)\n            incl = excl + n\n            excl = new_excl\n\n        return max(incl, excl)\n\n    return max_sum_non_adjacent(nums)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "Dynamic Programming, Algorithm Optimization",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # simulated annealing\n    import random\n    import math\n\n    def fitness(individual, vecs):\n        return sum(sum(v[i] for i in individual) % 2 for v in vecs)\n\n    def neighbor(current, d):\n        new = current[:]\n        index = random.randint(0, d - 1)\n        if index in new:\n            new.remove(index)\n        else:\n            new.append(index)\n        return new\n\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    current_solution = [i for i in range(d) if random.random() > 0.5]\n    temperature = 1.0\n    cooling_rate = 0.0001\n\n    while temperature > 0.0001:\n        new_solution = neighbor(current_solution, d)\n        current_fitness = fitness(current_solution, vecs)\n        new_fitness = fitness(new_solution, vecs)\n\n        if new_fitness >= current_fitness or random.random() < math.exp((new_fitness - current_fitness) / temperature):\n            current_solution = new_solution\n\n        temperature *= 1 - cooling_rate\n\n    return current_solution\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(max_sum: int, nums=[3, 2, 7, 10, 4, 5]) -> bool:\n    n = len(nums)\n    incl = 0\n    excl = 0\n\n    for i in range(n):\n        new_excl = max(incl, excl)\n        incl = excl + nums[i]\n        excl = new_excl\n\n    return max(incl, excl) == max_sum",
        "solution_func": "def g(nums=[3, 2, 7, 10, 4, 5]):\n    def max_sum_non_adjacent(nums):\n        incl = 0\n        excl = 0\n\n        for n in nums:\n            new_excl = max(incl, excl)\n            incl = excl + n\n            excl = new_excl\n\n        return max(incl, excl)\n\n    return max_sum_non_adjacent(nums)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding the maximum sum of non-adjacent elements in a list of numbers using dynamic programming."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding dynamic programming concepts to find the maximum sum of non-adjacent elements in a list of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(prefix: str, strs=[\"flower\", \"flow\", \"flight\"]) -> bool:\n    if not strs:\n        return prefix == \"\"\n\n    min_len = min(len(s) for s in strs)\n    for i in range(min_len):\n        char = strs[0][i]\n        if any(s[i] != char for s in strs):\n            return prefix == strs[0][:i]\n\n    return prefix == strs[0][:min_len]\n\ndef g(strs=[\"flower\", \"flow\", \"flight\"]):\n    def longest_common_prefix(strs):\n        if not strs:\n            return \"\"\n\n        min_len = min(len(s) for s in strs)\n        for i in range(min_len):\n            char = strs[0][i]\n            if any(s[i] != char for s in strs):\n                return strs[0][:i]\n\n        return strs[0][:min_len]\n\n    return longest_common_prefix(strs)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation, Conditional Logic",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # simulated annealing\n    import random\n    import math\n\n    def fitness(individual, vecs):\n        return sum(sum(v[i] for i in individual) % 2 for v in vecs)\n\n    def neighbor(current, d):\n        new = current[:]\n        index = random.randint(0, d - 1)\n        if index in new:\n            new.remove(index)\n        else:\n            new.append(index)\n        return new\n\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    current_solution = [i for i in range(d) if random.random() > 0.5]\n    temperature = 1.0\n    cooling_rate = 0.0001\n\n    while temperature > 0.0001:\n        new_solution = neighbor(current_solution, d)\n        current_fitness = fitness(current_solution, vecs)\n        new_fitness = fitness(new_solution, vecs)\n\n        if new_fitness >= current_fitness or random.random() < math.exp((new_fitness - current_fitness) / temperature):\n            current_solution = new_solution\n\n        temperature *= 1 - cooling_rate\n\n    return current_solution\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(prefix: str, strs=[\"flower\", \"flow\", \"flight\"]) -> bool:\n    if not strs:\n        return prefix == \"\"\n\n    min_len = min(len(s) for s in strs)\n    for i in range(min_len):\n        char = strs[0][i]\n        if any(s[i] != char for s in strs):\n            return prefix == strs[0][:i]\n\n    return prefix == strs[0][:min_len]",
        "solution_func": "def g(strs=[\"flower\", \"flow\", \"flight\"]):\n    def longest_common_prefix(strs):\n        if not strs:\n            return \"\"\n\n        min_len = min(len(s) for s in strs)\n        for i in range(min_len):\n            char = strs[0][i]\n            if any(s[i] != char for s in strs):\n                return strs[0][:i]\n\n        return strs[0][:min_len]\n\n    return longest_common_prefix(strs)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions in Python, f and g, where f checks if a given prefix is the longest common prefix among a list of strings, and g finds the longest common prefix among a list of strings. The puzzle tests the correctness of the g function by asserting that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of common prefixes. It tests the student's ability to define functions, handle string comparisons, and understand the concept of common prefixes in strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], options=[5, 10, 15, 20], total_sum=50) -> bool:\n    return all(num in options for num in numbers) and sum(numbers) == total_sum\n\ndef g(options=[5, 10, 15, 20], total_sum=50):\n    return options\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and checking conditions based on the elements in the list.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], options=[5, 10, 15, 20], total_sum=50) -> bool:\n    return all(num in options for num in numbers) and sum(numbers) == total_sum",
        "solution_func": "def g(options=[5, 10, 15, 20], total_sum=50):\n    return options",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers, a list of options, and a total sum as input. The function checks if all numbers in the input list are present in the options list and if the sum of the numbers equals the total sum. The solution function g returns the options list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all numbers in a list are present in another list and if the sum of the numbers equals a specified total sum. The solution function simply returns the options list, which satisfies the conditions of the puzzle.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome: str, text='') -> bool:\n    return palindrome == palindrome[::-1]\n\ndef g(text=''):\n    n = len(text)\n    dp = [[False] * n for _ in range(n)]\n    start = 0\n    max_length = 1\n    for i in range(n):\n        dp[i][i] = True\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if length == 2 and text[i] == text[j]:\n                dp[i][j] = True\n                start = i\n                max_length = length\n            elif text[i] == text[j] and dp[i + 1][j - 1]:\n                dp[i][j] = True\n                start = i\n                max_length = length\n    return text[start:start + max_length]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and dynamic programming to find the longest palindrome substring in a given string.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] > subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] <= nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] >= nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(palindrome: str, text='') -> bool:\n    return palindrome == palindrome[::-1]",
        "solution_func": "def g(text=''):\n    n = len(text)\n    dp = [[False] * n for _ in range(n)]\n    start = 0\n    max_length = 1\n    for i in range(n):\n        dp[i][i] = True\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if length == 2 and text[i] == text[j]:\n                dp[i][j] = True\n                start = i\n                max_length = length\n            elif text[i] == text[j] and dp[i + 1][j - 1]:\n                dp[i][j] = True\n                start = i\n                max_length = length\n    return text[start:start + max_length]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome and finding the longest palindromic substring within the string using dynamic programming."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of palindrome checking and dynamic programming to find the longest palindromic substring in a given string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport re\n\ndef f(text: str) -> bool:\n    return text.isalnum()\n\ndef g():\n    return \"Python123\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation using the `isalnum()` method from the `str` class in Python.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import re\n\ndef f(text: str) -> bool:\n    return text.isalnum()",
        "solution_func": "def g():\n    return \"Python123\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given text is alphanumeric, and a function g that returns a specific text 'Python123'. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding the isalnum() method in Python and how to define functions. It also tests the concept of function composition and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(len(s) > 3 for s in strings)\n\ndef g():\n    return [\"apple\", \"banana\", \"orange\", \"kiwi\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(len(s) > 3 for s in strings)",
        "solution_func": "def g():\n    return [\"apple\", \"banana\", \"orange\", \"kiwi\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings as input and returns True if all strings in the list have a length greater than 3. The solution function g returns a list of strings and the assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and how to define functions in Python. It also tests the ability to write a function that checks a specific condition for all elements in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return len(data.values()) == len(set(data.values()))\n\ndef g():\n    return {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves dictionary manipulation and checking for uniqueness of values in the dictionary.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return len(data.values()) == len(set(data.values()))",
        "solution_func": "def g():\n    return {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that takes a dictionary as input and checks if the number of unique values in the dictionary is equal to the total number of values in the dictionary."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding dictionary values and sets in Python to determine uniqueness of values in a dictionary.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(avg: float, limit=100) -> bool:\n    return avg > limit\n\ndef g(limit=100):\n    \"\"\"\n    This solution generates a list of square numbers up to the given limit and calculates their average.\n    \"\"\"\n    square_numbers = [i**2 for i in range(1, limit)]\n    avg = sum(square_numbers) / len(square_numbers)\n    return avg\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list comprehension, and average calculation.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(s: int, limit=10) -> bool:\n    return s > limit\n\ndef g(limit=10):\n    \"\"\"\n    This solution generates a list of prime numbers up to the given limit and calculates their sum.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, limit) if is_prime(num)]\n    return sum(primes)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(avg: float, limit=100) -> bool:\n    return avg > limit",
        "solution_func": "def g(limit=100):\n    \"\"\"\n    This solution generates a list of square numbers up to the given limit and calculates their average.\n    \"\"\"\n    square_numbers = [i**2 for i in range(1, limit)]\n    avg = sum(square_numbers) / len(square_numbers)\n    return avg",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if the average of a list of square numbers is greater than a given limit. The solution function g generates a list of square numbers up to the limit, calculates their average, and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic concepts such as list comprehension, arithmetic operations, and function definition in Python. It also tests the understanding of comparison operators and function invocation.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers, threshold=5) -> bool:\n    for num in numbers:\n        assert num % 2 != 0 and num > threshold\n    return True\n\ndef g(threshold=5):\n    from itertools import combinations\n    for r in range(1, 4):\n        for comb in combinations(range(1, 11), r):\n            if all(num % 2 != 0 and num > threshold for num in comb):\n                return list(comb)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as Itertools, Conditional Logic, and Set Operations.",
        "idx_generation": 79,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(strings, length_limit=10) -> bool:\n    for s in strings:\n        assert s == s[::-1] and len(s) <= length_limit\n    return True\n\ndef g(length_limit=10):\n    from itertools import permutations\n    for n in range(2, length_limit+1):\n        for p in permutations('abcde', n):\n            if all(s == s[::-1] and len(s) <= length_limit for s in p):\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers, threshold=5) -> bool:\n    for num in numbers:\n        assert num % 2 != 0 and num > threshold\n    return True",
        "solution_func": "def g(threshold=5):\n    from itertools import combinations\n    for r in range(1, 4):\n        for comb in combinations(range(1, 11), r):\n            if all(num % 2 != 0 and num > threshold for num in comb):\n                return list(comb)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding a combination of numbers from 1 to 10 that are odd and greater than a given threshold, with the constraint that the combination should satisfy a specific condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using itertools combinations to generate combinations of numbers and checking if they meet the required conditions. The solution function g() returns a list of numbers that satisfy the conditions specified in function f().",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(x: List[int], t=1000000) -> bool:\n    assert all([v > 0 for v in x])\n    product = 1\n    for v in x:\n        product *= v\n        if product > t:\n            return True\n    return False\n\ndef g(t=1000000):\n    return [2, 4, 6, 8, 10, t]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and list manipulation.",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=500000, n=250) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=500000, n=250):\n    return [3] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(x: List[int], t=1000000) -> bool:\n    assert all([v > 0 for v in x])\n    product = 1\n    for v in x:\n        product *= v\n        if product > t:\n            return True\n    return False",
        "solution_func": "def g(t=1000000):\n    return [2, 4, 6, 8, 10, t]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and a threshold value t, and checks if the product of the integers in the list exceeds the threshold at any point. The solution function g returns a list of integers including the threshold value, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list manipulation, iteration, and conditional statements in Python. It also tests the ability to define functions with default arguments and use assertions for testing.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(d: Dict[str, int], t=50) -> bool:\n    assert all([v > 0 for v in d.values()])\n    total = sum(d.values())\n    return total > t\n\ndef g(t=50):\n    return {'apple': 10, 'banana': 20, 'cherry': 30, 'date': t}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves dictionary manipulation, assertion, and comparison operations.",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(x: List[int], t=500000, n=250) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\n\ndef g(t=500000, n=250):\n    return [3] * n + [t]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Dict\n\ndef f(d: Dict[str, int], t=50) -> bool:\n    assert all([v > 0 for v in d.values()])\n    total = sum(d.values())\n    return total > t",
        "solution_func": "def g(t=50):\n    return {'apple': 10, 'banana': 20, 'cherry': 30, 'date': t}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary of strings to integers and a threshold value, and checks if the sum of the values in the dictionary is greater than the threshold. The solution function g creates a dictionary with predefined values and the threshold, and asserts that f applied to g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding dictionary operations, summing values in a dictionary, and using assertions for testing. It also requires knowledge of function definitions and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(sorted_list: List[int]) -> bool:\n    return sorted_list == sorted(sorted_list)\n\ndef g():\n    # selection sort\n    import random\n\n    def selection_sort(arr):\n        n = len(arr)\n        for i in range(n):\n            min_index = i\n            for j in range(i + 1, n):\n                if arr[j] < arr[min_index]:\n                    min_index = j\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n        return arr\n\n    arr = random.sample(range(100), 10)\n    return selection_sort(arr)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # simulated annealing\n    import random\n    import math\n\n    def fitness(individual, vecs):\n        return sum(sum(v[i] for i in individual) % 2 for v in vecs)\n\n    def neighbor(current, d):\n        new = current[:]\n        index = random.randint(0, d - 1)\n        if index in new:\n            new.remove(index)\n        else:\n            new.append(index)\n        return new\n\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    current_solution = [i for i in range(d) if random.random() > 0.5]\n    temperature = 1.0\n    cooling_rate = 0.0001\n\n    while temperature > 0.0001:\n        new_solution = neighbor(current_solution, d)\n        current_fitness = fitness(current_solution, vecs)\n        new_fitness = fitness(new_solution, vecs)\n\n        if new_fitness >= current_fitness or random.random() < math.exp((new_fitness - current_fitness) / temperature):\n            current_solution = new_solution\n\n        temperature *= 1 - cooling_rate\n\n    return current_solution\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(sorted_list: List[int]) -> bool:\n    return sorted_list == sorted(sorted_list)",
        "solution_func": "def g():\n    # selection sort\n    import random\n\n    def selection_sort(arr):\n        n = len(arr)\n        for i in range(n):\n            min_index = i\n            for j in range(i + 1, n):\n                if arr[j] < arr[min_index]:\n                    min_index = j\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n        return arr\n\n    arr = random.sample(range(100), 10)\n    return selection_sort(arr)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given list is sorted in ascending order using the f function, and the g function generates a random list of integers and sorts it using selection sort algorithm. The assert statement checks if the sorted list generated by g satisfies the sorting condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding sorting algorithms and checking if a list is sorted. It provides hands-on experience with selection sort algorithm in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    for char in text:\n        if char.isdigit():\n            return True\n    return False\n\ndef g():\n    return \"Hello, 123!\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    for char in text:\n        if char.isdigit():\n            return True\n    return False",
        "solution_func": "def g():\n    return \"Hello, 123!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(text: str) that checks if a given string contains any digit. Another function g() returns a specific string with a digit. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation and the use of the isdigit() method in Python. It tests the ability to define a function to check for a specific condition in a string and to verify the correctness of the function with an assertion statement.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome (reads the same forwards and backwards) by comparing the text with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a given text is a palindrome, and a function g that returns a specific text 'radar'. The assertion tests if the function f applied to the output of function g returns True.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport numpy as np\n\ndef f(product: int, lst=[2, 3, 5, 7, 11]) -> bool:\n    return np.prod(lst) == product\n\ndef g(lst=[2, 3, 5, 7, 11]):\n    result = 1\n    for num in lst:\n        result *= num\n    return result\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and importing modules (NumPy). It also includes list manipulation and iteration.",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(max_sum: int, arr=[4, 9, 1, 3, 8, 7]) -> bool:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl) == max_sum\n\ndef g(arr=[4, 9, 1, 3, 8, 7]):\n    if len(arr) <= 2:\n        return sum(arr)\n    incl = arr[0]\n    excl = 0\n    for num in arr[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import numpy as np\n\ndef f(product: int, lst=[2, 3, 5, 7, 11]) -> bool:\n    return np.prod(lst) == product",
        "solution_func": "def g(lst=[2, 3, 5, 7, 11]):\n    result = 1\n    for num in lst:\n        result *= num\n    return result",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that calculates the product of a list of numbers and then check if the product matches a given value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using the numpy library to calculate the product of a list of numbers and then defining a function to check if the calculated product matches a given value.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(n: int) -> bool:\n    sum_squared_digits = sum(int(d)**2 for d in str(n))\n    sqrt_sum = int(math.sqrt(sum_squared_digits))\n    return sqrt_sum * sqrt_sum == sum_squared_digits\n\ndef g():\n    n = 9876\n    while True:\n        sum_squared_digits = sum(int(d)**2 for d in str(n))\n        sqrt_sum = int(math.sqrt(sum_squared_digits))\n        if sqrt_sum * sqrt_sum == sum_squared_digits:\n            return n\n        n -= 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and importing modules (math). It also includes a while loop and string manipulation for extracting digits from a number.",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    if digit_sum <= 1:\n        return False\n    for i in range(2, int(math.sqrt(digit_sum)) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 9876\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        if digit_sum <= 1:\n            n -= 1\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(digit_sum)) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n -= 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(n: int) -> bool:\n    sum_squared_digits = sum(int(d)**2 for d in str(n))\n    sqrt_sum = int(math.sqrt(sum_squared_digits))\n    return sqrt_sum * sqrt_sum == sum_squared_digits",
        "solution_func": "def g():\n    n = 9876\n    while True:\n        sum_squared_digits = sum(int(d)**2 for d in str(n))\n        sqrt_sum = int(math.sqrt(sum_squared_digits))\n        if sqrt_sum * sqrt_sum == sum_squared_digits:\n            return n\n        n -= 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a number 'n' such that the sum of the squared digits of 'n' is equal to the square of the square root of the sum of squared digits."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of loops, conditionals, string manipulation, mathematical operations, and functions in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return str(n) == str(n)[::-1]\n\ndef g():\n    n = 9876\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n -= 1\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    if digit_sum <= 1:\n        return False\n    for i in range(2, int(math.sqrt(digit_sum)) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 9876\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        if digit_sum <= 1:\n            n -= 1\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(digit_sum)) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n -= 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return str(n) == str(n)[::-1]",
        "solution_func": "def g():\n    n = 9876\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n -= 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given integer is a palindrome, and a function g() that iterates through integers in reverse order to find the largest palindrome number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of palindrome numbers and iteration in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return n % 7 == 0\n\ndef g():\n    n = 9876\n    while True:\n        if n % 7 == 0:\n            return n\n        n -= 1\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Mathematical Operations and Conditional Logic.",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    if digit_sum <= 1:\n        return False\n    for i in range(2, int(math.sqrt(digit_sum)) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 9876\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        if digit_sum <= 1:\n            n -= 1\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(digit_sum)) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n -= 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return n % 7 == 0",
        "solution_func": "def g():\n    n = 9876\n    while True:\n        if n % 7 == 0:\n            return n\n        n -= 1",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given number is divisible by 7, and a function g() that iterates backwards from a specific number until finding the first number divisible by 7. The assertion checks if the solution returned by g() satisfies the condition in f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a simple algorithmic challenge related to divisibility by 7 and requires understanding of functions and loops in Python. It can be used to teach basic concepts of functions, loops, and conditionals in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\nimport string\n\ndef f(strings: list, char='a') -> bool:\n    return any(char in s for s in strings)\n\ndef g(char='a'):\n    # generate random strings\n    while True:\n        strings = [''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10))) for _ in range(random.randint(1, 5))]\n        if any(char in s for s in strings):\n            return strings\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Randomization, Importing Modules (Itertools, etc.)",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(lst: list, threshold=50) -> bool:\n    return any(num > threshold for num in lst)\n\ndef g(threshold=50):\n    # generate random lists of integers\n    while True:\n        lst = [random.randint(1, 100) for _ in range(random.randint(1, 10))]\n        if any(num > threshold for num in lst):\n            return lst\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\nimport string\n\ndef f(strings: list, char='a') -> bool:\n    return any(char in s for s in strings)",
        "solution_func": "def g(char='a'):\n    # generate random strings\n    while True:\n        strings = [''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10))) for _ in range(random.randint(1, 5))]\n        if any(char in s for s in strings):\n            return strings",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating random strings and checking if a specific character is present in any of the generated strings."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, random module, and string module in Python to generate random strings and check for the presence of a specific character in any of the generated strings.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(float_set: set, lower=0.0, upper=1.0) -> bool:\n    return any(lower <= num <= upper for num in float_set)\n\ndef g(lower=0.0, upper=1.0):\n    # generate random sets of floats\n    while True:\n        float_set = {random.uniform(-1.0, 1.0) for _ in range(random.randint(1, 5))}\n        if any(lower <= num <= upper for num in float_set):\n            return float_set\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves set operations and conditional logic to check if any number in a set falls within a specified range. It also includes random number generation and assertion testing for the solution.",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(lst: list, threshold=50) -> bool:\n    return any(num > threshold for num in lst)\n\ndef g(threshold=50):\n    # generate random lists of integers\n    while True:\n        lst = [random.randint(1, 100) for _ in range(random.randint(1, 10))]\n        if any(num > threshold for num in lst):\n            return lst\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(float_set: set, lower=0.0, upper=1.0) -> bool:\n    return any(lower <= num <= upper for num in float_set)",
        "solution_func": "def g(lower=0.0, upper=1.0):\n    # generate random sets of floats\n    while True:\n        float_set = {random.uniform(-1.0, 1.0) for _ in range(random.randint(1, 5))}\n        if any(lower <= num <= upper for num in float_set):\n            return float_set",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if any number in a given set of floats falls within a specified range. The solution function g generates random sets of floats and returns a set that satisfies the condition specified in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to generate random sets of floats and check if any number in the set falls within a specified range. It tests the student's knowledge of sets, loops, conditionals, and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    return sum(num**2 for num in nums) > 100\n\nimport random\ndef g(size: int = 5) -> List[int]:\n    return [random.randint(1, 10) for _ in range(size)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation.",
        "idx_generation": 80,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(nums: List[int]) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return all(is_prime(num) for num in nums)\ndef g() -> List[int]:\n    primes = []\n    for num in range(2, 1000):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int]) -> bool:\n    return sum(num**2 for num in nums) > 100\n\nimport random",
        "solution_func": "def g(size: int = 5) -> List[int]:\n    return [random.randint(1, 10) for _ in range(size)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random integers and check if the sum of the squares of the numbers in the list is greater than 100."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random integers and then checking if the sum of the squares of these integers is greater than 100. Students need to understand list comprehension, random number generation, and comparison operations in Python to solve this puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    for num in numbers:\n        if num < 0:\n            return True\n    return False\n\ndef g():\n    return [1, -2, 3, 4, -5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves Conditional Logic and List Operations.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(strings: list) -> bool:\n    for string in strings:\n        if 'a' in string:\n            return True\n    return False\n\ndef g():\n    return ['apple', 'banana', 'orange']\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    for num in numbers:\n        if num < 0:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, -2, 3, 4, -5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(numbers: list) that checks if any element in the input list is negative. The solution function g() returns a list of numbers, and the puzzle is solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for negative numbers in a list using a given function f and verifying the solution with function g. It is a simple challenge suitable for teaching basic list iteration and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(bool_values: list) -> bool:\n    for value in bool_values:\n        if value:\n            return True\n    return False\n\ndef g():\n    return [False, True, False, True]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves iterating through a list of boolean values and returning True if any of the values is True.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(strings: list) -> bool:\n    for string in strings:\n        if 'a' in string:\n            return True\n    return False\n\ndef g():\n    return ['apple', 'banana', 'orange']\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(bool_values: list) -> bool:\n    for value in bool_values:\n        if value:\n            return True\n    return False",
        "solution_func": "def g():\n    return [False, True, False, True]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires implementing a function f that takes a list of boolean values and returns True if any of the values is True, otherwise returns False. The solution function g returns a list of boolean values and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is a simple exercise in understanding list iteration and boolean logic in Python. It can be used to teach students how to work with boolean values and lists in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list) -> bool:\n    for num in numbers:\n        if num % 2 == 0:\n            return True\n    return False\n\ndef g():\n    return [1, 3, 5, 8, 9]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves conditional logic and mathematical operations.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(strings: list) -> bool:\n    for string in strings:\n        if 'a' in string:\n            return True\n    return False\n\ndef g():\n    return ['apple', 'banana', 'orange']\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers: list) -> bool:\n    for num in numbers:\n        if num % 2 == 0:\n            return True\n    return False",
        "solution_func": "def g():\n    return [1, 3, 5, 8, 9]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding if there is an even number in a given list of numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves a function f that checks if there is an even number in a list of numbers, and a function g that returns a specific list of numbers. The assertion checks if function f returns True when applied to the output of function g.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(inds: List[int], s='algorithmicthinking', target='') -> bool:\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='algorithmicthinking', target=''):\n    from itertools import permutations\n    for i, j in permutations(range(len(s)), 2):\n        if s[i:j] == target:\n            return [i, j]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and permutations and combinations.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(inds: List[int], s='algorithmicthinking', target='') -> bool:\n    (i, j) = inds\n    return s[i:j] == target",
        "solution_func": "def g(s='algorithmicthinking', target=''):\n    from itertools import permutations\n    for i, j in permutations(range(len(s)), 2):\n        if s[i:j] == target:\n            return [i, j]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a specific substring in a given string matches a target string, and a function g that finds the indices of the substring in the given string. The goal is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and understanding of list permutations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(inds: List[int], s='programmingchallenge', target='') -> bool:\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='programmingchallenge', target=''):\n    from itertools import combinations_with_replacement\n    for i, j in combinations_with_replacement(range(len(s)), 2):\n        if s[i:j] == target:\n            return [i, j]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and importing modules (Itertools). It also uses list operations and conditional logic.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(inds: List[int], s='programmingchallenge', target='') -> bool:\n    (i, j) = inds\n    return s[i:j] == target",
        "solution_func": "def g(s='programmingchallenge', target=''):\n    from itertools import combinations_with_replacement\n    for i, j in combinations_with_replacement(range(len(s)), 2):\n        if s[i:j] == target:\n            return [i, j]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a substring of a given string matches a target string, and a function g that finds the indices of the substring that matches the target string using combinations_with_replacement. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves string manipulation and the use of itertools combinations_with_replacement to find the indices of the substring. It tests the understanding of string slicing and itertools in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, average=5) -> bool:\n    return sum(nums) / len(nums) == average\n\ndef g(average=5):\n    return [2, 4, 6, 8]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g():\n    return 17\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a number is prime or not.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(nums: list, average=5) -> bool:\n    return sum(nums) / len(nums) == average\n\ndef g(average=5):\n    return [2, 4, 6, 8]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    return 17",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f(num) that checks if a given number is a prime number or not, and a function g() that returns the number 17. The puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return any(num % 2 == 0 for num in lst)\n\ndef g() -> list:\n    return [num for num in range(2, 11) if num % 2 == 0]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list comprehension, iteration, and checking for even numbers in a list.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(num % 2 != 0 for num in lst)\n\ndef g() -> list:\n    return [num for num in range(1, 12) if num % 2 != 0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return any(num % 2 == 0 for num in lst)",
        "solution_func": "def g() -> list:\n    return [num for num in range(2, 11) if num % 2 == 0]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(lst) that checks if any number in a list is even, and a function g() that generates a list of even numbers from 2 to 10. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python to master's students in CS as it involves list comprehension, checking for even numbers, and asserting the correctness of the solution.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return sum(lst) > 20\n\ndef g() -> list:\n    return [num for num in range(1, 11)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list) -> bool:\n    return all(num % 2 != 0 for num in lst)\n\ndef g() -> list:\n    return [num for num in range(1, 12) if num % 2 != 0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return sum(lst) > 20",
        "solution_func": "def g() -> list:\n    return [num for num in range(1, 11)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function f(lst) that checks if the sum of elements in a list is greater than 20, and a function g() that generates a list of numbers from 1 to 10. The student needs to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, summing elements in a list, and comparing the sum to a threshold value. It tests the student's ability to define functions and use them in conjunction to solve a specific problem.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int], threshold=20) -> bool:\n    return all(num % 2 == 0 for num in numbers) and sum(numbers) > threshold\n\ndef g(range_start=1, range_end=10, count=4):\n    import random\n    return [random.randint(range_start, range_end) * 2 for _ in range(count)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and importing modules (random).",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(combinations: List[str], char_list=['x', 'y', 'z'], length=2) -> bool:\n    return len(combinations) == len(set(combinations)) >= len(char_list) and all((len(comb) == length for comb in combinations))\n\ndef g(char_list=['x', 'y', 'z'], length=2):\n    from itertools import combinations\n    return [''.join(comb) for comb in combinations(char_list, length)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int], threshold=20) -> bool:\n    return all(num % 2 == 0 for num in numbers) and sum(numbers) > threshold",
        "solution_func": "def g(range_start=1, range_end=10, count=4):\n    import random\n    return [random.randint(range_start, range_end) * 2 for _ in range(count)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random even numbers within a specified range and count, and then check if all numbers in the list are even and the sum of the numbers is greater than a threshold value."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating a list of random even numbers and checking if all numbers are even and the sum exceeds a threshold. It tests understanding of list comprehension, random number generation, and boolean conditions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(names: List[str]) -> bool:\n    return any(len(name) > 5 for name in names)\n\ndef g(num_names=3):\n    import random\n    names = [\"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=random.randint(4, 8))) for _ in range(num_names)]\n    return names\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g(length=5, max_num=100):\n    import random\n    nums = [random.randint(1, max_num) for _ in range(length)]\n    return nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(names: List[str]) -> bool:\n    return any(len(name) > 5 for name in names)",
        "solution_func": "def g(num_names=3):\n    import random\n    names = [\"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=random.randint(4, 8))) for _ in range(num_names)]\n    return names",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires students to generate a list of random names and check if any name in the list has a length greater than 5 characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using list comprehension, random module, and the any() function to check if any name in the generated list has a length greater than 5 characters.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(primes: List[int]) -> bool:\n    return any(prime > 10 for prime in primes)\n\ndef g(num_primes=4):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, num_primes*3) if is_prime(num)]\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers and filtering them based on a condition. It also uses list comprehension and assertion for testing the solution.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return any(num % 2 == 0 for num in nums) and any(num % 2 != 0 for num in nums)\n\ndef g(length=5, max_num=100):\n    import random\n    nums = [random.randint(1, max_num) for _ in range(length)]\n    return nums\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(primes: List[int]) -> bool:\n    return any(prime > 10 for prime in primes)",
        "solution_func": "def g(num_primes=4):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, num_primes*3) if is_prime(num)]\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if there are any prime numbers greater than 10 in a given list of primes. The solution function g generates a list of prime numbers up to a specified limit and returns it. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic understanding of functions, list comprehension, and prime number checking in Python. It provides a practical application of list manipulation and conditional statements in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) // 2  # Changed condition to half\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Different randomized approach to find a solution\n    import random\n    rand = random.Random(0)\n    target = len(vecs) // 2  # Adjusted target value\n    max_attempts = 10 ** 5\n    d = len(bin(max(vecs))) - 2\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.choice([True, False])]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) // 2:\n            return ans\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise operations and randomization to solve a binary vector problem.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 1 / 4  # Changed condition to 1/4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized approach to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 1) // 4  # Adjusted target value\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 1 / 4:\n            return ans\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) // 2  # Changed condition to half",
        "solution_func": "def g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Different randomized approach to find a solution\n    import random\n    rand = random.Random(0)\n    target = len(vecs) // 2  # Adjusted target value\n    max_attempts = 10 ** 5\n    d = len(bin(max(vecs))) - 2\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.choice([True, False])]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) // 2:\n            return ans",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a certain condition is met based on a list of integers, and a function g that generates a randomized solution to meet that condition. The solution is considered correct if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations and randomization to find a solution that satisfies the condition set by function f. It requires understanding of bitwise manipulation and probability in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) // 3  # Changed condition to 1/3\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Deterministic approach to find a solution\n    d = len(bin(max(vecs))) - 2\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    for i in range(d):\n        if sum(sum(v[i] for i in range(i+1)) % 2 for v in vecs) >= len(vecs) // 3:\n            return list(range(i+1))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise operations and manipulation of binary vectors to satisfy a specific condition. It also includes list manipulation and iteration. The solution uses a deterministic approach to find a solution based on the given condition.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 1 / 4  # Changed condition to 1/4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized approach to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 1) // 4  # Adjusted target value\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 1 / 4:\n            return ans\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) // 3  # Changed condition to 1/3",
        "solution_func": "def g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Deterministic approach to find a solution\n    d = len(bin(max(vecs))) - 2\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    for i in range(d):\n        if sum(sum(v[i] for i in range(i+1)) % 2 for v in vecs) >= len(vecs) // 3:\n            return list(range(i+1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks a condition on a list of integers based on bitwise operations, and a function g that generates a list of integers to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is focused on bitwise operations and condition checking on binary representations of integers in Python. It requires understanding of bitwise manipulation and list comprehension to generate a solution that satisfies the condition in function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) // 5  # Changed condition to 1/5\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Modified deterministic approach to find a solution\n    d = len(bin(max(vecs))) - 2\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    for i in range(d):\n        if sum(sum(v[i] for i in range(i+1)) % 2 for v in vecs) >= len(vecs) // 5:\n            return list(range(i+1))\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Binary Operations (bitwise shifting, AND, OR)",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 1 / 4  # Changed condition to 1/4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized approach to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 1) // 4  # Adjusted target value\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 1 / 4:\n            return ans\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) // 5  # Changed condition to 1/5",
        "solution_func": "def g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Modified deterministic approach to find a solution\n    d = len(bin(max(vecs))) - 2\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    for i in range(d):\n        if sum(sum(v[i] for i in range(i+1)) % 2 for v in vecs) >= len(vecs) // 5:\n            return list(range(i+1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks a condition based on a list of integers and a predefined list of integers. The solution function g modifies the input list of integers to find a solution that satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations and list manipulation to find a solution that satisfies the condition in function f. It requires understanding of bitwise operators and list comprehension in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers: list, n=10, target_sum=100) -> bool:\n    assert len(numbers) == n and all(type(num) == int for num in numbers) and sum(numbers) == target_sum\n\n    def is_odd(num: int) -> bool:\n        return num % 2 != 0\n\n    for num in numbers:\n        assert is_odd(num)\n    \n    return True\n\ndef g(n=10, target_sum=100):\n    numbers = [i for i in range(1, n * 2, 2)]\n    \n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, assertion checks, and a simple mathematical operation to generate a list of odd numbers. The solution function generates a list of odd numbers based on the input parameters. The assertion checks ensure that the input list meets certain conditions. The solution function then passes the generated list to the puzzle function, which checks if all numbers in the list are odd and returns True if they are. Overall, the puzzle focuses on list manipulation, mathematical operations, and assertion checks.",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(numbers: list, n=10, target_sum=100) -> bool:\n    assert len(numbers) == n and all(type(num) == int for num in numbers) and sum(numbers) == target_sum\n\n    def is_odd(num: int) -> bool:\n        return num % 2 != 0\n\n    for num in numbers:\n        assert is_odd(num)\n    \n    return True",
        "solution_func": "def g(n=10, target_sum=100):\n    numbers = [i for i in range(1, n * 2, 2)]\n    \n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of numbers, checks if the list contains only odd numbers, and returns True if the conditions are met. The solution function g generates a list of odd numbers based on the input parameters n and target_sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, assertion statements, and defining nested functions in Python. It also requires knowledge of basic arithmetic operations and conditional statements.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(result: list, condition=lambda x: x[-1] == 29) -> bool:\n    return condition(result)\n\ndef g(limit=30):\n    \"\"\"\n    This solution generates a list of prime numbers up to the specified limit.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, limit) if is_prime(num)]\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 81,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pattern='abacaba', n=7) -> bool:\n    return s == pattern and len(s) == n\n\ndef g(pattern='abacaba', n=7):\n    \"\"\"\n    This solution uses recursive backtracking to generate a string that follows the given pattern.\n    \"\"\"\n    def generate_string(idx, curr_str):\n        if idx == n:\n            return curr_str\n        for char in ['a', 'b', 'c']:\n            new_str = curr_str[:idx] + char + curr_str[idx + 1:]\n            if generate_string(idx + 1, new_str):\n                return new_str\n        return None\n    \n    return generate_string(0, pattern)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(result: list, condition=lambda x: x[-1] == 29) -> bool:\n    return condition(result)",
        "solution_func": "def g(limit=30):\n    \"\"\"\n    This solution generates a list of prime numbers up to the specified limit.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, limit) if is_prime(num)]\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list as input and checks if the last element of the list is equal to 29. The solution function g generates a list of prime numbers up to a specified limit and returns it. The puzzle is solved if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if the last element of a list of prime numbers generated by the solution function is equal to 29. The solution function generates prime numbers up to a specified limit and returns them.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target=10) -> bool:\n    return all(sum(t) == target for t in tuples)\n\ndef g(target=10) -> List[Tuple[int, int]]:\n    return [(3, 7), (2, 8), (1, 9)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 1 / 4  # Changed condition to 1/4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Heuristic approach to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    def heuristic():\n        return [i for i in range(d) if i % 2 == 0]  # Only select even indices\n\n    ans = heuristic()\n    if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 1 / 4:\n        return ans\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves bitwise operations and manipulation of binary vectors. It also includes a heuristic approach to find a solution based on specific conditions. The topics used in this puzzle are Binary Operations and Algorithm Optimization.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 1 / 4  # Changed condition to 1/4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized approach to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 1) // 4  # Adjusted target value\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 1 / 4:\n            return ans\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 1 / 4  # Changed condition to 1/4",
        "solution_func": "def g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Heuristic approach to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    def heuristic():\n        return [i for i in range(d) if i % 2 == 0]  # Only select even indices\n\n    ans = heuristic()\n    if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 1 / 4:\n        return ans",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a certain condition is met for a list of integers, and a function g that uses a heuristic approach to find a solution for f. The solution g is considered correct if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves bitwise operations and a heuristic approach to find a solution. It challenges students to understand bitwise manipulation and develop a heuristic strategy to solve the problem.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 1 / 4  # Changed condition to 1/4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Greedy algorithm to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    def greedy():\n        return [i for i in range(d) if sum(v[i] for v in vecs) % 2 == 0]  # Select indices with even parity\n\n    return greedy()\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Bitwise Operations, Greedy Algorithms",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 1 / 4  # Changed condition to 1/4\n\ndef g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Randomized approach to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 1) // 4  # Adjusted target value\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 1 / 4:\n            return ans\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 1 / 4  # Changed condition to 1/4",
        "solution_func": "def g(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # Greedy algorithm to find a solution\n    d = 0\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    def greedy():\n        return [i for i in range(d) if sum(v[i] for v in vecs) % 2 == 0]  # Select indices with even parity\n\n    return greedy()",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a certain condition is met based on a list of integers and a function g that uses a greedy algorithm to find a solution to satisfy the condition in f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is focused on bitwise operations and parity checks. The solution function g uses a greedy algorithm to select indices with even parity in the list of integers to satisfy the condition in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(nums: List[int], target=9) -> bool:\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums) + 1) for comb in combinations(nums, r))\ndef g(target = 9):\n    # brute force\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for comb in combinations(nums, r):\n            if sum(comb) == target:\n                return comb\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Permutations and Combinations",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(nums: List[int], target=9) -> bool:\n    from itertools import combinations\n    return any(sum(comb) == target for r in range(1, len(nums) + 1) for comb in combinations(nums, r))",
        "solution_func": "def g(target = 9):\n    # brute force\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    from itertools import combinations\n    for r in range(1, len(nums) + 1):\n        for comb in combinations(nums, r):\n            if sum(comb) == target:\n                return comb",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of numbers from a given list that adds up to a target sum using itertools combinations."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of itertools combinations, loops, and conditional statements to find the correct combination of numbers that sum up to the target value.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List \ndef f(numbers: List[int], target=10) -> bool:\n    return any(x + y == target for x in numbers for y in numbers if x != y)\ndef g(target=10):\n    # brute force\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for x in numbers:\n        for y in numbers:\n            if x + y == target and x != y:\n                return [x, y]\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, brute force search, and conditional logic.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List \ndef f(numbers: List[int], target=10) -> bool:\n    return any(x + y == target for x in numbers for y in numbers if x != y)",
        "solution_func": "def g(target=10):\n    # brute force\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for x in numbers:\n        for y in numbers:\n            if x + y == target and x != y:\n                return [x, y]",
        "quality": [
            null
        ],
        "description": [
            "Given a list of numbers, the puzzle requires finding if there are two distinct numbers in the list that sum up to a target value. The solution uses a brute force approach to find such numbers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension and nested loops in Python to check for the sum of two distinct numbers in a list. The solution demonstrates how to iterate through the list to find the desired pair of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(words: List[str], pattern=\"ab\", min_length=3, max_length=5) -> bool:\n    for word in words:\n        if len(word) < min_length or len(word) > max_length:\n            return False\n        for i in range(1, len(word)):\n            if (pattern[i % len(pattern)] == 'a' and word[i] != word[i-1]) or (pattern[i % len(pattern)] == 'b' and word[i] == word[i-1]):\n                return False\n    return True\n\ndef g(pattern=\"ab\", min_length=3, max_length=5):\n    from itertools import product\n    alphabet = ['a', 'b', 'c', 'd']\n    valid_words = []\n    for length in range(min_length, max_length+1):\n        for word in product(alphabet, repeat=length):\n            if all((pattern[i % len(pattern)] == 'a' and word[i] == word[i-1]) or (pattern[i % len(pattern)] == 'b' and word[i] != word[i-1]) for i in range(1, len(word))):\n                valid_words.append(''.join(word))\n    return valid_words\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Pattern Recognition, String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_ratio=2, range_limit=200, options=[2, 4, 8, 16, 32]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] / sequence[i-1] == common_ratio\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_ratio=2, range_limit=200, options=[2, 4, 8, 16, 32]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] / c[i-1] == common_ratio for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(words: List[str], pattern=\"ab\", min_length=3, max_length=5) -> bool:\n    for word in words:\n        if len(word) < min_length or len(word) > max_length:\n            return False\n        for i in range(1, len(word)):\n            if (pattern[i % len(pattern)] == 'a' and word[i] != word[i-1]) or (pattern[i % len(pattern)] == 'b' and word[i] == word[i-1]):\n                return False\n    return True",
        "solution_func": "def g(pattern=\"ab\", min_length=3, max_length=5):\n    from itertools import product\n    alphabet = ['a', 'b', 'c', 'd']\n    valid_words = []\n    for length in range(min_length, max_length+1):\n        for word in product(alphabet, repeat=length):\n            if all((pattern[i % len(pattern)] == 'a' and word[i] == word[i-1]) or (pattern[i % len(pattern)] == 'b' and word[i] != word[i-1]) for i in range(1, len(word))):\n                valid_words.append(''.join(word))\n    return valid_words",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of words follow a specific pattern based on a given pattern string and length constraints. The solution function g generates valid words that satisfy the pattern and length constraints."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to iterate over words and check for specific patterns and lengths. The solution function uses itertools to generate all possible combinations of words and filters out the valid ones based on the pattern and length constraints.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target_sum=10, min_length=2, max_length=4) -> bool:\n    for t in tuples:\n        if len(t) < min_length or len(t) > max_length or sum(t) != target_sum:\n            return False\n    return True\n\ndef g(target_sum=10, min_length=2, max_length=4):\n    from itertools import product\n    values = [1, 2, 3, 4, 5]\n    valid_tuples = []\n    for length in range(min_length, max_length+1):\n        for t in product(values, repeat=length):\n            if sum(t) == target_sum:\n                valid_tuples.append(t)\n    return valid_tuples\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves working with tuples, iterating through combinations, and checking conditions based on target sum, minimum and maximum length.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(sequence: List[int], common_ratio=2, range_limit=200, options=[2, 4, 8, 16, 32]) -> bool:\n    for i in range(1, len(sequence)):\n        assert sequence[i] / sequence[i-1] == common_ratio\n    return all(num in options for num in sequence) and sequence[-1] <= range_limit\n\ndef g(common_ratio=2, range_limit=200, options=[2, 4, 8, 16, 32]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(c[i] / c[i-1] == common_ratio for i in range(1, len(c))):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List, Tuple\n\ndef f(tuples: List[Tuple[int, int]], target_sum=10, min_length=2, max_length=4) -> bool:\n    for t in tuples:\n        if len(t) < min_length or len(t) > max_length or sum(t) != target_sum:\n            return False\n    return True",
        "solution_func": "def g(target_sum=10, min_length=2, max_length=4):\n    from itertools import product\n    values = [1, 2, 3, 4, 5]\n    valid_tuples = []\n    for length in range(min_length, max_length+1):\n        for t in product(values, repeat=length):\n            if sum(t) == target_sum:\n                valid_tuples.append(t)\n    return valid_tuples",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of tuples meets certain conditions, and a function g that generates valid tuples based on given parameters. The goal is to ensure that function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, tuples, loops, and conditionals in Python. It also requires understanding of how to generate combinations of values using itertools.product.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product > 1000\n\ndef g():\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    import random\n    primes = []\n    while len(primes) < 5:\n        num = random.randint(10, 50)\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and number theory (primes).",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    return sum(numbers) > 50\n\ndef g():\n    import random\n    while True:\n        numbers = [random.randint(2, 100) * 2 for _ in range(7)]\n        if sum(numbers) > 50:\n            return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product > 1000",
        "solution_func": "def g():\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    import random\n    primes = []\n    while len(primes) < 5:\n        num = random.randint(10, 50)\n        if is_prime(num):\n            primes.append(num)\n    return primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that calculates the product of a list of numbers and checks if the product is greater than 1000. The solution function g generates a list of 5 prime numbers between 10 and 50, and the puzzle is solved if the product of these prime numbers is greater than 1000."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation, prime number generation, and comparison operations. It can be used to teach students about functions, loops, conditionals, and mathematical operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\nimport string\n\ndef f(lst: list) -> bool:\n    return any(char.isdigit() for string in lst for char in string)\n\ndef g(size=5, length=6) -> list:\n    return [''.join(random.choices(string.ascii_letters + string.digits, k=length)) for _ in range(size)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves String Manipulation and Conditional Logic topics.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "\nimport random\n\ndef f(lst: list) -> bool:\n    return len(lst) != len(set(lst))\n\ndef g(size=10) -> list:\n    return [random.randint(1, size) for _ in range(size)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\nimport string\n\ndef f(lst: list) -> bool:\n    return any(char.isdigit() for string in lst for char in string)",
        "solution_func": "def g(size=5, length=6) -> list:\n    return [''.join(random.choices(string.ascii_letters + string.digits, k=length)) for _ in range(size)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if any string in a list contains a digit, and a function g that generates a list of random strings. The assertion checks if function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if any string in a list contains a digit using a list comprehension and the any() function. The solution function g generates a list of random strings using random.choices(). The assertion tests if the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    clean_s = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_s == clean_s[::-1]\ndef g():\n    return \"A man, a plan, a canal - Panama!\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String manipulation and Conditional Logic are used in the puzzle.",
        "idx_generation": 82,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    clean_s = ''.join(char.lower() for char in s if char.isalnum())\n    return clean_s == clean_s[::-1]",
        "solution_func": "def g():\n    return \"A man, a plan, a canal - Panama!\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given string is a palindrome after removing non-alphanumeric characters and converting all characters to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of string manipulation, palindrome checking, and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n# Puzzle 2:\n# Puzzle description: The puzzle involves finding a pair of numbers from a given set of options such that their sum is a prime number.\nimport sympy\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_prime(num: int) -> bool:\n    return sympy.isprime(num)\n\ndef f(numbers: Tuple[int, int], options=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    sum_result = numbers[0] + numbers[1]\n    return is_prime(sum_result)\n\ndef g(options=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_prime(c[0] + c[1]):\n                return c\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves finding a pair of numbers from a given set of options such that their sum is a prime number.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\n# Puzzle 4:\n# Puzzle description: The puzzle involves finding a pair of numbers from a given set of options such that their product is a perfect cube.\nimport math\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_perfect_cube(num: int) -> bool:\n    return round(num ** (1/3)) ** 3 == num\n\ndef f(numbers: Tuple[int, int], options=[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]) -> bool:\n    product_result = numbers[0] * numbers[1]\n    return is_perfect_cube(product_result)\n\ndef g(options=[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_perfect_cube(c[0] * c[1]):\n                return c\n\nassert f(g()) == True\n"
        ],
        "problem_func": "# Puzzle 2:\n# Puzzle description: The puzzle involves finding a pair of numbers from a given set of options such that their sum is a prime number.\nimport sympy\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_prime(num: int) -> bool:\n    return sympy.isprime(num)\n\ndef f(numbers: Tuple[int, int], options=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    sum_result = numbers[0] + numbers[1]\n    return is_prime(sum_result)",
        "solution_func": "def g(options=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_prime(c[0] + c[1]):\n                return c",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a pair of numbers from a given set of options such that their sum is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to find a pair of numbers from a predefined set and check if their sum is a prime number.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\n# Puzzle 3:\n# Puzzle description: The puzzle involves finding a pair of numbers from a given set of options such that their difference is a perfect square.\nimport math\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_perfect_square(num: int) -> bool:\n    return math.isqrt(num) ** 2 == num\n\ndef f(numbers: Tuple[int, int], options=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) -> bool:\n    diff_result = abs(numbers[0] - numbers[1])\n    return is_perfect_square(diff_result)\n\ndef g(options=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_perfect_square(abs(c[0] - c[1])):\n                return c\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding a pair of numbers from a given set of options such that their difference is a perfect square.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\n# Puzzle 4:\n# Puzzle description: The puzzle involves finding a pair of numbers from a given set of options such that their product is a perfect cube.\nimport math\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_perfect_cube(num: int) -> bool:\n    return round(num ** (1/3)) ** 3 == num\n\ndef f(numbers: Tuple[int, int], options=[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]) -> bool:\n    product_result = numbers[0] * numbers[1]\n    return is_perfect_cube(product_result)\n\ndef g(options=[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_perfect_cube(c[0] * c[1]):\n                return c\n\nassert f(g()) == True\n"
        ],
        "problem_func": "# Puzzle 3:\n# Puzzle description: The puzzle involves finding a pair of numbers from a given set of options such that their difference is a perfect square.\nimport math\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_perfect_square(num: int) -> bool:\n    return math.isqrt(num) ** 2 == num\n\ndef f(numbers: Tuple[int, int], options=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) -> bool:\n    diff_result = abs(numbers[0] - numbers[1])\n    return is_perfect_square(diff_result)",
        "solution_func": "def g(options=[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_perfect_square(abs(c[0] - c[1])):\n                return c",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a pair of numbers from a given set of options such that their difference is a perfect square."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of perfect squares, absolute difference, combinations, and function implementation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(is_palindrome: bool, limit=100) -> bool:\n    return str(sum(is_palindrome)) == str(sum(is_palindrome))[::-1]\n\ndef g(limit=100):\n    fib_list = [0, 1]\n    while fib_list[-1] + fib_list[-2] <= limit:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and mathematical operations.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(subsets: List[List[int]], num_list=[1, 2, 3], target_sum=5) -> bool:\n    return len(subsets) == len(set(map(tuple, subsets))) and all((sum(subset) == target_sum for subset in subsets))\ndef g(num_list=[1, 2, 3], target_sum=5):\n    from itertools import combinations\n    return [list(comb) for r in range(len(num_list) + 1) for comb in combinations(num_list, r) if sum(comb) == target_sum]\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(is_palindrome: bool, limit=100) -> bool:\n    return str(sum(is_palindrome)) == str(sum(is_palindrome))[::-1]",
        "solution_func": "def g(limit=100):\n    fib_list = [0, 1]\n    while fib_list[-1] + fib_list[-2] <= limit:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function that checks if the sum of a list of numbers is a palindrome. The solution involves generating a list of Fibonacci numbers up to a given limit and checking if the sum of these numbers is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of string manipulation, list iteration, and palindrome checking. It also requires understanding of Fibonacci sequence generation. This puzzle could be used to teach Python programming to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g() -> str:\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    return len(lst) != len(set(lst))\n\ndef g() -> List[int]:\n    return [3, 5, 7, 3, 2, 9]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g() -> str:\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(len(s) == len(strings[0]) for s in strings)\n\ndef g() -> List[str]:\n    return [\"cat\", \"dog\", \"bat\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and list operations.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    return len(lst) != len(set(lst))\n\ndef g() -> List[int]:\n    return [3, 5, 7, 3, 2, 9]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    return all(len(s) == len(strings[0]) for s in strings)",
        "solution_func": "def g() -> List[str]:\n    return [\"cat\", \"dog\", \"bat\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and checks if all strings have the same length. The solution function g returns a list of strings, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all strings in a list have the same length, which is a basic Python programming concept. The solution function g provides a list of strings to test the function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))\n\ndef g() -> List[int]:\n    return [9, 5, 3, 3, 2, 1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a list is sorted in non-decreasing order using the `all` function and list comprehension. The solution generates a list that is already sorted in non-decreasing order.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(lst: List[int]) -> bool:\n    return len(lst) != len(set(lst))\n\ndef g() -> List[int]:\n    return [3, 5, 7, 3, 2, 9]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(nums: List[int]) -> bool:\n    return all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))",
        "solution_func": "def g() -> List[int]:\n    return [9, 5, 3, 3, 2, 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is sorted in non-increasing order, and a function g that returns a specific list of integers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and list indexing in Python. It also tests the ability to define functions and use assertions for testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport sympy\n\ndef f(lst: list) -> bool:\n    return all(sympy.isprime(sum(pair)) for pair in zip(lst, lst[1:]))\n\ndef g():\n    fib = [1, 1]\n    while True:\n        if all(sympy.isprime(sum(pair)) for pair in zip(fib, fib[1:])):\n            return fib\n        fib.append(fib[-1] + fib[-2])\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if the sum of consecutive pairs in a list is a prime number using the sympy library. The solution generates Fibonacci numbers and checks if the sum of consecutive Fibonacci numbers is a prime number.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\nimport sympy\n\ndef f(lst: list) -> bool:\n    return all(sympy.isprime(num) for num in lst) and len(lst) == len(set(lst))\n\ndef g():\n    n = [2, 3, 5, 7]\n    while True:\n        if all(sympy.isprime(num) for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import sympy\n\ndef f(lst: list) -> bool:\n    return all(sympy.isprime(sum(pair)) for pair in zip(lst, lst[1:]))",
        "solution_func": "def g():\n    fib = [1, 1]\n    while True:\n        if all(sympy.isprime(sum(pair)) for pair in zip(fib, fib[1:])):\n            return fib\n        fib.append(fib[-1] + fib[-2])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the sum of consecutive Fibonacci numbers is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to generate Fibonacci numbers and check if the sum of consecutive pairs is a prime number using the sympy library in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(lst: list) -> bool:\n    return all(str(num) == str(num)[::-1] for num in lst) and all(lst[i] % lst[i-1] == 0 for i in range(1, len(lst)))\n\ndef g():\n    palindromes = [11, 22]\n    while True:\n        if all(str(num) == str(num)[::-1] for num in palindromes) and all(palindromes[i] % palindromes[i-1] == 0 for i in range(1, len(palindromes))):\n            return palindromes\n        palindromes.append(int(str(palindromes[-1]) + str(palindromes[-1])[::-1]))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation to check for palindromes, mathematical operations to check for divisibility, and iteration to generate new numbers. It does not involve recursion, dynamic programming, greedy algorithms, backtracking, exception handling, set operations, permutations and combinations, probability and statistics, importing modules, pattern recognition, sorting and ordering, binary operations, geometry and coordinate manipulation, algorithm optimization, number theory, or graph theory.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\nimport sympy\n\ndef f(lst: list) -> bool:\n    return all(sympy.isprime(num) for num in lst) and len(lst) == len(set(lst))\n\ndef g():\n    n = [2, 3, 5, 7]\n    while True:\n        if all(sympy.isprime(num) for num in n) and len(n) == len(set(n)):\n            return n\n        n.append(n[-1] + 1)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(lst: list) -> bool:\n    return all(str(num) == str(num)[::-1] for num in lst) and all(lst[i] % lst[i-1] == 0 for i in range(1, len(lst)))",
        "solution_func": "def g():\n    palindromes = [11, 22]\n    while True:\n        if all(str(num) == str(num)[::-1] for num in palindromes) and all(palindromes[i] % palindromes[i-1] == 0 for i in range(1, len(palindromes))):\n            return palindromes\n        palindromes.append(int(str(palindromes[-1]) + str(palindromes[-1])[::-1]))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of numbers is a palindrome and if each number in the list is divisible by the previous number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding list comprehension, checking for palindromes, and checking for divisibility within a list of numbers.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(options=['radar', 'python', 'level', 'madam']):\n    return options.pop()\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(lists: List[List[int]], target_sum=10, min_length=2) -> bool:\n    return all(sum(l) == target_sum for l in lists) and all(len(l) >= min_length for l in lists)\n\ndef g(target_sum=10, min_length=2, options=[[1, 2, 7], [3, 4, 3], [2, 5, 3], [1, 6, 3]]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(sum(l) == target_sum for l in c) and all(len(l) >= min_length for l in c):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(options=['radar', 'python', 'level', 'madam']):\n    return options.pop()",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a given string is a palindrome, and a function g that returns and removes elements from a list of strings until a palindrome is found. The assertion checks if the returned palindrome from g satisfies the condition of being a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation and list operations in Python, as well as the concept of palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers, target=10) -> bool:\n    from itertools import combinations\n    for r in range(1, len(numbers)+1):\n        for combination in combinations(numbers, r):\n            if sum(combination) == target:\n                return True\n    return False\n\ndef g(target=10):\n    from itertools import permutations\n    for n in range(1, target+1):\n        for p in permutations(range(1, 10), n):\n            if sum(p) == target:\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Permutations and Combinations, Importing Modules (Itertools, etc.)",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(pattern, size=5) -> bool:\n    for i in range(len(pattern) - size + 1):\n        if all(pattern[i+j] for j in range(size)):\n            return True\n    return False\n\ndef g(size=5):\n    from itertools import product\n    for n in range(2, size+1):\n        for p in product([True, False], repeat=n):\n            if any(all(p[i+j] for j in range(size)) for i in range(n - size + 1)):\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers, target=10) -> bool:\n    from itertools import combinations\n    for r in range(1, len(numbers)+1):\n        for combination in combinations(numbers, r):\n            if sum(combination) == target:\n                return True\n    return False",
        "solution_func": "def g(target=10):\n    from itertools import permutations\n    for n in range(1, target+1):\n        for p in permutations(range(1, 10), n):\n            if sum(p) == target:\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of numbers from a given list that adds up to a target sum using different approaches like combinations and permutations."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of itertools, combinations, permutations, and summing elements in a list to find a solution that satisfies the target sum condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(words, length=4) -> bool:\n    for word in words:\n        if len(word) == length:\n            return True\n    return False\n\ndef g(length=4):\n    from itertools import product\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for p in product(alphabet, repeat=length):\n        yield ''.join(p)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and importing modules (Itertools). It also includes conditional logic and iteration over permutations of characters.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(pattern, size=5) -> bool:\n    for i in range(len(pattern) - size + 1):\n        if all(pattern[i+j] for j in range(size)):\n            return True\n    return False\n\ndef g(size=5):\n    from itertools import product\n    for n in range(2, size+1):\n        for p in product([True, False], repeat=n):\n            if any(all(p[i+j] for j in range(size)) for i in range(n - size + 1)):\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(words, length=4) -> bool:\n    for word in words:\n        if len(word) == length:\n            return True\n    return False",
        "solution_func": "def g(length=4):\n    from itertools import product\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for p in product(alphabet, repeat=length):\n        yield ''.join(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding words of a specific length in a given list of words using a generator function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if there exists a word of a specific length in a list of words generated using a generator function. The solution function generates all possible words of the specified length and checks if any of them satisfy the condition.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix, target=0) -> bool:\n    for row in matrix:\n        if target in row:\n            return True\n    return False\n\ndef g(target=0):\n    from itertools import product\n    for n in range(2, 6):\n        for p in product(range(-5, 6), repeat=n):\n            if target in p:\n                return [list(p[i:i+n]) for i in range(0, len(p), n)]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves searching for a target value in a matrix using itertools product to generate all possible combinations of numbers within a certain range.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(pattern, size=5) -> bool:\n    for i in range(len(pattern) - size + 1):\n        if all(pattern[i+j] for j in range(size)):\n            return True\n    return False\n\ndef g(size=5):\n    from itertools import product\n    for n in range(2, size+1):\n        for p in product([True, False], repeat=n):\n            if any(all(p[i+j] for j in range(size)) for i in range(n - size + 1)):\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(matrix, target=0) -> bool:\n    for row in matrix:\n        if target in row:\n            return True\n    return False",
        "solution_func": "def g(target=0):\n    from itertools import product\n    for n in range(2, 6):\n        for p in product(range(-5, 6), repeat=n):\n            if target in p:\n                return [list(p[i:i+n]) for i in range(0, len(p), n)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that checks if a target value is present in any row of a given matrix, and a function g that generates a list of sublists from a product of ranges based on a target value. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves matrix operations, iteration, and list manipulation in Python, making it suitable for teaching algorithmic thinking and Python programming concepts to master's students in CS.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g():\n    return \"radar\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation to check if a string is a palindrome. The solution function returns the string 'radar', which is a palindrome. The puzzle tests the understanding of string manipulation and indexing in Python.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, target=9) -> bool:\n    return sum(int(digit) for digit in str(num)) == target\n\ndef g(target=9):\n    return 27\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome, and a function g() that returns the string 'radar'. The assertion checks if the function f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)\n\ndef g():\n    return [2, 4, 6, 8]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if all numbers in a list are even, which falls under Mathematical Operations and Conditional Logic.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, target=9) -> bool:\n    return sum(int(digit) for digit in str(num)) == target\n\ndef g(target=9):\n    return 27\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return all(num % 2 == 0 for num in lst)",
        "solution_func": "def g():\n    return [2, 4, 6, 8]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst: list) that checks if all numbers in a list are even, and a function g() that returns a list of even numbers. The puzzle tests if function f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and defining functions in Python. It is a simple puzzle that can be used to teach basic concepts of functions and list operations in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list) -> bool:\n    return len(lst) == len(set(lst))\n\ndef g():\n    return [1, 2, 3, 4, 5]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves set operations to check for uniqueness of elements in a list.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int, target=9) -> bool:\n    return sum(int(digit) for digit in str(num)) == target\n\ndef g(target=9):\n    return 27\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list) -> bool:\n    return len(lst) == len(set(lst))",
        "solution_func": "def g():\n    return [1, 2, 3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(lst) that checks if a list contains only unique elements, and then defining a function g() that returns a list with unique elements. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, set operations, and function definitions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, n=5) -> bool:\n    return text == text[::-1] and len(text) == n\ndef g(n=5):\n    return \"a\" * n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, n=5) -> bool:\n    return text == text[::-1] and len(text) == n",
        "solution_func": "def g(n=5):\n    return \"a\" * n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a given text is a palindrome and has a specific length, and a function g that generates a text of a specified length. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, conditionals, and function definition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(nums: List[int], n=10) -> bool:\n    return nums == sorted(nums) and len(nums) == n\ndef g(n=10):\n    return list(range(1, n+1))\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking its length. It also uses a default parameter in the function definition. The solution generates a list of integers from 1 to n. The topics used in this puzzle are: Sorting and Ordering, Default Parameters, List Operations.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(nums: List[int], n=10) -> bool:\n    return nums == sorted(nums) and len(nums) == n",
        "solution_func": "def g(n=10):\n    return list(range(1, n+1))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to write a function that generates a list of numbers from 1 to n and checks if the list is sorted and has a length of n."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list generation, sorting, and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(binary_num: str, n=8) -> bool:\n    return int(binary_num, 2) % 4 == 0 and len(binary_num) == n\ndef g(n=8):\n    return bin(4 * 2**(n-3))[2:]\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation, Mathematical Operations, and Conditional Logic.",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(binary_num: str, n=8) -> bool:\n    return int(binary_num, 2) % 4 == 0 and len(binary_num) == n",
        "solution_func": "def g(n=8):\n    return bin(4 * 2**(n-3))[2:]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a binary number is divisible by 4 and has a specific length, with the solution generating a binary number that meets these criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves converting a binary number to an integer, checking divisibility by 4 and length, and generating a binary number that satisfies these conditions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(fibonacci_nums: List[int], limit=100, num_fibonacci=10) -> bool:\n    assert len(fibonacci_nums) == num_fibonacci\n    return all(fibonacci_nums[i] + fibonacci_nums[i + 1] == fibonacci_nums[i + 2] for i in range(len(fibonacci_nums) - 2)) and all(num <= limit for num in fibonacci_nums)\n\ndef g(limit=100, num_fibonacci=10):\n    def generate_fibonacci_sequence(limit):\n        fibonacci_nums = [0, 1]\n        while fibonacci_nums[-1] + fibonacci_nums[-2] <= limit:\n            fibonacci_nums.append(fibonacci_nums[-1] + fibonacci_nums[-2])\n        return fibonacci_nums\n\n    return generate_fibonacci_sequence(limit)[:num_fibonacci]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion, Conditional Logic",
        "idx_generation": 83,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(fibonacci_nums: List[int], limit=100, num_fibonacci=10) -> bool:\n    assert len(fibonacci_nums) == num_fibonacci\n    return all(fibonacci_nums[i] + fibonacci_nums[i + 1] == fibonacci_nums[i + 2] for i in range(len(fibonacci_nums) - 2)) and all(num <= limit for num in fibonacci_nums)",
        "solution_func": "def g(limit=100, num_fibonacci=10):\n    def generate_fibonacci_sequence(limit):\n        fibonacci_nums = [0, 1]\n        while fibonacci_nums[-1] + fibonacci_nums[-2] <= limit:\n            fibonacci_nums.append(fibonacci_nums[-1] + fibonacci_nums[-2])\n        return fibonacci_nums\n\n    return generate_fibonacci_sequence(limit)[:num_fibonacci]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a list of Fibonacci numbers generated by a function meets certain criteria defined in the puzzle function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires generating a list of Fibonacci numbers using a function and then checking if the generated list satisfies specific conditions related to the Fibonacci sequence.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(number: int) -> bool:\n    assert str(number) == str(number)[::-1] and number % 11 == 0\n    return True\n\ndef g():\n    # brute force\n    for num in range(11, 1000):  # Start from 11 as the smallest palindromic multiple of 11\n        if str(num) == str(num)[::-1] and num % 11 == 0:\n            return num\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation, mathematical operations, and brute force search.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(sentence: str, word='python') -> bool:\n    assert len(word) > 1 and word in sentence and len(set(word)) == len(word)\n    return all(word in sentence[i:i+len(word)] for i in range(len(sentence) - len(word) + 1))\ndef g(word='python'):\n    # brute force\n    sentence = 'I love python programming'\n\n    from itertools import permutations\n    for p in permutations(word):\n        if all(char in word for char in p) and len(p) == len(set(p)):\n            return ''.join(p)\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(number: int) -> bool:\n    assert str(number) == str(number)[::-1] and number % 11 == 0\n    return True",
        "solution_func": "def g():\n    # brute force\n    for num in range(11, 1000):  # Start from 11 as the smallest palindromic multiple of 11\n        if str(num) == str(num)[::-1] and num % 11 == 0:\n            return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the smallest palindromic multiple of 11 within a certain range using a brute force approach."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a number is a palindrome and a multiple of 11, and then finding the smallest number that satisfies these conditions within a specified range.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\ndef f(divisors, n=10) -> bool:\n    for num in range(1, n+1):\n        if all(num % d == 0 for d in divisors):\n            return True\n    return False\n\ndef g(n=10):\n    for num in range(1, n+1):\n        yield num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(pattern, size=5) -> bool:\n    for i in range(len(pattern) - size + 1):\n        if all(pattern[i+j] for j in range(size)):\n            return True\n    return False\n\ndef g(size=5):\n    from itertools import product\n    for n in range(2, size+1):\n        for p in product([True, False], repeat=n):\n            if any(all(p[i+j] for j in range(size)) for i in range(n - size + 1)):\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\ndef f(divisors, n=10) -> bool:\n    for num in range(1, n+1):\n        if all(num % d == 0 for d in divisors):\n            return True\n    return False",
        "solution_func": "def g(n=10):\n    for num in range(1, n+1):\n        yield num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(divisors, n=10) that checks if there exists a number within a range from 1 to n that is divisible by all the divisors provided. The solution function g(n=10) generates numbers from 1 to n and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to use generators in Python to iterate over a range of numbers and check for divisibility by given divisors. It also tests the understanding of boolean conditions and function return values.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(factorial: int, number=5) -> bool:\n    if number < 0:\n        return False\n    result = 1\n    for i in range(1, number + 1):\n        result *= i\n    return result == factorial\n\ndef g(number=5):\n    result = 1\n    for i in range(1, number + 1):\n        result *= i\n    return result\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and recursion.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(combinations: List[str], target_str='hello') -> bool:\n    return any(''.join(comb) == target_str for comb in combinations)\n\ndef g(str_list=['he', 'll', 'o']):\n    def generate_combinations(strings):\n        result = ['']\n        for string in strings:\n            result += [x + string for x in result]\n        return result\n\n    return [comb for comb in generate_combinations(str_list) if comb]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(factorial: int, number=5) -> bool:\n    if number < 0:\n        return False\n    result = 1\n    for i in range(1, number + 1):\n        result *= i\n    return result == factorial",
        "solution_func": "def g(number=5):\n    result = 1\n    for i in range(1, number + 1):\n        result *= i\n    return result",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(factorial: int, number=5) and g(number=5), where f checks if the factorial of a number matches a given factorial value, and g calculates the factorial of a number. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves calculating the factorial of a number and checking if the calculated factorial matches a given factorial value. This can be a good exercise to practice understanding functions and algorithmic challenges in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_perfect_square(num: int) -> bool:\n    return math.isqrt(num) ** 2 == num\n\ndef f(numbers: Tuple[int, int], options=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    product_result = numbers[0] * numbers[1]\n    return is_perfect_square(product_result)\n\ndef g(options=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_perfect_square(c[0] * c[1]):\n                return c\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Permutations and Combinations, Number Theory",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "\n# Puzzle 2:\n# Puzzle description: The puzzle involves finding a pair of numbers from a given set of options such that their sum is a prime number.\nimport sympy\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_prime(num: int) -> bool:\n    return sympy.isprime(num)\n\ndef f(numbers: Tuple[int, int], options=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) -> bool:\n    sum_result = numbers[0] + numbers[1]\n    return is_prime(sum_result)\n\ndef g(options=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_prime(c[0] + c[1]):\n                return c\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_perfect_square(num: int) -> bool:\n    return math.isqrt(num) ** 2 == num\n\ndef f(numbers: Tuple[int, int], options=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    product_result = numbers[0] * numbers[1]\n    return is_perfect_square(product_result)",
        "solution_func": "def g(options=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_perfect_square(c[0] * c[1]):\n                return c",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the product of two numbers from a given set of options is a perfect square."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires the student to find a pair of numbers from a given set of options such that the product of the pair is a perfect square.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, values=[1, 3, 5]) -> bool:\n    return all(elem in values for elem in lst)\n\ndef g(values=[1, 3, 5]) -> list:\n    return values[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as List Manipulation, List Comprehension, and Assertions.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, pal=\"racecar\") -> bool:\n    return s == s[::-1]\n\ndef g(pal=\"racecar\") -> str:\n    def reverse(s):\n        if len(s) == 0:\n            return s\n        else:\n            return reverse(s[1:]) + s[0]\n    return reverse(pal)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, values=[1, 3, 5]) -> bool:\n    return all(elem in values for elem in lst)",
        "solution_func": "def g(values=[1, 3, 5]) -> list:\n    return values[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if all elements in a given list are present in a predefined list of values. Another function g returns the predefined list of values in reverse order, and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, the all() function, and list slicing in Python. It tests the student's ability to define functions, manipulate lists, and understand function composition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    return str(n) == str(n)[::-1]\n\ndef g():\n    n = 12321\n    while True:\n        n -= 1\n        if str(n) == str(n)[::-1]:\n            return n\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    if digit_sum <= 1:\n        return False\n    for i in range(2, int(math.sqrt(digit_sum)) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 9876\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        if digit_sum <= 1:\n            n -= 1\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(digit_sum)) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n -= 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    return str(n) == str(n)[::-1]",
        "solution_func": "def g():\n    n = 12321\n    while True:\n        n -= 1\n        if str(n) == str(n)[::-1]:\n            return n",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(n) that checks if a given integer is a palindrome, and a function g() that finds the largest palindrome number less than a given number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of palindrome numbers and requires finding the largest palindrome number less than a given number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\n    \ndef g(s=\"racecar\"):\n    return s + s[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(s=\"racecar\"):\n    return s + s[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given string is a palindrome by comparing it with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f(s) that returns True if the input string is a palindrome. The function g(s) concatenates the input string with its reverse. The assertion checks if the output of g(s) satisfies the condition of being a palindrome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return sum(data.values()) % 5 == 0\n\ndef g():\n    return {\"x\": 10, \"y\": 5, \"z\": 15}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic. The function f() calculates the sum of values in a dictionary and checks if it is divisible by 5. The solution function g() returns a dictionary with values that satisfy the condition for f().",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return len(data.values()) == len(set(data.values()))\n\ndef g():\n    return {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return sum(data.values()) % 5 == 0",
        "solution_func": "def g():\n    return {\"x\": 10, \"y\": 5, \"z\": 15}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary of string keys and integer values, and returns True if the sum of the values in the dictionary is divisible by 5. The solution function g returns a specific dictionary that satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, calculating the sum of values, and checking divisibility by 5. It is a good exercise for practicing dictionary manipulation and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return any(value < 0 for value in data.values())\n\ndef g():\n    return {\"p\": 10, \"q\": -5, \"r\": 8}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves conditional logic and dictionary manipulation.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return len(data.values()) == len(set(data.values()))\n\ndef g():\n    return {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return any(value < 0 for value in data.values())",
        "solution_func": "def g():\n    return {\"p\": 10, \"q\": -5, \"r\": 8}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary of string keys and integer values, and returns True if any of the values in the dictionary are negative. The solution function g returns a specific dictionary with negative and positive values to test the function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, list comprehension, and boolean expressions in Python. It tests the ability to check for negative values in a dictionary using a comprehension and return True if any negative value is found.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return all(key.isupper() for key in data.keys())\n\ndef g():\n    return {\"APPLE\": 10, \"BANANA\": 5, \"CHERRY\": 8}\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation by checking if all keys in a dictionary are uppercase strings.",
        "idx_generation": 84,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return len(data.values()) == len(set(data.values()))\n\ndef g():\n    return {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Dict\n\ndef f(data: Dict[str, int]) -> bool:\n    return all(key.isupper() for key in data.keys())",
        "solution_func": "def g():\n    return {\"APPLE\": 10, \"BANANA\": 5, \"CHERRY\": 8}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function f that takes a dictionary as input and checks if all keys in the dictionary are in uppercase. The solution function g returns a dictionary with uppercase keys, and the assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all keys in a dictionary are uppercase, which is a good exercise in understanding dictionary manipulation and string methods in Python. The solution provided meets the requirements of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(strings: List[str], concat='', target='hellopython') -> bool:\n    return concat.join(strings) == target\n\ndef g(concat=' ', target='hellopython'):\n    from itertools import permutations\n    strings = ['hello', 'python']\n    for perm in permutations(strings):\n        if ''.join(perm) == target:\n            return list(perm)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and importing modules (Itertools). It also includes permutations and combinations.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\ndef f(strings: List[str], concat='', target='hellopython') -> bool:\n    return concat.join(strings) == target",
        "solution_func": "def g(concat=' ', target='hellopython'):\n    from itertools import permutations\n    strings = ['hello', 'python']\n    for perm in permutations(strings):\n        if ''.join(perm) == target:\n            return list(perm)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to find a permutation of the strings 'hello' and 'python' that concatenates to form the target string 'hellopython'."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves using permutations to find the correct order of the strings to concatenate and match the target string.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    return li == sorted(li, reverse=True) and len(set(li)) >= 3\n\ndef g():\n    return [9, 7, 5, 3, 1]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list in reverse order and checking for the presence of at least 3 unique elements in the list.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(li: List[int]) -> bool:\n    return li == sorted(li) and len(set(li)) >= 5\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(li: List[int]) -> bool:\n    return li == sorted(li, reverse=True) and len(set(li)) >= 3",
        "solution_func": "def g():\n    return [9, 7, 5, 3, 1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that takes a list of integers as input and returns True if the list is sorted in descending order and contains at least 3 unique elements."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list is sorted in descending order and has at least 3 unique elements. The solution function returns a specific list that meets these criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(li: List[int]) -> bool:\n    return any(num < 0 for num in li) and any(num > 0 for num in li)\n\ndef g():\n    return [-1, -2, -3, 4, 5]\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation and conditional logic.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(li: List[int]) -> bool:\n    return li == sorted(li) and len(set(li)) >= 5\ndef g():\n    return [1, 2, 3, 4, 5, 6, 7]\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(li: List[int]) -> bool:\n    return any(num < 0 for num in li) and any(num > 0 for num in li)",
        "solution_func": "def g():\n    return [-1, -2, -3, 4, 5]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers and returns True if the list contains both negative and positive numbers. The solution function g returns a specific list of integers that satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking for the presence of both negative and positive numbers in a list of integers. The solution function provides an example list that meets the criteria.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes[1]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force search approach.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes[0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes[1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g(limit) that generates a list of prime numbers up to a specified limit. The puzzle requires finding the second prime number up to a limit of 20 using the g function and checking if it is a prime number using the f function."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, loops, and list comprehension in Python. It requires students to implement a prime number checking function and a prime number generation function to solve the challenge.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes[2]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves Number Theory (primes) and Mathematical Operations (range, modulo).",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes[0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes[2]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g(limit) that generates a list of prime numbers up to a specified limit and returns the third prime number in the list. The puzzle requires verifying that the third prime number generated by function g is indeed a prime number according to function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, loops, list comprehension, and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    sum_primes = primes[0] + primes[1]\n    return sum_primes\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes[0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    sum_primes = primes[0] + primes[1]\n    return sum_primes",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g(limit) that generates a list of prime numbers up to a specified limit and returns the sum of the first two prime numbers. The puzzle requires verifying if the sum of the first two prime numbers generated by g is indeed a prime number according to f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves prime number generation and checking for primality. It tests the understanding of prime numbers and function composition in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(arr: list) -> bool:\n    return all(arr[i] == arr[i-1] + arr[i-2] for i in range(2, len(arr)))\ndef g():\n    arr = [0, 1]\n    while len(arr) < 6:\n        arr.append(arr[-1] + arr[-2])\n    return arr\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to generate a sequence of numbers that follows a specific pattern.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True"
        ],
        "problem_func": "def f(arr: list) -> bool:\n    return all(arr[i] == arr[i-1] + arr[i-2] for i in range(2, len(arr)))",
        "solution_func": "def g():\n    arr = [0, 1]\n    while len(arr) < 6:\n        arr.append(arr[-1] + arr[-2])\n    return arr",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f(arr) that checks if the elements in the input list follow a specific pattern. The solution function g() generates a list of numbers following the pattern and returns it. The assertion at the end checks if the solution function g() satisfies the condition of the function f()."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding a specific pattern in a list of numbers and implementing a function to check for that pattern. The solution function generates a list that follows the pattern and verifies it using the function f(). This puzzle can be used to teach Python programming concepts related to list manipulation and pattern recognition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_num: int, threshold=10) -> bool:\n    return max_num > threshold\n\ndef g(numbers=[7, 12, 5]):\n    return max(numbers)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding the maximum number in a list and comparing it to a threshold value.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(total: int, target=10) -> bool:\n    return sum(total) == target\n\ndef g(numbers=[2, 3, 5]):\n    return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(max_num: int, threshold=10) -> bool:\n    return max_num > threshold",
        "solution_func": "def g(numbers=[7, 12, 5]):\n    return max(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the maximum number in a list of numbers and checking if it is greater than a specified threshold."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if the maximum number in a list exceeds a threshold, and then finding the maximum number in a given list to satisfy the condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(average: float, limit=4.5) -> bool:\n    return average > limit\n\ndef g(numbers=[3, 5, 7]):\n    return sum(numbers) / len(numbers)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(total: int, target=10) -> bool:\n    return sum(total) == target\n\ndef g(numbers=[2, 3, 5]):\n    return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(average: float, limit=4.5) -> bool:\n    return average > limit",
        "solution_func": "def g(numbers=[3, 5, 7]):\n    return sum(numbers) / len(numbers)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the average of a list of numbers is greater than a specified limit, and a function g that calculates the average of a given list of numbers. The puzzle requires ensuring that the function f returns True when applied to the output of function g."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of defining functions with parameters and default values, calculating averages, and using functions to check conditions. It also reinforces the concept of function composition and testing for correctness using assertions.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total_sum, threshold=10) -> bool:\n    return sum(total_sum) > threshold\n\ndef g(threshold=10) -> list:\n    return [threshold] * 5\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    return any(target in row for row in matrix)\n\ndef g(target=0) -> List[List[int]]:\n    matrix_size = 3\n    return [[target] * matrix_size for _ in range(matrix_size)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(total_sum, threshold=10) -> bool:\n    return sum(total_sum) > threshold",
        "solution_func": "def g(threshold=10) -> list:\n    return [threshold] * 5",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if the sum of a list is greater than a threshold, and g returns a list of a specified threshold repeated 5 times. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how functions can be used together to solve a problem, and how to pass arguments between functions to achieve the desired outcome.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text, char='a') -> bool:\n    return char in text\n\ndef g(char='a') -> str:\n    return char * 3\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    return any(target in row for row in matrix)\n\ndef g(target=0) -> List[List[int]]:\n    matrix_size = 3\n    return [[target] * matrix_size for _ in range(matrix_size)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text, char='a') -> bool:\n    return char in text",
        "solution_func": "def g(char='a') -> str:\n    return char * 3",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions: f(text, char='a') which checks if a specific character is in a given text, and g(char='a') which returns a string of the character repeated three times. The puzzle asserts that the result of f(g()) should be True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, function calls, default parameters, and boolean comparisons in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(numbers, threshold=5) -> bool:\n    return max(numbers) > threshold\n\ndef g(start=1, step=2) -> list:\n    return [start + i * step for i in range(4)]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves finding the maximum value in a list and checking if it is greater than a threshold value.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(matrix: List[List[int]], target=0) -> bool:\n    return any(target in row for row in matrix)\n\ndef g(target=0) -> List[List[int]]:\n    matrix_size = 3\n    return [[target] * matrix_size for _ in range(matrix_size)]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(numbers, threshold=5) -> bool:\n    return max(numbers) > threshold",
        "solution_func": "def g(start=1, step=2) -> list:\n    return [start + i * step for i in range(4)]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions: f(numbers, threshold) checks if the maximum number in a list is greater than a threshold, and g(start, step) generates a list of numbers based on a start value and step size. The assertion checks if f applied to the output of g returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic list manipulation and comparison operations in Python. It can be used to teach students about functions, list comprehension, and conditional statements in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(total: int, nums=[11, 22, 33, 44, 55, 66], threshold=100) -> bool:\n    return total > threshold\ndef g(nums=[11, 22, 33, 44, 55, 66], threshold=100):\n    return sum(num for num in nums if num % 2 == 0)\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 85,
        "target_skills": [],
        "puzzle_history": [
            "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True"
        ],
        "problem_func": "def f(total: int, nums=[11, 22, 33, 44, 55, 66], threshold=100) -> bool:\n    return total > threshold",
        "solution_func": "def g(nums=[11, 22, 33, 44, 55, 66], threshold=100):\n    return sum(num for num in nums if num % 2 == 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function g that calculates the sum of even numbers in a list and then check if the sum is greater than a given threshold."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list comprehension, conditional statements, and function calling in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, num=123456) -> bool:\n    return str(num) in text\n\ndef g(num=123456):\n    return \"This is a test string with \" + str(num) + \" included in it.\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(lst: list, target_value=50, operation='product') -> bool:\n    if operation == 'product':\n        return target_value == 1 or all((target_value % i == 0 for i in lst))\n    elif operation == 'sum':\n        return sum(lst) == target_value\n    else:\n        return False\ndef g(target_value=50, operation='product'):\n    import numpy as np\n    constant = 5\n    if operation == 'product':\n        return [int(target_value / constant)] * constant\n    elif operation == 'sum':\n        return np.random.randint(1, 10, constant).tolist()\n    else:\n        return []\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str, num=123456) -> bool:\n    return str(num) in text",
        "solution_func": "def g(num=123456):\n    return \"This is a test string with \" + str(num) + \" included in it.\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to create a function that checks if a given number is present in a given text string."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function f that checks if a number is present in a text string, and then creating a function g that generates a test string with the specified number included in it. The assertion at the end checks if f(g()) returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(lst: list, sorted_lst=[1, 2, 3, 4, 5]) -> bool:\n    return lst == sorted_lst\n\ndef g(lst=[3, 1, 2, 5, 4]):\n    return sorted(lst)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list and checking if it matches a predefined sorted list. It demonstrates the use of default function arguments and list sorting in Python.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, rev='racecar') -> bool:\n    return s == rev\n    \ndef g(s='racecar'):\n    if len(s) <= 1:\n        return s\n    return g(s[1:]) + s[0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(lst: list, sorted_lst=[1, 2, 3, 4, 5]) -> bool:\n    return lst == sorted_lst",
        "solution_func": "def g(lst=[3, 1, 2, 5, 4]):\n    return sorted(lst)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to define a function that sorts a given list and then checks if the sorted list matches a predefined sorted list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list sorting and comparison in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int, square=25) -> bool:\n    return num == square\n\ndef g(num=5):\n    return num ** 2\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, rev='racecar') -> bool:\n    return s == rev\n    \ndef g(s='racecar'):\n    if len(s) <= 1:\n        return s\n    return g(s[1:]) + s[0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int, square=25) -> bool:\n    return num == square",
        "solution_func": "def g(num=5):\n    return num ** 2",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f(num: int, square=25) -> bool and g(num=5), where f checks if the square of a given number is equal to a specified square value, and g returns the square of a given number. The assert statement checks if f(g()) evaluates to True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, parameter passing, and function invocation in Python. It also tests the concept of function composition and assertion testing.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(lst: list) -> bool:\n    return len(lst) != len(set(lst))\n\ndef g(size=5) -> list:\n    return random.choices(range(1, 10), k=size)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking for duplicates in a list using set operations and generating random numbers using the random module.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List \ndef f(inds: List[int], s='algorithmicthinking', target='') -> bool:\n    (i, j) = inds\n    return s[i:j] == target\ndef g(s='algorithmicthinking', target=''):\n    from itertools import permutations\n    for i, j in permutations(range(len(s)), 2):\n        if s[i:j] == target:\n            return [i, j]\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(lst: list) -> bool:\n    return len(lst) != len(set(lst))",
        "solution_func": "def g(size=5) -> list:\n    return random.choices(range(1, 10), k=size)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a list of random numbers and checking if there are any duplicates in the list."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of list manipulation and the use of set to identify duplicates in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, target='a') -> bool:\n    return target in text\n\ndef g(target='a'):\n    return 'abcdefghijklmnopqrstuvwxyz' if target in 'abcdefghijklmnopqrstuvwxyz' else ''\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves String Manipulation and Conditional Logic.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, target='a') -> bool:\n    return target in text",
        "solution_func": "def g(target='a'):\n    return 'abcdefghijklmnopqrstuvwxyz' if target in 'abcdefghijklmnopqrstuvwxyz' else ''",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a target character is present in a given text, and g returns the alphabet if the target character is 'a'. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is about checking if a specific character is present in a given text and returning the alphabet if the target character is 'a'. The assertion ensures that the solution g returns the correct output for the given condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    return word == word[::-1]\n\ndef g(words=['level', 'radar', 'python', 'madam']):\n    palindromes = [word for word in words if word == word[::-1]]\n    return max(palindromes, key=len)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes[0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    return word == word[::-1]",
        "solution_func": "def g(words=['level', 'radar', 'python', 'madam']):\n    palindromes = [word for word in words if word == word[::-1]]\n    return max(palindromes, key=len)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(word: str) that checks if a given word is a palindrome, and a function g(words=['level', 'radar', 'python', 'madam']) that finds the longest palindrome in a list of words. The assertion checks if the longest palindrome found by g is indeed a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding palindrome checking and list comprehension in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)\n\ndef g(strings=['python', 'unique', 'programming']):\n    unique_strings = [s for s in strings if len(set(s)) == len(s)]\n    return min(unique_strings, key=len)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and set operations.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(limit=20):\n    primes = []\n    for num in range(2, limit + 1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes[0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g(strings=['python', 'unique', 'programming']):\n    unique_strings = [s for s in strings if len(set(s)) == len(s)]\n    return min(unique_strings, key=len)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires finding the shortest string in a list of strings where each string contains only unique characters."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given list of strings contains only unique characters and then finding the shortest string among those unique strings.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 4, 6, 8, 10, 12]) -> bool:\n    total_sum = sum(numbers)\n    return total_sum % 2 == 0\n\ndef g(options=[2, 4, 6, 8, 10, 12]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total_sum = sum(c)\n            if total_sum % 2 == 0:\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, importing modules (Itertools), and permutations and combinations.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            product = 1\n            for num in p:\n                product *= num\n            if product % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 4, 6, 8, 10, 12]) -> bool:\n    total_sum = sum(numbers)\n    return total_sum % 2 == 0",
        "solution_func": "def g(options=[2, 4, 6, 8, 10, 12]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            total_sum = sum(c)\n            if total_sum % 2 == 0:\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of numbers from a given list of options that results in an even total sum."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to use combinations and sum of elements in Python to find a solution that satisfies the given condition.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import combinations\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    max_num = max(numbers)\n    return is_prime(max_num)\n\ndef g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            max_num = max(c)\n            if is_prime(max_num):\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves topics related to prime numbers, list manipulation, itertools module, and function composition.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            product = 1\n            for num in p:\n                product *= num\n            if product % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import combinations\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    max_num = max(numbers)\n    return is_prime(max_num)",
        "solution_func": "def g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            max_num = max(c)\n            if is_prime(max_num):\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if the maximum number in a list of options is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to implement a function to check if a given number is prime and then use this function to find the maximum prime number in a list of options.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[1, 2, 3, 4, 5, 6]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return avg.is_integer()\n\ndef g(options=[1, 2, 3, 4, 5, 6]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            avg = sum(c) / len(c)\n            if avg.is_integer():\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, list operations, and itertools module for combinations. It also includes checking if a number is an integer.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[1, 3, 5, 7, 9, 11]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 != 0\n\ndef g(options=[1, 3, 5, 7, 9, 11]):\n    for n in range(1, len(options)+1):\n        for p in permutations(options, n):\n            product = 1\n            for num in p:\n                product *= num\n            if product % 2 != 0:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[1, 2, 3, 4, 5, 6]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return avg.is_integer()",
        "solution_func": "def g(options=[1, 2, 3, 4, 5, 6]):\n    for n in range(1, len(options)+1):\n        for c in combinations(options, n):\n            avg = sum(c) / len(c)\n            if avg.is_integer():\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of numbers from a given set of options such that the average of the numbers in the combination is an integer."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to understand how to calculate averages, work with combinations, and check if a number is an integer in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 90\n    return True\n\ndef g():\n    return [32, 56, 78, 21, 45, 67, 89, 10, 43, 54]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering, Exception Handling",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 90\n    return True",
        "solution_func": "def g():\n    return [32, 56, 78, 21, 45, 67, 89, 10, 43, 54]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers, sorts the list in descending order, and checks if the sum of the sorted numbers is greater than 90. The solution function g returns a specific list of integers that satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of integers and checking the sum of the sorted numbers, which is a common programming task in Python. The solution function g provides a list that meets the condition set by function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 110\n    return True\n\ndef g():\n    return [65, 78, 23, 98, 12, 56, 45, 32, 87, 10]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of numbers, performing a sum check, and using assert for validation.",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 110\n    return True",
        "solution_func": "def g():\n    return [65, 78, 23, 98, 12, 56, 45, 32, 87, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers, sorts the list in descending order, and checks if the sum of the sorted numbers is greater than 110. The solution function g returns a specific list of integers. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of integers and checking the sum of the sorted numbers, which is a basic algorithmic challenge. The solution function g provides a specific list of integers to test the algorithm. The assertion ensures that the solution function g satisfies the conditions of the algorithmic challenge defined in function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 120\n    return True\n\ndef g():\n    return [45, 78, 32, 87, 19, 56, 23, 65, 98, 10]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Sorting and Ordering, Exception Handling",
        "idx_generation": 86,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 100\n    return True\n\ndef g():\n    return [45, 67, 23, 89, 10, 56, 34, 78, 95, 12]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 120\n    return True",
        "solution_func": "def g():\n    return [45, 78, 32, 87, 19, 56, 23, 65, 98, 10]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of integers, sorts the list in descending order, checks if the sum of the sorted numbers is greater than 120, and returns True if the condition is met. The solution function g returns a specific list of integers."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a list of integers and checking the sum of the sorted numbers, which is a basic algorithmic challenge. The solution function g provides a list that satisfies the condition of the puzzle.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g(input_str=\"radar\"):\n    return input_str[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves string manipulation and conditional logic.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], unique_values={1, 2, 3, 4, 5}) -> bool:\n    return len(nums) == len(unique_values) and len(set(nums)) == len(nums)\n    \ndef g(input_list=[1, 2, 3, 4, 5]):\n    return list(set(input_list))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g(input_str=\"radar\"):\n    return input_str[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given input string is a palindrome or not by comparing it with its reverse."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function to check if a string is a palindrome and providing a solution that reverses the input string to check for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef g(input_num=7):\n    return input_num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking for prime numbers using a simple algorithm. It does not directly relate to any of the listed topics.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(nums: List[int], unique_values={1, 2, 3, 4, 5}) -> bool:\n    return len(nums) == len(unique_values) and len(set(nums)) == len(nums)\n    \ndef g(input_list=[1, 2, 3, 4, 5]):\n    return list(set(input_list))\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(input_num=7):\n    return input_num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f(num) that checks if a given number is a prime number, and a function g(input_num) that returns a specific number. The puzzle requires g to return a number that satisfies the condition of being a prime number according to function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a given number is a prime number using function f, and ensuring that function g returns a number that satisfies the prime number condition. In this case, g(7) is expected to return a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\n\nimport math\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_even(num: int) -> bool:\n    return num % 2 == 0\n\ndef f(numbers: Tuple[int, int], options=[1, 5, 9, 13, 17, 21, 25, 29, 33, 37]) -> bool:\n    diff_result = abs(numbers[0] - numbers[1])\n    return is_even(diff_result)\n\ndef g(options=[1, 5, 9, 13, 17, 21, 25, 29, 33, 37]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_even(abs(c[0] - c[1])):\n                return c\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, importing modules (Itertools), and permutations and combinations.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_perfect_square(num: int) -> bool:\n    return math.isqrt(num) ** 2 == num\n\ndef f(numbers: Tuple[int, int], options=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) -> bool:\n    product_result = numbers[0] * numbers[1]\n    return is_perfect_square(product_result)\n\ndef g(options=[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_perfect_square(c[0] * c[1]):\n                return c\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\n\nfrom typing import Tuple\nfrom itertools import combinations\n\ndef is_even(num: int) -> bool:\n    return num % 2 == 0\n\ndef f(numbers: Tuple[int, int], options=[1, 5, 9, 13, 17, 21, 25, 29, 33, 37]) -> bool:\n    diff_result = abs(numbers[0] - numbers[1])\n    return is_even(diff_result)",
        "solution_func": "def g(options=[1, 5, 9, 13, 17, 21, 25, 29, 33, 37]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, 2):\n            if is_even(abs(c[0] - c[1])):\n                return c",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if the absolute difference between two numbers from a given tuple is even, and a function g that iterates through combinations of numbers from a list to find a pair with an even absolute difference."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves basic concepts of functions, loops, conditionals, and mathematical operations in Python. It can be used to teach students how to work with functions, loops, and conditional statements in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(adj_list: List[List[int]]) -> bool:\n    def dfs(node, visited):\n        visited.add(node)\n        for neighbor in adj_list[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited)\n\n    visited_nodes = set()\n    dfs(0, visited_nodes)\n\n    return len(visited_nodes) == len(adj_list)\n\ndef g():\n    adj_list = [[1, 2], [0, 2], [0, 1, 3], [2]]\n\n    return adj_list\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "explanation_emb": "Graph Theory (paths, edges, vertices)",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "from typing import List\n\ndef f(adj_list: List[List[int]]) -> bool:\n    def dfs(node, visited):\n        visited.add(node)\n        for neighbor in adj_list[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited)\n\n    visited_nodes = set()\n    dfs(0, visited_nodes)\n\n    return len(visited_nodes) == len(adj_list)",
        "solution_func": "def g():\n    adj_list = [[1, 2], [0, 2], [0, 1, 3], [2]]\n\n    return adj_list",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given adjacency list represents a connected graph starting from node 0."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of graph traversal using depth-first search (DFS) to check if all nodes are reachable from node 0.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(string: str) -> bool:\n    return len(set(string)) == len(string)\n\ndef g(length=5, options=\"abcdefghijklmnopqrstuvwxyz\"):\n    import random\n    return ''.join(random.sample(options, length))\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(lists: List[List[int]], target_sum=10, min_length=2) -> bool:\n    return all(sum(l) == target_sum for l in lists) and all(len(l) >= min_length for l in lists)\n\ndef g(target_sum=10, min_length=2, options=[[1, 2, 7], [3, 4, 3], [2, 5, 3], [1, 6, 3]]):\n    from itertools import combinations\n    for n in range(2, len(options)+1):\n        for c in combinations(options, n):\n            if all(sum(l) == target_sum for l in c) and all(len(l) >= min_length for l in c):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(string: str) -> bool:\n    return len(set(string)) == len(string)",
        "solution_func": "def g(length=5, options=\"abcdefghijklmnopqrstuvwxyz\"):\n    import random\n    return ''.join(random.sample(options, length))",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to generate a random string of a specified length using a given set of options, and then check if all characters in the string are unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to generate a random string and check for uniqueness of characters in the string.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(word: str) -> bool:\n    word = word.lower()\n    return word == word[::-1]\n\ndef g():\n    return \"Aibohphobia\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 90\n    return True\n\ndef g():\n    return [32, 56, 78, 21, 45, 67, 89, 10, 43, 54]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(word: str) -> bool:\n    word = word.lower()\n    return word == word[::-1]",
        "solution_func": "def g():\n    return \"Aibohphobia\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given word is a palindrome (reads the same forwards and backwards) by comparing the word to its reverse after converting it to lowercase."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves defining a function that checks if a word is a palindrome and then providing a specific word 'Aibohphobia' as input to the function to verify the palindrome check.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return avg < 50\n\ndef g():\n    return [10, 20, 30, 40]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations and conditional logic to calculate the average of a list of numbers and check if it is less than 50.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 90\n    return True\n\ndef g():\n    return [32, 56, 78, 21, 45, 67, 89, 10, 43, 54]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[int]) -> bool:\n    avg = sum(numbers) / len(numbers)\n    return avg < 50",
        "solution_func": "def g():\n    return [10, 20, 30, 40]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves a function f that calculates the average of a list of numbers and returns True if the average is less than 50. The solution function g returns a specific list of numbers that satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle is suitable for teaching Python programming concepts such as list manipulation, function definition, and comparison operations.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(strings: List[str]) -> bool:\n    lengths = [len(s) for s in strings]\n    return all(length == lengths[0] for length in lengths)\n\ndef g():\n    return [\"abc\", \"def\", \"ghi\"]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, List Operations",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 90\n    return True\n\ndef g():\n    return [32, 56, 78, 21, 45, 67, 89, 10, 43, 54]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(strings: List[str]) -> bool:\n    lengths = [len(s) for s in strings]\n    return all(length == lengths[0] for length in lengths)",
        "solution_func": "def g():\n    return [\"abc\", \"def\", \"ghi\"]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a list of strings and checks if all strings have the same length. The solution function g returns a list of strings and the puzzle asserts that f(g()) should return True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if all strings in a list have the same length, which is a common programming task. The solution function g returns a list of strings for testing the function f. This puzzle can be used to teach Python programming concepts related to list comprehension and boolean operations.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(max_product: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    return max_product == max(a * b * c for i, a in enumerate(numbers) for j, b in enumerate(numbers[i+1:]) for c in numbers[i+j+2:])\n\ndef g(numbers=[1, 2, 3, 4, 5]):\n    max_product = 0\n    for i, num1 in enumerate(numbers):\n        for j, num2 in enumerate(numbers[i+1:]):\n            for num3 in numbers[i+j+2:]:\n                product = num1 * num2 * num3\n                if product > max_product:\n                    max_product = product\n    return max_product\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, brute force search, and conditional logic.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, substrings=['a', 'b', 'c', 'd', 'e']) -> bool:\n    return s == s[::-1]\n\ndef g(substrings=['a', 'b', 'c', 'd', 'e']):\n    from itertools import combinations\n    for n in range(1, len(substrings)+1):\n        for c in combinations(substrings, n):\n            if ''.join(c) == ''.join(c)[::-1]:\n                return ''.join(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(max_product: int, numbers=[1, 2, 3, 4, 5]) -> bool:\n    return max_product == max(a * b * c for i, a in enumerate(numbers) for j, b in enumerate(numbers[i+1:]) for c in numbers[i+j+2:])",
        "solution_func": "def g(numbers=[1, 2, 3, 4, 5]):\n    max_product = 0\n    for i, num1 in enumerate(numbers):\n        for j, num2 in enumerate(numbers[i+1:]):\n            for num3 in numbers[i+j+2:]:\n                product = num1 * num2 * num3\n                if product > max_product:\n                    max_product = product\n    return max_product",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding the maximum product of three numbers in a given list of numbers using nested loops and list comprehension."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle challenges students to understand nested loops, list comprehension, and comparison of products to find the maximum product of three numbers in a list.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import Dict\n\ndef f(int_dict: Dict[str, int]) -> bool:\n    multiplied_values = [value * 2 for value in int_dict.values()]\n    assert sum(multiplied_values) > 50\n    return True\n\ndef g():\n    return {'a': 7, 'b': 5, 'c': 9, 'd': 6, 'e': 4}\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves mathematical operations, conditional logic, and exception handling.",
        "idx_generation": 87,
        "target_skills": [],
        "puzzle_history": [
            "\n\nfrom typing import List\n\ndef f(numbers: List[int]) -> bool:\n    sorted_numbers = sorted(numbers, reverse=True)\n    assert sum(sorted_numbers) > 110\n    return True\n\ndef g():\n    return [65, 78, 23, 98, 12, 56, 45, 32, 87, 10]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import Dict\n\ndef f(int_dict: Dict[str, int]) -> bool:\n    multiplied_values = [value * 2 for value in int_dict.values()]\n    assert sum(multiplied_values) > 50\n    return True",
        "solution_func": "def g():\n    return {'a': 7, 'b': 5, 'c': 9, 'd': 6, 'e': 4}",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that takes a dictionary of strings to integers, multiplies the values by 2, and checks if the sum of the multiplied values is greater than 50. The solution function g returns a specific dictionary that satisfies the condition in function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with dictionaries, list comprehension, and assertion for checking a condition. It tests the understanding of dictionary manipulation and condition checking in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport math\nfrom typing import List\n\ndef f(elements: List[int], check_common_difference=False) -> bool:\n    if len(elements) < 2:\n        return False\n    common_difference = elements[1] - elements[0]\n    is_arithmetic_progression = all(elements[i] - elements[i-1] == common_difference for i in range(2, len(elements)))\n    return is_arithmetic_progression if check_common_difference else all(is_prime(e) for e in elements)\n\ndef g(check_common_difference=False):\n    elements = [2, 3, 5, 7]\n    return elements if not check_common_difference else elements[1] - elements[0]\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, importing modules (math), and number theory (primes).",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(elements: List[int], check_common_ratio=False) -> bool:\n    if len(elements) < 2:\n        return False\n    common_ratio = elements[1] / elements[0]\n    is_geometric_progression = all(elements[i] / elements[i-1] == common_ratio for i in range(2, len(elements)))\n    return is_geometric_progression if check_common_ratio else all(e % 2 == 0 for e in elements)\n\ndef g(check_common_ratio=False):\n    elements = [2, 4, 8, 16]\n    return elements if not check_common_ratio else elements[1] / elements[0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import math\nfrom typing import List\n\ndef f(elements: List[int], check_common_difference=False) -> bool:\n    if len(elements) < 2:\n        return False\n    common_difference = elements[1] - elements[0]\n    is_arithmetic_progression = all(elements[i] - elements[i-1] == common_difference for i in range(2, len(elements)))\n    return is_arithmetic_progression if check_common_difference else all(is_prime(e) for e in elements)",
        "solution_func": "def g(check_common_difference=False):\n    elements = [2, 3, 5, 7]\n    return elements if not check_common_difference else elements[1] - elements[0]\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves checking if a given list of integers forms an arithmetic progression or if all elements in the list are prime numbers, based on a specified condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list manipulation, arithmetic progression, prime numbers, and function calls in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(elements: List[int], count_element=0) -> bool:\n    is_sorted = all(elements[i] <= elements[i+1] for i in range(len(elements) - 1))\n    return is_sorted if count_element == 0 else elements.count(count_element)\n\ndef g(count_element=0):\n    elements = [3, 5, 7, 9]\n    return elements if count_element == 0 else 7\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if it is sorted. It also includes conditional logic based on the count of a specific element in the list.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(elements: List[int], check_common_ratio=False) -> bool:\n    if len(elements) < 2:\n        return False\n    common_ratio = elements[1] / elements[0]\n    is_geometric_progression = all(elements[i] / elements[i-1] == common_ratio for i in range(2, len(elements)))\n    return is_geometric_progression if check_common_ratio else all(e % 2 == 0 for e in elements)\n\ndef g(check_common_ratio=False):\n    elements = [2, 4, 8, 16]\n    return elements if not check_common_ratio else elements[1] / elements[0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(elements: List[int], count_element=0) -> bool:\n    is_sorted = all(elements[i] <= elements[i+1] for i in range(len(elements) - 1))\n    return is_sorted if count_element == 0 else elements.count(count_element)",
        "solution_func": "def g(count_element=0):\n    elements = [3, 5, 7, 9]\n    return elements if count_element == 0 else 7",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of integers is sorted or counts the occurrences of a specific element in the list. The solution function g returns a list of integers or a specific element based on the input parameter. The puzzle tests whether the list returned by g is sorted or contains a specific element."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list is sorted or counting occurrences of a specific element in the list. The solution function g returns a list or a specific element based on the input parameter, and the puzzle tests if the list returned by g meets the sorting condition or contains the specified element.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(elements: List[int], compute_sum=False) -> bool:\n    all_positive_integers = all(e > 0 for e in elements)\n    return all_positive_integers if not compute_sum else sum(elements)\n\ndef g(compute_sum=False):\n    elements = [1, 2, 3, 4]\n    return elements if not compute_sum else sum(elements)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves list manipulation, conditional logic, and mathematical operations.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(elements: List[int], check_common_ratio=False) -> bool:\n    if len(elements) < 2:\n        return False\n    common_ratio = elements[1] / elements[0]\n    is_geometric_progression = all(elements[i] / elements[i-1] == common_ratio for i in range(2, len(elements)))\n    return is_geometric_progression if check_common_ratio else all(e % 2 == 0 for e in elements)\n\ndef g(check_common_ratio=False):\n    elements = [2, 4, 8, 16]\n    return elements if not check_common_ratio else elements[1] / elements[0]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(elements: List[int], compute_sum=False) -> bool:\n    all_positive_integers = all(e > 0 for e in elements)\n    return all_positive_integers if not compute_sum else sum(elements)",
        "solution_func": "def g(compute_sum=False):\n    elements = [1, 2, 3, 4]\n    return elements if not compute_sum else sum(elements)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if all elements in a list are positive integers and g returns a list of positive integers. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, boolean expressions, and function calls in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\nimport string\n\ndef f(s: str) -> bool:\n    return s == s[::-1]\n\ndef g(length=5):\n    chars = string.ascii_lowercase\n    mid = length // 2\n    if length % 2 == 0:\n        left = ''.join(random.choices(chars, k=mid))\n        return left + left[::-1]\n    else:\n        left = ''.join(random.choices(chars, k=mid))\n        return left + random.choice(chars) + left[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Randomization",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True"
        ],
        "problem_func": "import random\nimport string\n\ndef f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g(length=5):\n    chars = string.ascii_lowercase\n    mid = length // 2\n    if length % 2 == 0:\n        left = ''.join(random.choices(chars, k=mid))\n        return left + left[::-1]\n    else:\n        left = ''.join(random.choices(chars, k=mid))\n        return left + random.choice(chars) + left[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining two functions, f(s: str) -> bool and g(length=5), where f checks if a given string is a palindrome and g generates a random string that may or may not be a palindrome. The assert statement checks if the generated string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation, random module usage, and palindrome checking in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef g():\n    import random\n    while True:\n        num = random.randint(2, 100)\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            return num\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking for prime numbers using a brute force approach.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str) -> bool:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return all(char.lower() in vowels for char in s)\n\ndef g():\n    import random\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    while True:\n        length = random.randint(5, 10)\n        new_string = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=length))\n        if all(char.lower() in vowels for char in new_string):\n            return new_string\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "solution_func": "def g():\n    import random\n    while True:\n        num = random.randint(2, 100)\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            return num",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f(n) and g(), where f(n) checks if a given number is a prime number and g() generates a random number and returns it if it is prime. The assertion checks if the generated random number by g() is indeed a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding prime numbers, generating random numbers, and using list comprehension in Python. It is a good puzzle to teach Python programming concepts to master's students in CS.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(tuples: list) -> bool:\n    first_elements = [tup[0] for tup in tuples]\n    return len(first_elements) == len(set(first_elements))\n\ndef g():\n    import random\n\n    while True:\n        tuples = [(random.randint(1, 5), random.randint(6, 10)) for _ in range(5)]\n        if len(set([tup[0] for tup in tuples])) == len(tuples):\n            return tuples\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves generating random tuples and checking if the first elements of the tuples are unique. It requires knowledge of list comprehensions, sets, random module, and conditional logic.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(dct: dict) -> bool:\n    return all(val % 2 == 0 for val in dct.values())\n    \ndef g():\n    import random\n    while True:\n        dct = {num: num ** 2 for num in range(2, 11, 2)}\n        if all(val % 2 == 0 for val in dct.values()):\n            return dct\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(tuples: list) -> bool:\n    first_elements = [tup[0] for tup in tuples]\n    return len(first_elements) == len(set(first_elements))",
        "solution_func": "def g():\n    import random\n\n    while True:\n        tuples = [(random.randint(1, 5), random.randint(6, 10)) for _ in range(5)]\n        if len(set([tup[0] for tup in tuples])) == len(tuples):\n            return tuples",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires generating a list of tuples with random elements, and checking if the first elements of the tuples are all unique."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves generating random tuples and checking if the first elements of the tuples are unique. The solution function g() generates the tuples and the puzzle function f(tuples) checks if the first elements are unique.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(integers: List[int], target_sum=10, max_count=5) -> bool:\n    return sum(integers) == target_sum and all((n >= 0 for n in integers)) and len(integers) <= max_count\n\ndef g(target_sum=10, max_count=5):\n    \"\"\"\n    This solution generates a list of integers that sum up to the target_sum.\n    \"\"\"\n    integers = []\n    remaining_sum = target_sum\n\n    for _ in range(max_count):\n        if remaining_sum <= 0:\n            break\n        num = min(remaining_sum, 2)\n        integers.append(num)\n        remaining_sum -= num\n\n    return integers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, and list manipulation.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(integers: List[int], target_sum=10, max_count=5) -> bool:\n    return sum(integers) == target_sum and all((n >= 0 for n in integers)) and len(integers) <= max_count",
        "solution_func": "def g(target_sum=10, max_count=5):\n    \"\"\"\n    This solution generates a list of integers that sum up to the target_sum.\n    \"\"\"\n    integers = []\n    remaining_sum = target_sum\n\n    for _ in range(max_count):\n        if remaining_sum <= 0:\n            break\n        num = min(remaining_sum, 2)\n        integers.append(num)\n        remaining_sum -= num\n\n    return integers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of integers sums up to a target sum, all integers are non-negative, and the list length is within a maximum count. The solution function g generates a list of integers that sum up to the target sum using a specific algorithm."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking conditions on a list of integers and generating a list that meets those conditions. It focuses on understanding list operations, conditions, and algorithm design in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(bools: List[bool], target_count=3, has_true=True) -> bool:\n    return len(bools) == target_count and any(bools) == has_true\n\ndef g(target_count=3, has_true=True):\n    \"\"\"\n    This solution generates a list of booleans with the specified criteria.\n    \"\"\"\n    bools = [has_true] * target_count\n    return bools\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves list manipulation and conditional logic to generate a list of booleans with specific criteria. The solution function g() creates a list of booleans based on the input parameters and checks if the criteria are met using the function f().",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(bools: List[bool], target_count=3, has_true=True) -> bool:\n    return len(bools) == target_count and any(bools) == has_true",
        "solution_func": "def g(target_count=3, has_true=True):\n    \"\"\"\n    This solution generates a list of booleans with the specified criteria.\n    \"\"\"\n    bools = [has_true] * target_count\n    return bools",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of booleans meets certain criteria, and a function g that generates a list of booleans based on specified parameters. The solution g generates a list of booleans with the specified criteria and f checks if the generated list meets the criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding list operations, boolean comparisons, and function parameter defaults in Python. It requires students to define a function to generate a list of booleans and another function to check if the generated list meets specific conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(numbers: List[float], target_sum=20.0, min_count=2) -> bool:\n    return sum(numbers) == target_sum and len(numbers) >= min_count\n\ndef g(target_sum=20.0, min_count=2):\n    \"\"\"\n    This solution generates a list of numbers that sum up to the target_sum.\n    \"\"\"\n    numbers = [10.0, 10.0]\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to generate a list of numbers that sum up to a target value. It also includes list manipulation and assertion testing.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(strings: List[str], target_length=15, max_count=3) -> bool:\n    return sum(len(s) for s in strings) == target_length and all((s.isalpha() for s in strings)) and len(strings) <= max_count\n\ndef g(target_length=15, max_count=3):\n    \"\"\"\n    This solution uses a greedy algorithm to generate a list of strings that sum up to the target_length.\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    strings = []\n    remaining_length = target_length\n\n    for _ in range(max_count):\n        if remaining_length <= 0:\n            break\n        string_length = min(remaining_length, len(alphabet))\n        strings.append(alphabet[:string_length])\n        remaining_length -= string_length\n\n    return strings\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(numbers: List[float], target_sum=20.0, min_count=2) -> bool:\n    return sum(numbers) == target_sum and len(numbers) >= min_count",
        "solution_func": "def g(target_sum=20.0, min_count=2):\n    \"\"\"\n    This solution generates a list of numbers that sum up to the target_sum.\n    \"\"\"\n    numbers = [10.0, 10.0]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f that checks if a list of numbers sums up to a target sum and has a minimum count of elements. The solution function g generates a list of numbers that meet the criteria."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a list of numbers sums up to a target sum with a minimum count of elements. The solution function generates a list that satisfies these conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    list_sum = sum(numbers)\n    return list_sum**0.5 == int(list_sum**0.5)\n\ndef g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, n):\n            if sum(c)**0.5 == int(sum(c)**0.5):\n                return list(c)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "This puzzle involves Mathematical Operations, Conditional Logic, Importing Modules (Itertools), and Permutations and Combinations.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    list_sum = sum(numbers)\n    if list_sum <= 1:\n        return False\n    for i in range(2, int(list_sum**0.5) + 1):\n        if list_sum % i == 0:\n            return False\n    return True\n\ndef g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            if sum(p) > 1:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    list_sum = sum(numbers)\n    return list_sum**0.5 == int(list_sum**0.5)",
        "solution_func": "def g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, n):\n            if sum(c)**0.5 == int(sum(c)**0.5):\n                return list(c)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a combination of numbers from a given list that satisfies a specific condition."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires students to find a subset of numbers from a list such that the square root of the sum of the subset is an integer.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    max_num = max(numbers)\n    if max_num < 2:\n        return False\n    for i in range(2, int(max_num**0.5) + 1):\n        if max_num % i == 0:\n            return False\n    return True\n\ndef g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(1, len(options) + 1):\n        for p in permutations(options, n):\n            if max(p) > 1:\n                return list(p)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "Number Theory (factors, primes, etc.)",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    list_sum = sum(numbers)\n    if list_sum <= 1:\n        return False\n    for i in range(2, int(list_sum**0.5) + 1):\n        if list_sum % i == 0:\n            return False\n    return True\n\ndef g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(len(options), 0, -1):\n        for p in permutations(options, n):\n            if sum(p) > 1:\n                return list(p)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom itertools import permutations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    max_num = max(numbers)\n    if max_num < 2:\n        return False\n    for i in range(2, int(max_num**0.5) + 1):\n        if max_num % i == 0:\n            return False\n    return True",
        "solution_func": "def g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(1, len(options) + 1):\n        for p in permutations(options, n):\n            if max(p) > 1:\n                return list(p)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves finding a list of numbers from a given set of options such that the maximum number in the list is a prime number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires generating permutations of numbers from a given set of options and checking if the maximum number in the generated list is a prime number.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return len(set(s)) == len(s)\n\ndef g():\n    return \"python\"\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and set operations.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    if digit_sum <= 1:\n        return False\n    for i in range(2, int(math.sqrt(digit_sum)) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 9876\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        if digit_sum <= 1:\n            n -= 1\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(digit_sum)) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n -= 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return len(set(s)) == len(s)",
        "solution_func": "def g():\n    return \"python\"",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(s: str) that checks if all characters in a given string are unique, and a function g() that returns the string 'python'. The puzzle is to ensure that f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding how to check for unique characters in a string and ensuring that the function g() returns the correct string to satisfy the condition of f(g()) == True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(matrix: list) -> bool:\n    return all(len(row) == len(matrix) for row in matrix) and all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))\n\ndef g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a given matrix is symmetric along its diagonal. This requires understanding of matrix operations and nested loops.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nimport math\n\ndef f(n: int) -> bool:\n    digit_sum = sum(int(d) for d in str(n))\n    if digit_sum <= 1:\n        return False\n    for i in range(2, int(math.sqrt(digit_sum)) + 1):\n        if digit_sum % i == 0:\n            return False\n    return True\n\ndef g():\n    n = 9876\n    while True:\n        digit_sum = sum(int(d) for d in str(n))\n        if digit_sum <= 1:\n            n -= 1\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(digit_sum)) + 1):\n            if digit_sum % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return n\n        n -= 1\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(matrix: list) -> bool:\n    return all(len(row) == len(matrix) for row in matrix) and all(matrix[i][j] == matrix[j][i] for i in range(len(matrix)) for j in range(len(matrix)))",
        "solution_func": "def g():\n    return [[1, 2, 3], [2, 4, 5], [3, 5, 6]]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires a function that checks if a given matrix is symmetric along its main diagonal."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves checking if a matrix is symmetric along its main diagonal by comparing the elements at corresponding positions across the diagonal.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(merged: List[int], lists=[[]]) -> bool:\n    sorted_merged = sorted(merged)\n    return merged == sorted_merged\n\ndef g(lists=[[]]) -> List[int]:\n    merged = []\n    for lst in lists:\n        merged.extend(lst)\n    merged.sort()\n    return merged\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves sorting a list of integers and checking if the sorted list is equal to the original list. It also involves list manipulation and comparison.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(merged: List[int], lists=[[]]) -> bool:\n    sorted_merged = sorted(merged)\n    return merged == sorted_merged",
        "solution_func": "def g(lists=[[]]) -> List[int]:\n    merged = []\n    for lst in lists:\n        merged.extend(lst)\n    merged.sort()\n    return merged",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a list of integers is sorted and g merges a list of lists of integers and returns a sorted list. The assertion at the end checks if the output of g satisfies the condition of f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves sorting a merged list of integers and checking if it is equal to the original merged list. The solution function g merges and sorts the lists to return a sorted list. The assertion at the end confirms that the solution function g satisfies the condition of the puzzle function f.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(result: str, strings=['']) -> bool:\n    concatenated = ''.join(strings)\n    return result == concatenated\n\ndef g(strings=['']) -> str:\n    return ''.join(strings)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves String Manipulation and Function Composition.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(result: str, strings=['']) -> bool:\n    concatenated = ''.join(strings)\n    return result == concatenated",
        "solution_func": "def g(strings=['']) -> str:\n    return ''.join(strings)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining two functions, f and g, where f checks if the result of concatenating a list of strings is equal to a given result, and g returns the concatenated string from a list of strings. The assert statement checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding function definitions, default arguments, list manipulation, and function invocation. It is a simple puzzle that can be used to teach basic concepts in Python programming.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\n\ndef f(matrix_sum: int, matrix=[[]]) -> bool:\n    computed_sum = sum(sum(row) for row in matrix)\n    return matrix_sum == computed_sum\n\ndef g(matrix=[[]]) -> int:\n    return sum(sum(row) for row in matrix)\n\nassert f(g()) == True\n",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and list manipulation.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(subsequence: List[int], nums=[0]) -> bool:\n    for i in range(1, len(subsequence)):\n        if subsequence[i] <= subsequence[i - 1]:\n            return False\n    return True\n\ndef g(nums=[0]):\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_length = max(dp)\n    max_index = dp.index(max_length)\n    subsequence = [nums[max_index]]\n    for i in range(max_index - 1, -1, -1):\n        if nums[i] < nums[max_index] and dp[i] == dp[max_index] - 1:\n            subsequence.append(nums[i])\n            max_index = i\n    return subsequence[::-1]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\n\ndef f(matrix_sum: int, matrix=[[]]) -> bool:\n    computed_sum = sum(sum(row) for row in matrix)\n    return matrix_sum == computed_sum",
        "solution_func": "def g(matrix=[[]]) -> int:\n    return sum(sum(row) for row in matrix)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if the sum of all elements in a matrix matches a given sum, and g calculates the sum of all elements in the matrix. The assertion at the end checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves matrix manipulation and comparison of sums. It tests the understanding of functions, matrix operations, and assertion testing in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\ndef f(prime_nums: List[int]) -> bool:\n    return prime_nums == sorted(prime_nums) and all(num > 1 for num in prime_nums)\n\ndef g(num_primes=5):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_nums = [num for num in range(2, num_primes * 10) if is_prime(num)]\n    return prime_nums[:num_primes]\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves topics such as sorting and ordering, list comprehension, and prime number generation using a function. It also includes the concept of checking if a number is prime or not.",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(fibonacci_nums: List[int], limit=100, num_fibonacci=10) -> bool:\n    assert len(fibonacci_nums) == num_fibonacci\n    return all(fibonacci_nums[i] + fibonacci_nums[i + 1] == fibonacci_nums[i + 2] for i in range(len(fibonacci_nums) - 2)) and all(num <= limit for num in fibonacci_nums)\n\ndef g(limit=100, num_fibonacci=10):\n    def generate_fibonacci_sequence(limit):\n        fibonacci_nums = [0, 1]\n        while fibonacci_nums[-1] + fibonacci_nums[-2] <= limit:\n            fibonacci_nums.append(fibonacci_nums[-1] + fibonacci_nums[-2])\n        return fibonacci_nums\n\n    return generate_fibonacci_sequence(limit)[:num_fibonacci]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\ndef f(prime_nums: List[int]) -> bool:\n    return prime_nums == sorted(prime_nums) and all(num > 1 for num in prime_nums)",
        "solution_func": "def g(num_primes=5):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_nums = [num for num in range(2, num_primes * 10) if is_prime(num)]\n    return prime_nums[:num_primes]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of numbers are prime numbers in ascending order, and defining a function g that generates a list of prime numbers based on a given parameter. The solution g generates a list of prime numbers and the function f checks if they are in ascending order and greater than 1."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of prime numbers, list comprehension, sorting, and function composition in Python. It provides a practical exercise for students to work with prime numbers and algorithmic challenges.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(palindrome_str: str) -> bool:\n    return palindrome_str == palindrome_str[::-1]\n\ndef g(string_length=5):\n    import random\n    import string\n\n    palindrome_str = ''.join(random.choices(string.ascii_lowercase, k=string_length))\n    return palindrome_str + palindrome_str[::-1]\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Importing Modules (Itertools, etc.)",
        "idx_generation": 88,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\ndef f(fibonacci_nums: List[int], limit=100, num_fibonacci=10) -> bool:\n    assert len(fibonacci_nums) == num_fibonacci\n    return all(fibonacci_nums[i] + fibonacci_nums[i + 1] == fibonacci_nums[i + 2] for i in range(len(fibonacci_nums) - 2)) and all(num <= limit for num in fibonacci_nums)\n\ndef g(limit=100, num_fibonacci=10):\n    def generate_fibonacci_sequence(limit):\n        fibonacci_nums = [0, 1]\n        while fibonacci_nums[-1] + fibonacci_nums[-2] <= limit:\n            fibonacci_nums.append(fibonacci_nums[-1] + fibonacci_nums[-2])\n        return fibonacci_nums\n\n    return generate_fibonacci_sequence(limit)[:num_fibonacci]\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(palindrome_str: str) -> bool:\n    return palindrome_str == palindrome_str[::-1]",
        "solution_func": "def g(string_length=5):\n    import random\n    import string\n\n    palindrome_str = ''.join(random.choices(string.ascii_lowercase, k=string_length))\n    return palindrome_str + palindrome_str[::-1]",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a random string of a specified length, creating a palindrome by appending the reverse of the string to itself, and checking if the resulting string is a palindrome."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of string manipulation, palindrome checking, and random string generation in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(s: str) -> bool:\n    return s == s[::-1]\ndef g():\n    # reverse the string\n    return \"radar\"\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Conditional Logic",
        "idx_generation": 89,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True"
        ],
        "problem_func": "def f(s: str) -> bool:\n    return s == s[::-1]",
        "solution_func": "def g():\n    # reverse the string\n    return \"radar\"",
        "quality": [
            null
        ],
        "description": [
            "Given a function f(s: str) that returns True if the input string is a palindrome, write a function g() that returns the string 'radar' and passes the palindrome check."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves understanding string manipulation in Python and checking for palindromes.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 4
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(number: int, is_prime=True) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return is_prime\n\ndef g(number=7):\n    return number\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "This puzzle involves checking if a given number is prime or not using a simple algorithm. It also includes default parameter in function definition and assertion for testing the solution.",
        "idx_generation": 89,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], triplet=[3, 4, 5]) -> bool:\n    a, b, c = triplet\n    return a**2 + b**2 == c**2 and all(num in numbers for num in triplet)\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                triplet = [numbers[i], numbers[j], numbers[k]]\n                if triplet[0]**2 + triplet[1]**2 == triplet[2]**2:\n                    return triplet\n    return []\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(number: int, is_prime=True) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return is_prime",
        "solution_func": "def g(number=7):\n    return number",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f to check if a given number is prime, and another function g that returns a default number. The assertion checks if the default number returned by g is prime according to the function f."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of prime number checking in Python and function invocation. It requires students to define a function to check for prime numbers and understand how to use default arguments in function calls.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 3
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(number: int, factorial=120) -> bool:\n    fact = 1\n    for i in range(1, number + 1):\n        fact *= i\n    return fact == factorial\n\ndef g(number=5):\n    return number\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations and conditional logic to check if the factorial of a number matches a given value. The solution simply returns a hardcoded number to check the factorial condition.",
        "idx_generation": 89,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\n\ndef f(numbers: List[int], triplet=[3, 4, 5]) -> bool:\n    a, b, c = triplet\n    return a**2 + b**2 == c**2 and all(num in numbers for num in triplet)\n\ndef g(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                triplet = [numbers[i], numbers[j], numbers[k]]\n                if triplet[0]**2 + triplet[1]**2 == triplet[2]**2:\n                    return triplet\n    return []\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(number: int, factorial=120) -> bool:\n    fact = 1\n    for i in range(1, number + 1):\n        fact *= i\n    return fact == factorial",
        "solution_func": "def g(number=5):\n    return number",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that calculates the factorial of a given number and checks if it matches a specified factorial value. Another function g is defined to return a default number, and the puzzle requires g to be passed to f to check if the factorial calculation is correct."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the understanding of functions, loops, and conditional statements in Python by requiring the student to define a function to calculate factorials and another function to return a number. The student needs to ensure that the factorial calculation function returns the correct result when given the number returned by the second function.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\nfrom typing import List\nfrom math import isqrt\n\ndef f(numbers: List[int], target_product=1000) -> bool:\n    def is_perfect_square(n):\n        sqrt_n = isqrt(n)\n        return sqrt_n * sqrt_n == n\n\n    return is_perfect_square(sum(numbers)) == (target_product in numbers)\n\ndef g(target_product=1000):\n    from random import randint\n\n    numbers = [randint(1, 10) for _ in range(5)]\n    return numbers\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves mathematical operations, conditional logic, importing modules, and random number generation.",
        "idx_generation": 89,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom math import isqrt\n\ndef f(numbers: List[int], target_sum=100) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, isqrt(n) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(sum(numbers)) == (target_sum in numbers)\n\ndef g(target_sum=100):\n    from random import randint\n\n    numbers = [randint(1, 50) for _ in range(10)]\n    return numbers\n\nassert f(g()) == True\n"
        ],
        "problem_func": "from typing import List\nfrom math import isqrt\n\ndef f(numbers: List[int], target_product=1000) -> bool:\n    def is_perfect_square(n):\n        sqrt_n = isqrt(n)\n        return sqrt_n * sqrt_n == n\n\n    return is_perfect_square(sum(numbers)) == (target_product in numbers)",
        "solution_func": "def g(target_product=1000):\n    from random import randint\n\n    numbers = [randint(1, 10) for _ in range(5)]\n    return numbers",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires the student to implement a function f that takes a list of integers and a target product, checks if the sum of the integers is a perfect square, and returns True if the target product is in the list of integers. The solution function g generates a list of random integers and returns it."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with lists, random number generation, checking for perfect squares, and conditional statements. It provides a practical exercise in implementing functions and using built-in math functions in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str) -> bool:\n    return text == text[::-1]\n\ndef g(text=\"racecar\"):\n    return text\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves string manipulation and conditional logic.",
        "idx_generation": 89,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    list_sum = sum(numbers)\n    return list_sum**0.5 == int(list_sum**0.5)\n\ndef g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, n):\n            if sum(c)**0.5 == int(sum(c)**0.5):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(text: str) -> bool:\n    return text == text[::-1]",
        "solution_func": "def g(text=\"racecar\"):\n    return text",
        "quality": [
            null
        ],
        "description": [
            "The puzzle checks if a given text is a palindrome or not."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle defines a function f that checks if a given text is a palindrome. The function g returns a default text 'racecar'. The assert statement checks if the function f applied to the output of function g returns True.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(number: int) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef g(number=17):\n    return number\n\nassert f(g()) == True\n",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "explanation_emb": "The puzzle involves checking if a number is a prime number or not using a simple algorithm. It covers topics such as Mathematical Operations, Conditional Logic, and Number Theory (primes).",
        "idx_generation": 89,
        "target_skills": [],
        "puzzle_history": [
            "\nfrom typing import List\nfrom itertools import combinations\n\ndef f(numbers: List[int], options=[2, 3, 5, 7, 11, 13]) -> bool:\n    list_sum = sum(numbers)\n    return list_sum**0.5 == int(list_sum**0.5)\n\ndef g(options=[2, 3, 5, 7, 11, 13]):\n    for n in range(1, len(options) + 1):\n        for c in combinations(options, n):\n            if sum(c)**0.5 == int(sum(c)**0.5):\n                return list(c)\n\nassert f(g()) == True\n"
        ],
        "problem_func": "def f(number: int) -> bool:\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True",
        "solution_func": "def g(number=17):\n    return number",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves two functions, f and g, where f checks if a given number is a prime number and g returns a specific number (default is 17). The puzzle requires g to return a number such that f evaluates to True when applied to that number."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle tests the student's understanding of prime numbers and function composition in Python.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(nums: list, target_sum=10, max_length=5) -> bool:\n    return sum(nums) == target_sum and len(nums) <= max_length\n\ndef g(target_sum=10, max_length=5):\n    \"\"\"\n    This solution recursively generates a list of integers that sum up to the target sum and have a length less than or equal to max_length.\n    \"\"\"\n    def generate_list(curr_list, curr_sum):\n        if len(curr_list) == max_length:\n            return curr_list if curr_sum == target_sum else None\n        for _ in range(10):\n            num = random.randint(1, 10)\n            new_sum = curr_sum + num\n            if new_sum <= target_sum:\n                new_list = curr_list + [num]\n                result = generate_list(new_list, new_sum)\n                if result:\n                    return result\n        return None\n    \n    return generate_list([], 0)\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Recursion, Randomization, List Manipulation",
        "idx_generation": 89,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, condition=lambda x: x.isalpha(), length=5, char='a') -> bool:\n    return len(s) == length and all(condition(ch) for ch in s) and char in s\n\ndef g(condition=lambda x: x.isalpha(), length=5, char='a'):\n    \"\"\"\n    This solution recursively generates a string that satisfies the given conditions and contains the specified character.\n    \"\"\"\n    def generate_string(idx, curr_str):\n        if idx == length:\n            return curr_str if char in curr_str else None\n        for ch in 'abcdefghijklmnopqrstuvwxyz':\n            if condition(ch):\n                new_str = curr_str + ch\n                result = generate_string(idx + 1, new_str)\n                if result:\n                    return result\n        return None\n    \n    return generate_string(0, '')\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(nums: list, target_sum=10, max_length=5) -> bool:\n    return sum(nums) == target_sum and len(nums) <= max_length",
        "solution_func": "def g(target_sum=10, max_length=5):\n    \"\"\"\n    This solution recursively generates a list of integers that sum up to the target sum and have a length less than or equal to max_length.\n    \"\"\"\n    def generate_list(curr_list, curr_sum):\n        if len(curr_list) == max_length:\n            return curr_list if curr_sum == target_sum else None\n        for _ in range(10):\n            num = random.randint(1, 10)\n            new_sum = curr_sum + num\n            if new_sum <= target_sum:\n                new_list = curr_list + [num]\n                result = generate_list(new_list, new_sum)\n                if result:\n                    return result\n        return None\n    \n    return generate_list([], 0)",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves generating a list of integers that sum up to a target sum and have a length less than or equal to a specified maximum length using recursion and random number generation."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of recursion, random number generation, and list manipulation in Python to generate a list that meets the specified conditions.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\nimport random\n\ndef f(data: list, target_length=3) -> bool:\n    return all(len(t) == target_length and t[0] + t[1] == t[2] for t in data)\n\ndef g(target_length=3):\n    \"\"\"\n    This solution recursively generates a list of tuples where the first two elements sum up to the third element.\n    \"\"\"\n    def generate_tuples(curr_list):\n        if len(curr_list) == target_length:\n            return curr_list if all(t[0] + t[1] == t[2] for t in curr_list) else None\n        num1 = random.randint(1, 10)\n        num2 = random.randint(1, 10)\n        curr_list.append((num1, num2, num1 + num2))\n        result = generate_tuples(curr_list)\n        if result:\n            return result\n        curr_list.pop()\n        return None\n    \n    return generate_tuples([])\n\nassert f(g()) == True\n",
        "emb": [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "The puzzle involves recursion, list manipulation, and conditional logic.",
        "idx_generation": 89,
        "target_skills": [],
        "puzzle_history": [
            "\ndef f(s: str, condition=lambda x: x.isalpha(), length=5, char='a') -> bool:\n    return len(s) == length and all(condition(ch) for ch in s) and char in s\n\ndef g(condition=lambda x: x.isalpha(), length=5, char='a'):\n    \"\"\"\n    This solution recursively generates a string that satisfies the given conditions and contains the specified character.\n    \"\"\"\n    def generate_string(idx, curr_str):\n        if idx == length:\n            return curr_str if char in curr_str else None\n        for ch in 'abcdefghijklmnopqrstuvwxyz':\n            if condition(ch):\n                new_str = curr_str + ch\n                result = generate_string(idx + 1, new_str)\n                if result:\n                    return result\n        return None\n    \n    return generate_string(0, '')\n\nassert f(g()) == True\n"
        ],
        "problem_func": "import random\n\ndef f(data: list, target_length=3) -> bool:\n    return all(len(t) == target_length and t[0] + t[1] == t[2] for t in data)",
        "solution_func": "def g(target_length=3):\n    \"\"\"\n    This solution recursively generates a list of tuples where the first two elements sum up to the third element.\n    \"\"\"\n    def generate_tuples(curr_list):\n        if len(curr_list) == target_length:\n            return curr_list if all(t[0] + t[1] == t[2] for t in curr_list) else None\n        num1 = random.randint(1, 10)\n        num2 = random.randint(1, 10)\n        curr_list.append((num1, num2, num1 + num2))\n        result = generate_tuples(curr_list)\n        if result:\n            return result\n        curr_list.pop()\n        return None\n    \n    return generate_tuples([])",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that checks if a list of tuples meets a specific condition, and a function g that recursively generates a list of tuples where the first two elements sum up to the third element."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle requires understanding of list comprehension, recursion, and tuple manipulation in Python.",
        "pass_5": 0.0,
        "n_sample": 5,
        "n_correct": 0
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(text: str, threshold=0.5) -> bool:\n    assert threshold > 0 and 0 < len(text) < 1000\n\n    def count_chars(text: str) -> dict:\n        char_count = {}\n        for char in text:\n            char_count[char] = char_count.get(char, 0) + 1\n        return char_count\n\n    char_freq = count_chars(text)\n    total_chars = len(text)\n    for char, freq in char_freq.items():\n        if freq / total_chars >= threshold:\n            return False\n    return True\n\ndef g(threshold=0.5):\n    import random\n    import string\n\n    text = ''.join(random.choices(string.ascii_letters + string.digits, k=100))\n    return text\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "String Manipulation, Probability and Statistics, Importing Modules (Itertools, etc.)",
        "idx_generation": 89,
        "target_skills": [],
        "puzzle_history": [
            "from typing import List \ndef f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True"
        ],
        "problem_func": "def f(text: str, threshold=0.5) -> bool:\n    assert threshold > 0 and 0 < len(text) < 1000\n\n    def count_chars(text: str) -> dict:\n        char_count = {}\n        for char in text:\n            char_count[char] = char_count.get(char, 0) + 1\n        return char_count\n\n    char_freq = count_chars(text)\n    total_chars = len(text)\n    for char, freq in char_freq.items():\n        if freq / total_chars >= threshold:\n            return False\n    return True",
        "solution_func": "def g(threshold=0.5):\n    import random\n    import string\n\n    text = ''.join(random.choices(string.ascii_letters + string.digits, k=100))\n    return text",
        "quality": [
            null
        ],
        "description": [
            "The puzzle requires defining a function f(text: str, threshold=0.5) that checks if the frequency of any character in the input text is greater than or equal to the threshold. The function g(threshold=0.5) generates a random text of length 100 composed of letters and digits. The assertion checks if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves working with string manipulation, dictionaries, and random generation of text. It tests the understanding of character frequency and comparison with a threshold value. The solution function g generates a random text for testing the function f.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 2
    },
    {
        "fitness": 1.0,
        "program_str": "\ndef f(strategies: list, win_threshold=0.5) -> bool:\n    expected_values = [sum(strategy) / len(strategy) for strategy in strategies]\n    best_strategy = max(expected_values)\n    return best_strategy >= win_threshold\n\ndef g(win_threshold=0.5):\n    import random\n    random.seed(2)\n    num_strategies = 5\n    strategies = [[random.random() for _ in range(3)] for _ in range(num_strategies)]\n    return strategies\n\nassert f(g()) == True\n",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "explanation_emb": "Probability and Statistics, Importing Modules (Itertools, etc.), List Operations, Random Number Generation",
        "idx_generation": 89,
        "target_skills": [],
        "puzzle_history": [
            "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True"
        ],
        "problem_func": "def f(strategies: list, win_threshold=0.5) -> bool:\n    expected_values = [sum(strategy) / len(strategy) for strategy in strategies]\n    best_strategy = max(expected_values)\n    return best_strategy >= win_threshold",
        "solution_func": "def g(win_threshold=0.5):\n    import random\n    random.seed(2)\n    num_strategies = 5\n    strategies = [[random.random() for _ in range(3)] for _ in range(num_strategies)]\n    return strategies",
        "quality": [
            null
        ],
        "description": [
            "The puzzle involves defining a function f that takes a list of strategies and a win threshold, calculates the expected values of each strategy, and returns True if the best strategy's expected value is greater than or equal to the win threshold. The solution function g generates a list of strategies with random values and returns it. An assertion is made to check if f(g()) returns True."
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle involves concepts of list comprehension, random number generation, and comparison operations in Python. It can be used to teach students about algorithmic challenges involving strategies and thresholds in a game-like scenario.",
        "pass_5": 1.0,
        "n_sample": 5,
        "n_correct": 1
    }
]