[
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return s.count('o') == 1000 and s.count('oo') == 0\ndef g():\n    return ('h' + 'o') * 1000\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Determine if a string meets certain conditions based on the count of 'o' and 'oo' in the string."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the string 'h' followed by 'o' repeated 1000 times. The function f checks if the input string contains 1000 'o's and no occurrence of 'oo'. The assertion at the end checks if f(g()) returns True."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int]) -> bool:\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))\ndef g():\n    return [((i + 1) % 999) for i in range(999)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of 999 integers, check if the list is a permutation of the range from 0 to 998 and if each element is not equal to its index."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of numbers that are the result of a mathematical operation, and the function f checks if the input list is sorted and contains all numbers from 0 to 998, and also checks if each element is not equal to its index."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int]) -> bool:\n    return all([li.count(i) == i for i in range(10)])\ndef g():\n    return [i for i in range(10) for j in range(i)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers, the function f checks if the count of each integer in the list is equal to the integer itself. The function g generates a list of integers based on a specific pattern, and then the puzzle asserts that f(g()) should return True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a nested loop to generate a list of numbers from 0 to 9, where each number is repeated a number of times equal to its value. This list is then used as input to function f, which checks if the count of each number in the list is equal to the number itself. The puzzle does not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3\ndef g():\n    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and returns a boolean, and a function g that returns a string, the puzzle involves evaluating the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and the function f does not use the result of g. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int]) -> bool:\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')\ndef g():\n    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers, determine if the characters at the corresponding indices in a string match a given string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(ls: List[str]) -> bool:\n    return min(ls) == max(ls) == str(len(ls))\ndef g():\n    return ['1']\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.0
        ],
        "description": [
            "Determine if the minimum and maximum elements of a list of strings are equal to the length of the list."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            5
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list with a single element '1', and the function f checks if the minimum and maximum of the list are equal to the length of the list as a string. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float) -> bool:\n    return str(x - 3.1415).startswith('123.456')\ndef g():\n    return 123.456 + 3.1415\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if the result of a mathematical operation satisfies a specific condition."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value 123.456 + 3.1415, which is used as an argument to the function f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int]) -> bool:\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))\ndef g():\n    return [(2 ** i) for i in range(20)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers, the function f checks if the sum of the first i elements in the list is equal to 2^i - 1 for all i from 0 to 19. The function g generates a list of powers of 2 from 0 to 19. The assert statement checks if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of powers of 2, and the function f checks if the sum of the prefixes of the list is equal to 2^i - 1 for each i in the range 20. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int) -> bool:\n    return len(str(i + 1000)) > len(str(i + 1001))\ndef g():\n    return -1001\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if the length of the string representation of a number changes when 1000 is added compared to when 1001 is added."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a specific value (-1001) which is used as an argument to the function f. The function f does not use the value returned by g to generate its output. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int]) -> bool:\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}\ndef g():\n    return [0, 1, 2, 3, 17]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if the given function f returns True for the given function g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers, and the function f checks if the sum of all pairs of elements in the list is equal to a specific set. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int]) -> bool:\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3\ndef g():\n    return list(range(3)) * 10\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if a list contains only 3 distinct elements and no adjacent elements are equal."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers from 0 to 2 repeated 10 times. The function f checks if the input list has no consecutive equal elements and has exactly 3 unique elements. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(ls: List[str]) -> bool:\n    return tuple(ls) in zip('dee', 'doo', 'dah!')\ndef g():\n    return list(next(zip('dee', 'doo', 'dah!')))\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g())"
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of characters, and the function f checks if the tuple of characters is in the zipped strings 'dee', 'doo', 'dah!'. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]\ndef g():\n    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if a string is a palindrome and a permutation of 'Permute me true'"
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The function g does not directly return the solution to the problem, violating the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int]) -> bool:\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]\ndef g():\n    return [1, 2, 3, 3]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers, the function f checks if the values at certain indices satisfy a specific condition."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list [1, 2, 3, 3], and the function f takes a list and checks certain conditions on its elements. The puzzle does not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(l: List[int]) -> bool:\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995\ndef g():\n    return [0, 4] + list(range(6, 1000))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if a given list of integers satisfies a specific condition."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies the conditions of the function f. The function f checks if all the integers in the list are within the range of 1000 and the absolute difference of the squares of any two distinct integers in the list is greater than or equal to 10. It also checks if the length of the set of integers in the list is greater than 995. The puzzle is valid as it follows the rules and the function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(hands: List[int], target_angle=45) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 45):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given the time in hours and minutes, determine if the angle between the hour and minute hands is equal to a target angle."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by iterating through all possible hours and minutes to find the angles that satisfy the condition. The function f checks if the given hands form the target angle. There is no use of function f inside function g. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(hands: List[int], target_angle=39) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 39):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given the time on a clock, determine if the angle between the hour and minute hands is equal to a target angle."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by iterating through all possible hour and minute combinations and checking if the absolute difference in angles matches the target angle. The function f checks if the absolute difference in angles of the given hands matches the target angle. There is no use of function f inside function g, and the function g returns the solution to the problem as required."
    },
    {
        "fitness": null,
        "program_str": "def f(hands: List[int], target_angle=133) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 133):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given the time in hours and minutes, determine if the angle between the hour and minute hands is equal to a target angle."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. There is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(hands: List[int], target_angle=138) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 138):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given the time on a clock, determine if the angle between the hour and minute hands is equal to a target angle."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by iterating through all possible hour and minute combinations and checking if the absolute difference between the hour and minute angles matches the target angle. The function f checks if the given hour and minute hands form an angle equal to the target angle. The functions do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(hands: List[int], target_angle=68) -> bool:\n    (h, m) = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]\ndef g(target_angle = 68):\n    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given the time on a clock, determine if the angle between the hour and minute hands is equal to a target angle."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not use the function f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int) -> bool:\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1\ndef g():\n    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine the value of n that satisfies a given condition in a loop."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. There is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(coords: List[List[int]], side=10, num_points=20) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 10, num_points = 20):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a set of coordinates on a grid, determine if the points form a convex hull and if the number of unique points is greater than or equal to a specified number."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses the itertools module to generate combinations of coordinates. It also uses conditional logic to handle different cases based on the value of 'side'. The function test uses combinations of coordinates and performs mathematical operations to check a specific condition. The function f iterates through the coordinates and performs mathematical operations to check conditions. It also uses set operations to compare sets of coordinates."
    },
    {
        "fitness": null,
        "program_str": "def f(coords: List[List[int]], side=0, num_points=0) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 0, num_points = 0):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a set of points on a grid, determine if the points form a convex polygon and return the result."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses the itertools module to generate combinations of coordinates. It also uses conditional logic to handle different cases based on the value of 'side'. The function also uses recursion to call itself in the 'mirror' function. The 'test' function uses conditional logic and mathematical operations to check a condition. The puzzle does not violate the rule of using 'f' inside 'g'. The function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(coords: List[List[int]], side=1, num_points=1) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 1, num_points = 1):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves checking the validity of a set of coordinates based on a mathematical condition and returning a boolean value. The solution involves generating combinations of coordinates and testing them against a condition."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(coords: List[List[int]], side=2, num_points=4) -> bool:\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points\ndef g(side = 2, num_points = 4):\n    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a grid of size 'side x side', the function f checks if a set of 'num_points' coordinates form a convex polygon. The function g generates all possible combinations of 'num_points' coordinates on the grid and checks if they form a convex polygon."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a solution to the problem and does not just give arguments to f. The problem does not use f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(stamps: List[int], target=80, max_stamps=4, options=[10, 32, 8]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 80, max_stamps = 4, options = [10, 32, 8]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of stamp values, determine if it is possible to use a maximum of 4 stamps to reach a target value of 80. The stamp values are chosen from a set of options, and the solution involves finding combinations of stamps to reach the target value."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of stamps that sum up to the target, and the function f checks if the given stamps are valid and sum up to the target. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 271, max_stamps = 8, options = [37, 37, 12, 87, 39]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of stamps and a target value, determine if it is possible to select a combination of stamps that sum up to the target value, with a maximum number of stamps allowed."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by using combinations_with_replacement from the itertools module to find the stamps that sum up to the target. The function f checks if the stamps are valid and if their sum equals the target. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(stamps: List[int], target=3, max_stamps=3, options=[18, 1, 43, 81]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 3, max_stamps = 3, options = [18, 1, 43, 81]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of stamp values and a target sum, determine if it is possible to select a maximum number of stamps such that their sum equals the target."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by using combinations_with_replacement from the itertools module to find the stamps that sum up to the target. The function f checks if the stamps are within the options and if their sum is equal to the target. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(stamps: List[int], target=19, max_stamps=2, options=[19, 14, 81]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 19, max_stamps = 2, options = [19, 14, 81]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of stamp values, determine if it is possible to select a maximum number of stamps such that their sum equals a target value. Then, find the combination of stamps that achieves the target value."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of combinations of options that sum up to the target. It then checks if the function f returns True when called with the result of g as argument."
    },
    {
        "fitness": null,
        "program_str": "def f(stamps: List[int], target=56, max_stamps=1, options=[25, 22, 8, 84, 60, 56, 54, 7, 8]) -> bool:\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target\ndef g(target = 56, max_stamps = 1, options = [25, 22, 8, 84, 60, 56, 54, 7, 8]):\n    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of stamp values and a target sum, determine if it is possible to select a certain number of stamps to reach the target sum."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by using combinations_with_replacement from the itertools module to find the stamps that sum up to the target. The function f checks if the stamps are valid and if their sum equals the target. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(xy_sides: List[List[int]]) -> bool:\n    n = max((x + side for (x, y, side) in xy_sides))\n    assert len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1\n    for (x, y, s) in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for (x2, y2, s2) in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2\ndef g():\n    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of lists as input and returns a boolean value. The function g returns a list of lists. The puzzle involves assertions and a specific condition that needs to be satisfied."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of lists, which is the input format for function f. Function f contains assertions to check the validity of the input, and it returns a boolean value based on the sum of squares of sides and the maximum side length. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, lace='bbrbrbbbbbbrrrrrrrbrrrrbbbrbrrbbbrbrrrbrrbrrbrbbrrrrrbrbbbrrrbbbrbbrbbbrbrbb') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'bbrbrbbbbbbrrrrrrrbrrrrbbbrbrrbbbrbrrrbrrbrrbrbbrrrrrbrbbbrrrbbbrbbrbbbrbrbb'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string of 'b's and 'r's, determine if there exists a substring of length n such that the count of 'r's in the substring is half the count of 'r's in the original string and the count of 'b's in the substring is half the count of 'b's in the original string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the first occurrence of a substring in the lace where the count of 'r' is equal to half the length of the lace. The function f checks if the input index n is valid and then compares the count of 'r' and 'b' in the lace with the count of 'r' and 'b' in a substring of the lace. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, lace='rbbrrbbrbrbbbrrrbbrbrbrrbbrbbbbbbrrrrrrrrbrrrbbrbrrbbbrbbrrrbbrbbrrbrrbrbbrbbbbbbrbbbrbrbrrbrbbrbrrbbrrbrrbrrbrrbrbrbrrrbbrbrbbrrbbbbrrrrrbbrbrbrrbr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'rbbrrbbrbrbbbrrrbbrbrbrrbbrbbbbbbrrrrrrrrbrrrbbrbrrbbbrbbrrrbbrbbrrbrrbrbbrbbbbbbrbbbrbrbrrbrbbrbrrbbrrbrrbrrbrrbrbrbrrrbbrbrbbrrbbbbrrrrrbbrbrbrrbr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string of 'r' and 'b', the function f checks if a substring of length len(lace)//2 exists such that the count of 'r' in the substring is half the count of 'r' in the original string and the count of 'b' in the substring is half the count of 'b' in the original string. The function g finds the index of the first substring that satisfies the condition for function f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the first occurrence of a substring in the input string where the count of 'r' is equal to half the length of the input string. The function f checks if the input index satisfies certain conditions based on the input string. The functions f and g do not violate the rule of using f inside g. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, lace='brrrbrrbrbbbbbrrbbrr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrrbrrbrbbbbbrrbbrr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string of 'b's and 'r's, determine if there exists a substring such that the count of 'r's in the substring is half the count of 'r's in the original string and the count of 'b's in the substring is half the count of 'b's in the original string. If such a substring exists, return True, otherwise return False."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the first occurrence of a substring in the input string. The function f checks if the substring satisfies certain conditions based on the input string. There is no use of function f inside function g. The function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, lace='bbbbrrbbbbrrbbrrrbbrrbbrrrrrrrbrbrbbbrrbrrrbbbbbbbrbrbrbbbbbbbrrbbrbbrbrrbrbrrbbbrrrrrbrrbbrrrbbrbrrrbbbbrbbbrrrrbrbrrbbrbrbrbbrrbrrrbrbrrbbbbbbrbrrrrbbrbbbrbrrbrbbrbrrbbbbrrrrrbrrrbbrrrrrrbrrrbrbbbrbbbrrrbbr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'bbbbrrbbbbrrbbrrrbbrrbbrrrrrrrbrbrbbbrrbrrrbbbbbbbrbrbrbbbbbbbrrbbrbbrbrrbrbrrbbbrrrrrbrrbbrrrbbrbrrrbbbbrbbbrrrrbrbrrbbrbrbrbbrrbrrrbrbrrbbbbbbrbrrrrbbrbbbrbrrbrbbrbrrbbbbrrrrrbrrrbbrrrrrrbrrrbrbbbrbbbrrrbbr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "The puzzle involves a function f and a function g that operate on a string input. The functions have specific conditions and return values based on the input string."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a generator expression to find the index of the substring with an equal number of 'r' characters as the total number of characters in the input string divided by 4. The function f checks if the input index n is valid and then compares the count of 'r' and 'b' characters in the input string with the counts in a substring of the input string. The functions f and g do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, lace='brrbbbrbbrrbrrbbrrbrrrbbrbbrrrbrbrbrrrrbbrrrbrrbbbbrbbbrrbbrrrbbrbrbbbbbrrbrrbbr') -> bool:\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))\ndef g(lace = 'brrbbbrbbrrbrrbbrrbrrrbbrbbrrrbrbrbrrrrbbrrrbrrbbbbrbbbrrbbrrrbbrbrbbbbbrrbrrbbr'):\n    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a string of 'b's and 'r's, determine if there exists an index n such that the number of 'r's to the left of n is twice the number of 'r's to the right of n, and the number of 'b's to the left of n is twice the number of 'b's to the right of n."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the first occurrence of a substring in the input string. The function f checks if the input index satisfies certain conditions based on the input string. The functions do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int) -> bool:\n    s = str(n * n)\n    for i in '0123456789':\n        assert s.count(i) == 1\n    return True\ndef g():\n    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, find the value of n such that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle respects the rules. The function g returns the solution to the problem, and there is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1\"\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s, determine if it is a valid arithmetic expression that evaluates to 63, using only the characters '1', '8', '-', '+', '*', and '/'."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the string '8*8-1', which is then passed to the function eval. The function eval performs mathematical operations on the string, which violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)\ndef g():\n    return \"8*8-1**8\"\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s, determine if it is a valid arithmetic expression using only the characters '1', '8', '-', '+', '*', and '/'. The expression should evaluate to 63 and contain exactly 3 occurrences of '8' and 1 occurrence of '1'."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the string '8*8-1**8', which is then passed to the function f. The function f checks if the input string contains only the characters '1', '8', '-', '+', '*', and '/'. It also checks if the input string contains exactly 3 occurrences of '8', 1 occurrence of '1', and evaluates to 63. The puzzle is valid based on the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(moves: List[List[int]], capacities=[8, 5, 3], init=[8, 0, 0], goal=[4, 4, 0]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [8, 5, 3], init = [8, 0, 0], goal = [4, 4, 0]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves solving a problem of pouring water between jugs to reach a specific goal state, using a given set of capacities and initial state."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem using a backtracking algorithm. The function f checks if the solution returned by g is correct by simulating the pouring of water between jugs and comparing the final state with the goal state."
    },
    {
        "fitness": null,
        "program_str": "def f(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [724, 43, 611], init = [72, 2, 269], goal = [56, 0, 287]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves solving a jug pouring problem using given capacities and initial and goal states."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(moves: List[List[int]], capacities=[357, 298, 492], init=[8, 284, 72], goal=[0, 0, 364]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [357, 298, 492], init = [8, 284, 72], goal = [0, 0, 364]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves solving a problem of pouring water between jugs to reach a specific goal state, using a given set of capacities and initial state."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a brute force search algorithm to find the solution to the problem. It iterates through all possible states of the jugs until it finds the target state. The function f checks if the final state of the jugs matches the goal state, and it does not use the function g inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(moves: List[List[int]], capacities=[511, 625, 553], init=[472, 153, 127], goal=[97, 625, 30]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [511, 625, 553], init = [472, 153, 127], goal = [97, 625, 30]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves solving a jug pouring problem using given capacities and initial and goal states."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a brute force search algorithm to find the solution to the problem. It iterates through all possible states of the jugs until it finds the target state. The function f checks if the final state of the jugs matches the goal state. The solution uses a deque for the queue and a dictionary to store the trails of states, and it uses a while loop to iterate through the states until the target state is found."
    },
    {
        "fitness": null,
        "program_str": "def f(moves: List[List[int]], capacities=[86, 259, 281], init=[47, 18, 35], goal=[35, 0, 65]) -> bool:\n    state = init.copy()\n    for [i, j] in moves:\n        assert min(i, j) >= 0, 'Indices must be non-negative'\n        assert i != j, 'Cannot pour from same state to itself'\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal\ndef g(capacities = [86, 259, 281], init = [47, 18, 35], goal = [35, 0, 65]):\n    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves solving a water jug problem using two different functions f and g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and not just a function that gives arguments to f. The problem does not use 'f' inside 'g'."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, word='antidisestablishmentarianism', max_len=10) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'antidisestablishmentarianism', max_len = 10):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f that takes a string and two optional parameters, and a function g that takes two optional parameters, the puzzle involves calling f with the result of g as an argument and asserting the result to be True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by calling function f with the arguments obtained from word and max_len. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, word='pawuzorythalirinasubyg', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'pawuzorythalirinasubyg', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g())"
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a modified version of the input word, and then passes it to function f for validation. The function f checks if the modified word is equal to the original word, and also performs some string and length comparisons. The function g returns the solution to the problem by modifying the input word and passing it to function f for validation."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, word='jomodosigezyfulach', max_len=5) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'jomodosigezyfulach', max_len = 5):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and two optional parameters, and a function g that also takes two optional parameters, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a modified version of the input word, and then passes it to function f for evaluation. The function f checks if the modified word satisfies certain conditions. The use of function g to modify the word and then pass it to function f violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, word='bybakichop', max_len=12) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'bybakichop', max_len = 12):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a word matches a string and g generates a new word based on the input word, evaluate the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a modified version of the input word, and then passes it to function f for evaluation. The function f checks if the modified word is equal to the original word, and returns a boolean value based on the comparison."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, word='wywaxizodetextonigijalate', max_len=5) -> bool:\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])\ndef g(word = 'wywaxizodetextonigijalate', max_len = 5):\n    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g()) and assert it to be True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The function f uses the input string and performs string manipulation and conditional logic to return a boolean value. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(corners: List[List[int]], m=10, n=9, a=5, target=4) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 10, n = 9, a = 5, target = 4):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of corners, determine if a grid is fully covered by the corners with a given step size and within a target limit."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of coordinates that are used as input to function f. The function g does not use the function f inside it. The puzzle is valid based on the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(corners: List[List[int]], m=22, n=129, a=9, target=45) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 22, n = 129, a = 9, target = 45):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of corners, determine if the area covered by the corners is within the specified target and does not have double coverage. The solution generates a list of coordinates based on the given parameters and checks if the coverage is valid."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of coordinates that are used as input to function f. Function f checks if the given corners cover a specific area and returns a boolean value. The solution respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(corners: List[List[int]], m=6, n=849, a=10, target=89) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 6, n = 849, a = 10, target = 89):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a set of corners, determine if the area they cover is sufficient to meet a target, using a specific grid size and step size."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of coordinates that cover the entire grid with a step size of 'a'. The function f checks if the given corners are covered by the generated coordinates and if the number of corners is less than or equal to the target value. The solution respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(corners: List[List[int]], m=89, n=554, a=6, target=1397) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 89, n = 554, a = 6, target = 1397):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of corners and some parameters, and a function g that generates the corners based on the parameters, determine if function f returns True when called with the output of function g as input."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of coordinates that are used as input to function f. The function f checks if the given corners cover a certain area and returns a boolean value. The solution respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(corners: List[List[int]], m=74, n=1, a=2, target=38) -> bool:\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, 'Double coverage'\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})\ndef g(m = 74, n = 1, a = 2, target = 38):\n    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of corners and some parameters, and a function g that takes some parameters and returns a list of coordinates, determine if the function f returns True when called with the output of function g as input."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of coordinates, which is used as input to function f. The function f checks if the given corners are covered by a set of coordinates, and if the length of corners is less than or equal to the target value. The function g returns the coordinates in a specific pattern based on the input parameters m, n, a, and target."
    },
    {
        "fitness": null,
        "program_str": "def f(lb: List[bool], trips=[[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of boolean values and a list of trips, determine if the length of the boolean list is equal to the length of the trips list, and if each boolean value is True if the sum of the corresponding trip is greater than or equal to 2, otherwise False."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by calculating the sum of each sublist in the trips list and checking if the sum is greater than or equal to 2. The function f checks if the length of the input list lb is equal to the length of the trips list, and then checks if the sum of each sublist in trips is greater than or equal to 2. The puzzle is valid as it follows the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(lb: List[bool], trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of boolean values and a list of trips, determine if the length of the boolean list matches the length of the trips list, and if the sum of each trip is greater than or equal to 2."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by checking if the sum of each sublist in trips is greater than or equal to 2. The function f checks if the length of lb is equal to the length of trips, and then checks if the sum of each sublist in trips is greater than or equal to 2."
    },
    {
        "fitness": null,
        "program_str": "def f(lb: List[bool], trips=[[0, 0, 0], [1, 0, 0], [0, 1, 1], [0, 1, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [1, 0, 0], [0, 1, 1], [0, 1, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of boolean values and a list of trips, determine if the number of trips with a sum greater than or equal to 2 matches the boolean values."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by checking if the sum of each sublist in trips is greater than or equal to 2. The function f checks if the length of lb is equal to the length of trips, and then checks if the sum of each sublist in trips is greater than or equal to 2."
    },
    {
        "fitness": null,
        "program_str": "def f(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list of boolean values and a list of trips, determine if the number of True values in the boolean list is greater than or equal to 2 for each trip."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of boolean values based on the sum of elements in each sublist of the trips list. The function f checks if the length of the input list 'lb' is equal to the length of the trips list, and then checks if each element in 'lb' is True if the corresponding sum in trips is greater than or equal to 2, otherwise it checks if the element is False. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(lb: List[bool], trips=[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]) -> bool:\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))\ndef g(trips = [[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]):\n    return [sum(s) >= 2 for s in trips]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of boolean values and a list of trips, determine if the number of trips with a sum of 2 or more is equal to the length of the boolean list."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and there is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k = 6):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of scores and a threshold value, determine if the scores meet the threshold condition. Then, calculate the number of scores that meet the threshold condition."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of scores that are greater than or equal to the threshold. The threshold is the maximum of scores[k] and 1. The function f checks if all scores before index n are greater than or equal to scores[k] and greater than 0, and if all scores after index n are less than scores[k] or less than or equal to 0. Then it checks if the function g returns True. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, scores=[32, 32, 31, 30, 25, 25, 21, 20, 17, 17, 16, 15, 15, 14, 11, 2, 0], k=4) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [32, 32, 31, 30, 25, 25, 21, 20, 17, 17, 16, 15, 15, 14, 11, 2, 0], k = 4):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of scores and a threshold value, determine if the scores meet the threshold condition. Then, calculate the number of scores that meet the threshold."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of scores that are greater than or equal to the threshold. The function f checks if all scores before index k are greater than or equal to scores[k] and greater than 0, and all scores after index k are less than scores[k] or less than or equal to 0. The assert statement checks if f(g()) returns True."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, scores=[44, 42, 41, 41, 40, 40, 39, 38, 38, 38, 37, 33, 32, 31, 31, 31, 30, 29, 28, 26, 25, 24, 24, 23, 23, 22, 20, 20, 20, 18, 17, 17, 16, 16, 12, 9, 9, 7, 6, 5, 4, 2], k=1) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [44, 42, 41, 41, 40, 40, 39, 38, 38, 38, 37, 33, 32, 31, 31, 31, 30, 29, 28, 26, 25, 24, 24, 23, 23, 22, 20, 20, 20, 18, 17, 17, 16, 16, 12, 9, 9, 7, 6, 5, 4, 2], k = 1):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves evaluating a set of scores based on a given condition and returning a boolean value."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of elements in the scores list that are greater than or equal to the threshold. The threshold is the maximum of scores[k] and 1. The function f checks if all elements in the scores list before index k are greater than or equal to scores[k] and greater than 0, and if all elements after index k are less than scores[k] or less than or equal to 0. The assert statement at the end checks if f(g()) is True."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, scores=[36, 27, 24, 19, 15, 15, 8, 8, 5], k=4) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [36, 27, 24, 19, 15, 15, 8, 8, 5], k = 4):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list of scores and a threshold value, determine if the scores meet the threshold condition."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2) -> bool:\n    assert all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))), 'Hint: scores are non-decreasing'\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))\ndef g(scores = [20, 19, 17, 13, 12, 11, 10, 6], k = 2):\n    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of scores and a threshold value k, determine if the first n scores are greater than or equal to the k-th score and positive, and if the remaining scores are less than the k-th score or less than or equal to 0."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by calculating the number of scores that are greater than or equal to the threshold. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='Problems') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'Problems'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a string t follows a pattern generated by g, and g generates a pattern based on a given string. The puzzle involves understanding the logic of the functions and testing their interaction."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The puzzle is not valid because it violates the rule of avoiding using `f` inside `g`."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='VahOjaquAlYMEcubidePYwApawAtonE') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'VahOjaquAlYMEcubidePYwApawAtonE'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s, determine if it is a valid string by checking if each non-vowel character in s is followed by a dot in the input string t. If it is valid, return True; otherwise, return False."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle respects the rules. The function g returns the solution to the problem, and there is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s, determine if it is a valid string for the pattern t. The pattern t consists of a sequence of dots and lowercase letters, and the string s should match this pattern by replacing the dots with the corresponding letters from s."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='NOxADaNIMiReZoTeXtODUtHulyTHETextojoLeQuaNutEXtE') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'NOxADaNIMiReZoTeXtODUtHulyTHETextojoLeQuaNutEXtE'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s, determine if it is a valid pattern for the string t, where t contains only consonants and dots, and the pattern should match the consonants in t with dots in between."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a modified string based on the input string s. The function f checks if the modified string satisfies certain conditions. The puzzle is valid as it follows the rules provided."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='MEkUWonymYNAQUypEcIv') -> bool:\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        assert t[i] == '.', f'expecting `.` at position {i}'\n        i += 1\n        assert t[i] == c, f'expecting `{c}`'\n        i += 1\n    return i == len(t)\ndef g(s = 'MEkUWonymYNAQUypEcIv'):\n    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s, return true if s can be formed by inserting a single character '.' between each pair of consecutive consonants in the string t."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(squares: List[List[int]], m=10, n=5, target=50) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 10, n = 5, target = 50):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves defining two functions f and g, where f takes a list of squares and checks if they cover a target area, and g generates the list of squares based on the dimensions and target area."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a solution to the problem and does not just give arguments to f. There is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(squares: List[List[int]], m=30, n=12, target=360) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 30, n = 12, target = 360):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of squares and dimensions m, n, and target, the function f checks if the squares cover the entire grid without overlap, and the function g generates a list of squares based on the dimensions of the grid."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a solution to the problem and does not just give arguments to f. There is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(squares: List[List[int]], m=34, n=25, target=850) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 34, n = 25, target = 850):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of squares and their coordinates, the function f checks if the squares cover a specific target area in a grid of size m x n. The function g generates the coordinates of the squares based on the dimensions of the grid. The assert statement checks if function f returns True when applied to the output of function g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a solution to the problem by generating a list of squares that cover the entire grid. The function f checks if the given list of squares covers the entire grid without overlapping. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(squares: List[List[int]], m=35, n=46, target=1610) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 35, n = 46, target = 1610):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of squares and their coordinates, the function f checks if the squares cover a specific target area in a grid of size m x n. The function g generates the coordinates of the squares based on the dimensions of the grid. The assert statement checks if the function f returns True when applied to the output of function g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a solution to the problem and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(squares: List[List[int]], m=41, n=12, target=492) -> bool:\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        assert 0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target\ndef g(m = 41, n = 12, target = 492):\n    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "The puzzle involves defining two functions f and g, where f takes a list of squares and checks if they cover a specific target area, and g generates the list of squares based on the dimensions and target area."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a solution to the problem and does not just give arguments to f. There is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, ops=['x++', '--x', '--x'], target=19143212) -> bool:\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\ndef g(ops = ['x++', '--x', '--x'], target = 19143212):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.0
        ],
        "description": [
            "Given a list of operations and a target value, determine if the operations can be applied to a variable to reach the target value."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            5
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of a mathematical operation based on the input list 'ops'. The function f checks if the result of g is equal to the target value. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813) -> bool:\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            assert op in ['--x', 'x--']\n            n -= 1\n    return n == target\ndef g(ops = ['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target = 61813):\n    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if a given sequence of operations on a variable 'n' results in a target value, using two different functions f and g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the target value modified by the count of each operation in the ops list. The function f checks if the result of g is equal to the target value."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, s='aaAab', t='aAaaB') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'aaAab', t = 'aAaaB'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given two strings s and t, determine if they are equal when both are lowercased. If they are not equal, determine which one comes first in lexicographical order."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not use function f inside it. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, s='JyNuTexTETiGAVIC', t='JynUTEXTetigAViC') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'JyNuTexTETiGAVIC', t = 'JynUTEXTetigAViC'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given two strings s and t, determine if they are equal, greater, or less than each other based on their lowercase forms."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of comparing the lowercase versions of strings s and t. The function f takes an integer n and compares the lowercase versions of strings s and t based on the value of n. The assert statement checks if the result of f(g()) is True."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, s='tExTYtOHahekomArof', t='TExTYTohaHeKomryGUSeteXTUrYgir') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'tExTYtOHahekomArof', t = 'TExTYTohaHeKomryGUSeteXTUrYgir'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given two strings s and t, and an integer n, determine if the strings are equal, or if one is greater than the other based on their lowercase values."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of comparing the lowercase versions of strings s and t. The function f takes the result of g and checks if it is True."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, s='RObAQuYK', t='robaQUYKkuLY') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'RObAQuYK', t = 'robaQUYKkuLY'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given two strings s and t, and an integer n, determine if the comparison of s and t based on n is true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of the comparison between the lowercase versions of strings s and t. The function f takes the result of g and checks if it's True."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, s='DUTeX', t='dutdE') -> bool:\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False\ndef g(s = 'DUTeX', t = 'dutdE'):\n    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given two strings s and t, and an integer n, determine if the strings satisfy a specific condition based on the value of n."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the result of string comparison between s and t, and the function f uses this result to perform additional comparisons. The functions f and g are not independent, and f uses the result of g to make decisions, violating the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, word='konjac') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'konjac'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Check if the first letter of a word is capitalized and the rest of the word is in lowercase."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by generating the word 'konjac' with the first letter capitalized. The function f checks if a given string matches the word 'konjac' with the first letter capitalized."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, word='nojapoxe') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'nojapoxe'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that checks if a string s matches a word with the first letter capitalized, and a function g that capitalizes the first letter of a word, determine if the assertion holds true for the given implementation."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the word with its first letter capitalized, and then the function f checks if a given string matches the word. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, word='silon') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'silon'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Check if the first letter of a word is capitalized and the rest of the word is in lowercase."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the modified word with the first letter capitalized. The function f checks if a given string matches the modified word, taking into account the capitalization of the first letter. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, word='fekovo') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'fekovo'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Check if the first letter of a word is capitalized and the rest of the word matches a given pattern."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the word with its first letter capitalized, and the function f checks if a given string matches the word with its first letter capitalized. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, word='mo') -> bool:\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True\ndef g(word = 'mo'):\n    return word[0].upper() + word[1:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Check if the function f returns True when called with the result of function g as an argument."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the word with its first letter capitalized. The function f checks if a given string s matches the word with its first letter capitalized. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='abbbcabbac', target=7) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'abbbcabbac', target = 7):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s, return the length of the longest substring that contains at most two distinct characters."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g ignores the 'target' parameter and returns a modified string 's'. The function f calls g and checks if the returned value is True. The function g does not directly return the solution to the problem, as it modifies the input string 's' and returns a modified version of it. Therefore, the puzzle does not respect the rule that the function g must return the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='cbbbbbcbbbbbbbaccacacaacbbcaaacbbaacbabacabccbbbcaacbbacaabcabbaacbbaa', target=43) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'cbbbbbcbbbbbbbaccacacaacbbcaaacbbaacbabacabccbbbcaacbbacaabcabbaacbbaa', target = 43):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f takes a string t and checks if t has a length greater than or equal to a target and if all characters in t are different, and g takes a string s and returns a modified version of s, the puzzle is to determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g ignores the target parameter and returns a modified string based on the input string. The function f calls g and checks if the returned value is True. The function g does not directly return the solution to the problem, but rather a modified string. This violates the rule that the function g must return the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='bcb', target=3) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'bcb', target = 3):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, where f takes a string t and checks if it satisfies a condition, and g takes a string s and returns a modified version of s. The puzzle involves understanding the behavior of f and g and using them together to assert a condition."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the modified string 's' by removing consecutive duplicate characters. The function f checks if the length of the input string 't' is greater than or equal to the target, and if all characters in the string are different from their adjacent characters. The function g is called inside the assert statement of function f."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='c', target=1) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'c', target = 1):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a string meets certain conditions and g generates a new string based on the input string, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a modified string based on the input string s. The function f checks if the length of the modified string is greater than or equal to the target and if all adjacent characters in the modified string are different. The function g is called inside the function f."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='bcbcabba', target=7) -> bool:\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))\ndef g(s = 'bcbcabba', target = 7):\n    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s, return the length of the longest substring that contains at most two distinct characters."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a modified version of the input string s, and the modified string is used as an argument to the function f. The function f checks if the length of the modified string is greater than or equal to the target value, and also checks if all adjacent characters in the modified string are different. The function g does not directly return the solution to the problem, but it modifies the input string and then passes it to function f. This violates the rule that the function g must return the solution to the problem, and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(delta: List[int], nums=[[1, 2, 3], [9, -2, 8], [17, 2, 50]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[1, 2, 3], [9, -2, 8], [17, 2, 50]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by calculating the sum of each column in the given matrix and returning the negation of those sums. The function f checks if the sum of each column in the given matrix, plus the corresponding value in the delta list, equals zero. The functions f and g do not violate the rule of using f inside g. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(delta: List[int], nums=[[-48, -64, 10], [-6, 46, 95], [89, 95, 20], [-96, 45, 74], [-78, 19, 47], [-6, -69, 55]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[-48, -64, 10], [-6, 46, 95], [89, 95, 20], [-96, 45, 74], [-78, 19, 47], [-6, -69, 55]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and it does not use the function f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(delta: List[int], nums=[[-17, -87, 34], [-8, -47, -68], [92, -14, -18], [18, 89, 85], [52, 89, -56], [-38, -19, -53], [-78, -25, -34]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[-17, -87, 34], [-8, -47, -68], [92, -14, -18], [18, 89, 85], [52, 89, -56], [-38, -19, -53], [-78, -25, -34]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of lists of integers, determine if the sum of each column plus a given delta equals zero. Then, calculate the sum of each column and return the negation of the result."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and it does not use f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of lists of integers, determine if the sum of each column plus a corresponding value in a delta list equals zero. Then, find the sum of each column in the list of lists."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by calculating the sum of the vectors in the given list and returning the negation of the sum for each index. The function f checks if the sum of each index of the vectors in the given list, plus the corresponding value in the delta list, equals 0."
    },
    {
        "fitness": null,
        "program_str": "def f(delta: List[int], nums=[[-16, 53, 37], [-54, -85, 65], [-46, 49, -81], [88, -47, -35], [53, -82, 4], [45, 94, 39], [72, -57, 27], [40, 35, -44], [-15, 32, 21]]) -> bool:\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))\ndef g(nums = [[-16, 53, 37], [-54, -85, 65], [-46, 49, -81], [88, -47, -35], [53, -82, 4], [45, 94, 39], [72, -57, 27], [40, 35, -44], [-15, 32, 21]]):\n    return [-sum(vec[i] for vec in nums) for i in range(3)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves evaluating a function f with a given delta and a list of numbers, and then using the result of f to assert the correctness of function g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and it does not use the function f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=17, b=100, c=20) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 17, b = 100, c = 20):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the value of -a + sum([b * i for i in range(c)]), which is used as an argument in the function f. This violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=62, b=92, c=24) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 62, b = 92, c = 24):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of a arithmetic progression with common difference b and number of terms c. The function f checks if the sum of a and n is equal to the sum of the arithmetic progression. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=14, b=50, c=47) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 14, b = 50, c = 47):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of a arithmetic progression with common difference b and number of terms c, and subtracts a from the result. The function f checks if the sum of a and n is equal to the sum of the arithmetic progression. The puzzle is valid as it follows the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=62, b=63, c=13) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 62, b = 63, c = 13):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of a arithmetic progression with first term -a, common difference b, and c terms. The function f checks if n + a is equal to the sum of the arithmetic progression with first term b, common difference b, and c terms. The puzzle is valid as it follows the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=5, b=31, c=37) -> bool:\n    return n + a == sum([b * i for i in range(c)])\ndef g(a = 5, b = 31, c = 37):\n    return -a + sum([b * i for i in range(c)])\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of a arithmetic progression with common difference b and number of terms c. The function f checks if the sum of a and n is equal to the sum of the arithmetic progression. The assert statement checks if f(g()) is True."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, v=17, w=100) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 17, w = 100):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine the relationship between two variables v and w after a series of operations, and compare the results of two functions f and g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the number of iterations required for v to exceed w, and the function f checks if v exceeds w after a certain number of iterations. The functions f and g do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, v=75129500, w=979292947) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 75129500, w = 979292947):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine the relationship between two variables v and w after a series of operations, and then compare the result with a given condition."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the number of iterations required for v to exceed w, and the function f checks if v exceeds w after a certain number of iterations. The functions do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, v=609909721, w=872375011) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 609909721, w = 872375011):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if a given function f returns True for the result of function g"
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the number of iterations required for v to exceed w, and the function f checks if v exceeds w after n iterations. The functions do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, v=313946483, w=806690290) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 313946483, w = 806690290):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a condition is true and g calculates a value, determine the relationship between f and g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the number of iterations required for v to exceed w, and the function f checks if v exceeds w after a certain number of iterations. The functions do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, v=54888266, w=670740803) -> bool:\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w\ndef g(v = 54888266, w = 670740803):\n    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes an integer n and two default parameters v and w, and returns a boolean. The function g takes two default parameters v and w, and returns an integer. The puzzle also includes an assertion that checks the result of f(g())."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the number of iterations required for v to exceed w, and the function f checks if v exceeds w after n iterations. The functions do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(res: int, m=1234578987654321, n=4) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 1234578987654321, n = 4):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes an integer and two optional parameters, and a function g that also takes two optional parameters. The puzzle tests the relationship between f and g using a specific assertion."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. There is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(res: int, m=52891398375817839454, n=3) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 52891398375817839454, n = 3):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if they produce the same result for the given input values of m and n."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. There is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(res: int, m=22262059435814874058, n=6) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 22262059435814874058, n = 6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if they are equivalent for the given input values."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. Also, there is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(res: int, m=23602903522227899062, n=2) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 23602903522227899062, n = 2):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. Also, there is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(res: int, m=27368816582234104063, n=4) -> bool:\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m\ndef g(m = 27368816582234104063, n = 4):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g()) and explain the behavior of the functions."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, pairs=[[3, 0], [17, 1], [9254359, 19], [123, 9254359], [0, 123]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[3, 0], [17, 1], [9254359, 19], [123, 9254359], [0, 123]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes an integer n and a list of pairs, and returns a boolean value. The function g takes a list of pairs and returns an integer. The puzzle also includes an assertion to test the relationship between f and g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by calculating the maximum value of 'n' based on the given pairs. The function f checks if there exists a sequence of pairs that sums up to 'n'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, pairs=[[735272, 0], [959403, 509925], [627622, 420078], [26718, 90062], [175999, 98715], [428400, 1098754], [958640, 543606], [983032, 181754], [143406, 1301552], [183299, 437141], [133206, 199853], [679951, 366700], [383704, 737787], [476200, 226078], [923093, 81263], [574756, 679331], [766050, 5511], [214260, 445680], [434074, 747765], [769774, 209386], [512796, 2095723], [0, 612991]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[735272, 0], [959403, 509925], [627622, 420078], [26718, 90062], [175999, 98715], [428400, 1098754], [958640, 543606], [983032, 181754], [143406, 1301552], [183299, 437141], [133206, 199853], [679951, 366700], [383704, 737787], [476200, 226078], [923093, 81263], [574756, 679331], [766050, 5511], [214260, 445680], [434074, 747765], [769774, 209386], [512796, 2095723], [0, 612991]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves two functions f and g, where f takes an integer n and a list of pairs as input and returns a boolean value, and g takes a list of pairs as input and returns an integer value. The puzzle involves checking the relationship between the two functions f and g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of pairs, determine if there exists a sequence of pairs such that the sum of the first elements minus the sum of the second elements equals a given number n."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and not just a function that gives arguments to f. However, the problem uses the solution of g inside f, violating the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, pairs=[[0, 0]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[0, 0]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f takes an integer n and a list of pairs, and g takes a list of pairs, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by calculating the maximum value of 'n' based on the input pairs. The function f checks if there exists a sequence of pairs that sums up to 'n'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]) -> bool:\n    assert sum((p - m for (p, m) in pairs)) == 0, 'oo'\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success\ndef g(pairs = [[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]):\n    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes an integer n and a list of pairs, and returns a boolean. The function g takes a list of pairs and returns an integer. The puzzle also includes an assertion to test the relationship between f and g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and not just a function that gives arguments to f. However, the function f uses the result of g to perform the check. This violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(s_case: str, s='CanYouTellIfItHASmoreCAPITALS') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'CanYouTellIfItHASmoreCAPITALS'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if a given string has more capital letters than lowercase letters"
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and not just a function that gives arguments to f. However, the function g uses the same logic as function f, which is not ideal."
    },
    {
        "fitness": null,
        "program_str": "def f(s_case: str, s='ThUcynICHiHIc') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'ThUcynICHiHIc'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s, determine if the number of uppercase letters in s is greater than half of the length of s."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(s_case: str, s='riziP') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'riziP'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and not just a function that gives arguments to f. However, the function g uses the function f inside it, violating the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(s_case: str, s='KANExAjoHiBotipomyVOkATuMY') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'KANExAjoHiBotipomyVOkATuMY'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.0
        ],
        "description": [
            "Given a string s, determine if the number of uppercase letters in s is greater than half the length of s. If it is, return s in uppercase, otherwise return s in lowercase."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            5
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and not just a function that gives arguments to f. However, the function g uses the function f inside the assert statement, which violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(s_case: str, s='rAC') -> bool:\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())\ndef g(s = 'rAC'):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a string s, determine if the case of the letters in the string can be changed to make the string equal to a given case-insensitive string s_case."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and not just a function that gives arguments to f. However, the function g uses the result of f to check the solution, which is not allowed."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], string='enlightenment') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'enlightenment'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string 'enlightenment', find the indices of the characters that form the word 'intelligent' in the string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of indices that correspond to the characters in the string 'enlightenment' that form the word 'intelligent'. The function f checks if the indices are sorted and if the characters at those indices form the word 'intelligent'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], string='inntGetlige') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'inntGetlige'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a string 'inntGetlige', find the indices of the characters that form the word 'intelligent'."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of indices that correspond to the characters in the input string 'inntGetlige' that form the word 'intelligent'. The function f checks if the input list of indices is sorted and if the characters at those indices form the word 'intelligent'. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], string='gteliikeenGgqIHent') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'gteliikeenGgqIHent'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string, find the indices of the characters that form the word 'intelligent' in the string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by finding the indices of the characters in the given string that form the word 'intelligent'. The function f checks if the indices are sorted and if the characters at those indices form the word 'intelligent'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], string='xaGliigNntJfeeSm  nnEyt') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = 'xaGliigNntJfeeSm  nnEyt'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of indices and a string, check if the characters at the specified indices form a specific word. If they do, return True, otherwise return False."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by finding the indices of the characters in the string that form the word 'intelligent'. The function f checks if the indices are sorted and if the characters at those indices form the word 'intelligent'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], string='  einliJSgeteq ne CAlti') -> bool:\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'\ndef g(string = '  einliJSgeteq ne CAlti'):\n    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string, find the indices of the characters that form the word 'intelligent' in the string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by finding the indices of the characters in the given string that form the word 'intelligent'. The function f checks if the indices are sorted and if the characters at those indices form the word 'intelligent'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(d: int, n=123456789) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 123456789):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g()) and assert it to be True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a specific value based on the length of the input n, and the function f uses this value to perform a comparison. There is no use of 'f' inside 'g', and the function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(d: int, n=659104579100082212) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 659104579100082212):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a specific value based on the length of the input n, and the function f uses the output of g to perform a comparison. There is no use of function f inside function g, and the function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(d: int, n=476988101965) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 476988101965):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a specific value based on the length of the input n, and the function f uses the output of g to check a condition. There is no use of f inside g, and g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(d: int, n=3169877099077541094754) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 3169877099077541094754):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a specific value based on the length of the input n. It does not use the function f or its output to generate the result. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(d: int, n=707) -> bool:\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))\ndef g(n = 707):\n    return int(\"4444\" + \"0\" * (len(str(n)) - 3))\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a specific value based on the input n, and it does not use the function f inside it. The function f checks a condition and returns a boolean value based on the input d and n. The puzzle is valid based on the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, target='reverse me', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'reverse me', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string s and checks if s reversed is equal to a target string, and a function g that takes a target string and a boolean reverse flag and returns the reversed target string if reverse is True, and the target string concatenated with 'x' if reverse is False. The puzzle is to determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the reverse of the target if reverse is True, otherwise it returns the target with 'x' appended to it. The function f checks if the input string reversed is equal to the target, and then compares it to the reverse parameter. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, target='thubonyna', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'thubonyna', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f that takes a string s and a target string, and a function g that takes a target string and a boolean reverse, determine if the result of g passed to f is True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the reverse of the target if reverse is True, and returns the target with 'x' appended if reverse is False. The function f checks if the input string reversed is equal to the target, and then checks if this equality is equal to the reverse parameter. The assert statement checks if f(g()) is True."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, target='nivosypetextyzavalag', reverse=False) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'nivosypetextyzavalag', reverse = False):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and a target string, and a function g that takes a target string and a boolean, determine if the reversed string of the target string matches the input string, and if the result should be reversed or not."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the reverse of the target if reverse is True, otherwise it appends 'x' to the target. The function f checks if the input string reversed is equal to the target, and then compares it to the value of reverse."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, target='l', reverse=False) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'l', reverse = False):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g())"
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the reverse of the target if reverse is True, otherwise it returns the target with 'x' appended to it. The function f checks if the reverse of the target is equal to 'l' when reverse is False, and the reverse of the target is not equal to 'l' when reverse is True."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, target='rechawewivetextovy', reverse=True) -> bool:\n    return (s[::-1] == target) == reverse\ndef g(target = 'rechawewivetextovy', reverse = True):\n    return target[::-1] if reverse else target + \"x\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string s and a target string, and a function g that takes a target string and a boolean reverse, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the reverse of the target if reverse is True, otherwise it appends 'x' to the target. The function f checks if the input string reversed is equal to the target, and then compares it to the reverse parameter. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a=5129, d=17) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 5129, d = 17):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string s and two optional parameters a and d, and a function g that takes two parameters a and d, determine the interestingness of the puzzle."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The function g does not directly return the solution to the problem, violating the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a=5798, d=1873) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 5798, d = 1873):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string s and two integers a and d, and a function g that takes two integers a and d, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The function g does not directly return the solution to the problem, but it provides arguments to function f. This violates the rule that the function g must return the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a=2645, d=1270) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 2645, d = 1270):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The function g does not use the function f inside it. The puzzle is valid based on the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a=2996, d=6808) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 2996, d = 6808):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and two integers a and d, and a function g that takes two integers a and d, the puzzle is to determine if the function f applied to the result of function g returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by generating a string of 'a's and 'd's based on the input arguments. The function f checks if the input string satisfies certain conditions based on the counts of 'a's and 'd's. There is no use of f inside g. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a=4763, d=8408) -> bool:\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)\ndef g(a = 4763, d = 8408):\n    return \"a\" * a + \"d\" * d\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and two integers as input, and a function g that takes two integers as input, determine the interestingness of the puzzle."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The function g does not use the function f inside it. The puzzle is valid based on the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], a=100, b=1000, count=648) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 100, b = 1000, count = 648):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of numbers, determine if the count of unique numbers is greater than or equal to a specified count, where the numbers are within a specified range and have unique digits."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of numbers that satisfy a certain condition, and the function f checks if the input list of numbers satisfies another condition. The functions g and f are used appropriately and do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], a=79, b=169, count=67) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 79, b = 169, count = 67):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of numbers, determine if the count of unique numbers in the list is greater than or equal to a specified count. The numbers in the list must have unique digits and fall within a specified range."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of numbers that satisfy a certain condition, and the function f checks if the input list of numbers satisfies another condition. The functions g and f are used together to solve the problem, and there is no use of g inside f. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], a=31, b=105, count=66) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 31, b = 105, count = 66):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of numbers, determine if the count of unique numbers in the list is greater than or equal to a specified count."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of numbers that satisfy a certain condition, and the function f checks if the input list of numbers satisfies another condition. The functions g and f are used appropriately and do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], a=52, b=95, count=40) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 52, b = 95, count = 40):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of numbers, determine if the count of unique numbers is greater than or equal to a specified count, where the numbers are within a specified range and have unique digits."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of numbers that satisfy a certain condition, and the function f checks if the input list of numbers satisfies another condition. The functions g and f are used correctly according to the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], a=136, b=176, count=34) -> bool:\n    assert all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums))\n    return len(set(nums)) >= count\ndef g(a = 136, b = 176, count = 34):\n    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of numbers, determine if the count of unique numbers is greater than or equal to a specified count, where the numbers are within a specified range and have unique digits."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of numbers that satisfy a certain condition, and the function f checks if the input list of numbers satisfies a certain condition. The functions g and f are independent and do not violate the rule of using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [2, 8, 25, 18, 99, 11, 17, 16], thresh = 17):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of 1 if the element is less than the threshold and 2 if the element is greater than or equal to the threshold. The function f checks if the total is equal to the sum of 1s and 2s based on the threshold."
    },
    {
        "fitness": null,
        "program_str": "def f(tot: int, nums=[60, 63, 11], thresh=99) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [60, 63, 11], thresh = 99):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f takes an integer tot, a list of integers nums, and an integer thresh, and g takes a list of integers nums and an integer thresh. The functions return a boolean value based on the comparison of tot and the sum of the elements in nums. The puzzle involves understanding the behavior of the functions and using them to assert a condition."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of 1 if the number is less than the threshold, and 2 if the number is greater than or equal to the threshold. The function f checks if the total is equal to the sum of 1s and 2s based on the threshold. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(tot: int, nums=[32, 24, 19, 88, 6, 33, 13], thresh=33) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [32, 24, 19, 88, 6, 33, 13], thresh = 33):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, the puzzle requires understanding the behavior of the functions and their interaction to determine the correctness of the assert statement."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of 1 if the element is less than the threshold and 2 if the element is greater than or equal to the threshold. The function f checks if the total is equal to the sum of 1s and 2s based on the threshold."
    },
    {
        "fitness": null,
        "program_str": "def f(tot: int, nums=[60, 72, 32, 29, 90, 9, 39, 67, 31, 71, 68, 72, 28, 85, 75, 60, 42, 66, 4, 71, 57, 45, 88, 20, 66, 97, 33, 43, 48], thresh=30) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [60, 72, 32, 29, 90, 9, 39, 67, 31, 71, 68, 72, 28, 85, 75, 60, 42, 66, 4, 71, 57, 45, 88, 20, 66, 97, 33, 43, 48], thresh = 30):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of numbers and a threshold, determine if the sum of 1s and 2s in the list based on whether each number is less than the threshold equals a given total."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. However, the function g uses a comprehension inside the sum function, which violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(tot: int, nums=[61, 98, 33, 32, 4, 99, 91, 63, 76, 83, 52, 0, 19, 49, 85, 5, 54, 71, 41, 93, 54, 78, 92], thresh=91) -> bool:\n    return tot == sum((1 if i < thresh else 2 for i in nums))\ndef g(nums = [61, 98, 33, 32, 4, 99, 91, 63, 76, 83, 52, 0, 19, 49, 85, 5, 54, 71, 41, 93, 54, 78, 92], thresh = 91):\n    return sum(1 if i < thresh else 2 for i in nums)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, where f takes a total and a list of numbers and returns True if the total is equal to the sum of 1s and 2s in the list based on a threshold, and g calculates the sum of 1s and 2s in the list based on a threshold. The puzzle requires understanding of function composition and boolean comparison."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of 1 if the number is less than the threshold and 2 if the number is greater than or equal to the threshold. The function f checks if the total is equal to the sum of 1 if the number is less than the threshold and 2 if the number is greater than or equal to the threshold."
    },
    {
        "fitness": null,
        "program_str": "def f(ans: List[List[int]], target=17) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 17):\n    return [[0, 2]] * target\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine the interestingness of a given puzzle and its solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of lists, and the function f checks if the absolute difference between the second and first element of each inner list is greater than or equal to 2. If the condition is met, the target is decremented by 1. The function g returns a list of lists with the same inner list repeated 'target' times, where target is initially set to 17. The function f then checks if the modified target is equal to 0."
    },
    {
        "fitness": null,
        "program_str": "def f(ans: List[List[int]], target=0) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 0):\n    return [[0, 2]] * target\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Determine the interestingness of a given puzzle and its solution."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of lists, which is used as an argument for function f. The function f checks if the difference between the second and first element of each inner list is greater than or equal to 2, and then decrements the target value. The function g returns a list of lists based on the target value, and the function f checks if the target value becomes 0 after the decrements."
    },
    {
        "fitness": null,
        "program_str": "def f(ans: List[List[int]], target=1) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 1):\n    return [[0, 2]] * target\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Determine the interestingness of a given puzzle and its solution."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of lists, and the function f checks if the absolute difference between the second and first element of each inner list is greater than or equal to 2. If the count of such differences is equal to the target, the function returns True."
    },
    {
        "fitness": null,
        "program_str": "def f(ans: List[List[int]], target=2) -> bool:\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0\ndef g(target = 2):\n    return [[0, 2]] * target\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Determine the interestingness of a given puzzle and its solution."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of lists, and the function f checks if the absolute difference between the second and first element of each inner list is greater than or equal to 2. If the condition is met for at least two inner lists, the function returns True, otherwise it returns False. The functions g and f do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, n=7012) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 7012):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine the value of f(g()) and assert its correctness."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a specific string based on the value of n, and the function f uses this string in its computation. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, n=0) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 0):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g()) for the provided code."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string based on the value of n, and the function f uses this string in its computation. The function g also returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, n=1) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 1):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine the value of f(g()) for a given value of n."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string based on the value of n, and the function f uses this string in its computation. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, n=2) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 2):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(s: str, n=2) -> bool that returns True if the concatenation of the last two digits of 5^n and s equals 5^n, and a function g(n=2) that returns '1' if n=0, '5' if n=1, and '25' if n=2, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string based on the value of n, and the function f uses this string in its computation. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, n=3) -> bool:\n    return int(str(5 ** n)[:-2] + s) == 5 ** n\ndef g(n = 3):\n    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine the value of f(g()) and assert its correctness."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string based on the value of n, and the function f uses this string in its computation. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a start and end combination, find the shortest sequence of valid combinations to reach the end combination, where a valid combination is one where each digit differs by at most 1."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of intermediate states between the start and combo, which is the solution to the problem. The function g does not use the function f inside it. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(states: List[str], start='77872', combo='43506', target_len=16) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '77872', combo = '43506', target_len = 16):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of states, a start state, a combo state, and a target length, and returns a boolean. The function g takes a start state, a combo state, and a target length, and returns a list of states. The puzzle involves manipulating states to reach the combo state from the start state."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of strings, which are the intermediate states of the combination lock. The function f checks if the number of states is less than or equal to the target length. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(states: List[str], start='268', combo='180', target_len=4) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '268', combo = '180', target_len = 4):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of states, a start state, a combo state, and a target length, and returns a boolean. The function g takes a start state, a combo state, and a target length, and returns a list of states. The puzzle involves manipulating states to reach the combo state from the start state."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a list of strings that are used as arguments to the function f. This violates the rule that the function g must return the solution to the problem, and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(states: List[str], start='4675159714', combo='9758013840', target_len=27) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '4675159714', combo = '9758013840', target_len = 27):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of states, a start string, a combo string, and a target length, and returns a boolean. The function g takes a start string, a combo string, and a target length, and returns a list of strings. The puzzle involves manipulating strings and checking conditions to determine the output of the functions."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a list of intermediate states between the start and combo, which is not the solution to the problem. Therefore, the puzzle is not valid."
    },
    {
        "fitness": null,
        "program_str": "def f(states: List[str], start='242716', combo='891245', target_len=18) -> bool:\n    assert all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))\n    for (a, b) in zip([start] + states, states + [combo]):\n        assert sum((i != j for (i, j) in zip(a, b))) == 1\n        assert all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b)))\n    return len(states) <= target_len\ndef g(start = '242716', combo = '891245', target_len = 18):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of states, a start string, a combo string, and a target length, and returns a boolean. The function g takes a start string, a combo string, and a target length, and returns a list of strings. The puzzle involves manipulating strings and checking conditions based on the input strings."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of intermediate states between the start and combo, which is the solution to the problem. The puzzle is valid based on the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(states: List[str], start='424', combo='778', target_len=12) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '424', combo = '778', target_len = 12):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of strings, a start string, a combo string, and a target length, and returns a boolean value. The function g takes a start string, a combo string, and a target length, and returns a list of strings."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of strings that are used as states in the function f. The function f checks if the sum of the squared differences of the digits in each pair of adjacent states is equal to 1. The function g returns the states that lead from the start state to the combo state. The function f then checks if these states satisfy the condition."
    },
    {
        "fitness": null,
        "program_str": "def f(states: List[str], start='50', combo='59', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '50', combo = '59', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of states, a start state, a combo state, and a target length, determine if it is possible to reach the combo state from the start state by changing one digit at a time. Then, provide a function to generate the sequence of states to reach the combo state from the start state."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of strings that are used to calculate the solution in function f. The solution is valid and respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(states: List[str], start='23', combo='12', target_len=1) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '23', combo = '12', target_len = 1):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of strings, a start string, a combo string, and a target length, and returns a boolean value. The function g takes a start string, a combo string, and a target length, and returns a list of strings. The puzzle involves manipulating strings and checking conditions based on the input strings."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a list of strings that represent the intermediate states between the start and combo strings. These intermediate states are used to check the condition in function f. The function g does not directly return the solution to the problem, but it provides the arguments to function f. Therefore, the puzzle does not respect the rule that the function g must return the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(states: List[str], start='4', combo='3', target_len=0) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '4', combo = '3', target_len = 0):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of strings, a start string, a combo string, and a target length, and returns a boolean value. The function g takes a start string, a combo string, and a target length, and returns a list of strings. The puzzle involves manipulating strings and checking for a specific condition."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a list of strings that are used as arguments for function f. The function g does not directly return the solution to the problem, but rather provides arguments to function f. This violates the rule that the function g must return the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(states: List[str], start='2184377', combo='7002994', target_len=18) -> bool:\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))\ndef g(start = '2184377', combo = '7002994', target_len = 18):\n    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of states, a start state, a combo state, and a target length, determine if the sum of the squared differences between corresponding digits in the start and combo states is equal to 1 for each state in the list. Then, implement a function to find the sequence of states to transform the start state into the combo state."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of strings that are used as states in the function f. The function g also returns the solution to the problem by generating the states that satisfy the condition in function f."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='hello are you there?') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'hello are you there?'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a permutation and a target string, determine if the permutation of the target string is equal to a modified version of the original string."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of applying a permutation to the target string. The function f checks if the result of applying a permutation to the input string is equal to the target string. The functions f and g do not violate the rule of using f inside g. The function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='xapypakygatextifyth divufyjacof cecuchuquypo sulechukijocharapad hych mugemi re binivot') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'xapypakygatextifyth divufyjacof cecuchuquypo sulechukijocharapad hych mugemi re binivot'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a permutation and a target string, determine if the permutation of the input string matches the target string. Then, reverse the permutation and apply it to the target string to obtain the original input string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of applying a transformation to the input 'target' string. It does not use the function f inside it. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='mujychenyzo') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'mujychenyzo'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a permutation and a target string, determine if the target string can be obtained by shifting each character in the permutation by 1 position to the right, and then shifting each character in the resulting string by 1 position to the left."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of applying a transformation to the target string, which is the inverse of the transformation applied by function f. The function g uses the perm and target parameters to perform the transformation."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='quethoruchyrugyz wemywuconuthisiquu kachogechehuz pulybyri quuby thatextak tychuzymuxuzazylyk neruzesithipecytoqu') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'quethoruchyrugyz wemywuconuthisiquu kachogechehuz pulybyri quuby thatextak tychuzymuxuzazylyk neruzesithipecytoqu'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s and two permutations perm and target, determine if s can be transformed into target by replacing each character in s with the next character in perm, and then reversing the resulting string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of applying a permutation to the target string. The function f checks if the result of applying the inverse permutation to the input string is equal to the target string."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, perm='qwertyuiopasdfghjklzxcvbnm', target='thyjytex cequolichitextotho bymoxokepy jyvumywefoc') -> bool:\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target\ndef g(perm = 'qwertyuiopasdfghjklzxcvbnm', target = 'thyjytex cequolichitextotho bymoxokepy jyvumywefoc'):\n    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a permutation and a target string, determine if the permutation of the input string matches the target string. Then, reverse the permutation and apply it to the target string to obtain the original input string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of applying a permutation to the target string. The function f checks if the result of applying a permutation to the input string is equal to the target string. The functions do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length = 4):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of lists and some items, the function f checks if the lists meet certain conditions, and the function g generates a new list based on the given items and length."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by generating a list of length 4 with the most common item from the input list and a list of length 4 with the most common item repeated 4 times. The function f checks if the input lists satisfy certain conditions based on the input items and length. The puzzle is valid and respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(lists: List[List[int]], items=[5, 3, 2, 1, 0, 1, 4, 2, 5, 4, 6, 7, 8], length=2) -> bool:\n    (a, b) = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True\ndef g(items = [5, 3, 2, 1, 0, 1, 4, 2, 5, 4, 6, 7, 8], length = 2):\n    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list of lists and some items, the function f checks if the lists satisfy certain conditions, and the function g generates a list based on the given items and length."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of two lists, which are used as arguments for the function f. The function g also uses the Counter module from collections. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(seq: List[int], n=10000, length=5017) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 10000, length = 5017):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of integers and returns a boolean, and a function g that takes two optional integer arguments and returns a list of integers. The puzzle involves using function g to generate a list of integers that satisfies the conditions of function f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a solution to the problem and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(seq: List[int], n=867, length=785) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 867, length = 785):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a given sequence meets certain conditions and g generates a sequence based on given parameters, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a solution to the problem by generating a sequence of 1s and 2s based on the input parameters n and length. The function f checks if the input sequence satisfies certain conditions related to the values of the elements, the sum of the elements, and the length of the sequence. The puzzle is valid as it follows the rules provided."
    },
    {
        "fitness": null,
        "program_str": "def f(seq: List[int], n=0, length=0) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 0, length = 0):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers based on the input arguments, and the function f checks if the input list satisfies certain conditions. The functions f and g are independent and do not violate the rule of using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(seq: List[int], n=4, length=2) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 4, length = 2):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a given sequence meets certain conditions and g generates a sequence based on given parameters, determine if the sequence generated by g satisfies the conditions of f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a solution to the problem by generating a sequence of integers based on the input parameters. The function f checks if the input sequence meets certain conditions, including the sum of the sequence, the presence of specific elements, and the length of the sequence. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(seq: List[int], n=5514, length=4310) -> bool:\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)\ndef g(n = 5514, length = 4310):\n    return [2] * (n - length) + [1] * (2 * length - n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a sequence meets certain conditions and g generates a sequence based on given parameters, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a solution to the problem by generating a sequence of 1s and 2s based on the input parameters. The function f checks if the input sequence meets certain conditions related to the input parameters. The puzzle is valid as it follows the rules provided."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=3, upper=6, seq=[17, 1, 2, 65, 18, 91, -30, 100, 3, 1, 2]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 3, upper = 6, seq = [17, 1, 2, 65, 18, 91, -30, 100, 3, 1, 2]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a sequence of numbers, find the starting index of the subsequence with the smallest sum of k consecutive numbers, where the sum is less than or equal to a given upper limit."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the subsequence with the minimum sum, which is the solution to the problem. The function f checks if the start index is valid and if the sum of the subsequence is less than or equal to the upper limit."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 2, upper = -172, seq = [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a sequence of integers, find the starting index of the subsequence of length k with the smallest sum, and check if the sum is less than or equal to a given upper bound."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the subsequence with the minimum sum, which is the solution to the problem. It does not use the function f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=3, upper=-238, seq=[34, -9, -41, -62, -99, -58, -81, 66, -51, 90, -8, -56, -80, -66, -50, -74, -4, -47, 63, -86, 66, 72, 38, -3, 9, 92, 25, -77, 86, -24, -23, 9, 10, 36, -82, -48, -74, -1, -80, 55, -2, -86, 95, -52, -14, -87]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 3, upper = -238, seq = [34, -9, -41, -62, -99, -58, -81, 66, -51, 90, -8, -56, -80, -66, -50, -74, -4, -47, 63, -86, 66, 72, 38, -3, 9, 92, 25, -77, 86, -24, -23, 9, 10, 36, -82, -48, -74, -1, -80, 55, -2, -86, 95, -52, -14, -87]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves finding the starting index of a subsequence in a given sequence such that the sum of the subsequence is less than or equal to a given upper bound."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the subsequence with the minimum sum, which is the solution to the problem. The function f checks if the start index is valid and if the sum of the subsequence is less than or equal to the upper limit."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=8, upper=-75, seq=[17, -90, 61, -29, 57, 7, -45, -37, 1, 69]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 8, upper = -75, seq = [17, -90, 61, -29, 57, 7, -45, -37, 1, 69]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a sequence of integers, find the start index of a subsequence of length k with the smallest sum, and check if the sum is less than or equal to a given upper bound."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the subsequence with the minimum sum, which is the solution to the problem. The function f checks if the start index is valid and if the sum of the subsequence is less than or equal to the upper limit."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=8, upper=-4, seq=[-17, 55, 6, -2, -14, -19, 86, -4, -8, -49, 40, 82]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper\ndef g(k = 8, upper = -4, seq = [-17, 55, 6, -2, -14, -19, 86, -4, -8, -49, 40, 82]):\n    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a sequence of numbers, find the start index of a subsequence of length k with the smallest sum, and check if the sum is less than or equal to a given upper bound."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the subsequence with the minimum sum, which is the solution to the problem. The function g does not use the function f inside it, so it respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 150, seq = [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a sequence of numbers, find the starting index of a subsequence of length k with the highest sum, and check if the sum is greater than or equal to a given lower bound."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the start index of the subsequence with the maximum sum, and then passes this start index to function f to check if the sum of the subsequence starting at this index is greater than or equal to the lower bound."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=9, lower=-183, seq=[44, -94, 25, -63, -39, -71, -34, 84, -35]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 9, lower = -183, seq = [44, -94, 25, -63, -39, -71, -34, 84, -35]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a sequence of integers, find the starting index of a subsequence of length k with the highest sum, and check if the sum of the subsequence is greater than or equal to a given lower bound."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the maximum sum of a subsequence of length k in the given sequence. The function f checks if the start index is valid and if the sum of the subsequence starting from the start index is greater than or equal to the lower bound."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=3, lower=86, seq=[19, 82, -24, -9, -92, 50, -89, -15, 45, 56, -64]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 3, lower = 86, seq = [19, 82, -24, -9, -92, 50, -89, -15, 45, 56, -64]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a sequence of integers, find the maximum sum of a subsequence of length k, and check if it is greater than or equal to a given lower bound."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the maximum sum of a subsequence of length k in the given sequence. The function f checks if the start index is valid and if the sum of the subsequence starting from the start index is greater than or equal to the lower bound."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=1, lower=-36, seq=[-36]) -> bool:\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower\ndef g(k = 1, lower = -36, seq = [-36]):\n    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if the function f is correctly implemented based on the output of function g."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the maximum sum of a subsequence of length k in the given sequence seq. The function f checks if the start index is valid and if the sum of the subsequence starting from the start index and of length k is greater than or equal to the lower bound."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=3, lower=100000, seq=[91, 1, 2, 64, 18, 91, -30, 100, 3, 65, 18]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 3, lower = 100000, seq = [91, 1, 2, 64, 18, 91, -30, 100, 3, 65, 18]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f takes a start index, k, lower bound, and a sequence as input and returns a boolean, and g takes k, lower bound, and a sequence as input and returns an index. The puzzle involves understanding the functions and using them to solve a problem."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the subsequence in the given sequence that has the maximum product. The function f checks if the product of the subsequence starting at the index returned by g is greater than or equal to the lower limit."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=8, lower=774420991987500, seq=[-50, -99, -99, -65, -69, -87, 90, 45]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 8, lower = 774420991987500, seq = [-50, -99, -99, -65, -69, -87, 90, 45]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a sequence of integers, find the maximum product of a subsequence of length k and check if it is greater than or equal to a given lower bound."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the subsequence with the maximum product, and then the function f checks if the product of that subsequence is greater than or equal to the lower bound."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=2, lower=5589, seq=[8, -66, 75, 74, 40, 14, -81, -69, 99, 27, -18]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 2, lower = 5589, seq = [8, -66, 75, 74, 40, 14, -81, -69, 99, 27, -18]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f takes a start index, k, lower bound, and a sequence as input and returns a boolean, and g takes k, lower bound, and a sequence as input and returns an index. The puzzle involves understanding the functions and their interactions to solve a problem."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the subsequence in seq that has the maximum product. The function f checks if the product of the subsequence starting at the index returned by g is greater than or equal to the lower limit."
    },
    {
        "fitness": null,
        "program_str": "def f(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) -> bool:\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower\ndef g(k = 10, lower = -8326797433194240, seq = [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the subsequence in seq that has the maximum product. The function f checks if the product of the subsequence starting at the index returned by g is greater than or equal to the lower bound."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], tot=12345, n=5) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 12345, n = 5):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of integers and two optional parameters tot and n, and a function g that also takes tot and n as optional parameters, the puzzle requires finding a list of integers that satisfies the conditions of function f when passed to it as an argument."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of numbers that satisfies the conditions of function f. The conditions are checked in the assert statement, and the function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], tot=1819, n=3) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 1819, n = 3):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of integers and two optional parameters tot and n, and a function g that also takes tot and n as optional parameters, the puzzle requires finding a list of integers that satisfies the conditions of function f when passed to it as an argument."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of numbers that satisfy the conditions of the function f. The function g returns the solution to the problem by generating the list of numbers that satisfies the conditions of f."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], tot=37729, n=73) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 37729, n = 73):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of integers and two optional parameters tot and n, and a function g that also takes tot and n as optional parameters, the puzzle requires finding the correct implementation of g such that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by generating a list of numbers that satisfies the conditions specified in function f. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], tot=5359, n=11) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 5359, n = 11):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a list of numbers satisfies certain conditions, and g generates a list of numbers based on given parameters. The puzzle requires understanding of list manipulation, set operations, and arithmetic operations."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by generating a list of numbers that satisfies the conditions of function f. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], tot=36505, n=73) -> bool:\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))\ndef g(tot = 36505, n = 73):\n    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of integers and returns a boolean, and a function g that takes two optional integer arguments and returns a list of integers. The puzzle requires finding the correct implementation of g such that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of numbers that satisfies the conditions of the function f. The function g does not use the function f inside it. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(rotations: List[int], target='wonderful', upper=69) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'wonderful', upper = 69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of rotations and a target string, determine if the rotations can transform the alphabet to match the target string within a certain upper limit."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by generating a list of rotations for each character in the target string. The function f checks if the sum of absolute values of the rotations is less than or equal to the upper limit. The puzzle does not use 'f' inside 'g', and the function 'g' returns the solution to the problem as required."
    },
    {
        "fitness": null,
        "program_str": "def f(rotations: List[int], target='tubolele', upper=52) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'tubolele', upper = 52):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves rotating a string of alphabets and checking if the rotated string matches a target string. The solution involves finding the minimum rotation for each character in the target string."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. Also, there is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(rotations: List[int], target='soquogisawah', upper=67) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'soquogisawah', upper = 67):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves rotating a string of alphabets and checking if the rotations match a target string within a certain limit."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(rotations: List[int], target='jacepa', upper=44) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'jacepa', upper = 44):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of rotations and a target string, determine if the rotations can transform the alphabet to match the target string within a certain upper limit."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(rotations: List[int], target='miwykucehexo', upper=84) -> bool:\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    assert len(rotations) == len(target)\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return sum((abs(r) for r in rotations)) <= upper\ndef g(target = 'miwykucehexo', upper = 84):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves rotating a string of alphabets and checking if the rotations match a target string within a certain limit."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(bills: List[int], denominations=[1, 25, 35, 84], n=980, max_len=14) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 25, 35, 84], n = 980, max_len = 14):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of denominations, a total amount, and a maximum length, determine if it is possible to form the total amount using the denominations with a maximum length constraint, and provide a solution using dynamic programming."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses dynamic programming to solve the given problem. It iterates through a range of values and uses a min function to find the minimum value of a sequence. It then appends the count of denominations to a list and returns the list of denominations. The function f checks if the sum of bills is equal to n, if all bills are in the given denominations, and if the length of bills is less than or equal to max_len."
    },
    {
        "fitness": null,
        "program_str": "def f(bills: List[int], denominations=[1, 5, 7, 11], n=29377, max_len=2671) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 5, 7, 11], n = 29377, max_len = 2671):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of bills and denominations, determine if the sum of the bills equals a given amount, and if the bills are within the given denominations and length limit."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses dynamic programming to solve the problem. It iterates through a range of values and uses a min function to find the minimum value of a sequence. The solution then returns a list of denominations based on the count of sequences at the end of the dynamic programming process."
    },
    {
        "fitness": null,
        "program_str": "def f(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 44, 69], n = 727, max_len = 18):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of denominations, a target amount, and a maximum length, determine if it is possible to form the target amount using the denominations and if the length of the list is within the maximum length."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses dynamic programming to solve the given problem. It iterates through a range of values and uses a min function to find the minimum value of a sequence. It then appends the count of each denomination to a list and returns the list. The function f checks if the sum of the bills is equal to n, if all the bills are in the given denominations, and if the length of the bills is less than or equal to max_len."
    },
    {
        "fitness": null,
        "program_str": "def f(bills: List[int], denominations=[1, 25, 29], n=537, max_len=21) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 25, 29], n = 537, max_len = 21):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of bills and denominations, determine if the sum of the bills equals a given amount, and if the bills are within the specified denominations and length limit. The solution uses dynamic programming to find the combination of bills that equals the given amount."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses dynamic programming to solve the given problem. It iterates through a range of values and uses a min function to find the minimum value of a sequence. The solution uses a list comprehension to generate the final result based on the count of denominations and sequences."
    },
    {
        "fitness": null,
        "program_str": "def f(bills: List[int], denominations=[1, 10, 23, 49], n=74, max_len=4) -> bool:\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)\ndef g(denominations = [1, 10, 23, 49], n = 74, max_len = 4):\n    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of bills and a set of denominations, determine if the bills can be used to make up a specific amount using the given denominations. The solution uses dynamic programming to solve the problem."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses dynamic programming to solve the given problem. It iterates through the denominations and calculates the minimum number of bills required to reach each amount up to n. The solution then returns the bills required to reach the amount n. The solution respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 512, 1024], n = 340282366920938463463374607431768211456, max_dim = 13):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and returns a boolean based on certain conditions. It also involves a function g that takes optional parameters and returns a list of integers based on some calculations."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a set of options to perform some calculations and return a list of numbers. The function f then checks if the product of the input sides is equal to a specific number, if the input sides are within the set of options, and if the length of the sides is within a maximum dimension. The functions g and f are not directly related, and there is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(sides: List[int], options=[2, 8, 64, 256], n=3885337784451458141838923813647037813284813678104279042503624819477808570410416996352, max_dim=36) -> bool:\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)\ndef g(options = [2, 8, 64, 256], n = 3885337784451458141838923813647037813284813678104279042503624819477808570410416996352, max_dim = 36):\n    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of integers and returns a boolean, and a function g that takes optional parameters and returns a list of integers, determine if the assertion f(g()) is true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses the function f inside the assert statement, violating the rule that f should not be used inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, coeffs=[2.5, 1.3, -0.5]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [2.5, 1.3, -0.5]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a quadratic equation in the form ax^2 + bx + c = 0, implement functions f and g to check if the equation has real roots and to find the roots, respectively."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by calculating the roots of a quadratic equation using the quadratic formula. It does not use the function f inside it. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a set of coefficients, determine if the quadratic equation has real roots within a certain tolerance."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by calculating the roots of a quadratic equation using the coefficients provided. The function f checks if the quadratic equation with the given coefficients has a root close to 0. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, coeffs=[0.2622487694588566, 0.48521166316030495, -41.749384651642444]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [0.2622487694588566, 0.48521166316030495, -41.749384651642444]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a set of coefficients, f(x) checks if the quadratic equation is close to zero, and g() solves the quadratic equation and returns the root. The puzzle requires understanding of quadratic equations and their solutions."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. However, the function g uses the coefficients directly, which could be considered as a violation of the rule."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, coeffs=[145.72190605632582, 0.027358325157428014, -5.149342624051854]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [145.72190605632582, 0.027358325157428014, -5.149342624051854]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a quadratic equation in the form ax^2 + bx + c = 0, the puzzle requires implementing two functions f and g. Function f checks if a given value of x satisfies the quadratic equation, while function g calculates the roots of the quadratic equation and returns the value of x. The puzzle also includes an assertion to validate the correctness of the implementation."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. However, the function f uses the coefficients directly, violating the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, coeffs=[1.1222556871110754, -0.007015312913509468, -309237.6867547677]) -> bool:\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06\ndef g(coeffs = [1.1222556871110754, -0.007015312913509468, -309237.6867547677]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a set of coefficients for a quadratic equation, determine if the equation has real roots within a certain tolerance."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. However, the function g uses the coefficients directly, which could be considered as a violation of the rule."
    },
    {
        "fitness": null,
        "program_str": "def f(roots: List[float], coeffs=[1.3, -0.5]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [1.3, -0.5]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f takes a list of roots and coefficients as input and returns a boolean, and g takes coefficients as input and returns a list of roots. The puzzle involves using g to generate roots and passing them to f to check if the result is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the roots of a quadratic equation given its coefficients. The function f takes the roots and coefficients as input and checks if a certain condition is satisfied. There is no use of function f inside function g, and the function g returns the solution to the problem. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(roots: List[float], coeffs=[-1.468548989307175, -0.9453828447181172]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [-1.468548989307175, -0.9453828447181172]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of roots and coefficients, function f checks if the sum and product of the roots satisfy a certain condition. Function g calculates the roots of a quadratic equation using the given coefficients and returns them as a list."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the roots of a quadratic equation given the coefficients. The function f checks if the roots satisfy a specific condition based on the coefficients. There is no use of f inside g, and g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(roots: List[float], coeffs=[-2.0230245559088815, -0.23831699388987454]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [-2.0230245559088815, -0.23831699388987454]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of roots and a list of coefficients, and a function g that takes a list of coefficients, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the roots of a quadratic equation given the coefficients. The function f checks if the sum and product of the roots satisfy a certain condition. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(roots: List[float], coeffs=[-33.7903719275386, -5.03161654339928]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [-33.7903719275386, -5.03161654339928]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of roots and a list of coefficients, and a function g that takes a list of coefficients, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the roots of a quadratic equation given its coefficients. The function f checks if the sum and product of the roots satisfy a certain condition based on the coefficients. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]) -> bool:\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06\ndef g(coeffs = [9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of roots and coefficients, determine if the roots satisfy a specific condition, and then verify the condition using a solution function."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the roots of a quadratic equation given its coefficients. The function f checks if the sum and product of the roots satisfy a certain condition based on the coefficients. The functions do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, s=679) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 679):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by manipulating the input and returning the result. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, s=40427) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 40427):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that checks if the sum of the digits of x is equal to a given number s, and a function g(s) that returns a string representation of a number based on a specific pattern, the puzzle requires determining if the output of g(s) satisfies the condition of f(x)."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by manipulating the input value to produce the expected output. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, s=8071) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 8071):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that checks if the sum of the digits of x is equal to a given number s, and a function g(s) that returns a string representation of a number based on a given sum s, the puzzle requires understanding and using these functions to satisfy a given assertion."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by manipulating the input value to produce the expected output. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, s=86120) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 86120):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that checks if the sum of the digits of x is equal to a given number s, and a function g(s) that returns a string representation of a number based on a specific formula, the puzzle requires determining if the output of g(s) satisfies the condition of f(x)."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by manipulating the input value to produce the desired output. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, s=26785) -> bool:\n    return s == sum([int(d) for d in x])\ndef g(s = 26785):\n    return int(s / 9) * '9' + str(s % 9)\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and a default value, and a function g that takes a default value, the puzzle checks if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The function g also performs a mathematical operation to generate the string. Therefore, the puzzle violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(z: float, v=9, d=0.0001) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 9, d = 0.0001):\n    return v * d\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g()) and explain the logic behind it."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the product of v and d, and the function f checks if the integer part of z * 1 / d modulo 10 is equal to v. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(z: float, v=1, d=1e-17) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 1, d = 1e-17):\n    return v * d\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g())"
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the product of v and d, and the function f checks if the integer part of z * 1 / d is equal to v. The functions do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(z: float, v=9, d=1e+83) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 9, d = 1e+83):\n    return v * d\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g()) and explain the logic behind it."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the product of v and d, and the function f uses the result of g to perform a mathematical operation and compare it with v. There is no use of f inside g, and g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(z: float, v=5, d=1e-18) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 5, d = 1e-18):\n    return v * d\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f that takes a float z and two optional parameters v and d, and a function g that takes two optional parameters v and d, the puzzle requires understanding the behavior of f and g to determine the assertion result."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of v times d, and the function f checks if the integer part of z * 1 / d modulo 10 is equal to v. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(z: float, v=5, d=1e+90) -> bool:\n    return int(z * 1 / d % 10) == v\ndef g(v = 5, d = 1e+90):\n    return v * d\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g())"
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the product of v and d, and the function f checks if the product of z and 1/d has a specific digit at the tenths place. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], a=7, s=5, e=200) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 7, s = 5, e = 200):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of numbers from 'a' to 'e' with a step size of 's'. The function f checks if the input list satisfies certain conditions based on 'a', 's', and 'e'. The functions g and f are independent and do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], a=43536, s=3795, e=417606) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 43536, s = 3795, e = 417606):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a list of integers generated by g satisfies certain conditions, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of numbers from 'a' to 'e' with a step size of 's'. The function f checks if the input list satisfies certain conditions based on 'a', 's', and 'e'. The functions g and f are independent and do not violate the rule of using 'f' inside 'g'. The function g returns the solution to the problem by generating the list of numbers based on the input parameters."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], a=-70138, s=4868, e=498910) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = -70138, s = 4868, e = 498910):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that follows a specific pattern, and the function f checks if a given list of integers follows a specific pattern. The functions g and f are independent and do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], a=55980, s=7402, e=155818) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = 55980, s = 7402, e = 155818):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a list of integers is a valid sequence and g generates a list of integers based on given parameters, determine if the assertion holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of numbers from 'a' to 'e' with a step size of 's'. The function f checks if the input list satisfies certain conditions based on 'a', 's', and 'e'. The functions g and f are used together to create and validate a list of numbers based on the given parameters. There is no violation of the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], a=-44635, s=5046, e=503563) -> bool:\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])\ndef g(a = -44635, s = 5046, e = 503563):\n    return list(range(a, e + 1, s))\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, where f checks if a list of integers generated by g satisfies certain conditions, determine the validity of the assertion."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies the conditions of the function f. The function g uses the parameters a, s, and e to generate the list of integers, and the function f checks if the generated list satisfies the given conditions."
    },
    {
        "fitness": null,
        "program_str": "def f(e: List[int], a=2, b=-1, c=1, d=2021) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 2, b = -1, c = 1, d = 2021):\n    return [d - b, a - c]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a list of values that are used as arguments for function f. The function g does not directly return the solution to the problem, but rather provides arguments to function f. This violates the rule that the function g must return the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(e: List[int], a=-77698407, b=-31793716, c=-10799659, d=89278024) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = -77698407, b = -31793716, c = -10799659, d = 89278024):\n    return [d - b, a - c]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of values that are used as arguments for the function f. The function g does not directly call the function f, but it provides the arguments for f. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(e: List[int], a=89600582, b=-47657198, c=95101265, d=-52126265) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = 89600582, b = -47657198, c = 95101265, d = -52126265):\n    return [d - b, a - c]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of values that are used as arguments for the function f. The function g does not use the function f inside it. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(e: List[int], a=-11422303, b=-57150416, c=-59162339, d=-37428439) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = -11422303, b = -57150416, c = -59162339, d = -37428439):\n    return [d - b, a - c]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by calculating [d - b, a - c]. It does not just give arguments to f. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(e: List[int], a=-18517001, b=-13662763, c=-11156613, d=9271005) -> bool:\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)\ndef g(a = -18517001, b = -13662763, c = -11156613, d = 9271005):\n    return [d - b, a - c]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of values that are used as arguments for function f. The function g does not directly call function f, but it provides the arguments for function f. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=253532, b=1230200) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 253532, b = 1230200):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of its arguments, and the function f checks if the result of g is equal to True. The functions f and g do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=22, b=-84904666) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 22, b = -84904666):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the result of the addition or subtraction of its arguments, which are the default values of a and b. The function f uses the result of g as an argument, violating the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=10, b=74723522) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 10, b = 74723522):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of b + a if a is greater than 50 or b is greater than a, otherwise it returns the value of b - a. The function f checks if x is greater than 0 or if a is greater than 50, and returns True if x - a is equal to b in those cases, otherwise it returns True if x + a is equal to b. The assert statement checks if f(g()) is equal to True."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=66, b=-39109407) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 66, b = -39109407):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of the mathematical operation between the arguments a and b. It does not use the function f inside it. The function f uses conditional logic to return a boolean value based on the input arguments."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=24, b=18773099) -> bool:\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b\ndef g(a = 24, b = 18773099):\n    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of b + a if a is greater than 50 or b is greater than a, otherwise it returns the value of b - a. The function f checks if x is greater than 0 or if a is greater than 50, and returns True if x - a is equal to b, otherwise it returns True if x + a is equal to b. The assert statement checks if f(g()) is equal to True."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=4, b=54368639) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = 4, b = 54368639):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) and g(a, b), determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of x based on the values of a and b. The function f uses the value returned by g to perform some calculations and return a boolean value. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-4, b=-83354930) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -4, b = -83354930):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of x based on the values of a and b. The function f uses the value of x returned by g to perform some conditional checks and return a boolean value. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-3, b=71965664) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 71965664):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f(x) and g(a, b), determine if f(g()) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=2, b=36068130) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = 2, b = 36068130):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True based on the provided code."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of x based on the input parameters a and b. The function f uses the value returned by g to perform some calculations and return a boolean value. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-3, b=14385903) -> bool:\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b\ndef g(a = -3, b = 14385903):\n    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f(x) and g(a, b), determine if f(g()) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by calculating the value of x based on the values of a and b. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], n=5, s=19) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 5, s = 19):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers x, with a specified length n and sum s, determine if x meets the conditions and provide a function to generate such a list."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies the conditions of the function f. The function g does not use the function f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], n=6241, s=54594969) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 6241, s = 54594969):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies the conditions of function f. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], n=8427, s=33081884) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 8427, s = 33081884):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers x, with length n and sum s, determine if x satisfies the conditions: length of x is n, sum of x is s, and all elements of x are greater than 0. Then, provide a function g that generates a list x with length n and sum s that satisfies the conditions."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies the conditions of function f. The function g does not use function f inside it. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], n=3363, s=67595319) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 3363, s = 67595319):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of integers and returns a boolean, and a function g that takes two integers n and s and returns a list of n integers, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies the conditions of function f. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], n=9909, s=88140438) -> bool:\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])\ndef g(n = 9909, s = 88140438):\n    x = [1] * n\n    x[0] = s - n + 1\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers x, with length n and sum s, determine if x meets the conditions and provide a solution to generate such a list."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies the conditions of function f. There is no use of function f inside function g. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], n=4, s=2021) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 4, s = 2021):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves finding a list of integers that satisfies certain conditions, and then checking if the list meets the conditions."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies certain conditions, and the function f checks if the input list satisfies certain conditions. The functions g and f are used together to solve the problem, and there is no use of function f inside function g. The function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], n=124, s=2603089) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 124, s = 2603089):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a list of integers satisfies certain conditions, and g generates a list of integers that satisfies the conditions for function f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies certain conditions and is used to check the function f. The function f checks if the input list satisfies certain conditions based on the input parameters n and s."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], n=823, s=8609609) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 823, s = 8609609):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers, find the missing number to satisfy the given conditions."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies certain conditions, and the function f checks if the input list satisfies certain conditions. The functions g and f are used together to solve the problem, and there is no use of function f inside function g. The function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], n=796, s=86694751) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 796, s = 86694751):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a list of integers satisfies certain conditions, and g generates a list of integers that satisfies the conditions for f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies certain conditions and is used to check the condition in function f. The functions f and g do not violate the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], n=225, s=38417364) -> bool:\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)\ndef g(n = 225, s = 38417364):\n    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a list of integers satisfies certain conditions, and g generates a list of integers that satisfies the conditions for f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies certain conditions and is used to check the function f. The function f checks if the input list satisfies certain conditions based on the input parameters n and s."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, s=['a', 'b', 'c', 'd', 'e', 'f'], n=4) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['a', 'b', 'c', 'd', 'e', 'f'], n = 4):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by joining the first n elements of the list s. The function f checks if the input x has length n and if all its characters match the first n elements of the list s."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, s=['I', '&', 'W', '&', 'p', 'c', '-', 'U', '(', ' ', 'A', '(', 'S', 'W', 'R', '#', 'm', 'v', '@', '8', '%', 'a', '.', 'K', 'O', '[', '[', '#', 'q', 'k', 'K'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['I', '&', 'W', '&', 'p', 'c', '-', 'U', '(', ' ', 'A', '(', 'S', 'W', 'R', '#', 'm', 'v', '@', '8', '%', 'a', '.', 'K', 'O', '[', '[', '#', 'q', 'k', 'K'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by joining the elements of the list 's' and returning the resulting string. The function f checks if the input string 'x' has the same length as the list 's' and if each character of 'x' matches the corresponding character in 's'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, s=['L', 'C', 'b', 'r', 't', 'V', 'R', '%', 'R', '8', 'V', '#', '<', '!', 'U', 'y', 'x'], n=13) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['L', 'C', 'b', 'r', 't', 'V', 'R', '%', 'R', '8', 'V', '#', '<', '!', 'U', 'y', 'x'], n = 13):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by joining the elements of the list 's' and returning the resulting string. The function f checks if the input string 'x' has the same length as the list 's' and if each character of 'x' is equal to the corresponding character in 's'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, s=['-', '&', ')', '&', 'c', 'l', '/', 'H', '1', 'j', 'z', 'o', 'E', '|', '8', '&', '0', '&', 'y', '!', 'r', 'H', 'S', 'P', '5'], n=8) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['-', '&', ')', '&', 'c', 'l', '/', 'H', '1', 'j', 'z', 'o', 'E', '|', '8', '&', '0', '&', 'y', '!', 'r', 'H', 'S', 'P', '5'], n = 8):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "The puzzle involves defining two functions f and g, where f checks if the input string matches a predefined list and g constructs a string from a predefined list. The assert statement checks if f(g()) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by joining the elements of the list 's' and returning the resulting string. The function f checks if the input string 'x' is of length 'n' and if all its characters match the corresponding characters in the list 's'. The puzzle is valid as it respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16) -> bool:\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])\ndef g(s = ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n = 16):\n    return ''.join([s[i] for i in range(n)])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by joining the elements of the list 's'. The function f checks if the input string x is of length 16 and if all its characters match the corresponding characters in the list 's'. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], t=677, a=43, e=125, s=10) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 677, a = 43, e = 125, s = 10):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, the puzzle involves understanding the logic of f and g, and determining if the assertion at the end is true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that is used as an argument for function f. The function g also modifies the list x based on the value of correction. The function f checks if the sum of elements in x within the range [a, e, s] is equal to t, if the number of unique non-zero elements in x is equal to the total number of non-zero elements, and if all elements in x within the range [a, e, s] are non-zero. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], t=44475424, a=93, e=8496, s=6) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 44475424, a = 93, e = 8496, s = 6):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a list of integers satisfies certain conditions, and g generates a list of integers to satisfy those conditions. The puzzle involves understanding the conditions and generating the correct list of integers to pass the check in function f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that is used as an argument to function f. The function g also modifies the list x based on the value of correction. The function f checks if the sum of elements in x from index a to e with step s is equal to t, if the number of non-zero elements in x is equal to the number of unique non-zero elements, and if all elements in x from index a to e with step s are non-zero."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], t=2183536, a=36, e=8450, s=1) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 2183536, a = 36, e = 8450, s = 1):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and returns a boolean value based on certain conditions. The function g generates a list of integers and performs some operations on it to satisfy the conditions of function f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a solution to the problem by generating a list of integers and performing some corrections on it. The function f checks if the input list satisfies certain conditions and returns a boolean value based on the checks. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], t=1196610, a=15, e=4376, s=3) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 1196610, a = 15, e = 4376, s = 3):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and checks for certain conditions, and a function g that generates a list of integers and performs some operations on it. The puzzle also includes an assertion to test the correctness of the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g modifies the input list x, which is then used to check the condition in function f. This violates the rule that function g should return the solution to the problem and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], t=6165697, a=47, e=3830, s=2) -> bool:\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])\ndef g(t = 6165697, a = 47, e = 3830, s = 2):\n    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a list of integers satisfies certain conditions, and g generates a list of integers to satisfy those conditions. The puzzle involves understanding the conditions and implementing the g function to pass the f check."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that is used as input to the function f. The function f checks if the input list satisfies certain conditions and returns a boolean value. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], t=50, n=10) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 50, n = 10):\n    return [1] * n + [t]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of positive integers and two optional parameters t and n, the function f checks if the sum of the first n elements of the sorted list is greater than t. The function g generates a list of n 1s followed by the value of t. The puzzle is to understand the behavior of functions f and g and determine the output of f(g())."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of 1s with length n, followed by the value of t. This list is then passed as an argument to function f. Function f checks if the sum of the first n elements of the list is greater than t. If it is, it returns True; otherwise, it returns False. The function g is used to generate the input for function f, and it follows the rules specified in the puzzle."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], t=364928431, n=1088) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 364928431, n = 1088):\n    return [1] * n + [t]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of positive integers and two optional parameters t and n, the function f checks if the sum of the first n elements of the sorted list is greater than t. The function g generates a list of n ones followed by the value of t. The assertion at the end checks if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of 1s with length n, followed by the value of t. The function f takes this list as input and checks if the sum of the elements in the list exceeds the value of t at any point. If it does, it returns True if the index of the element that caused the sum to exceed t is equal to n, otherwise it returns False."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], t=7978940451, n=5932) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 7978940451, n = 5932):\n    return [1] * n + [t]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of positive integers and two parameters t and n, the function f checks if the sum of the first n elements of the sorted list is greater than t. The function g generates a list of n 1s followed by the value of t."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of 5933 elements, with 5932 elements being 1 and the last element being the value of t. This list is then passed to function f, which checks if the sum of the elements in the list exceeds the value of t. If it does, it returns True if the index of the element at which the sum exceeds t is equal to the value of n, otherwise it returns False. If the sum does not exceed t, it returns True if the length of the list is equal to n, otherwise it returns False. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], t=4545622399, n=1009) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 4545622399, n = 1009):\n    return [1] * n + [t]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of positive integers and two parameters t and n, the function f checks if the sum of the first n elements of the sorted list is greater than t. The function g generates a list of n 1s followed by the value of t."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of 1s with length n, followed by the value of t. The function f takes this list as input and checks if the sum of the elements in the list exceeds the value of t. If it does, it returns True if the index i is equal to n, otherwise it returns False. The function f does not use the value of t or n directly, but it uses the length of the input list and the sorted values of the input list."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int], t=4917027557, n=4815) -> bool:\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n\ndef g(t = 4917027557, n = 4815):\n    return [1] * n + [t]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of positive integers and two parameters t and n, the function f checks if the sum of the first n elements of the sorted list is greater than t. The function g generates a list of n ones followed by the value of t."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of 4816 elements, with 4815 elements being 1 and the last element being the value of t. The function f takes this list as input, sorts it, and calculates the cumulative sum. It then checks if the cumulative sum exceeds the value of t at any point, and returns True if the index at which this happens is equal to the value of n, otherwise it returns False."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, s1='a', s2='b', count1=50, count2=30) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 'a', s2 = 'b', count1 = 50, count2 = 30):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and some default parameters, and a function g that also takes some default parameters, the task is to implement function g such that it satisfies the condition f(g()) == True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, s1='t', s2='qu', count1=86, count2=83) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 't', s2 = 'qu', count1 = 86, count2 = 83):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True. Function f checks if the input string contains a certain number of substrings, while function g constructs a string based on input parameters."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, s1='kuc', s2='qu', count1=63, count2=58) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 'kuc', s2 = 'qu', count1 = 63, count2 = 58):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if g satisfies the conditions of f."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The function g does not use the result of function f, and there is no use of function f inside function g. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, s1='te', s2='tex', count1=97, count2=53) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 'te', s2 = 'tex', count1 = 97, count2 = 53):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if the output of g satisfies the conditions of f."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a solution to the problem and does not use f inside it. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, s1='hot', s2='n', count1=48, count2=92) -> bool:\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])\ndef g(s1 = 'hot', s2 = 'n', count1 = 48, count2 = 92):\n    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if the output of g satisfies the conditions of f."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a solution to the problem and does not just give arguments to f. However, the use of s1 and s2 inside g is not ideal, as it could be considered as using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, substrings=['foo', 'bar', 'baz', 'oddball']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['foo', 'bar', 'baz', 'oddball']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of substrings, the function f checks if each substring appears in a specific position in a given string. The function g constructs a new string by taking characters from each substring at a specific position. The assert statement checks if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is constructed by taking characters from the substrings and joining them together. The function f checks if each substring is present in the input string s at specific positions. There is no use of f inside g, and the function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, substrings=['quifelota', 'chyhimyvemene', 'ge']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['quifelota', 'chyhimyvemene', 'ge']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and a list of substrings, and a function g that takes a list of substrings, the puzzle is to determine if the result of applying function g to the list of substrings satisfies the condition of function f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is constructed by taking the i-th character from each string in the list 'substrings', and if the index i is greater than the length of a string, it adds a space. The function f checks if each substring in the list 'substrings' is a substring of the input string s, where the substrings are checked at intervals determined by their length."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, substrings=['kitytextiritex', 'cumathoxaz', 'rebute', 'rocor']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['kitytextiritex', 'cumathoxaz', 'rebute', 'rocor']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of substrings, the function f checks if each substring appears in a specific position in a given string. The function g constructs a new string by taking the characters at specific positions from each substring."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by concatenating characters from the substrings. The function f checks if each substring is present in the input string s using a specific pattern. There is no use of function f inside function g. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, substrings=['te', 'wusyc']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['te', 'wusyc']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is constructed by taking characters from the substrings in a specific order. The function f checks if the characters of the substrings appear in the input string s in a specific pattern. The functions g and f are independent and do not violate the rule of using f inside g. The function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, substrings=['cute', 'rysucajaxuno']) -> bool:\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))\ndef g(substrings = ['cute', 'rysucajaxuno']):\n    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is constructed by taking characters from the substrings in a specific order. The function f checks if all the substrings are present in the input string s in a specific order. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, substrings=['foo', 'bar', 'baz']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['foo', 'bar', 'baz']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that checks if all substrings and their reverse are present in a string, and a function g that returns a concatenated string and its reverse, the puzzle is to determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses the substrings list to construct a new list by concatenating the original list with its reverse. Then, it returns the concatenated string. The function f uses the substrings list to check if each substring and its reverse are present in the input string s. The function g does not directly call function f, but it does use the substrings list in a way that affects the behavior of function f. Therefore, the puzzle does not respect the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, substrings=['kepijilufuwisejyzat', 'lechogyvonaxegitex']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['kepijilufuwisejyzat', 'lechogyvonaxegitex']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of substrings, check if each substring and its reverse exists in a given string. Then, return a concatenated string of the original substrings and their reverses."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the concatenation of the input substrings and their reverse. The function f checks if all the substrings and their reverse are present in the input string s."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, substrings=['ripihuquyrenytu', 'quosafyji', 'chyguzocuzuqu', 'futhixequyb']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['ripihuquyrenytu', 'quosafyji', 'chyguzocuzuqu', 'futhixequyb']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that checks if all substrings and their reverse are present in a given string, and a function g that constructs a string from a list of substrings and their reverse, the puzzle is to determine if function f returns True when applied to the result of function g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the concatenation of the input list of substrings and their reverse. The function f checks if each substring and its reverse are present in the input string s. The functions g and f do not violate the rules provided."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, substrings=['thacovatukoliva', 'maquyfezisothizyp', 'ka', 'benegiquememif']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['thacovatukoliva', 'maquyfezisothizyp', 'ka', 'benegiquememif']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that checks if all substrings and their reverse are present in a given string, and a function g that constructs a new string by concatenating the original substrings and their reverse, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the concatenation of the input list 'substrings' and its reverse. It does not use the function f inside it. The function f checks if each substring and its reverse are present in the input string 's'. The puzzle is valid based on the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, substrings=['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']) -> bool:\n    return all((sub in s and sub[::-1] in s for sub in substrings))\ndef g(substrings = ['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    return \"\".join(substrings + [s[::-1] for s in substrings])\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of substrings, the function f checks if each substring and its reverse are present in a given string. The function g constructs a new string by concatenating the substrings and their reverses."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the concatenation of the input list 'substrings' and its reverse. Then, the function f checks if each substring and its reverse are present in the input string 's'."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[-2]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list of strings, find the second largest string in the list and check if it satisfies a certain condition."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the second largest string in the list 'strings'. The function f checks if a given string is in the list 'strings' and if there is exactly one string in 'strings' that is greater than the given string. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, strings=['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']):\n    return sorted(strings)[-2]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of strings, find the second largest string in the list that contains a given substring."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the second largest string in the list of strings. The function f checks if the input string is in the list of strings and if there is exactly one string in the list that is greater than the input string."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, strings=['mipelavychekecy', 'pythujutisoxofe', 'diliwagacivychinofiw', 'na', 'dobynaramithibolo', 'cugupyfytextofoxat', 'gyfokebo', 'bymitextitextizoc', 'rekimuk', 'bepumyxitubachek']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['mipelavychekecy', 'pythujutisoxofe', 'diliwagacivychinofiw', 'na', 'dobynaramithibolo', 'cugupyfytextofoxat', 'gyfokebo', 'bymitextitextizoc', 'rekimuk', 'bepumyxitubachek']):\n    return sorted(strings)[-2]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list of strings, find the second largest string in the list and check if it satisfies a certain condition."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the second largest string in the list 'strings'. The function f checks if the input string 's' is in the list 'strings' and if there is exactly one string in 'strings' that is greater than 's'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, strings=['hunuvarufefikaq', 'xejegu', 'minoc', 'puthyvyc', 'xyzeryberi', 'tyl', 'thyvojyvijazetonowa', 'jahygywuchitho', 'quuvuvigy', 'zuhechywituthexe']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['hunuvarufefikaq', 'xejegu', 'minoc', 'puthyvyc', 'xyzeryberi', 'tyl', 'thyvojyvijazetonowa', 'jahygywuchitho', 'quuvuvigy', 'zuhechywituthexe']):\n    return sorted(strings)[-2]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list of strings, find the second largest string in the list and check if it satisfies a certain condition."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the second largest string in the list 'strings'. The function f checks if a given string 's' is in the list 'strings' and if there is exactly one string in 'strings' that is greater than 's'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, strings=['wesolotelunyzecemexi', 'pociquuwygocysahef', 'lequusigipitexti', 'quojuxaq', 'fyt', 'm', 'bavalepynoza', 'zihath', 'lodomijibuxoju', 'xasuwytextochypuli']) -> bool:\n    return s in strings and sum((t > s for t in strings)) == 1\ndef g(strings = ['wesolotelunyzecemexi', 'pociquuwygocysahef', 'lequusigipitexti', 'quojuxaq', 'fyt', 'm', 'bavalepynoza', 'zihath', 'lodomijibuxoju', 'xasuwytextochypuli']):\n    return sorted(strings)[-2]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list of strings, find the second largest string in the list."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the second largest string in the list of strings. The function f checks if the input string is in the list of strings and if it is the second largest string in the list."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['cat', 'dog', 'bird', 'fly', 'moose']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of strings, find the second lexicographically smallest string and return its reverse. Then, check if the reverse of this string is present in the list of strings."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the second smallest string in the list 'strings', reversed. Then, it checks if the reversed string is in the list 'strings' and if there is only one string in the list that is lexicographically smaller than the reversed string. The function f checks if the reversed string is in the list 'strings' and if there is only one string in the list that is lexicographically smaller than the reversed string. The function g returns the solution to the problem and does not just give arguments to f. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, strings=['rawithelen', 'que', 'pikuf', 'koze', 'zehyquorofyxytextef', 'text', 'jezebox', 'zychopucebychokyz', 'pyzyxatevafugedix', 'buzogehabojyb']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['rawithelen', 'que', 'pikuf', 'koze', 'zehyquorofyxytextef', 'text', 'jezebox', 'zychopucebychokyz', 'pyzyxatevafugedix', 'buzogehabojyb']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list of strings, find the second smallest string in reverse order, and check if it is present in the list in its original form."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the second smallest string in the sorted list of strings, reversed. The function f checks if the reversed input string is in the list of strings and if it is the second smallest string in the list."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list of strings, find the second smallest string when reversed, and check if it is present in the list."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the second smallest string in the sorted list of strings, and then reverses it. The function f checks if the reversed input string is in the list of strings and if it is the second smallest string in the list. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, strings=['habicynanikadifovac', 'bozehathyfoz', 'hud', 'textudunachuxarise', 'hewohahatazabab', 'lutumelimevabutha', 'wocher', 'wacifufixudizon', 'tazibedo', 'xytu']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['habicynanikadifovac', 'bozehathyfoz', 'hud', 'textudunachuxarise', 'hewohahatazabab', 'lutumelimevabutha', 'wocher', 'wacifufixudizon', 'tazibedo', 'xytu']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of strings, find the second smallest string in reverse order and check if it is present in the list. Then, check if there is exactly one string smaller than the input string in reverse order."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the second smallest string in the list 'strings', reversed. The function f checks if the reversed input string is in the list 'strings' and if it is the second smallest string in the list. The functions do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, strings=['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset']) -> bool:\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1\ndef g(strings = ['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset']):\n    return sorted(strings)[1][::-1]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of strings, find the second smallest string in the list when reversed, and check if it is present in the list. Then, count the number of strings in the list that are smaller than the reversed string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the second smallest string in the list 'strings', reversed. The function f checks if the reversed input string is in the list 'strings' and if it is the second smallest string in the list. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, target='foobarbazwow', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'foobarbazwow', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a target string and a length, the function g returns a substring of the target string. The function f checks if a given string is equal to the substring returned by function g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the target string, and the function f checks if a given string is equal to a substring of the target string. The functions g and f are used together to check if a substring of the target string is equal to a given string."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, target='rujus', length=1) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'rujus', length = 1):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a target string and a length, the function f checks if the middle substring of the target string matches a given string."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the target string, and the function f checks if the input string is equal to the substring of the target string. The functions g and f are not directly related, and there is no use of function g inside function f. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, target='bulu', length=4) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'bulu', length = 4):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a target string and a length, the function f checks if a substring of the target string matches a given string. The function g returns a substring of the target string based on the length provided."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the target string 'bulu' based on the length parameter. The function f checks if the input string s is equal to the substring of 'bulu' returned by g. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, target='defojuhujuwilumec', length=7) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'defojuhujuwilumec', length = 7):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a target string and a length, the function f checks if a substring of the target string matches a given string. The function g returns a substring of the target string based on the length provided."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the target string, and the function f checks if the input string is equal to the substring of the target string. The functions do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, target='tenuhije', length=6) -> bool:\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s\ndef g(target = 'tenuhije', length = 6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2]\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a target string and a length, the function g returns a substring of the target string based on the length. The function f checks if a given string matches the substring returned by function g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the 'target' string based on the 'length' parameter. The function f checks if the input string 's' is equal to the substring of 'target' obtained from function g. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(substring: str, string='moooboooofasd', count=2) -> bool:\n    return string.count(substring) == count\ndef g(string = 'moooboooofasd', count = 2):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string and a count, find a substring that appears exactly count times in the string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring that satisfies the condition count, and then the function f checks if the substring satisfies the condition count. The functions f and g are used together to solve the problem, and there is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(substring: str, string='nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme', count=4) -> bool:\n    return string.count(substring) == count\ndef g(string = 'nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme', count = 4):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a substring and a string, find if the count of the substring in the string is equal to a given count."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a brute force search to find a substring of the given string that occurs a specified number of times. It then returns this substring. The function f checks if a given substring occurs a specified number of times in the given string and returns a boolean value based on the result. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(substring: str, string='cokomoquiwythyluwamymothynihythenyfeteth', count=4) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cokomoquiwythyluwamymothynihythenyfeteth', count = 4):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string and a count, find a substring that appears exactly the given count of times in the string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a brute force search to find a substring of the given string that has a count equal to the specified count. It then returns this substring. The function f checks if the count of the specified substring in the given string is equal to the specified count."
    },
    {
        "fitness": null,
        "program_str": "def f(substring: str, string='cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string and a count, find a substring that appears exactly count times in the string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring that satisfies the condition count, and the function f checks if the substring satisfies the condition count. The functions f and g do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(substring: str, string='modacequytextytextilaleguthovamipehywaciripetext', count=3) -> bool:\n    return string.count(substring) == count\ndef g(string = 'modacequytextytextilaleguthovamipehywaciripetext', count = 3):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a substring and a string, find if the count of the substring in the string is equal to a given count."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring that satisfies the condition count, and then the function f checks if the substring satisfies the condition count. The functions f and g are used together to solve the problem, and there is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='))(Add)some))parens()to()(balance(()(()(me!)((((') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))(Add)some))parens()to()(balance(()(()(me!)(((('):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string with unbalanced parentheses, add parentheses to balance the string and check if a given substring is present in the balanced string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The function f checks if the input string has balanced parentheses and contains a specific substring. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='(po)(())kf((((cy()))((tex()())(') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '(po)(())kf((((cy()))((tex()())('):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Determine if a given string is balanced and contains a specific substring"
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a modified version of the input string s, and the function f checks if a given string s is present in the modified version of the input string t. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='yf)()(()))hik()t(((') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = 'yf)()(()))hik()t((('):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if a given string is balanced and contains a specific substring."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a modified version of the input string s, and the function f checks if a given string s is present in the modified version of the input string. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s=')((le(()()chu)())nol))((sic(((da)()ty((()te))xy(())))))k') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = ')((le(()()chu)())nol))((sic(((da)()ty((()te))xy(())))))k'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if a string is balanced with parentheses and add parentheses to balance the string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a modified version of the input string s, and the function f checks if a certain condition is met based on the output of g. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(t: str, s='))())l') -> bool:\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        assert depth >= 0\n    return depth == 0 and s in t\ndef g(s = '))())l'):\n    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Determine if a given string is balanced and contains a specific substring"
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument in function f. The function f uses the output of function g to check if a condition is True. Therefore, the puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(squares: List[List[int]], m=8, n=8) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 8, n = 8):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "The puzzle involves checking if a given configuration of squares on a chessboard is valid or not, and finding a valid configuration if it exists."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses brute force to find a solution to the problem. It generates permutations of range(k) and checks if a certain condition is met. This violates the rule that the function g must return the solution to the problem and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(squares: List[List[int]], m=9, n=6) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 6):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves checking if a given configuration of squares forms a magic square of a given size."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses brute force to generate permutations of range(k) and checks if a condition is met for each permutation. It then returns a list of indices that satisfy the condition. The function f checks if the input squares form a valid configuration based on certain conditions. The function g is used inside f to generate the input squares. Therefore, the puzzle violates the rule of avoiding using `f` inside `g`."
    },
    {
        "fitness": null,
        "program_str": "def f(squares: List[List[int]], m=59, n=4) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 59, n = 4):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "The puzzle involves checking a condition on a given set of squares and returning a boolean value based on the condition. The solution uses brute force to find the squares that satisfy the condition."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses brute force to find a solution to the problem. It generates permutations and checks if a certain condition is met. This violates the rule that the function g must return the solution to the problem and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(squares: List[List[int]], m=38, n=8) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 38, n = 8):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "The puzzle involves checking if a given configuration of squares satisfies a specific condition, and finding a solution using brute force."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses brute force to find a solution to the problem. It generates permutations and checks if a condition is met. This violates the rule that the function g must return the solution to the problem and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(squares: List[List[int]], m=9, n=4) -> bool:\n    k = min(m, n)\n    assert all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})\ndef g(m = 9, n = 4):\n    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "The puzzle involves checking if a given configuration of squares satisfies a certain condition, and finding a solution using brute force."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses brute force to generate permutations and check if a condition is met. It then returns a list of indices that satisfy the condition. This violates the rule that g must return the solution to the problem, and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(tour: List[List[int]], m=8, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 8, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            8.5
        ],
        "description": [
            "Given a chessboard of size m x n, determine if a knight's tour is possible using Warnsdorff's heuristic."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            9
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses Warnsdorff's heuristic to solve the problem of finding a knight's tour on a chessboard. It then uses backtracking to find the solution. The function f checks if the given tour is a legal knight's tour and returns a boolean value."
    },
    {
        "fitness": null,
        "program_str": "def f(tour: List[List[int]], m=9, n=9) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 9, n = 9):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a chessboard of size m x n, determine if a knight's tour is possible, and if so, return the knight's tour using Warnsdorff's heuristic."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses Warnsdorff's heuristic to solve the knight's tour problem. It iterates through 100 random seeds and uses backtracking to find a valid knight's tour. The function g returns the solution to the knight's tour problem."
    },
    {
        "fitness": null,
        "program_str": "def f(tour: List[List[int]], m=7, n=7) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 7):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a chessboard of size m x n, determine if a knight's tour is possible using Warnsdorff's heuristic."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses Warnsdorff's heuristic to solve the knight's tour problem. It iterates through 100 random seeds, generates a list of legal moves, and selects the next move based on the number of possible moves from that position. The function g returns the solution to the knight's tour problem."
    },
    {
        "fitness": null,
        "program_str": "def f(tour: List[List[int]], m=6, n=6) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 6, n = 6):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a chessboard of size m x n, determine if a knight's tour is possible using Warnsdorff's heuristic."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses Warnsdorff's heuristic to solve the problem of finding a closed knight's tour on a chessboard. It breaks ties randomly and returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(tour: List[List[int]], m=7, n=8) -> bool:\n    assert all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]\ndef g(m = 7, n = 8):\n    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a chessboard of size m x n, determine if a knight's tour is possible using Warnsdorff's heuristic."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses Warnsdorff's heuristic to solve the problem of finding a closed knight's tour on a chessboard. It breaks ties randomly and returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(position: List[List[int]], target=[[1, 3], [1, 4], [2, 5]]) -> bool:\n    live = {x + y * 1j for (x, y) in position}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum((z + d in live for d in deltas)) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for (x, y) in target}\ndef g(target = [[1, 3], [1, 4], [2, 5]]):\n    # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that checks if a given position can reach a target position using specific rules, and a function g that uses fixed-temperature Monte Carlo optimization to find a solution to the problem."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses the target as a set and performs a fixed-temperature Monte Carlo optimization to find the solution. It does not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(position: List[List[int]], target=[]) -> bool:\n    live = {x + y * 1j for (x, y) in position}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum((z + d in live for d in deltas)) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for (x, y) in target}\ndef g(target = []):\n    # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a complex algorithm for simulating the behavior of cells in a grid based on certain rules, and then optimizing the position of the cells using a Monte Carlo optimization technique."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a fixed-temperature Monte Carlo optimization algorithm to find the target position. It uses random number generation and distance calculation to update the position. The function f checks if the next step in the game of life simulation matches the target position."
    },
    {
        "fitness": null,
        "program_str": "def f(position: List[List[int]], target=[[3, 3]]) -> bool:\n    live = {x + y * 1j for (x, y) in position}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum((z + d in live for d in deltas)) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for (x, y) in target}\ndef g(target = [[3, 3]]):\n    # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a cellular automaton simulation using complex numbers to represent positions and implementing a fixed-temperature Monte Carlo optimization algorithm to find a target position."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a fixed-temperature Monte Carlo optimization algorithm to find the target position. It uses random number generation and distance calculation to update the position. The function f checks if the next step in the game of life simulation matches the target position. It uses set operations and conditional logic to determine the next step."
    },
    {
        "fitness": null,
        "program_str": "def f(position: List[List[int]], target=[[1, -4]]) -> bool:\n    live = {x + y * 1j for (x, y) in position}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum((z + d in live for d in deltas)) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for (x, y) in target}\ndef g(target = [[1, -4]]):\n    # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of positions and a target, and returns a boolean value. The function g uses fixed-temperature MC optimization to find a solution for the target position."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a fixed-temperature Monte Carlo optimization algorithm to find the target position. It iterates through a range of steps, updating the position based on the distance from the target and a random choice. The function f checks if the next step calculated by g is equal to the target position."
    },
    {
        "fitness": null,
        "program_str": "def f(moves: List[List[int]], initial_state=[5, 9, 3, 11, 18, 25, 1, 2, 4, 1]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [5, 9, 3, 11, 18, 25, 1, 2, 4, 1]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a game where two players take turns removing objects from heaps. The goal is to leave the opponent with no valid moves."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of moves that leads to a winning state in the game. The function f checks if the list of moves returned by g leads to a winning state. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(moves: List[List[int]], initial_state=[4, 1, 8, 0, 5, 9, 2, 0]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [4, 1, 8, 0, 5, 9, 2, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            8.5
        ],
        "description": [
            "Given a list of moves and an initial state, the function f simulates a game where the bot and the player take turns making moves. The goal is to reach a state where all heaps are empty. The function g generates a sequence of moves that leads to a winning state."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            9
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. However, the function f uses the variable 'state' without passing it as an argument to the function. This violates the rule of avoiding using 'f' inside 'g'."
    },
    {
        "fitness": null,
        "program_str": "def f(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [2, 5, 3, 7, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine the interestingness of a programming problem and its solution related to a game strategy."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of moves that leads to a winning state in the game. The function f checks if the list of moves returned by g leads to a winning state."
    },
    {
        "fitness": null,
        "program_str": "def f(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [3, 3, 2, 2, 3, 8]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a game where two players take turns making moves to reduce the number of objects in different heaps. The goal is to determine if the initial state is a winning state for the first player."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and not just a function that gives arguments to f. However, the function f uses the state variable without passing it as an argument to bot_move, which violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(moves: List[List[int]], initial_state=[5, 8, 3, 0]) -> bool:\n\n    def bot_move() -> bool:\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        assert 0 < n <= state[i], 'Illegal move'\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        assert any(state), 'You lost!'\n        bot_move()\ndef g(initial_state = [5, 8, 3, 0]):\n\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a game where a bot and a player take turns removing objects from heaps. The goal is to leave the last heap with 0 objects. The puzzle requires implementing a function to determine the winner of the game."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of moves that leads to a winning state in the game. The function f checks if the list of moves returned by g leads to a winning state. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(probs: List[float]) -> bool:\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-06\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06\ndef g():\n    return [1 / 3] * 3\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of probabilities, determine if the maximum difference between any two probabilities is less than 1e-06."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of probabilities, and the function f checks if the sum of the probabilities is close to 1 and if the maximum difference between any two probabilities is less than 1e-06. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of edges, determine if there exists a triangle in the graph formed by the edges."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a try-except block for error handling. It also uses defaultdict from the collections module for creating a graph representation. The function g returns a list of vertices that form a triangle in the given graph. The function f checks if a given triangle is present in the list of edges. The functions f and g are not directly dependent on each other, and there is no use of f inside g. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of edges, determine if there exists a triangle in the graph formed by the edges. Then, find the vertices of the triangle."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses the 'defaultdict' from the 'collections' module, and it also uses the 'intersection' method from the 'set' data type. The function f checks for the existence of edges in the given list, and also checks for the inequality of the elements in the triangle. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(tri: List[int], edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]) -> bool:\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)\ndef g(edges = [[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]):\n    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves checking for the existence of a triangle in a graph based on given edges, and then finding the vertices of the triangle."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses the function f inside it, violating the rule that f should not be used inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(path: List[int], weights=[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}], bound=11) -> bool:\n    return path[0] == 0 and path[-1] == 1 and (sum((weights[a][b] for (a, b) in zip(path, path[1:]))) <= bound)\ndef g(weights = [{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}], bound = 11):\n    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            8.5
        ],
        "description": [
            "Given a list of weights and a bound, determine if there exists a path from 0 to 1 such that the sum of weights along the path does not exceed the bound. Also, implement Dijkstra's algorithm to find the shortest path from 0 to 1."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            9
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses Dijkstra's algorithm to find the shortest path from node 0 to node 1. It ignores the 'bound' parameter and returns the shortest path as a list of nodes. The function f checks if the given path starts from node 0, ends at node 1, and the total weight of the path is less than or equal to the 'bound' parameter. The functions f and g are not using each other, and the problem respects the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(path: List[int], weights=[{3: 210, 0: 513, 1: 66, 5: 612}, {0: 794, 1: 111, 3: 598}, {4: 295, 0: 601}, {}, {3: 452, 0: 689, 5: 124, 1: 406}, {2: 289, 5: 660, 3: 498}], bound=66) -> bool:\n    return path[0] == 0 and path[-1] == 1 and (sum((weights[a][b] for (a, b) in zip(path, path[1:]))) <= bound)\ndef g(weights = [{3: 210, 0: 513, 1: 66, 5: 612}, {0: 794, 1: 111, 3: 598}, {4: 295, 0: 601}, {}, {3: 452, 0: 689, 5: 124, 1: 406}, {2: 289, 5: 660, 3: 498}], bound = 66):\n    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            8.5
        ],
        "description": [
            "Given a list of weights and a bound, determine if there exists a path from 0 to 1 such that the sum of weights along the path does not exceed the bound. Also, find the shortest path using Dijkstra's algorithm."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            9
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses Dijkstra's algorithm to find the shortest path from node 0 to node 1 in a weighted graph. The function f checks if the given path is valid and the total weight of the path is less than or equal to the given bound."
    },
    {
        "fitness": null,
        "program_str": "def f(path: List[int], weights=[{1: 239}, {0: 602, 2: 280}, {2: 293, 0: 816, 3: 925}, {}], bound=239) -> bool:\n    return path[0] == 0 and path[-1] == 1 and (sum((weights[a][b] for (a, b) in zip(path, path[1:]))) <= bound)\ndef g(weights = [{1: 239}, {0: 602, 2: 280}, {2: 293, 0: 816, 3: 925}, {}], bound = 239):\n    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves finding a path from node 0 to node 1 in a graph, where the sum of weights along the path does not exceed a given bound."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses Dijkstra's algorithm to find the shortest path from node 0 to node 1 in a weighted graph. The function f checks if a given path satisfies certain conditions based on the weights and the bound. The functions do not violate the rules provided."
    },
    {
        "fitness": null,
        "program_str": "def f(path: List[int], edges=[[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], u=0, v=33, bound=3) -> bool:\n    assert path[0] == u and path[-1] == v and all(([i, j] in edges for (i, j) in zip(path, path[1:])))\n    return len(path) <= bound\ndef g(edges = [[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], u = 0, v = 33, bound = 3):\n    # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            8.5
        ],
        "description": [
            "Given a graph represented by a list of edges, find a path from node u to node v using Dijkstra's algorithm, with a maximum length constraint."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            9
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses Dijkstra's algorithm to find the shortest path between nodes u and v in a graph defined by the edges. The function f checks if the given path satisfies certain conditions based on the edges, u, v, and a bound. The solution uses graph theory (finding shortest path) and conditional logic (assert statement). The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(path: List[int], edges=[[1, 1], [2, 0], [1, 0], [2, 2]], u=1, v=1, bound=1) -> bool:\n    assert path[0] == u and path[-1] == v and all(([i, j] in edges for (i, j) in zip(path, path[1:])))\n    return len(path) <= bound\ndef g(edges = [[1, 1], [2, 0], [1, 0], [2, 2]], u = 1, v = 1, bound = 1):\n    # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            8.5
        ],
        "description": [
            "Given a list of edges, start node, end node, and a bound, determine if there exists a path from start to end with a length less than or equal to the bound."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            9
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses Dijkstra's algorithm to find the shortest path between nodes u and v in a graph represented by the edges. The function f checks if the given path is valid and within the specified bound. The solution respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of edges, determine if a given path is valid and find a path from 0 to the maximum node."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The puzzle respects the rules. The function g returns the solution to the problem, and there is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(path: List[int], edges=[[0, 0]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[0, 0]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of edges, determine if there exists a path from 0 to the maximum node using the edges. Then find the path from 0 to the maximum node."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a path based on the edges provided, and the function f checks if the path is valid based on the edges. The functions do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(path: List[int], edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) -> bool:\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max((max(edge) for edge in edges))\n    return True\ndef g(edges = [[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of edges and a path, determine if the path is valid based on the edges. Then, find a path from 0 to the maximum node using the given edges."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by finding a path in a graph. The function f checks if the given path is valid based on the edges provided. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of edges and a path, determine if the path is valid based on the edges and if its length is even. Then, find a specific path based on the edges."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the even_paths dictionary, which is used to find the even-length paths in the graph. The function f checks if the given path is even in length. The solution respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(path: List[int], edges=[[3, 2], [2, 1], [0, 2], [1, 0], [2, 2], [2, 3], [2, 0]]) -> bool:\n    assert path[0] == 0 and path[-1] == max((max(e) for e in edges))\n    assert all([[a, b] in edges for (a, b) in zip(path, path[1:])])\n    return len(path) % 2 == 0\ndef g(edges = [[3, 2], [2, 1], [0, 2], [1, 0], [2, 2], [2, 3], [2, 0]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of edges and a path, determine if the path is valid based on the edges. Then, find a specific type of path based on the edges."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the even paths in the given graph. It uses a dictionary to store even and odd paths and iterates through the edges to update the paths. The function f checks if the given path is valid and returns True if the length of the path is even, otherwise False."
    },
    {
        "fitness": null,
        "program_str": "def f(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of edges and a path, determine if the path is a valid path from 0 to 1 using the given edges."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses graph theory to find a path from node 0 to node 1 in the given graph. It uses a dictionary to store even and odd paths and iterates through the edges to update the paths. The function f checks if the given list of integers forms a valid path in the graph based on the edges provided. It checks if the first and last elements of the list are 0 and 1 respectively, if the length of the list is odd, and if each consecutive pair of elements forms an edge in the graph."
    },
    {
        "fitness": null,
        "program_str": "def f(p: List[int], edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves checking for a specific path in a graph using a given set of edges and a function to determine if the path exists."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a graph traversal algorithm to find a path from node 0 to node 1 in the given graph. It does not violate the rules of using f inside g, and the function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(p: List[int], edges=[[4, 8], [7, 6], [2, 0], [3, 2], [6, 3], [4, 5], [11, 5], [11, 0], [1, 5], [12, 12], [12, 1], [4, 11], [3, 3], [2, 10], [10, 6], [0, 7], [2, 7], [6, 11], [2, 9], [7, 7], [8, 9], [2, 1], [4, 6], [9, 4]]) -> bool:\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])\ndef g(edges = [[4, 8], [7, 6], [2, 0], [3, 2], [6, 3], [4, 5], [11, 5], [11, 0], [1, 5], [12, 12], [12, 1], [4, 11], [3, 3], [2, 10], [10, 6], [0, 7], [2, 7], [6, 11], [2, 9], [7, 7], [8, 9], [2, 1], [4, 6], [9, 4]]):\n    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of edges, determine if there exists a path from 0 to 1 such that the length of the path is odd and all edges are present in the given list of edges."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a graph traversal algorithm to find a path from node 0 to node 1 in the given graph. The function f checks if the given path satisfies certain conditions based on the input edges and the path p. The functions f and g are independent and do not violate the rule of using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(bi: List[int], g1=[[0, 1], [1, 2], [2, 3], [3, 4], [2, 5]], g2=[[0, 4], [1, 5], [4, 1], [1, 2], [2, 3]]) -> bool:\n    return len(bi) == len(set(bi)) and {(i, j) for (i, j) in g1} == {(bi[i], bi[j]) for (i, j) in g2}\ndef g(g1 = [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5]], g2 = [[0, 4], [1, 5], [4, 1], [1, 2], [2, 3]]):\n    # exponentially slow\n    from itertools import permutations\n    n = max(i for g in [g1, g2] for e in g for i in e) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for pi in permutations(range(n)):\n        if all((pi[i], pi[j]) in g1_set for i, j in g2):\n            return list(pi)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\"\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers and two graphs, determine if the list forms a valid graph isomorphism between the two graphs."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses the itertools module to generate permutations and check if the graphs g1 and g2 are isomorphic. It then returns the permutation that satisfies the condition. The function f checks if the input list bi contains unique elements and if the set of edges in g1 is equal to the set of edges in g2 when applied to the elements of bi."
    },
    {
        "fitness": null,
        "program_str": "def f(bi: List[int], g1=[[1, 0], [1, 1], [1, 2], [2, 1]], g2=[[0, 2], [2, 2], [2, 0], [2, 1]]) -> bool:\n    return len(bi) == len(set(bi)) and {(i, j) for (i, j) in g1} == {(bi[i], bi[j]) for (i, j) in g2}\ndef g(g1 = [[1, 0], [1, 1], [1, 2], [2, 1]], g2 = [[0, 2], [2, 2], [2, 0], [2, 1]]):\n    # exponentially slow\n    from itertools import permutations\n    n = max(i for g in [g1, g2] for e in g for i in e) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for pi in permutations(range(n)):\n        if all((pi[i], pi[j]) in g1_set for i, j in g2):\n            return list(pi)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\"\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers bi and two graphs g1 and g2, determine if the list bi satisfies the conditions of the graphs."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses permutations from itertools, which is a brute force search algorithm. It also uses graph theory to check for isomorphism between two graphs. The function f checks for the uniqueness of elements in a list and the equality of sets, which involves set operations."
    },
    {
        "fitness": null,
        "program_str": "def f(cut_position: int, ring='yRrsmOkLCHSDJywpVDEDsjgCwSUmtvHMefxxPFdmBIpM', lower=5) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'yRrsmOkLCHSDJywpVDEDsjgCwSUmtvHMefxxPFdmBIpM', lower = 5):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a ring with lowercase and uppercase letters, find the minimum number of cuts needed to split the ring into two parts such that the number of lowercase and uppercase letters is equal in each part."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(cut_position: int, ring='MvI', lower=0) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'MvI', lower = 0):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a ring with letters, find the best position to cut the ring such that the resulting segments have an equal number of open and close brackets."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the cut position that maximizes the number of matching characters in the ring after the cut. The function f checks if the number of matching characters in the ring after the cut is greater than or equal to the specified lower bound."
    },
    {
        "fitness": null,
        "program_str": "def f(cut_position: int, ring='s', lower=0) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 's', lower = 0):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a ring with lowercase and uppercase letters, find the best position to cut the ring such that the number of matching lowercase and uppercase letters is maximized."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(cut_position: int, ring='fyVYVBfGHVYsBrYVgsgHYvVD', lower=0) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'fyVYVBfGHVYsBrYVgsgHYvVD', lower = 0):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a ring with lowercase and uppercase letters, find the minimum cut position such that the number of open and close brackets are balanced after the cut."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the cut position that maximizes the number of matching characters in the ring after rotation. The function f checks if the number of matching characters in the ring after rotation is greater than or equal to the specified lower limit."
    },
    {
        "fitness": null,
        "program_str": "def f(cut_position: int, ring='ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower=1) -> bool:\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower\ndef g(ring = 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', lower = 1):\n    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a ring of lowercase and uppercase letters, find the minimum cut position such that the number of open and close brackets are balanced after the cut."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the ring where the cut should be made in order to maximize the number of balanced brackets. The function f checks if the result of g is correct by comparing it to the expected result."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], b=7, m=6) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 6):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            8.5
        ],
        "description": [
            "The puzzle involves a function f and a function g that work together to solve a complex mathematical problem involving prime numbers and sequences."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            9
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers, which is the solution to the problem. The function f checks if the solution returned by g is True."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], b=7, m=26) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 26):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that checks a set of numbers for a specific property, and a function g that generates a set of numbers to be checked by function f. The solution involves recursion and number manipulation."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers, which is the solution to the problem. The function f checks if the solution returned by g is valid based on certain conditions."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], b=6, m=73) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 6, m = 73):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that checks for certain conditions in a list of numbers, and a function g that generates a list of numbers based on certain conditions. The puzzle requires understanding of number theory and recursive algorithms."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], b=7, m=92) -> bool:\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j) -> bool:\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums))\n    return True\ndef g(b = 7, m = 92):\n    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers, the function f checks if certain conditions are met, while the function g generates a list of integers that satisfy those conditions."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers, which is the solution to the problem. The function f checks if the solution returned by g is True."
    },
    {
        "fitness": null,
        "program_str": "def f(indices: List[int], a0=123) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 123):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks a list of indices and g generates a sequence based on a0, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by generating a list of indices that satisfy the conditions specified in function f. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(indices: List[int], a0=2827347) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2827347):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(indices: List[int], a0=2362263) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 2362263):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by generating a list of indices that satisfy the conditions specified in function f. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(indices: List[int], a0=1703235) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 1703235):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f takes a list of indices and a0 as input and g takes a0 as input, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by generating a list of indices that satisfy the conditions specified in function f. There is no use of function f inside function g."
    },
    {
        "fitness": null,
        "program_str": "def f(indices: List[int], a0=962856) -> bool:\n    assert a0 >= 0 and a0 % 3 == 0, 'Hint: a_0 is a multiple of 3.'\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)\ndef g(a0 = 962856):\n    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and a function g, where f takes a list of indices and a0 as input and returns a boolean, and g takes a0 as input and returns a list of indices. The puzzle involves understanding the behavior of the functions and their interaction."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and it does not use f inside it. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], n=18) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 18):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers and a number n, the function f checks if the list has length n and satisfies a specific condition. The function g generates a list based on the value of n and asserts that the function f returns True for this list."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a list that is used as an argument to function f. The function g does not directly solve the problem, it just returns a list that satisfies the condition of function f. This violates the rule that function g must return the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], n=3) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 3):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers and a parameter n, the function f checks if the list satisfies a specific condition. The function g generates a list based on the parameter n and asserts the result of function f with the generated list."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers based on the value of n, and the function f checks if the input list satisfies a specific condition. There is no use of f inside g, and g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], n=6) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 6):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers and a number n, the function f checks if the length of the list is equal to n and if a certain condition is met. The function g generates a list based on the value of n and asserts that the function f returns True for this list."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a list that is used as an argument to function f. The function g does not directly return the solution to the problem, violating the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], n=9) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 9):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers and a number n, the function f checks if the list satisfies a specific condition, and the function g generates a list based on the input number n. The puzzle involves understanding the condition and generating a list that satisfies it."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies the condition of the function f. The function f checks if the input list has a specific length and satisfies a certain condition based on the elements of the list."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], n=12) -> bool:\n    assert n % 3 == 0, 'Hint: n is a multiple of 3'\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))\ndef g(n = 12):\n    return [-1, -1, 2] * (n // 3)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers and a number n, the function f checks if the length of the list is equal to n and if a certain condition is met. The function g returns a list based on the input number n and asserts that the function f returns True for this list."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list that is used as an argument to function f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes a list of integers and a vector, and returns a boolean value. The function g performs Gaussian elimination on the vector and returns a list of integers."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses bitwise shifting and AND operations, which are considered as binary operations. The function f uses bitwise shifting and AND operations as well. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of vectors, determine if there exists a subset of vectors whose bitwise XOR results in an odd number."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses bitwise shifting and AND operations, which are considered as binary operations. The function f uses bitwise shifting and AND operations as well. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], vecs=[5, 6, 9, 55, 6, 31, 6, 16, 24, 41, 48, 28, 52, 23, 27]) -> bool:\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))\ndef g(vecs = [5, 6, 9, 55, 6, 31, 6, 16, 24, 41, 48, 28, 52, 23, 27]):\n    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of vectors, determine if the sum of the bits at specified indices in each vector is odd. Then, perform Gaussian elimination on the vectors and return the result."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses bitwise shifting and AND operations to perform Gaussian elimination on the input vectors. It then uses backtracking to solve the system of linear equations. The function f uses bitwise shifting and AND operations to check if the sum of bits at specified indices in the input vectors is odd for all vectors."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], vecs=[26, 5, 32, 3, 15, 18, 31, 13, 24, 25, 34, 5, 15, 24, 16, 13, 0, 27, 37]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [26, 5, 32, 3, 15, 18, 31, 13, 24, 25, 34, 5, 15, 24, 16, 13, 0, 27, 37]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of vectors, determine if there exists a subset of indices such that the sum of each vector's value at those indices is odd for at least 75% of the vectors."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses brute force to generate a solution for the given problem. It iterates through a set of random attempts to find a solution that satisfies the condition. The condition is checked using bitwise operations and summing the results. The function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of vectors, determine if there exists a subset of bits in the vectors such that the majority of the vectors have a 1 in that position."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a brute force approach to solve the problem. It decodes the vectors into arrays, generates a random answer, and checks if the sum of the vectors satisfies a condition. The function f uses bitwise operations and a condition to check if the sum of the vectors satisfies a condition. Both functions respect the rules and are valid."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], vecs=[378, 819, 695, 649, 492, 277, 471, 241, 159, 733, 625, 355, 300, 241, 683, 445, 769, 167, 985, 346, 243, 546, 851, 476, 309]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [378, 819, 695, 649, 492, 277, 471, 241, 159, 733, 625, 355, 300, 241, 683, 445, 769, 167, 985, 346, 243, 546, 851, 476, 309]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of vectors, determine if there exists a subset of bits in the vectors such that the majority of the vectors have a 1 in that position."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a brute force approach to find a solution to the problem. It decodes the vectors into arrays, generates a random set of indices, and checks if the sum of the bitwise operations on the vectors with the selected indices is greater than or equal to a certain threshold. The function f checks if the sum of the bitwise operations on the vectors with the selected indices is greater than or equal to a certain threshold. The solution uses bitwise operations, random number generation, and conditional logic."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], vecs=[5, 7, 4, 5, 4, 3, 6, 5, 5, 0, 7]) -> bool:\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4\ndef g(vecs = [5, 7, 4, 5, 4, 3, 6, 5, 5, 0, 7]):\n    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of vectors, determine if there exists a subset of indices such that the sum of the selected bits in each vector is odd for at least 75% of the vectors."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses brute force to generate a solution, and it returns the solution to the problem. The function f uses bitwise operations and conditional logic to check a condition and return a boolean value. Both functions respect the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=15482, b=23223, lower_bound=5) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 15482, b = 23223, lower_bound = 5):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the greatest common divisor (GCD) of the numbers a and b using the Euclidean algorithm. The function f checks if the input n is a common factor of a and b, and if n is greater than or equal to the lower bound."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=9, b=9, lower_bound=6) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 9, b = 9, lower_bound = 6):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the greatest common divisor (GCD) of the numbers a and b. The function f checks if the GCD of a and b is a factor of n and if n is greater than or equal to the lower bound."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=232610, b=3131721474, lower_bound=15000) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 232610, b = 3131721474, lower_bound = 15000):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the greatest common divisor (GCD) of the numbers a and b using the Euclidean algorithm. The function f checks if a number n is a factor of both a and b, and if n is greater than or equal to a given lower bound."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 247586288427023352, b = 372021520735824432, lower_bound = 1709054537):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if a given number is a common divisor of two other numbers and greater than a specified lower bound."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the greatest common divisor (GCD) of the numbers a and b using the Euclidean algorithm. The function f checks if the input n is a factor of both a and b, and if n is greater than or equal to the lower bound."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=8797233, b=2370036150831, lower_bound=8364173) -> bool:\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)\ndef g(a = 8797233, b = 2370036150831, lower_bound = 8364173):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves checking if a given number n satisfies certain conditions and then finding the greatest common divisor of two numbers using a specific algorithm."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the greatest common divisor (GCD) of the numbers a and b using the Euclidean algorithm. The function f checks if the input n is a factor of both a and b, and if n is greater than or equal to the lower bound. The puzzle is valid as it follows the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, nums=[77410, 23223, 54187], lower_bound=2) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [77410, 23223, 54187], lower_bound = 2):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves checking if a given number is a common divisor of a list of numbers and comparing it to a lower bound. The solution involves finding the greatest common divisor (GCD) of the numbers in the list."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the maximum value in the list 'nums' using a loop and some arithmetic operations. It does not use the function f or rely on its output. The function f checks if all numbers in 'nums' are divisible by 'n' and if 'n' is greater than or equal to 'lower_bound'. The function g does not use the function f inside it. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, nums=[14, 551755893, 902110495], lower_bound=1) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [14, 551755893, 902110495], lower_bound = 1):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a given number n is a common multiple of a list of numbers, and g finds the greatest common divisor of a list of numbers."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the maximum value in the list 'nums' using a while loop and the Euclidean algorithm. The function f checks if the maximum value in 'nums' is divisible by 'n' and if 'n' is greater than or equal to 'lower_bound'. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound = 98647):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves checking if a given number is a common multiple of a list of numbers and greater than or equal to a specified lower bound. The solution involves finding the greatest common divisor (GCD) of a list of numbers."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, nums=[452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], lower_bound=977) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], lower_bound = 977):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that checks if a given number is divisible by a set of numbers, and a function g that finds the greatest common divisor of a set of numbers. The puzzle also includes an assertion to test the relationship between f and g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not use f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, nums=[8154539588421190, 128861795], lower_bound=64216730) -> bool:\n    return all((i % n == 0 for i in nums)) and n >= lower_bound\ndef g(nums = [8154539588421190, 128861795], lower_bound = 64216730):\n    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a given number n is a factor of all numbers in a list, and g finds the greatest common divisor of a list of numbers."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the greatest common divisor (GCD) of the numbers in the list 'nums'. The function f checks if the GCD of the numbers in 'nums' is divisible by 'n' and if 'n' is greater than or equal to 'lower_bound'. The puzzle is valid as it respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=15, b=27, upper_bound=150) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 15, b = 27, upper_bound = 150):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Find the interestingness of the given puzzle."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by calculating the least common multiple of a and b. The function f checks if a given number n is divisible by both a and b, and if n is within the specified upper bound. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=41234205765, b=597597185, upper_bound=73349253728) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 41234205765, b = 597597185, upper_bound = 73349253728):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not use f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=7601351956456, b=2974663988, upper_bound=389421039754872576) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 7601351956456, b = 2974663988, upper_bound = 389421039754872576):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if a given number n satisfies certain conditions based on the values of a, b, and an upper bound, and then find the greatest common divisor of a and b to satisfy the conditions."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not use f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=201717041833890, b=3585167190, upper_bound=731493653565433) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 201717041833890, b = 3585167190, upper_bound = 731493653565433):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not use f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=79680, b=661339968, upper_bound=410128528659) -> bool:\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)\ndef g(a = 79680, b = 661339968, upper_bound = 410128528659):\n    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a number n satisfies certain conditions and g calculates a value based on input parameters, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by finding the least common multiple of a and b. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, nums=[15, 27, 102], upper_bound=5000) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [15, 27, 102], upper_bound = 5000):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a number n satisfies certain conditions and g calculates a value based on a list of numbers, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. There is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound = 82396663973139497934429093888):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that checks if a given number n satisfies certain conditions, and a function g that calculates a result based on a list of numbers and an upper bound."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not use function f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, nums=[55040126016, 4373970014334], upper_bound=219074883886936) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [55040126016, 4373970014334], upper_bound = 219074883886936):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. There is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, nums=[9140, 4882496600, 119119770064, 107772494796, 102424668, 3656, 1188591500932, 116992, 14700627932, 997397016], upper_bound=238661269929569213628364588516267312050595558326272) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [9140, 4882496600, 119119770064, 107772494796, 102424668, 3656, 1188591500932, 116992, 14700627932, 997397016], upper_bound = 238661269929569213628364588516267312050595558326272):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if a given number n satisfies a set of conditions based on a list of numbers and an upper bound. The solution involves checking divisibility and finding the greatest common divisor."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not use f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, nums=[173261568, 4270662976], upper_bound=17025943527197098) -> bool:\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound\ndef g(nums = [173261568, 4270662976], upper_bound = 17025943527197098):\n    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if the function f is true for the result of function g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not use f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], n=12345) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 12345):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers, find if the sum of the squares of the integers is equal to a given number. If true, find the integers that make up the sum."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a set of squares and their sums to find a pair of numbers whose squares sum up to the given number. It then returns the pair of numbers. The function f checks if the length of the input list is less than or equal to 4 and if the sum of the squares of the numbers in the list is equal to the given number. The puzzle is valid as it follows the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], n=1) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 1):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers, determine if the sum of the squares of the integers is equal to a given number n. Then, find a pair of integers from the list whose sum of squares is equal to n."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a set of squares and their sums to find a pair of numbers whose squares sum up to the input value. It then returns the pair of numbers. The function f checks if the length of the input list is less than or equal to 4 and if the sum of the squares of the numbers in the list is equal to the input value. The puzzle is valid as it follows the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(nums: List[int], n=0) -> bool:\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n\ndef g(n = 0):\n    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\"\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers, determine if the sum of the squares of the integers is equal to a given number n. If so, find the two integers whose squares sum up to n."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses a set of squares and their sums to find a pair of numbers whose squares sum up to the input value. It does not use function f inside it, and it returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], k=5) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 5):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and the solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that are used as input to function f. Function f checks if the minimum of the list is greater than 1, the length of the list is equal to k, and a certain condition is satisfied for each element in the list."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], k=6) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 6):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine the interestingness of the puzzle and its solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfy a specific condition, and the function f checks if a given list of integers satisfies a certain condition. The functions f and g are used together to solve the problem, and there is no use of f inside g. The function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], k=7) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 7):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a list of integers meets certain conditions and g generates a list of integers, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfies a specific condition, and the function f checks if a given list of integers satisfies certain conditions. The functions do not violate the rules of using f inside g or returning a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], k=8) -> bool:\n\n    def prod(nums) -> bool:\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))\ndef g(k = 8):\n    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Determine if the given function f returns True for the output of function g."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers that satisfy a specific condition, and the function f checks if a given list of integers satisfies a certain condition. There is no use of function g inside function f, and the function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, t=197, upper=20) -> bool:\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper\ndef g(t = 197, upper = 20):\n    # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves a function f that takes an integer n and returns a boolean value based on a series of calculations. The function g takes two optional parameters and returns the minimum value of a set based on a series of calculations."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. The problem does not use f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int) -> bool:\n    return pow(2, n, n) == 3\ndef g():\n    return 4700063497\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Determine if a given number n satisfies the condition pow(2, n, n) == 3"
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            5
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a specific value (4700063497) and the function f checks if pow(2, n, n) is equal to 3. There is no use of f inside g, and g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, year_len=365) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 365):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves calculating the probability of having distinct random numbers within a given range and determining if the probability is greater than 0.5."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of n that satisfies a certain condition based on the probability calculation. The function f uses the result of g to check a condition and return a boolean value. There is no use of f inside g, and g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, year_len=60182) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 60182):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves calculating the probability of generating distinct random numbers and checking if the probability is greater than 0.5."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not use f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, year_len=2) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 2):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves calculating the probability of generating distinct random numbers and comparing it to a threshold value. The solution involves finding the minimum value of n for which the probability is greater than 0.5."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of n, which is then used as an argument for function f. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, year_len=3) -> bool:\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len\ndef g(year_len = 3):\n    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves calculating the probability of generating distinct random numbers and checking if the probability satisfies a given condition."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of n that satisfies a certain condition based on the probability calculation. The function f uses the result of g to check a condition and return a boolean value. There is no use of function f inside function g. The function g returns the solution to the problem, which is the value of n that satisfies the condition."
    },
    {
        "fitness": null,
        "program_str": "def f(counts: List[int], target_prob=0.5) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.5):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of counts and a target probability, determine if the probability of a certain event occurring is equal to the target probability."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and the puzzle does not use 'f' inside 'g'. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(counts: List[int], target_prob=0.1791044776119403) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.1791044776119403):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of counts and a target probability, and a function g that calculates the counts based on the target probability, the puzzle is to determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and not just a function that gives arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(counts: List[int], target_prob=0.03125) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.03125):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers, which is used as input for function f. Function f uses the input list to calculate probabilities and check if the absolute difference between the calculated probability and the target probability is less than 1e-06. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(counts: List[int], target_prob=0.5803571428571429) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.5803571428571429):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of counts and a target probability, determine if the probability can be achieved using the given counts."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem, and the puzzle does not use f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(counts: List[int], target_prob=0.7142857142857143) -> bool:\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06\ndef g(target_prob = 0.7142857142857143):\n    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves calculating probabilities and checking for convergence using a given target probability."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of integers, which is then used as input for function f. The functions f and g do not violate the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(st: str, a='world', b='Hello world') -> bool:\n    return st + a == b\ndef g(a = 'world', b = 'Hello world'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and two default arguments, and a function g that takes two default arguments, the puzzle is to determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the string 'Hello world' based on the length of the input 'a'. The function f checks if the input string concatenated with 'world' is equal to 'Hello world'. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(st: str, a='zine', b='cerofilimybazine') -> bool:\n    return st + a == b\ndef g(a = 'zine', b = 'cerofilimybazine'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string st and two default arguments a and b, and a function g that takes two default arguments a and b, the puzzle checks if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the substring of b that excludes the length of a from the end of b. The function f checks if the concatenation of st and a is equal to b."
    },
    {
        "fitness": null,
        "program_str": "def f(st: str, a='id', b='xakid') -> bool:\n    return st + a == b\ndef g(a = 'id', b = 'xakid'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g()) and assert its correctness."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the substring of 'xakid' that excludes the characters in 'id'. The function f checks if the concatenation of the result of g and 'id' is equal to 'xakid'. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(st: str, a='dyr', b='dyr') -> bool:\n    return st + a == b\ndef g(a = 'dyr', b = 'dyr'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if the assertion holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the substring of b that excludes the length of a. The function f checks if the concatenation of st and a is equal to b."
    },
    {
        "fitness": null,
        "program_str": "def f(st: str, a='s', b='tos') -> bool:\n    return st + a == b\ndef g(a = 's', b = 'tos'):\n    return b[:len(b) - len(a)]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the substring of 'tos' without the first character 's'. Then, the function f checks if the concatenation of the result of g with 's' is equal to 'tos'. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, n=1000) -> bool:\n    return len(s) == n\ndef g(n = 1000):\n    return 'a' * n\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and a number n, and returns True if the length of the string is equal to n, and a function g that takes a number n and returns a string consisting of 'a' repeated n times, assert that f(g()) is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string of length n, and the function f checks if the length of the input string is equal to n. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, n=39) -> bool:\n    return len(s) == n\ndef g(n = 39):\n    return 'a' * n\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and a number n, and returns True if the length of the string is equal to n, and a function g that takes a number n and returns a string consisting of 'a' repeated n times, assert that f(g()) is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the string 'a' repeated n times, and the function f checks if the length of the input string is equal to n. The function g is used to generate the input for function f, and there is no use of function f inside function g. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, n=790) -> bool:\n    return len(s) == n\ndef g(n = 790):\n    return 'a' * n\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and a number n, and a function g that takes a number n, the puzzle is to determine if the length of the string returned by g is equal to n when passed to f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the string 'a' repeated n times, and the function f checks if the length of the input string is equal to n. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, n=485) -> bool:\n    return len(s) == n\ndef g(n = 485):\n    return 'a' * n\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and a number n, and returns True if the length of the string is equal to n. And a function g that takes a number n and returns a string consisting of 'a' repeated n times. The assertion checks if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string of length n, and the function f checks if the length of the input string is equal to n. The puzzle is valid as it follows the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, n=4031) -> bool:\n    return len(s) == n\ndef g(n = 4031):\n    return 'a' * n\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f that takes a string and a number n, and a function g that takes a number n, the puzzle is to determine if calling f with the result of calling g returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string of length n, and the function f checks if the length of the input string is equal to n. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], s='hello world', target='do') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'hello world', target = 'do'):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of indices and two strings, and a function g that takes two strings, find the indices that can be used to slice the first string to get the second string, and assert that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses the itertools.product to generate all possible combinations of i, j, and k, and then checks if s[i:j:k] is equal to the target. This is a brute force search approach to find the indices i, j, and k that satisfy the condition. The function f then uses these indices to check if s[i:j:k] is equal to the target. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], s='ninykofiwimninykofiwim', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'ninykofiwimninykofiwim', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s and a target string, find a list of indices (i, j, k) such that s[i:j:k] is equal to the target string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses the function f to check if the solution is valid. This violates the rule that f should not be used inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], s='limerybinylimerybiny', target='n') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'limerybinylimerybiny', target = 'n'):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if they are equivalent."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses the function f inside it, violating the rule that f should not be used inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], s='fyzihurothevirechahfyzihurothevirechah', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'fyzihurothevirechahfyzihurothevirechah', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s and a target string, find the indices i, j, k such that s[i:j:k] equals the target string."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses the function f to check the solution, violating the rule that f should not be used inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], s='kibozekiboze', target='') -> bool:\n    (i, j, k) = inds\n    return s[i:j:k] == target\ndef g(s = 'kibozekiboze', target = ''):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s and a target string, find the indices i, j, k such that s[i:j:k] equals the target string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses the function f inside it, violating the rule that f should not be used inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, big_str='foobar', index=2) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'foobar', index = 2):\n    return big_str[index:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f that takes a string s and checks if the index of s in a big string is equal to a given index, and a function g that returns a substring of a big string, assert that f(g()) is True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a substring of the big_str, which is then used as an argument for function f. This violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, big_str='fukulagatextuj', index=10) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fukulagatextuj', index = 10):\n    return big_str[index:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f that takes a string and checks if the index of the string in a big string is equal to a given index, and a function g that returns a substring of a big string, assert that f(g()) is True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the big_str, and then the function f checks if the index of the substring in big_str is equal to the given index. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, big_str='nunalurejijunopyrewithocukopojot', index=12) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'nunalurejijunopyrewithocukopojot', index = 12):\n    return big_str[index:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a big string and an index, check if the substring starting from the index matches a given string."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the big_str, and then the function f checks if the given substring is at the specified index in the big_str. The functions f and g do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, big_str='fu', index=1) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fu', index = 1):\n    return big_str[index:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f that takes a string s and checks if the index of s in a big string is equal to a given index, and a function g that returns a substring of a big string based on a given index, the puzzle requires understanding the relationship between f and g and using them to assert a condition."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a substring of the big_str, which is then used as an argument to the function f. This violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, big_str='fatextemedyrotichipicecojon', index=24) -> bool:\n    return big_str.index(s) == index\ndef g(big_str = 'fatextemedyrotichipicecojon', index = 24):\n    return big_str[index:]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f that takes a string s and checks if the index of s in a big string is equal to a given index, and a function g that returns a substring of the big string starting from a given index, the puzzle requires understanding of string manipulation and function composition."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the big_str starting from the index. The function f checks if the index of the given string in the big_str is equal to the specified index."
    },
    {
        "fitness": null,
        "program_str": "def f(big_str: str, sub_str='foobar', index=2) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'foobar', index = 2):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that checks if a substring exists at a specific index in a given string, and a function g that generates a string based on a given substring and index, determine if the assertion holds true for the given functions."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. This violates the rule that function g must return the solution to the problem, and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(big_str: str, sub_str='quadox', index=75) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'quadox', index = 75):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that checks if a substring exists at a specific index in a given string, and a function g that generates a string based on a given substring and index, determine the correctness of the assertion f(g()) == True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. This violates the rule that function g must return the solution to the problem, and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(big_str: str, sub_str='votextymuvethic', index=880) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'votextymuvethic', index = 880):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a big string, a sub string, and an index, and a function g that takes a sub string and an index, determine if the result of f(g()) is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument in function f. This violates the rule that function g must return the solution to the problem and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(big_str: str, sub_str='pyrumymasekalihochyvibisamaquythifedetextityvath', index=0) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'pyrumymasekalihochyvibisamaquythifedetextityvath', index = 0):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a big string and a sub string, the function f checks if the sub string is present in the big string at the specified index. The function g generates a new string based on the sub string and index."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. This violates the rule that function g must return the solution to the problem, and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(big_str: str, sub_str='nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index=185) -> bool:\n    return big_str.index(sub_str) == index\ndef g(sub_str = 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', index = 185):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that checks if a substring exists at a specific index in a big string, and a function g that generates a string based on the input substring and index, determine if the assertion holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. This violates the rule that function g must return the solution to the problem, and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a='hello', b='yellow', length=4) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'hello', b = 'yellow', length = 4):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string s and two default strings a and b, and a default length, and returns a boolean, and a function g that takes two default strings a and b, and a default length, and returns a substring of a if it exists in b, assert that f(g()) is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of 'hello' that is also present in 'yellow' and has a length of 4. The function f checks if the substring meets the conditions specified in the function f definition. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a='vuzogaguzechicowejeguthemeralic', b='kybyjifidoquifwejeguthemelihitextodeju', length=11) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'vuzogaguzechicowejeguthemeralic', b = 'kybyjifidoquifwejeguthemelihitextodeju', length = 11):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string s and two default strings a and b, and a length parameter, and a function g that takes two default strings a and b, and a length parameter. The goal is to determine if the output of g is a valid input for f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of 'a' that is also present in 'b'. The function f checks if the input string 's' has a specific length and is present in both 'a' and 'b'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a='kehorithxyfurexatextoxivuquunusethawatextebu', b='pxyfurexatextoxivuquuwynicixo', length=20) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'kehorithxyfurexatextoxivuquunusethawatextebu', b = 'pxyfurexatextoxivuquuwynicixo', length = 20):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string s and two default strings a and b, and a length parameter, and returns True if s is of the specified length and is a substring of both a and b. And a function g that takes two default strings a and b, and a length parameter, and returns a substring of a that is also a substring of b."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of 'a' that is also present in 'b'. The function f checks if the input string 's' is of a specific length and is present in both 'a' and 'b'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a='bafywihequyjicivicharyquynikixuhinyqu', b='syrapetagecvicharyquynirorazecheth', length=12) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'bafywihequyjicivicharyquynikixuhinyqu', b = 'syrapetagecvicharyquynirorazecheth', length = 12):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string s and two default strings a and b, and a length parameter, and a function g that takes the same default strings and length parameter, the puzzle checks if the output of g is a valid input for f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of 'a' that is also present in 'b', and the function f checks if the input string 's' is of a specific length and is present in both 'a' and 'b'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a='diquatextaxubowafucevyhuquuthexitacavobychajexytextug', b='thachevolatvyhuquuthexitacavobyjokobuchudymal', length=20) -> bool:\n    return len(s) == length and s in a and (s in b)\ndef g(a = 'diquatextaxubowafucevyhuquuthexitacavobychajexytextug', b = 'thachevolatvyhuquuthexitacavobyjokobuchudymal', length = 20):\n    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string s and two default strings a and b, and a function g that takes two default strings a and b, and a default length, determine if the string returned by function g is present in both strings a and b, and if it has a length equal to the specified length."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of 'a' that is also present in 'b', and the function f checks if the input string 's' is of a specific length and is present in both 'a' and 'b'. The functions g and f do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(substrings: List[str], s='hello', count=15) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'hello', count = 15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of substrings, a string s, and a count, and a function g that takes a string s and a count, determine if function f returns True when called with the output of function g as its argument."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of substrings of the input string s. The function f checks if the input list of substrings contains no duplicates, has a length greater than or equal to 15, and all the substrings are present in the input string s. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(substrings: List[str], s='rywixekugagethathulisitextanyp', count=451) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'rywixekugagethathulisitextanyp', count = 451):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of substrings, check if the length of the list is equal to the number of unique substrings and greater than or equal to a given count. Also, check if all substrings are present in a given string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of substrings of the input string s. The function f checks if the input list of substrings contains only unique elements, has a length greater than or equal to the count, and all the substrings are present in the input string s."
    },
    {
        "fitness": null,
        "program_str": "def f(substrings: List[str], s='xetyvezitajithiban', count=165) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'xetyvezitajithiban', count = 165):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of substrings, check if the length of the list is equal to the number of unique substrings and if it is greater than or equal to a given count. Also, check if all the substrings are present in a given string."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of substrings of the input string s. The function f checks if the input list of substrings contains only unique elements, has a length greater than or equal to the count, and all the substrings are present in the input string s."
    },
    {
        "fitness": null,
        "program_str": "def f(substrings: List[str], s='rofegakusaquybemydomimibyzodycetextunoce', count=799) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'rofegakusaquybemydomimibyzodycetextunoce', count = 799):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of substrings and a string s, determine if the length of the list is equal to the number of unique substrings, and if all substrings are present in s. Then, generate a list of all substrings of s and check if the function f returns True when applied to the result of function g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of substrings of the input string s. The function f checks if the input list of substrings contains no duplicates, has a length greater than or equal to the count, and all the substrings are present in the input string s."
    },
    {
        "fitness": null,
        "program_str": "def f(substrings: List[str], s='thacyt', count=21) -> bool:\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))\ndef g(s = 'thacyt', count = 21):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a string s and a count, find all unique substrings of s and check if the count of unique substrings is greater than or equal to the given count."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of substrings of the input string s. The function f checks if the input list of substrings satisfies certain conditions. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(string: str, substring='a', count=10, length=100) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'a', count = 10, length = 100):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
        "emb": [
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and some optional parameters, and a function g that takes the same optional parameters, the task is to implement f and g such that f returns True if the count of a given substring in the string is equal to a specified count, and the length of the string is equal to a specified length. The function g should return a string that satisfies the conditions for function f."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is used as an argument to function f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(string: str, substring='ky', count=66, length=133) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'ky', count = 66, length = 133):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f that takes a string and some optional parameters, and a function g that takes the same optional parameters and returns a string, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by concatenating the substring 'ky' count times and filling the remaining length with the character '^'. The function f checks if the input string has 'ky' occurring count times and has a length of 133."
    },
    {
        "fitness": null,
        "program_str": "def f(string: str, substring='jepy', count=87, length=650) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'jepy', count = 87, length = 650):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
        "emb": [
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a string and some default parameters, and a function g that takes the same parameters as f and returns a string, the puzzle is to determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not use f inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(string: str, substring='hothyfyt', count=3, length=417) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'hothyfyt', count = 3, length = 417):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f that takes a string and some default parameters, and a function g that takes the same parameters as f and returns a string, the puzzle is to determine if the output of g when called with default parameters satisfies the condition of f."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by concatenating the substring 'hothyfyt' count times and filling the remaining length with the character '^'. The function f checks if the input string has the substring 'hothyfyt' occurring count times and has a length of 417."
    },
    {
        "fitness": null,
        "program_str": "def f(string: str, substring='moz', count=70, length=210) -> bool:\n    return string.count(substring) == count and len(string) == length\ndef g(substring = 'moz', count = 70, length = 210):\n    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f checks if a string contains a specific substring a certain number of times and has a specific length, and g generates a string based on given parameters. The puzzle requires understanding of string manipulation and function composition."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by concatenating the substring 'moz' count times and filling the remaining length with the character '^'. The function f checks if the input string has 'moz' occurring 70 times and has a length of 210."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, parts=['I!!', '!love', 'dumplings', '!', ''], string='I!!!!!love!!dumplings!!!!!') -> bool:\n    return x.join(parts) == string\ndef g(parts = ['I!!', '!love', 'dumplings', '!', ''], string = 'I!!!!!love!!dumplings!!!!!'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, where f joins a list of strings and g extracts a substring from a string based on the length of the parts, determine the correctness of the assertion."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a string that is the solution to the problem, and it does not use function f inside it. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, parts=['tatext'], string='tatext') -> bool:\n    return x.join(parts) == string\ndef g(parts = ['tatext'], string = 'tatext'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the 'string' based on the 'parts' list. The function f checks if the concatenated 'parts' list using 'x' as the separator is equal to the 'string'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, parts=[], string='') -> bool:\n    return x.join(parts) == string\ndef g(parts = [], string = ''):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if the assertion holds true for the given implementation."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the input string based on the length of the parts and the given string. The function f checks if the joined parts equal the given string. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, parts=['ruquug'], string='ruquug') -> bool:\n    return x.join(parts) == string\ndef g(parts = ['ruquug'], string = 'ruquug'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g())"
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the string 'ruquug' based on the parts list. The function f checks if the concatenation of the parts list using the substring returned by g is equal to the original string 'ruquug'."
    },
    {
        "fitness": null,
        "program_str": "def f(x: str, parts=['numegixuly', 'koxyfihimurukothasyl'], string='numegixulypyjetkoxyfihimurukothasyl') -> bool:\n    return x.join(parts) == string\ndef g(parts = ['numegixuly', 'koxyfihimurukothasyl'], string = 'numegixulypyjetkoxyfihimurukothasyl'):\n    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if the function f can be constructed using the output of function g."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a substring of the 'string' based on the 'parts' list. It does not use the function f inside it. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(parts: List[str], sep='!!', string='I!!!!!love!!dumplings!!!!!') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = '!!', string = 'I!!!!!love!!dumplings!!!!!'):\n    return string.split(sep)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of strings and a separator, check if the strings can be joined using the separator to form a target string, and none of the strings contain the separator."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. Also, the function f does not use the function g inside it."
    },
    {
        "fitness": null,
        "program_str": "def f(parts: List[str], sep='jachasurobithu', string='watalachyquujachasurobithuba') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'jachasurobithu', string = 'watalachyquujachasurobithuba'):\n    return string.split(sep)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of strings and a separator, and a function g that takes a separator and a string, the puzzle is to determine if the output of g can be used as input to f to satisfy the condition f(g()) == True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of splitting the string using the specified separator. The function f checks if the concatenation of the parts using the separator equals the original string and if the separator is not present in any of the parts. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(parts: List[str], sep='xusoquyvamathila', string='bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'xusoquyvamathila', string = 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji'):\n    return string.split(sep)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, where f takes a list of strings and a separator, and g takes a separator and a string, determine if the output of g passed to f is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by splitting the string using the specified separator. The function f checks if the concatenation of the parts using the separator equals the original string and if the separator is not present in any of the parts. Both functions respect the rules provided."
    },
    {
        "fitness": null,
        "program_str": "def f(parts: List[str], sep='chixachal', string='') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'chixachal', string = ''):\n    return string.split(sep)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of strings, a separator, and a target string, and a function g that takes a separator and a target string, determine if the output of g can be used as input for f to return True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of splitting the string using the specified separator. The function f checks if the concatenation of the parts using the separator equals the given string, and if the separator is not present in any of the parts. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(parts: List[str], sep='lochuv', string='biflochuvzulothanodugedusilochuvlilochuvhobegikofero') -> bool:\n    return sep.join(parts) == string and all((sep not in p for p in parts))\ndef g(sep = 'lochuv', string = 'biflochuvzulothanodugedusilochuvlilochuvhobegikofero'):\n    return string.split(sep)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of strings and a separator, check if the concatenation of the strings using the separator matches a given string, and none of the strings contain the separator. Then, split a string using the separator and verify the correctness of the split."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by splitting the string using the given separator. The function f checks if the concatenation of the parts using the separator equals the original string, and if the separator is not present in any of the parts. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], dups=42155) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 42155):\n    return [1] * (dups + 1)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine the interestingness of a puzzle involving a function f and g that checks for duplicates in a list and creates a list with duplicates, respectively."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of 1s with a length equal to the value of dups + 1. The function f checks if the input list has no duplicates, and the number of duplicates is equal to the value of dups. The function g is used to generate the input list for function f."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], dups=18793) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 18793):\n    return [1] * (dups + 1)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.0
        ],
        "description": [
            "Determine if a list contains duplicates based on a given threshold"
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of 1s with a length equal to the value of dups + 1. The function f checks if the input list has no duplicates, and it uses the value of dups to perform the check. The function g returns the solution to the problem by generating a list with no duplicates, and it uses the value of dups to achieve this. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], dups=70976) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 70976):\n    return [1] * (dups + 1)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if a list contains duplicates based on a given number of duplicates."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of 1s with a length equal to the value of dups + 1. The function f checks if the input list has no duplicates, and the length of the list is equal to the length of the set of the list minus the value of dups."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], dups=23476) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 23476):\n    return [1] * (dups + 1)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers, determine if there are duplicates in the list."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of 1s with a length equal to the value of dups + 1. The function f checks if the input list has no duplicates by comparing the length of the set of the list with the original length of the list minus the value of dups. The value of dups is used in both functions, and the function g returns the value of dups + 1, which is then used in the function f. Therefore, the puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], dups=17633) -> bool:\n    return len(set(li)) == len(li) - dups\ndef g(dups = 17633):\n    return [1] * (dups + 1)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers, determine if there are duplicates in the list using a specific function f and solution g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of 1s with a length equal to the value of dups + 1. The function f checks if the input list has no duplicates by comparing the length of the input list with the length of the set of the input list. The value of dups is used in both functions to determine the length of the list and to check for duplicates."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], target=[17, 9, -1, 17, 9, -1], n=2) -> bool:\n    return li * n == target\ndef g(target = [17, 9, -1, 17, 9, -1], n = 2):\n    if n == 0:\n        return []\n    return target[:len(target) // n]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f and g, determine if the result of g can be used as an input to f to return True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a subset of the target list, and the function f checks if the input list multiplied by n is equal to the target list. The functions f and g do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], target=[-69358, -69358, -69358, -69358, -69358, -69358, -69358], n=7) -> bool:\n    return li * n == target\ndef g(target = [-69358, -69358, -69358, -69358, -69358, -69358, -69358], n = 7):\n    if n == 0:\n        return []\n    return target[:len(target) // n]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list of integers, determine if the list can be replicated by repeating it n times."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a sublist of the target list, and then the function f checks if the input list multiplied by n is equal to the target list. The function g does not use the function f, and the function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(li: List[int], target=[], n=0) -> bool:\n    return li * n == target\ndef g(target = [], n = 0):\n    if n == 0:\n        return []\n    return target[:len(target) // n]\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f that takes a list of integers and a target list, and a function g that takes a target list and a number n, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns a list that is used as an argument to function f, violating the rule that f should not be called inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18) -> bool:\n    return li[i] == target\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 18):\n    return li.index(target)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list and a target value, implement two functions f and g. Function f takes an index and returns True if the value at that index in the list is equal to the target value. Function g returns the index of the target value in the list."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the target element in the list. The function f checks if the element at index i in the list is equal to the target element. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int, li=[-62, -29, 73, -21, -45, -20, -74, -69, 30, -25, 16, 82, -31, 93, -20, 75, 68, 86], target=73) -> bool:\n    return li[i] == target\ndef g(li = [-62, -29, 73, -21, -45, -20, -74, -69, 30, -25, 16, 82, -31, 93, -20, 75, 68, 86], target = 73):\n    return li.index(target)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list of integers and a target value, implement a function to check if the target value exists in the list and return its index."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the target element in the list li. The function f checks if the element at index i in the list li is equal to the target."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int, li=[99, 51, -28, -69, -90, -15, 7, -67], target=51) -> bool:\n    return li[i] == target\ndef g(li = [99, 51, -28, -69, -90, -15, 7, -67], target = 51):\n    return li.index(target)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list and a target value, implement two functions f and g. Function f checks if the target value is present at a specific index in the list, and function g returns the index of the target value in the list."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the target element in the list. The function f checks if the element at index i in the list is equal to the target element. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int, li=[-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], target=13) -> bool:\n    return li[i] == target\ndef g(li = [-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], target = 13):\n    return li.index(target)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list and a target value, implement functions f and g to check if the target value is in the list and to return its index if it exists."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the target element in the list. The function f checks if the element at index i in the list is equal to the target element. The puzzle is valid as it follows the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int, li=[51, -68, -57, 8, 77, -80, -28, -24, 11, 40, 57, 60, 53], target=11) -> bool:\n    return li[i] == target\ndef g(li = [51, -68, -57, 8, 77, -80, -28, -24, 11, 40, 57, 60, 53], target = 11):\n    return li.index(target)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list and a target value, function f checks if the target value is present at a specific index in the list. Function g finds the index of the target value in the list and returns it."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the target element in the list. The function f checks if the element at index i in the list is equal to the target element. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=91) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [17, 31, 91, 18, 42, 1, 9], target = 91):\n    return li.index(target) - len(li)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list and a target value, determine if the target value is present at a specific index in the list and if the index is less than 0. Then, find the index of the target value in the list and subtract the length of the list from it."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the index of the target in the list and subtracts the length of the list from it. Then, it calls function f with the result of g as an argument. Function f checks if the element at the given index is equal to the target and if the index is less than 0. The function g does not use function f inside it, and function g returns the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int, li=[78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], target=-39) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], target = -39):\n    return li.index(target) - len(li)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list and a target value, determine if the target value is present at a specific index in the list and if the index is less than 0. Then, use a function to find the index of the target value in the list and subtract the length of the list from it."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the index of the target in the list and then subtracts the length of the list from it. This does not respect the rule that the function g must return the solution to the problem, and not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target = -42):\n    return li.index(target) - len(li)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list and a target value, determine if the target value is present at a specific index in the list and if the index is negative."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the index of the target in the list and then subtracts the length of the list from it. This is not a direct solution to the problem, and it violates the rule that the function g must return the solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int, li=[41, -52, -40, -35, 53, -98, 83, 63, -18, 74, -8, -93, -3, 22, 30], target=53) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [41, -52, -40, -35, 53, -98, 83, 63, -18, 74, -8, -93, -3, 22, 30], target = 53):\n    return li.index(target) - len(li)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a list of integers and a target value, the function f checks if the target value is at the specified index in the list. The function g finds the index of the target value in the list and subtracts the length of the list from it."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the index of the target in the list and subtracts the length of the list from it. This does not seem to be a valid solution to the problem."
    },
    {
        "fitness": null,
        "program_str": "def f(i: int, li=[95, 51, 76, 63, -97, -32], target=-32) -> bool:\n    return li[i] == target and i < 0\ndef g(li = [95, 51, 76, 63, -97, -32], target = -32):\n    return li.index(target) - len(li)\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the index of the target in the list and then subtracts the length of the list from it. This is not a direct solution to the problem, as the function g should return the solution to the problem, not just a function that gives arguments to f."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], li=[42, 18, 21, 103, -2, 11], target=[-2, 21, 42]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [42, 18, 21, 103, -2, 11], target = [-2, 21, 42]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list and a target sublist, find the indices (i, j, k) such that li[i:j:k] equals the target sublist."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses the function f to check the solution, which violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], li=[-11, 92, 42, 18, -83, 55, 13, 14, -67, -58, -41], target=[-67]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-11, 92, 42, 18, -83, 55, 13, 14, -67, -58, -41], target = [-67]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list and a target sublist, find the indices i, j, k such that li[i:j:k] equals the target sublist."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses the function f to check the solution, which violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], li=[-53, -81, -92, 22, -67], target=[-53, -81, -92]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-53, -81, -92, 22, -67], target = [-53, -81, -92]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list and a target sublist, find the indices (i, j, k) such that li[i:j:k] equals the target sublist."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses the function f inside it, violating the rule to avoid using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [-72, 70, 50, -41, 94, -82, -74, 8, -23], target = [-82]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers and a target list, find the indices (i, j, k) such that li[i:j:k] equals the target list."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g uses the function f to check if the solution is correct. This violates the rule that f should not be used inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(inds: List[int], li=[26, -25, -18, -53, 18, -71, -82, 20, -100, -84, -85], target=[-25]) -> bool:\n    (i, j, k) = inds\n    return li[i:j:k] == target\ndef g(li = [26, -25, -18, -53, 18, -71, -82, 20, -100, -84, -85], target = [-25]):\n    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass\nassert f(g()) == True",
        "emb": [
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a list of integers and a target list, find a sublist of the list that matches the target list using a given set of indices."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g uses the itertools.product to generate all possible combinations of i, j, and k, and then checks if li[i:j:k] is equal to the target. This is a brute force search approach to find the indices i, j, and k that satisfy the condition. The function f checks if the sublist of li[i:j:k] is equal to the target list. The assert statement at the end checks if f(g()) returns True."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a=['cat', 'dot', 'bird'], b=['tree', 'fly', 'dot']) -> bool:\n    return s in a and s in b\ndef g(a = ['cat', 'dot', 'bird'], b = ['tree', 'fly', 'dot']):\n    return next(s for s in b if s in a)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given two lists of strings, find if there is a common string in both lists."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the first element in list b that is also in list a. The function f checks if a given string is in both lists a and b. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str, a=['quisolu', 'nixyquigaseq', 'fawaholafojelaxud', 'cuxoniso', 'defejaz', 'mytext', 'gochavowetheva', 'xijehychojexat', 'duthagobejudozi', 'thiquijuquorybu'], b=['cys', 'zatext', 'cifihihechujozimo', 'jycichithetyk', 'becitonamuhuligyv', 'sadak', 'hochavinapatanapiz', 'fiwidifop', 'funidosikeput', 'fewat', 'mypyhalevituvit', 'quytynuthothy', 'c', 'zydecodul', 'vahychuke', 'wy', 'mytext', 'tex', 'quevasowodique', 'hythiquunymychilyl', 'luxivyvocuwa']) -> bool:\n    return s in a and s in b\ndef g(a = ['quisolu', 'nixyquigaseq', 'fawaholafojelaxud', 'cuxoniso', 'defejaz', 'mytext', 'gochavowetheva', 'xijehychojexat', 'duthagobejudozi', 'thiquijuquorybu'], b = ['cys', 'zatext', 'cifihihechujozimo', 'jycichithetyk', 'becitonamuhuligyv', 'sadak', 'hochavinapatanapiz', 'fiwidifop', 'funidosikeput', 'fewat', 'mypyhalevituvit', 'quytynuthothy', 'c', 'zydecodul', 'vahychuke', 'wy', 'mytext', 'tex', 'quevasowodique', 'hythiquunymychilyl', 'luxivyvocuwa']):\n    return next(s for s in b if s in a)\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "The puzzle involves checking if a string is present in two lists and returning a boolean value. The solution also involves finding the first common element in two lists."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            8
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the first element in list b that is also in list a. The function f checks if the input string is present in both lists a and b. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=93252338) -> bool:\n    return -x == a\ndef g(a = 93252338):\n    return - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if -x equals a given value, and a function g() that returns -a, assert that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of a, and the function f checks if the negation of the input x is equal to a. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-7788910835979672) -> bool:\n    return -x == a\ndef g(a = -7788910835979672):\n    return - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f(x) and g(a), determine if f(g()) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of a, and the function f checks if the negation of x is equal to a. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=6734672221833987) -> bool:\n    return -x == a\ndef g(a = 6734672221833987):\n    return - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if -x equals a given constant a, and a function g() that returns -a, assert that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of a, and the function f checks if the negation of the input x is equal to a. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-6405550227918699) -> bool:\n    return -x == a\ndef g(a = -6405550227918699):\n    return - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) and g(a), determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of a, and the function f checks if the negation of x is equal to a. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-5741705983914418) -> bool:\n    return -x == a\ndef g(a = -5741705983914418):\n    return - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if -x is equal to a, and a function g() that returns -a, assert that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of a, and the function f checks if the negation of the input x is equal to the value of a. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=1073258, b=72352549) -> bool:\n    return a + x == b\ndef g(a = 1073258, b = 72352549):\n    return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if a + x equals b, and a function g() that returns the difference between b and a, assert that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the difference between b and a, and the function f checks if a + x equals b. The functions do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=7176599374880969, b=1013347182263591) -> bool:\n    return a + x == b\ndef g(a = 7176599374880969, b = 1013347182263591):\n    return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if a + x equals b, and a function g() that returns the difference between b and a, determine if calling f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the difference between the values of a and b. The function f checks if the sum of a and x is equal to b. The puzzle is valid as it follows the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-6408240447142191, b=7741323537672506) -> bool:\n    return a + x == b\ndef g(a = -6408240447142191, b = 7741323537672506):\n    return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if a + x equals b, and a function g() that returns the difference between b and a, assert that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the difference between b and a, and the function f checks if a + x is equal to b. The functions do not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=1918969259925371, b=3648647147996329) -> bool:\n    return a + x == b\ndef g(a = 1918969259925371, b = 3648647147996329):\n    return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if a + x equals b, and a function g() that returns the difference between b and a, assert that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the difference between b and a, and the function f checks if a + x equals b. The functions do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=6476308373242647, b=-1096573562602401) -> bool:\n    return a + x == b\ndef g(a = 6476308373242647, b = -1096573562602401):\n    return b - a\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if a + x equals b, and a function g() that returns the difference between b and a, assert that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the difference between the values of a and b. The function f checks if the sum of a and x is equal to b. The function g is used to provide arguments to f, which violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-382, b=14546310) -> bool:\n    return x - a == b\ndef g(a = -382, b = 14546310):\n    return a + b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that takes an integer x and two optional parameters a and b, and a function g() that takes two optional parameters a and b, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the sum of its arguments a and b, and the function f checks if the input x is equal to the difference between a and b. The function g is used to provide arguments to f, violating the rule that f should not use g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=4461955033869751, b=-3951840325269410) -> bool:\n    return x - a == b\ndef g(a = 4461955033869751, b = -3951840325269410):\n    return a + b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) and g(a,b), assert that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of its arguments a and b, and the function f checks if the input x is equal to the difference between a and b. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=9688203125538303, b=-293093369321912) -> bool:\n    return x - a == b\ndef g(a = 9688203125538303, b = -293093369321912):\n    return a + b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) and g(a,b), determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of its arguments a and b, and the function f checks if the input x is equal to the difference between a and b. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-8057207922876252, b=-3934955257447294) -> bool:\n    return x - a == b\ndef g(a = -8057207922876252, b = -3934955257447294):\n    return a + b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that takes an integer x and two default parameters a and b, and a function g() that takes two default parameters a and b, determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of its arguments a and b, and the function f checks if the input x is equal to the difference between a and b. The functions f and g are used together to assert that f(g()) is True."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-5902383651753979, b=304676399871652) -> bool:\n    return x - a == b\ndef g(a = -5902383651753979, b = 304676399871652):\n    return a + b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) and g(a,b), determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the sum of its arguments a and b, and the function f checks if the input x is equal to the difference between a and b. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=8665464, b=-93206) -> bool:\n    return a - x == b\ndef g(a = 8665464, b = -93206):\n    return a - b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) and g(a,b), assert that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the difference between the values of a and b. The function f checks if the difference between a and x is equal to b. The function g is used to provide arguments to f, which violates the rule of avoiding using f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=1954051265970332, b=1312727165482691) -> bool:\n    return a - x == b\ndef g(a = 1954051265970332, b = 1312727165482691):\n    return a - b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that takes an integer x and two default parameters a and b, and a function g() that takes two default parameters a and b, the puzzle requires determining whether the result of f(g()) is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the difference between a and b, and the function f checks if the input x is equal to the difference between a and b. The functions f and g do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-1159353965692778, b=4654551691407885) -> bool:\n    return a - x == b\ndef g(a = -1159353965692778, b = 4654551691407885):\n    return a - b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) and g(a, b), assert that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the difference between the values of a and b. The function f checks if the result of a - x is equal to b. The functions f and g do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=7793575617602525, b=-4351726326349125) -> bool:\n    return a - x == b\ndef g(a = 7793575617602525, b = -4351726326349125):\n    return a - b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) and g(a,b), determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the difference between the values of a and b. The function f checks if the input x is equal to the difference between a and b. The functions f and g do not violate the rules given."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=-8783800228130606, b=-508993556991975) -> bool:\n    return a - x == b\ndef g(a = -8783800228130606, b = -508993556991975):\n    return a - b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) and g(a, b), determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the difference between the values of a and b. It does not use the function f inside it. The puzzle is valid based on the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=14302, b=5) -> bool:\n    return b * n + a % b == a\ndef g(a = 14302, b = 5):\n    return a // b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine the interestingness of the puzzle by evaluating the function f and function g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of a // b, which is the integer division of a by b. The function f uses the result of g and performs a mathematical operation on it. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=-646156, b=-63) -> bool:\n    return b * n + a % b == a\ndef g(a = -646156, b = -63):\n    return a // b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of a mathematical operation and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=159568, b=59) -> bool:\n    return b * n + a % b == a\ndef g(a = 159568, b = 59):\n    return a // b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine the interestingness of a puzzle involving a function f and g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of a mathematical operation (division) and does not use function f inside it. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=-141336, b=72) -> bool:\n    return b * n + a % b == a\ndef g(a = -141336, b = 72):\n    return a // b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine the value of n that satisfies the equation b * n + a % b == a, given the values of a and b. Then use the value of n to assert the result of f(g())."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of a mathematical operation (division) and does not use the function f inside it. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=855955, b=33) -> bool:\n    return b * n + a % b == a\ndef g(a = 855955, b = 33):\n    return a // b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine the interestingness of the function f and its solution g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the result of a mathematical operation (division) and does not just give arguments to f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=3, b=23463462) -> bool:\n    return b // n == a\ndef g(a = 3, b = 23463462):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the values of a and b such that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of n such that b // n == a. The function f checks if b // n == a. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=-1, b=1594400229362061) -> bool:\n    return b // n == a\ndef g(a = -1, b = 1594400229362061):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the values of a and b that satisfy the condition f(g()) == True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. Also, there is no use of f inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=12, b=-9988218457242775) -> bool:\n    return b // n == a\ndef g(a = 12, b = -9988218457242775):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem and does not just give arguments to f. However, the function f is not used inside the function g, so it respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=0, b=-1230085432451862) -> bool:\n    return b // n == a\ndef g(a = 0, b = -1230085432451862):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the values of a and b such that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the value of n, which is then used as an argument to function f. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=1, b=9554566410382856) -> bool:\n    return b // n == a\ndef g(a = 1, b = 9554566410382856):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n\nassert f(g()) == True",
        "emb": [
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the solution to the problem by finding the value of 'n' that satisfies the condition 'b // n == a'. The function f checks if the condition 'b // n == a' is true. There is no use of 'f' inside 'g'. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=345346363, b=10) -> bool:\n    return n // b == a\ndef g(a = 345346363, b = 10):\n    return a * b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine if the assertion holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            false
        ],
        "is_valid_explanation": "The function g returns the product of its arguments a and b, and the function f checks if the input n divided by b is equal to a. The function g is used to provide arguments to f, violating the rule that f should not be used inside g."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=-3411193412414137, b=-9070455318026063) -> bool:\n    return n // b == a\ndef g(a = -3411193412414137, b = -9070455318026063):\n    return a * b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the output of f(g())"
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the product of its arguments a and b, and the function f checks if the input n divided by b is equal to a. The puzzle is valid as it follows the rules provided."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=-1950797984487873, b=6211965468307518) -> bool:\n    return n // b == a\ndef g(a = -1950797984487873, b = 6211965468307518):\n    return a * b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(n) and g(a,b), determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the product of its arguments a and b, and the function f checks if the input n divided by b is equal to a. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=1186580710227962, b=5023840456205809) -> bool:\n    return n // b == a\ndef g(a = 1186580710227962, b = 5023840456205809):\n    return a * b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f and g, determine the interestingness of the problem and solution."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the product of its arguments a and b, and the function f checks if the input n divided by b is equal to a. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int, a=6976962948831358, b=7353202892973126) -> bool:\n    return n // b == a\ndef g(a = 6976962948831358, b = 7353202892973126):\n    return a * b\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(n) that returns True if n divided by b equals a, and a function g() that returns the product of a and b, determine if the assertion f(g()) == True holds true."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the product of its arguments a and b, and the function f checks if the input n divided by b is equal to a. The puzzle respects the rules and is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=10201202001) -> bool:\n    return x ** 2 == a\ndef g(a = 10201202001):\n    return int(a ** 0.5)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f(x) that checks if x^2 is equal to a given number, and a function g() that calculates the square root of a given number, the puzzle requires finding the value of x such that f(g(x)) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the input 'a'. The function f checks if the square of the input 'x' is equal to 'a'. The puzzle is valid as it follows the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=2617350631613713636) -> bool:\n    return x ** 2 == a\ndef g(a = 2617350631613713636):\n    return int(a ** 0.5)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that checks if x^2 is equal to a given constant, and a function g() that calculates the square root of a given constant, the puzzle requires finding the value of x such that f(g(x)) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the input value. The function f checks if the square of the input value is equal to a predefined constant."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=100703210763886864) -> bool:\n    return x ** 2 == a\ndef g(a = 100703210763886864):\n    return int(a ** 0.5)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that checks if x^2 equals a, and a function g() that returns the square root of a, the puzzle requires finding the value of a such that f(g(a)) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the input 'a'. The function f checks if the square of the input 'x' is equal to 'a'. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=12515426721927424) -> bool:\n    return x ** 2 == a\ndef g(a = 12515426721927424):\n    return int(a ** 0.5)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that checks if x^2 is equal to a given number, and a function g() that calculates the square root of a given number, the puzzle requires finding the value of x such that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the input 'a'. The function f checks if the square of the input 'x' is equal to 'a'. The puzzle is valid as it does not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: int, a=717898768141464900) -> bool:\n    return x ** 2 == a\ndef g(a = 717898768141464900):\n    return int(a ** 0.5)\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that checks if x^2 is equal to a, and a function g() that returns the square root of a, assert that f(g()) is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the input 'a'. The function f checks if the square of the input 'x' is equal to 'a'. The puzzle is valid as it does not violate the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, a=1020) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 1020):\n    return a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if the absolute difference between x^2 and a is less than 10^(-3), and a function g(a) that returns the square root of a, assert that f(g()) is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the input parameter a. The function f checks if the absolute difference between the square of x and a is less than 10^(-3). The assert statement checks if f(g()) is True."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, a=6173281296) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 6173281296):\n    return a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if the absolute difference between x^2 and a is less than 10^(-3), and a function g() that returns the square root of a, verify that f(g()) returns True for a specific value of a."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the input parameter a. The function f checks if the square of the input x is close to the value of a within a certain tolerance."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, a=7987622700) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 7987622700):\n    return a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if the absolute difference between x^2 and a is less than 10^(-3), and a function g() that returns the square root of a, assert that f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the input parameter a. The function f checks if the absolute difference between the square of x and a is less than 10^(-3). The puzzle is valid as it follows the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, a=2732656229) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 2732656229):\n    return a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if the absolute difference between x^2 and a is less than 10^(-3), and a function g(a) that returns the square root of a, assert that f(g()) is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the input parameter a. The function f checks if the absolute difference between the square of x and a is less than 10^(-3). The puzzle is valid as it follows the given rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, a=1873585696) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3)\ndef g(a = 1873585696):\n    return a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if the absolute difference between x^2 and a is less than 10^(-3), and a function g() that returns the square root of a, assert that f(g()) is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the input parameter a. The function f checks if the square of the input x is close to the value of a within a certain tolerance."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, a=1020) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1020):\n    return -a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) and g(a), determine if f(g()) returns True for a specific value of a."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the input 'a'. The function f checks if the square of the input 'x' is close to 'a' and if 'x' is negative. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, a=2681275499) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 2681275499):\n    return -a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that checks if the absolute difference between x^2 and a is less than 10^(-3) and x is less than 0, and a function g() that returns the negative square root of a, assert that f(g()) is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of a, and the function f checks if the square of x is close to a and if x is negative. The puzzle respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, a=1363713245) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 1363713245):\n    return -a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) that returns True if the absolute difference between x^2 and a is less than 10^(-3) and x is less than 0, and a function g() that returns the negative square root of a, assert that f(g()) is True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the parameter a. The function f checks if the square of the input x is close to the parameter a and if x is negative. The puzzle is valid as it respects the rules."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, a=3858703402) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 3858703402):\n    return -a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.5
        ],
        "description": [
            "Given a function f(x) and g(a), determine if f(g()) returns True for a specific value of a."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            6
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of the parameter a. The function f checks if the square of x is close to a and if x is negative. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(x: float, a=3804892221) -> bool:\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0\ndef g(a = 3804892221):\n    return -a ** 0.5\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Given a function f(x) and g(a), determine if f(g()) returns True."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of a, and the function f checks if the square of x is close to a and x is negative. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return 'Hello ' + s == 'Hello world'\ndef g():\n    return \"world\"\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.0
        ],
        "description": [
            "Given a function f that takes a string and returns a boolean, and a function g that returns the string 'world', determine if f(g()) returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            5
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the string 'world', and the function f checks if the input string concatenated with 'Hello ' is equal to 'Hello world'. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: str) -> bool:\n    return 'Hello ' + s[::-1] == 'Hello world'\ndef g():\n    return \"world\"[::-1]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.0
        ],
        "description": [
            "Check if reversing a string and adding 'Hello ' to it results in 'Hello world'"
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            5
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the string 'dlrow', which is the reverse of 'world'. The function f checks if the input string, reversed and prefixed with 'Hello ', is equal to 'Hello world'. The assert statement checks if f(g()) returns True."
    },
    {
        "fitness": null,
        "program_str": "def f(x: List[int]) -> bool:\n    return len(x) == 2 and sum(x) == 3\ndef g():\n    return [1, 2]\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            6.0
        ],
        "description": [
            "Given a function f that takes a list of integers and returns a boolean, and a function g that returns a list of integers, the puzzle is to determine if the result of g passed to f returns True."
        ],
        "interestingness_f": [
            7
        ],
        "interestingness_g": [
            5
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the list [1, 2], and the function f checks if the length of the list is 2 and if the sum of the elements is 3. The puzzle is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(s: List[str]) -> bool:\n    return len(set(s)) == 1000 and all((x.count('a') > x.count('b') and 'b' in x for x in s))\ndef g():\n    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]\nassert f(g()) == True",
        "emb": [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine the interestingness of a function f and its solution g."
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns a list of strings that satisfy the conditions of function f. The conditions are checked in function f and the result is True, indicating that the solution is valid."
    },
    {
        "fitness": null,
        "program_str": "def f(n: int) -> bool:\n    return str(n * n).startswith('123456789')\ndef g():\n    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1\nassert f(g()) == True",
        "emb": [
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ],
        "idx_generation": -1,
        "target_skills": [],
        "quality": [
            7.5
        ],
        "description": [
            "Determine if the square of a number starts with the digits 123456789"
        ],
        "interestingness_f": [
            8
        ],
        "interestingness_g": [
            7
        ],
        "is_valid": [
            true
        ],
        "is_valid_explanation": "The function g returns the square root of 123456789000000000, adds 1 to it, and then checks if the square of this number starts with '123456789'. The function f checks if the square of a given number starts with '123456789'. The function g returns the solution to the problem and does not just give arguments to f. Therefore, the puzzle is valid."
    }
]